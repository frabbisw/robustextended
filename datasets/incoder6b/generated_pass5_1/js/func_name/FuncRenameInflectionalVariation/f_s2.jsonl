{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements.length > 0;\n};\n\nconst getClosestElement = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements[0];\n};\n\nconst getClosestElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements;\n};\n\nconst getClosestElementIndex = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements.findIndex(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexes = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRange = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThreshold = (\n  numbers,\n  threshold\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < threshold && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThresholds = (\n  numbers,\n  thresholds\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThresholdsMultipleThresholds = (\n  numbers,\n  thresholds\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThresholdsMultipleThresholdsMultipleThresholds = (\n  numbers,\n  thresholds\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThresholdsMultipleThresholdsMultipleThresholdsMultipleThresholds = (\n  numbers,\n  thresholds\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThresholdsMultipleThresholdsMultipleThresholdsMultipleThresholdsMultipleThresholds = (\n  numbers,\n  thresholds\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n};\n\nconst getClosestElementIndexesWithinRangeAndThresholdsMultipleThresholdsMultipleThresholdsMultipleThresholdsMultipleThresholdsMultipleThresholds = (\n  numbers,\n  thresholds\n) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(n1 - n2) < thresholds[i1] && i1!== i2\n    )\n  );\n  return closestElements.map(\n    (n1, i1) => sortedNumbers.some((n2, i2) =>\n      Math.abs(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let current_group = '';\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char = '';\n  let current_char_position = 0;\n  let is_open_brace = false;\n  let is_closed_brace = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    current_char_position = i;\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position = current_char_position;\n      is_open_brace = true;\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position = current_char_position;\n      is_closed_brace = true;\n    } else if (current_char ==='') {\n      current_group += current_char;\n    } else {\n      if (is_open_brace) {\n        current_group += current_char;\n        is_open_brace = false;\n      } else if (is_closed_brace) {\n        groups.push(current_group);\n        current_group = '';\n        is_closed_brace = false;\n      } else {\n        current_group += current_char;\n      }\n    }\n  }\n  if (current_group) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let current_group = '';\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char = '';\n  let current_char_position = 0;\n  let is_open_brace = false;\n  let is_closed_brace = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    current_char_position = i;\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position = current_char_position;\n      is_open_brace = true;\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position = current_char_position;\n      is_closed_brace = true;\n    } else if (current_char ==='') {\n      current_group += current_char;\n    } else {\n      if (is_open_brace) {\n        current_group += current_char;\n        is_open_brace = false;\n      } else if (is_closed_brace) {\n        groups.push(current_group);\n        current_group = '';\n        is_closed_brace = false;\n      } else {\n        current_group += current_char;\n      }\n    }\n  }\n  if (current_group) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let current_group = '';\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char = '';\n  let current_char_position = 0;\n  let is_open_brace = false;\n  let is_closed_brace = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    current_char_position = i;\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position = current_char_position;\n      is_open_brace = true;\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position = current_char_position;\n      is_closed_brace = true;\n    } else if (current_char ==='') {\n      current_group += current_char;\n    } else {\n      if (is_open_brace) {\n        current_group += current_char;\n        is_open_brace = false;\n      } else if (is_closed_brace) {\n        groups.push(current_group);\n        current_group = '';\n        is_closed_brace = false;\n      } else {\n        current_group += current_char;\n      }\n    }\n  }\n  if (current_group) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let current_group = '';\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char = '';\n  let current_char_position = 0;\n  let is_open_brace = false;\n  let is_closed_brace = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    current_char_position = i;\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position = current_char_position;\n      is_open_brace = true;\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position = current_char_position;\n      is_closed_brace = true;\n    } else if (current_char ==='') {\n      current_group += current_char;\n    } else {\n      if (is_open_brace) {\n        current_group += current_char;\n        is_open_brace = false;\n      } else if (is_closed_brace) {\n        groups.push(current_group);\n        current_group = '';\n        is_closed_brace = false;\n      } else {\n        current_group += current_char;\n      }\n    }\n  }\n  if (current_group) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let current_group = '';\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char = '';\n  let current_char_position = 0;\n  let is_open_brace = false;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (isPalindrome(currentCharPalindrome)) {\n      if (currentCharPalindromeLength > longestPalindromeLength) {\n        longestPalindrome = currentCharPalindrome;\n        longestPalindromeLength = currentCharPalindromeLength;\n        longestPalindromePrefix = currentCharPalindromePrefix;\n        longestPalindromeSuffix = currentCharPalindromeSuffix;\n      }\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (isPalindrome(currentCharPalindrome)) {\n      if (currentCharPalindromeLength > longestPalindromeLength) {\n        longestPalindrome = currentCharPalindrome;\n        longestPalindromeLength = currentCharPalindromeLength;\n        longestPalindromePrefix = currentCharPalindromePrefix;\n        longestPalindromeSuffix = currentCharPalindromeSuffix;\n      }\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (isPalindrome(currentCharPalindrome)) {\n      if (currentCharPalindromeLength > longestPalindromeLength) {\n        longestPalindrome = currentCharPalindrome;\n        longestPalindromeLength = currentCharPalindromeLength;\n        longestPalindromePrefix = currentCharPalindromePrefix;\n        longestPalindromeSuffix = currentCharPalindromeSuffix;\n      }\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (isPalindrome(currentCharPalindrome)) {\n      if (currentCharPalindromeLength > longestPalindromeLength) {\n        longestPalindrome = currentCharPalindrome;\n        longestPalindromeLength = currentCharP", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString2 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString3 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString4 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString5 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString6 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString7 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString8 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString9 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString10 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return x + y;\n  }\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return x - y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x - y;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  sum of all integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  sum(1, 5) => \"0b11\"\n  sum(7, 5) => -1\n  sum(10, 20) => \"0b1111\"\n  sum(20, 33) => \"0b11010\"\n  */\nconst sum = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  product of all integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  prod(1, 5) => \"0b11\"\n  prod(7, 5) => -1\n  prod(10, 20) => \"0b1111\"\n  prod(20, 33) => \"0b11010\"\n  */\nconst prod = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let product = 1;\n  for (let i = n; i <= m; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  largest integer that is less than or equal to both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  max(1, 5) => \"0b11\"\n  max(7, 5) => -1\n  max(10, 20) => \"0b1111\"\n  max(20, 33) => \"0b11010\"\n  */\nconst max = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let max = 0;\n  for (let i = n; i <= m; i++) {\n    if (i > max) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  smallest integer that is greater than or equal to both n and m. \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  min(1, 5) => \"0b11\"\n  min(7, 5) => -1\n  min(10, 20) => \"0b1111\"\n  min(20, 33) => \"0b11010\"\n  */\nconst min = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let min = 0;\n  for (let i = n; i <= m; i++) {\n    if (i < min) {\n      min = i;\n    }\n  }\n  return min;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  sum of all integers from n through m (including n and m) that are divisible by 3.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  sumDivisibleBy3(1, 5) => \"0b11\"\n  sumDivisibleBy3(7, 5) => -1\n  sumDivisibleBy3(10, 20) => \"0b1111\"\n  sumDivisibleBy3(20, 33) => \"0b11010\"\n  */\nconst sumDivisibleBy3 = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 3 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  sum of all integers from n through m (including n and m) that are divisible by 5.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  sumDivisibleBy5(1, 5) => \"0b11\"\n  sumDivisibleBy5(7, 5) => -1\n  sumDivisibleBy5(10, 20) => \"0b1111\"\n  sumDivisibleBy5(20, 33) => \"0b11010\"\n  */\nconst sumDivisibleBy5 = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 5 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  sum of all integers from n through m (including n and m) that are divisible by 7.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  sumDivisibleBy7(1, 5) => \"0b11\"\n  sumDivisibleBy7(7, 5) => -1\n  sumDivisibleBy7(10, 20) => \"0b1111\"\n  sumDivisibleBy7(20, 33) => \"0b11010\"\n  */\nconst sumDivisibleBy7 = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 7 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  sum of all integers from n through m (including n and m) that are divisible by 11.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  sumDivisibleBy11(1, 5) => \"0b11\"\n  sumDivisibleBy11(7, 5) => -1\n  sumDivisibleBy11(10, 20) => \"0b1111\"\n  sumDivisibleBy11(20, 33) => \"0b11010\"\n  */\nconst sumDivisibleBy11 = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 11 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  sum of all integers from n through m (including n and m) that are divisible by 15.\n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  sumDivisibleBy15(1, 5) => \"0b11\"\n  sumDivisibleBy15(7, 5) => -1\n  sumDivisibleBy15(10, 20) => \"0b1111\"\n  sumDivisibleBy15(20, 33) => \"0b11010\"\n  */\nconst sumDivisibleBy15 = (n, m) => {\n  if (n > m) {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOdd = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitRange = (x, a, b) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRange([15, 33, 1422, 1], 1, 10)\n  [1, 33, 15]\n  >>> uniqueDigitRange([152, 323, 1422, 10], 1, 10)\n  []\n  */\nconst uniqueDigitRangeOdd = (x, a, b) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRange([15, 33, 1422, 1], 1, 10)\n  [1, 33, 15]\n  >>> uniqueDigitRange([152, 323, 1422, 10], 1, 10)\n  []\n  */\nconst uniqueDigitRangeRange = (x, a, b, c) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRangeRange([15, 33, 1422, 1], 1, 10, 20)\n  [1, 33, 15]\n  >>> uniqueDigitRangeRange([152, 323, 1422, 10], 1, 10, 20)\n  []\n  */\nconst uniqueDigitRangeRangeOdd = (x, a, b, c) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRangeRange([15, 33, 1422, 1], 1, 10, 20)\n  [1, 33, 15]\n  >>> uniqueDigitRangeRange([152, 323, 1422, 10], 1, 10, 20)\n  []\n  */\nconst uniqueDigitRangeRangeRange = (x, a, b, c, d) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c && x[i] <= d) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRangeRange([15, 33, 1422, 1], 1, 10, 20)\n  [1, 33, 15]\n  >>> uniqueDigitRangeRange([152, 323, 1422, 10], 1, 10, 20)\n  []\n  */\nconst uniqueDigitRangeRangeRangeOdd = (x, a, b, c, d) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c && x[i] <= d) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRangeRangeRange([15, 33, 1422, 1], 1, 10, 20, 30)\n  [1, 33, 15]\n  >>> uniqueDigitRangeRangeRange([152, 323, 1422, 10], 1, 10, 20, 30)\n  []\n  */\nconst uniqueDigitRangeRangeRangeRange = (x, a, b, c, d, e) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c && x[i] <= d && x[i] <= e) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRangeRangeRange([15, 33, 1422, 1], 1, 10, 20, 30, 40)\n  [1, 33, 15]\n  >>> uniqueDigitRangeRangeRange([152, 323, 1422, 10], 1, 10, 20, 30, 40)\n  []\n  */\nconst uniqueDigitRangeRangeRangeRangeOdd = (x, a, b, c, d, e) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c && x[i] <= d && x[i] <= e) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigitRangeRangeRangeRange([15, 33, 1422, 1], 1, 10, 20, 30, 40, 50)\n  [1, 33, 15]\n  >>> uniqueDigitRangeRangeRangeRange([152, 323, 1422, 10], 1, 10, 20, 30, 40, 50)\n  []\n  */\nconst uniqueDigitRangeRangeRangeRangeRange = (x, a, b, c, d, e, f) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b && x[i] <= c ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  \n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }\n    if (digit === 8) {\n      return \"Eight\";\n    }\n    if (digit === 9) {\n      return \"Nine\";\n    }\n  });\n  \n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"byLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  },\n  {\n    name: \"byLength empty\",\n    arr: [],\n    expected: []\n  },\n  {\n    name: \"byLength strange\",\n    arr: [1, -1, 55],\n    expected: [\"One\"]\n  }\n];\n\ntests.forEach((test) => {\n  test(`${test.name} should return ${test.expected}`, () => {\n    expect(byLength(test.arr)).toEqual(test.expected);\n  });\n});</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<| a tags=javascript,arrays |>\nYou could take a closure over a hash table for getting a sorted array and map the wanted strings by a hash table.\n\n<code>\nconst\n    byLength = (array, order) => {\n        const hash = Object.create(null);\n        order.forEach((v, i) => hash[v] = i);\n        return array.sort((a, b) => b - a).map(v => hash[v] || 'One');\n    },\n    array = [2, 1, 1, 4, 5, 8, 2, 3],\n    order = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\nconsole.log(byLength(array, order));</code>\n.as-console-wrapper { max-height: 100%!important; top: 0; }\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst byLength = (arr) => {\n  const order = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }\n    if (digit === 8) {\n      return \"Eight\";\n    }\n    if (digit === 9) {\n      return \"Nine\";\n    }\n  });\n  \n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"byLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  },\n  {\n    name: \"byLength empty\",\n    arr: [],\n    expected: []\n  },\n  {\n    name: \"byLength strange\",\n    arr: [1, -1, 55],\n    expected: [\"One\"]\n  }\n];\n\ntests.forEach((test) => {\n  test(`${test.name} should return ${test.expected}`, () => {\n    expect(byLength(test.arr)).toEqual(test.expected);\n  });\n});</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst byLength = (arr) => {\n  const order = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }\n    if (digit === 8) {\n      return \"Eight\";\n    }\n    if (digit === 9) {\n      return \"Nine\";\n    }\n  });\n  \n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  {\n    name: \"byLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  },\n  {\n    name: \"byLength empty\",\n    arr: [],\n    expected: []\n  },\n  {\n    name: \"byLength strange\",\n    arr: [1, -1, 55],\n    expected: [\"One\"]\n  }\n];\n\ntests.forEach((test) => {\n  test(`${test.name} should return ${test.expected}`, () => {\n    expect(byLength(test.arr)).toEqual(test.expected);\n  });\n});</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst byLength = (arr) => {\n  const order = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit === 1) {\n      return \"One\";\n    }\n    if (digit === 2) {\n      return \"Two\";\n    }\n    if (digit === 3) {\n      return \"Three\";\n    }\n    if (digit === 4) {\n      return \"Four\";\n    }\n    if (digit === 5) {\n      return \"Five\";\n    }\n    if (digit === 6) {\n      return \"Six\";\n    }\n    if (digit === 7) {\n      return \"Seven\";\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n// TEST\nconsole.log(f(5));</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\nfunction factorial(n) {\n  if(n==0)\n    return 1;\n  if(n==1)\n    return 1;\n  return n*factorial(n-1);\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=2 |>\n<code>\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const palindromes = Math.floor(n / 2);\n  return [palindromes, n - palindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums2 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums2([]) == 0\n  >>> countNums2([-1, 11, -11]) == 1\n  >>> countNums2([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums3 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums3([]) == 0\n  >>> countNums3([-1, 11, -11]) == 1\n  >>> countNums3([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums4 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums4([]) == 0\n  >>> countNums4([-1, 11, -11]) == 1\n  >>> countNums4([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums5 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums5([]) == 0\n  >>> countNums5([-1, 11, -11]) == 1\n  >>> countNums5([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums6 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums6([]) == 0\n  >>> countNums6([-1, 11, -11]) == 1\n  >>> countNums6([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums7 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums7([]) == 0\n  >>> countNums7([-1, 11, -11]) == 1\n  >>> countNums7([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums8 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums8([]) == 0\n  >>> countNums8([-1, 11, -11]) == 1\n  >>> countNums8([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums9 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums9([]) == 0\n  >>> countNums9([-1, 11, -11]) == 1\n  >>> countNums9([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums10 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums10([]) == 0\n  >>> countNums10([-1, 11, -11]) == 1\n  >>> countNums10([1, 1, 2]) == 3\n  */\nconst countNums10 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums11 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums11([]) == 0\n  >>> countNums11([-1, 11, -11]) == 1\n  >>> countNums11([1, 1, 2]) == 3\n  */\nconst countNums11 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums12 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums12([]) == 0\n  >>> countNums12([-1, 11, -11]) == 1\n  >>> countNums12([1, 1, 2]) == 3\n  */\nconst countNums12 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums13 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers. Your task is to find out if it\n  is possible to divide this array into two non-empty subsets such that\n  the difference between the sum of elements in both the subsets is minimum.\n  \n  If the given array is empty then return true.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  divideIntoTwoSubsets([1, 2, 3])==>true\n  divideIntoTwoSubsets([1, 2, 4])==>false\n  divideIntoTwoSubsets([1, 2, 3, 5])==>true\n  Explanation: By performing the following operations on the given array:\n  \n  1. Sort the given array in non-decreasing order.\n  2. Perform the above operation on the sorted array.\n  3. Check if the difference between the sum of elements in both the subsets\n     is minimum.\n  \n  */\nconst divideIntoTwoSubsets = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers. Your task is to find out if it\n  is possible to divide this array into two non-empty subsets such that\n  the difference between the sum of elements in both the subsets is maximum.\n  \n  If the given array is empty then return true.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  divideIntoTwoSubsets([1, 2, 3])==>true\n  divideIntoTwoSubsets([1, 2, 4])==>false\n  divideIntoTwoSubsets([1, 2, 3, 5])==>true\n  Explanation: By performing the following operations on the given array:\n  \n  1. Sort the given array in non-decreasing order.\n  2. Perform the above operation on the sorted array.\n  3. Check if the difference between the sum of elements in both the subsets\n     is maximum.\n  \n  */\nconst divideIntoTwoSubsetsMax = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers. Your task is to find out if it\n  is possible to divide this array into two non-empty subsets such that\n  the difference between the sum of elements in both the subsets is maximum.\n  \n  If the given array is empty then return true.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  divideIntoTwoSubsets([1, 2, 3])==>true\n  divideIntoTwoSubsets([1, 2, 4])==>false\n  divideIntoTwoSubsets([1, 2, 3, 5])==>true\n  Explanation: By performing the following operations on the given array:\n  \n  1. Sort the given array in non-decreasing order.\n  2. Perform the above operation on the sorted array.\n  3. Check if the difference between the sum of elements in both the subsets\n     is maximum.\n  \n  */\nconst divideIntoTwoSubsetsMax2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers. Your task is to find out if it\n  is possible to divide this array into two non-empty subsets such that\n  the difference between the sum of elements in both the subsets is minimum.\n  \n  If the given array is empty then return true.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  divideIntoTwoSubsets([1, 2, 3])==>true\n  divideIntoTwoSubsets([1, 2, 4])==>false\n  divideIntoTwoSubsets([1, 2, 3, 5])==>true\n  Explanation: By performing the following operations on the given array:\n  \n  1. Sort the given array in non-decreasing order.\n  2. Perform the above operation on the sorted array.\n  3. Check if the difference between the sum of elements in both the subsets\n     is minimum.\n  \n  */\nconst divideIntoTwoSubsetsMin = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers. Your task is to find out if it\n  is possible to divide this array into two non-empty subsets such that\n  the difference between the sum of elements in both the subsets is maximum.\n  \n  If the given array is empty then return true.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  divideIntoTwoSubsets([1, 2, 3])==>true\n  divideIntoTwoSubsets([1, 2, 4])==>false\n  divideIntoTwoSubsets([1, 2, 3, 5])==>true\n  Explanation: By performing the following operations on the given array:\n  \n  1. Sort the given array in non-decreasing order.\n  2. Perform the above operation on the sorted array.\n  3. Check if the difference between the sum of elements in both the subsets\n     is maximum.\n  \n  */\nconst divideIntoTwoSubsetsMin2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array 'arr' of N integers. Your task is to find out if it\n  is possible to divide this array into two non-empty subsets such that\n  the difference between the sum of elements in both the subsets is maximum.\n  \n  If the given array is empty then return true.\n\n  Note: The given array is guaranteed to have unique elements.\n\n  For Example:\n  \n  divideIntoTwoSubsets([1, 2, 3])==>true\n  divideIntoTwoSubsets([1, 2, 4])==>false\n  divideIntoTwoSubsets([1, 2, 3, 5])==>true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/**\n * Converts string to array of bytes\n * If string starts with '0x' it gets converted, otherwise it is left as is\n * If input is not valid hex string, exception is thrown\n * If input contains '0x' at the beggining, it is left as is\n * If input contains '0x' at the end, it is left as is\n * If input contains '0x' somewhere in the middle, it is left as is\n * If input contains '0x' more than once at the beggining, it is left as is\n * If input contains '0x' more than once at the end, it is left as is\n * If input contains '0x' more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once at the beggining, it is left as is\n * If input contains '0x' more than once more than once at the end, it is left as is\n * If input contains '0x' more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once at the beggining, it is left as is\n * If input contains '0x' more than once more than once more than once at the end, it is left as is\n * If input contains '0x' more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once at the beggining, it is left as is\n * If input contains '0x' more than once more than once more than once more than once at the end, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once more than once more than once somewhere in the middle, it is left as is\n * If input contains '0x' more than once more than once ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  // Write your code here\n};\n\n// Execute the tests\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]));\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  let letters = test.split(' ')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete2 = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === k.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete3 = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === k.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete4 = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === k.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete5 = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === k.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete6 = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === k.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete7 = (s, k) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === k.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(1);\n    } else {\n      result += s.charAt(i);\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete all the characters in s that are equal to any character in k then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", k = \"b\"  the result ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return odd;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '0') {\n        count++;\n      } else if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '1') {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return even.concat(odd);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the sum of the digits in the i'th string\n  of the input.\" where all the i's should be replaced by the sum of the digits in\n  the i'th string of the input.\n\n  >>> sumDigits(['1234567'])\n  [\"the sum of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> sumDigits(['3',\"11111111\"])\n  [\"the sum of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the sum of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst sumDigits = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Number(lst[i]);\n  }\n  return sum;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string\n  of the input.\" where all the i's should be replaced by the product of the digits in\n  the i'th string of the input.\n\n  >>> productDigits(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> productDigits(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productDigits = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Number(lst[i]);\n  }\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string\n  of the input.\" where all the i's should be replaced by the product of the digits in\n  the i'th string of the input.\n\n  >>> productDigits(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> productDigits(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productDigits = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Number(lst[i]);\n  }\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string\n  of the input.\" where all the i's should be replaced by the product of the digits in\n  the i'th string of the input.\n\n  >>> productDigits(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> productDigits(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productDigits = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Number(lst[i]);\n  }\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string\n  of the input.\" where all the i's should be replaced by the product of the digits in\n  the i'th string of the input.\n\n  >>> productDigits(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> productDigits(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst productDigits = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Number(lst[i]);\n  }\n  return product;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFill14 = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => a - b);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return ones === decimal? arr : arr.sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let words = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWordVowels = (s, n) => {\n  let words = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWordConsonants = (s, n) => {\n  let words = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWordVowelsConsonants = (s, n) => {\n  let words = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWordConsonantsVowels = (s, n) => {\n  let words = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWordVowelsConsonantsVowels = (s, n) => {\n  let words = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromLeftAndRight = vowelsCount - 3;\n  let vowelsCountFromLeftAndRightAndUp = vowelsCount - 4;\n  let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 5;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 6;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 7;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 8;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 9;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 10;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 11;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 12;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 13;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 14;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 15;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let result = 'No';\n\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      result = stack.pop() + result;\n      index++;\n    } else {\n      index++;\n    }\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes';\n      break;\n    }\n    index++;\n  }\n\n  return result;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return Yes if P is a substring of S, and return No otherwise.\n  Examples:\n  subString('abc', 'abc') == 'Yes'\n  subString('abc', 'ab') == 'No'\n  subString('abc', 'bc') == 'Yes'\n  subString('abc', 'abbc') == 'No'\n  subString('abc', 'abcc') == 'No'\n  subString('abc', 'abbcc') == 'No'\n  */\nconst subString = (S, P) => {\n  let index = 0;\n  let result = 'No';\n\n  while (index < S.length) {\n    if (S.substr(index, P.length) === P) {\n      result = 'Yes", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longer = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longer.length) {\n      longer = strings[i]\n    }\n  }\n  return longer\n}\n\n/**\n * Return the shortest string in the given list of strings.\n * Return null if the list is empty.\n * >>> shortest([])\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/**\n * Return the longest string in the given list of strings.\n * Return null if the list is empty.\n * >>> longest([])\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the longest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> longestIgnoreCase([])\n  >>> longestIgnoreCase(['a', 'b', 'c'])\n  'c'\n  >>> longestIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the shortest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> shortestIgnoreCase([])\n  >>> shortestIgnoreCase(['a', 'b', 'c'])\n  'a'\n  >>> shortestIgnoreCase(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/**\n * Return the longest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> longestIgnoreCase([])\n  >>> longestIgnoreCase(['a', 'b', 'c'])\n  'c'\n  >>> longestIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the shortest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> shortestIgnoreCase([])\n  >>> shortestIgnoreCase(['a', 'b', 'c'])\n  'a'\n  >>> shortestIgnoreCase(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/**\n * Return the longest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> longestIgnoreCase([])\n  >>> longestIgnoreCase(['a', 'b', 'c'])\n  'c'\n  >>> longestIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the shortest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> shortestIgnoreCase([])\n  >>> shortestIgnoreCase(['a', 'b', 'c'])\n  'a'\n  >>> shortestIgnoreCase(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/**\n * Return the longest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> longestIgnoreCase([])\n  >>> longestIgnoreCase(['a', 'b', 'c'])\n  'c'\n  >>> longestIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the shortest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> shortestIgnoreCase([])\n  >>> shortestIgnoreCase(['a', 'b', 'c'])\n  'a'\n  >>> shortestIgnoreCase(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/**\n * Return the longest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> longestIgnoreCase([])\n  >>> longestIgnoreCase(['a', 'b', 'c'])\n  'c'\n  >>> longestIgnoreCase(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestIgnoreCase = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length && strings[i].toLowerCase()!== strings[i].toUpperCase()) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the shortest string in the given list of strings, ignoring case.\n * Return null if the list is empty.\n * >>> shortestIgnoreCase([])\n  >>> shortestIgnoreCase(['a', 'b', 'c'])\n  'a'\n  >>> shortestIgnoreCase(['a', 'bb', 'ccc'])\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimums = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the averages k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, 2.5, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 2.5, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2.5, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst averages = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n    }\n    result.push(sum / arr.length);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the first k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst firsts = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the last k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst lasts = (arr, k) => {\n  const result = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers in arr sorted from smallest to largest.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sort = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  for (let i = k; i < arr.length; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers in arr sorted from largest to smallest.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst reverseSort = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  for (let i = k; i < arr.length; i++) {\n    let min = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers in arr sorted from smallest to largest.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come after it in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [8, 7, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst solutions2 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come before it in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solutions3 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between any two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 7, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 321]\n  */\nconst solutions4 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions5 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions6 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions7 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions8 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions9 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions10 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions11 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solutions12 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst.length - 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers from this list except for those that come in between two of the numbers in the list.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> [5, 1]\n  solutions([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solutions([30, 13, 24, 321]) ==> [30, 13, 24, 321]\n  */\nconst solution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array and all\n  the numbers that come after it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [10,8,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst largestAndAllAfter = (arr) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array and all\n  the numbers that come before it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [5,7,8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst smallestAndAllBefore = (arr) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array and all\n  the numbers that come before it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst largestAndAllBefore = (arr) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array and all\n  the numbers that come after it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [5,7,8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst smallestAndAllAfter = (arr) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array and all\n  the numbers that come before it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [5,7,8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst largestAndAllAfter = (arr) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array and all\n  the numbers that come before it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst smallestAndAllBefore = (arr) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array and all\n  the numbers that come before it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst largestAndAllBefore = (arr) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array and all\n  the numbers that come after it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [5,7,8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst smallestAndAllAfter = (arr) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result.push(arr[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array and all\n  the numbers that come before it in sorted order.\n\n  Example:\n\n      Input: arr = [5,7,7,8,8,10,15]\n      Output: [8,10,15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. -10^9 <= arr[i] <= 10^9\n  */\nconst largestAndAllBefore = (arr) => {\n  const result = [];\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = prev / 2;\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = prev / 2;\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = prev / 2;\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = prev / 2;\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = prev / 2;\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = prev / 2;\n    } else {\n      prev = (prev * 3) + 1\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concern", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const validDateArray = [\n   !dateArray[0] || dateArray[0].length < 1 || dateArray[0].length > 31,\n   !dateArray[1] || dateArray[1].length < 1 || dateArray[1].length > 30,\n   !dateArray[2] || dateArray[2].length < 1 || dateArray[2].length > 29,\n   !dateArray[3] || dateArray[3].length < 1 || dateArray[3].length > 12,\n   !dateArray[4] || dateArray[4].length < 1 || dateArray[4].length > 12,\n   !dateArray[5] || dateArray[5].length < 1 || dateArray[5].length > 12,\n  ];\n  return validDateArray.every(item => item);\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const validDateArray = [\n   !dateArray[0] || dateArray[0].length < 1 || dateArray[0].length > 31,\n   !dateArray[1] || dateArray[1].length < 1 || dateArray[1].length > 30,\n   !dateArray[2] || dateArray[2].length < 1 || dateArray[2].length > 29,\n   !dateArray[3] || dateArray[3].length < 1 || dateArray[3].length > 12,\n   !dateArray[4] || dateArray[4].length < 1 || dateArray[4].length > 12,\n   !dateArray[5] || dateArray[5].length < 1 || dateArray[5].length > 12,\n  ];\n  return validDateArray.every(item => item);\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const validDateArray = [\n   !dateArray[0] || dateArray[0].length < 1 || dateArray[0].length > 31,\n   !dateArray[1] || dateArray[1].length < 1 || dateArray[1].length > 30,\n   !dateArray[2] || dateArray[2].length < 1 || dateArray[2].length > 29,\n   !dateArray[3] || dateArray[3].length < 1 || dateArray[3].length > 12,\n   !dateArray[4] || dateArray[4].length < 1 || dateArray[4].length > 12,\n   !dateArray[5] || dateArray[5].length < 1 || dateArray[5].length > 12,\n  ];\n  return validDateArray.every(item => item);\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const validDateArray = [\n   !dateArray[0] || dateArray[0].length < 1 || dateArray[0].length > 31,\n   !dateArray[1] || dateArray[1].length < 1 || dateArray[1].length > 30,\n   !dateArray[2] || dateArray[2].length < 1 || dateArray[2].length > 29,\n   !dateArray[3] || dateArray[3].length < 1 || dateArray[3].length > 12,\n   !dateArray[4] || dateArray[4].length < 1 || dateArray[4].length > 12,\n   !dateArray[5] || dateArray[5].length < 1 || dateArray[5].length > 12,\n  ];\n  return validDateArray.every(item => item);\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter((word) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ false\n  isSort([1, 2, 3, 4, 5]) ➞ false\n  isSort([1, 3, 2, 4, 5]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ false\n  isSort([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, false);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, false);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, false);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!map.has(num)) {\n      map.set(num, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1] || interval2[0] > interval1[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum * prodsSign(arr.slice(1))\n}", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  for (let i = 0; i < k + 1; i++) {\n    lst_A[i] = i;\n    lst_B[i] = i;\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (grid[i][j] === grid[i - 1][j]) {\n        lst_A[i] = Math.min(lst_A[i], lst_A[i - 1]);\n        lst_B[i] = Math.min(lst_B[i], lst_B[i - 1]);\n      } else if (grid[i][j] === grid[i][j - 1]) {\n        lst_A[i] = Math.min(lst_A[i], lst_A[i - 1]);\n        lst_B[i] = Math.min(lst_B[i], lst_B[i - 1]);\n      } else if (grid[i][j] === grid[i - 1][j - 1]) {\n        lst_A[i] = Math.min(lst_A[i], lst_A[i - 1]);\n        lst_B[i] = Math.min(lst_B[i], lst_B[i - 1]);\n      }\n    }\n  }\n  return lst_A.slice(0, k);\n};\n\n/*\n  Given a 2D array representing an image, return true if and only if the image\n  is completely black and white. \n  \n  A pixel is considered black if it has the value 0 or 255.\n  A pixel is considered white if it has the value 255.\n  \n  Example:\n\n      Input: image = [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n      ]\n      Output: true\n      \n      Input: image = [\n      [255,255,255],\n      [255,255,255],\n      [255,255,255]\n      ]\n      Output: false\n  */\nconst isBlackAndWhite = (image) => {\n  const N = image.length;\n  const m = image[0].length;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (image[i][j] === 255 || image[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a 2D array representing an image, return true if and only if the image\n  is completely black and white. \n  \n  A pixel is considered black if it has the value 0 or 255.\n  A pixel is considered white if it has the value 255.\n  \n  Example:\n\n      Input: image = [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n      ]\n      Output: true\n      \n      Input: image = [\n      [255,255,255],\n      [255,255,255],\n      [255,255,255]\n      ]\n      Output: false\n  */\nconst isBlackAndWhite = (image) => {\n  const N = image.length;\n  const m = image[0].length;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (image[i][j] === 255 || image[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a 2D array representing an image, return true if and only if the image\n  is completely black and white. \n  \n  A pixel is considered black if it has the value 0 or 255.\n  A pixel is considered white if it has the value 255.\n  \n  Example:\n\n      Input: image = [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n      ]\n      Output: true\n      \n      Input: image = [\n      [255,255,255],\n      [255,255,255],\n      [255,255,255]\n      ]\n      Output: false\n  */\nconst isBlackAndWhite = (image) => {\n  const N = image.length;\n  const m = image[0].length;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (image[i][j] === 255 || image[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a 2D array representing an image, return true if and only if the image\n  is completely black and white. \n  \n  A pixel is considered black if it has the value 0 or 255.\n  A pixel is considered white if it has the value 255.\n  \n  Example:\n\n      Input: image = [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n      ]\n      Output: true\n      \n      Input: image = [\n      [255,255,255],\n      [255,255,255],\n      [255,255,255]\n      ]\n      Output: false\n  */\nconst isBlackAndWhite = (image) => {\n  const N = image.length;\n  const m = image[0].length;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (image[i][j] === 255 || image[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a 2D array representing an image, return true if and only if the image\n  is completely black and white. \n  \n  A pixel is considered black if it has the value 0 or 255.\n  A pixel is considered white if it has the value 255.\n  \n  Example:\n\n      Input: image = [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n      ]\n      Output: true\n      \n      Input: image = [\n      [255,255,255],\n      [255,255,255],\n      [255,255,255]\n      ]\n      Output: false\n  */\nconst isBlackAndWhite = (image) => {\n  const N = image.length;\n  const m = image[0].length;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (image[i][j] === 255 || image[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a 2D array representing an image, return true if and only if the image\n  is completely black and white. \n  \n  A pixel is considered black if it has the value 0 or 255.\n  A pixel is considered white if it has the value 255.\n  \n  Example:\n\n      Input: image = [\n      [0,0,0],\n      [0,0,0],\n      [0,0,0]\n      ]\n      Output: true\n      \n      Input: image = [\n      [255,255,255],\n      [255,255,255],\n      [255,255,255]\n      ]\n      Output: false\n  */\nconst isBlackAndWhite = (image) => {\n  const N = image.length;\n  const m = image[0].length;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (image[i][j] === 255 || image[i][j] === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a === 0) {\n    return b\n  }\n  if (b === 0) {\n    return a\n  }\n  return a > b? a : b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  true\n  >>> isGreaterOrEqual(25, 15)\n  true\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  true\n  >>> isLessOrEqual(25, 15)\n  true\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is less than b\n  >>> isLess(3, 5)\n  true\n  >>> isLess(25, 15)\n  false\n  */\nconst isLess = (a, b) => {\n  return a < b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  true\n  >>> isEqual(25, 15)\n  true\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  true\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  false\n  >>> isLessOrEqual(25, 15)\n  true\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  false\n  >>> isGreaterOrEqual(25, 15)\n  true\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  false\n  >>> isEqual(25, 15)\n  true\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  false\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  false\n  >>> isLessOrEqual(25, 15)\n  false\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  false\n  >>> isGreaterOrEqual(25, 15)\n  false\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  false\n  >>> isEqual(25, 15)\n  false\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  false\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  false\n  >>> isLessOrEqual(25, 15)\n  false\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  false\n  >>> isGreaterOrEqual(25, 15)\n  false\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  false\n  >>> isEqual(25, 15)\n  false\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  false\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  false\n  >>> isLessOrEqual(25, 15)\n  false\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  false\n  >>> isGreaterOrEqual(25, 15)\n  false\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  false\n  >>> isEqual(25, 15)\n  false\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  false\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  false\n  >>> isLessOrEqual(25, 15)\n  false\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  false\n  >>> isGreaterOrEqual(25, 15)\n  false\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  false\n  >>> isEqual(25, 15)\n  false\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  false\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b\n  >>> isLessOrEqual(3, 5)\n  false\n  >>> isLessOrEqual(25, 15)\n  false\n  */\nconst isLessOrEqual = (a, b) => {\n  return a <= b\n}\n\n/* Return true if a is greater than or equal to b\n  >>> isGreaterOrEqual(3, 5)\n  false\n  >>> isGreaterOrEqual(25, 15)\n  false\n  */\nconst isGreaterOrEqual = (a, b) => {\n  return a >= b\n}\n\n/* Return true if a is equal to b\n  >>> isEqual(3, 5)\n  false\n  >>> isEqual(25, 15)\n  false\n  */\nconst isEqual = (a, b) => {\n  return a === b\n}\n\n/* Return true if a is greater than b\n  >>> isGreater(3, 5)\n  false\n  >>> isGreater(25, 15)\n  false\n  */\nconst isGreater = (a, b) => {\n  return a > b\n}\n\n/* Return true if a is less than or equal to b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i += 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigit = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i += 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSum = (n) => {\n  let product = evenDigit(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigit = (n) => {\n  let product = evenDigitSum(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSum = (n) => {\n  let product = evenDigitSumAndEvenDigit(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigit = (n) => {\n  let product = evenDigitSumAndEvenDigitSum(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit and the sum of all the\n  odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigitSum = (n) => {\n  let product = evenDigitSumAndEvenDigitSumAndEvenDigit(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit and the sum of all the\n  odd digit and the sum of all the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigit = (n) => {\n  let product = evenDigitSumAndEvenDigitSumAndEvenDigitSum(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit and the sum of all the\n  odd digit and the sum of all the even digit and the sum of all the\n  odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigitSum = (n) => {\n  let product = evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigit(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit and the sum of all the\n  odd digit and the sum of all the even digit and the sum of all the\n  odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigit = (n) => {\n  let product = evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigitSum(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit and the sum of all the\n  odd digit and the sum of all the even digit and the sum of all the\n  odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigitSum = (n) => {\n  let product = evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigit(n);\n  let sum = 0;\n  for (let i = 3; i <= n; i += 2) {\n    sum += digit(i);\n  }\n  return product * sum;\n};\n\n/*Given a positive integer n, return the product of the even digit and the\n  sum of all the odd digit and the sum of all the even digit and the sum of all\n  the odd digit and the sum of all the even digit and the sum of all the\n  odd digit and the sum of all the even digit and the sum of all the\n  odd digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 1\n  digit(235) == 235\n  */\nconst evenDigitSumAndEvenDigitSumAndEvenDigitSumAndEvenDigit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets && brackets.some((bracket) => isNest(bracket));\n};\n\n/*\n  Create a function that takes a string as input which contains only square bracket", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sums = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbersOfSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbersOfNumbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbersOfNumbersOfSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbersOfNumbersOfNumbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbersOfNumbersOfNumbersOfSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst productOfNumbersOfNumbersOfNumbersOfNumbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z]/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/\\d/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a whitespace and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[\\s\\t]/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z\\d]/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z\\d]/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z\\d]/i);\n  return lastCharIsALetter &&!words.includes(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.max(...negativeIntegers), Math.min(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.min(...negativeIntegers), Math.max(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerLargerIntegers([]) == (null, null)\n  smallerLargerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.min(...negativeIntegers), Math.max(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerSmallerIntegers([]) == (null, null)\n  smallerSmallerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.max(...negativeIntegers), Math.min(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerLargerIntegers([]) == (null, null)\n  largerLargerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.min(...negativeIntegers), Math.max(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerLargerIntegers([]) == (null, null)\n  smallerLargerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.max(...negativeIntegers), Math.min(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.min(...negativeIntegers), Math.max(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerLargerIntegers([]) == (null, null)\n  largerLargerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x > 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return null;\n  }\n  if (positiveIntegers.length < 1) {\n    return null;\n  }\n  if (negativeIntegers.length < 1) {\n    return null;\n  }\n  return [Math.max(...negativeIntegers), Math.min(...positiveIntegers)];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerLargerIntegers([2, 4, 1, 3, 5, 7]) == (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n\n  if (aIsNumber && bIsNumber) {\n    return a > b? a : b;\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[0];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[0];\n  }\n\n  if (a === null && b === null) {\n    return null;\n  }\n\n  if (a === null || b === null) {\n    return null;\n  }\n\n  return a > b? a : b;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5,1\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingTwo = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n\n  if (aIsNumber && bIsNumber) {\n    return a < b? a : b;\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[0];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[0];\n  }\n\n  if (a === null && b === null) {\n    return null;\n  }\n\n  if (a === null || b === null) {\n    return null;\n  }\n\n  return a < b? a : b;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5,1\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingThree = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n\n  if (aIsNumber && bIsNumber) {\n    return a > b? a : b;\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[0];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[0];\n  }\n\n  if (a === null && b === null) {\n    return null;\n  }\n\n  if (a === null || b === null) {\n    return null;\n  }\n\n  return a < b? a : b;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5,1\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingFour = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n\n  if (aIsNumber && bIsNumber) {\n    return a < b? a : b;\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[0];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[0];\n  }\n\n  if (a === null && b === null) {\n    return null;\n  }\n\n  if (a === null || b === null) {\n    return null;\n  }\n\n  return a > b? a : b;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5,1\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingFive = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n\n  if (aIsNumber && bIsNumber) {\n    return a < b? a : b;\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[1];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\",\")) {\n    return a.split(\",\")[0];\n  }\n\n  if (aIsNumber && b!== null && a.includes(\".\")) {\n    return a.split(\".\")[0];\n  }\n\n  if (a === null && b === null) {\n    return null;\n  }\n\n  if (a === null || b === null) {\n    return null;\n  }\n\n  return a < b? a : b;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5,1\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingSi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == false\n  isEqualToSummingOdd(8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == false\n  isEqualToSummingEven(-6) == false\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOdd(-4) == false\n  isEqualToSummingOdd(-6) == false\n  isEqualToSummingOdd(-8) == true\n  */\nconst isEqualToSummingOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEvenEven(4) == false\n  isEqualToSummingEvenEven(6) == false\n  isEqualToSummingEvenEven(8) == true\n  */\nconst isEqualToSummingEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOddEven(4) == false\n  isEqualToSummingOddEven(6) == false\n  isEqualToSummingOddEven(8) == true\n  */\nconst isEqualToSummingOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEvenEven(-4) == false\n  isEqualToSummingEvenEven(-6) == false\n  isEqualToSummingEvenEven(-8) == true\n  */\nconst isEqualToSummingEvenEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOddEven(-4) == false\n  isEqualToSummingOddEven(-6) == false\n  isEqualToSummingOddEven(-8) == true\n  */\nconst isEqualToSummingOddEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEvenOdd(4) == false\n  isEqualToSummingEvenOdd(6) == false\n  isEqualToSummingEvenOdd(8) == true\n  */\nconst isEqualToSummingEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOddOdd(4) == false\n  isEqualToSummingOddOdd(6) == false\n  isEqualToSummingOddOdd(8) == true\n  */\nconst isEqualToSummingOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEvenOdd(-4) == false\n  isEqualToSummingEvenOdd(-6) == false\n  isEqualToSummingEvenOdd(-8) == true\n  */\nconst isEqualToSummingEvenOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOddOdd(-4) == false\n  isEqualToSummingOddOdd(-6) == false\n  isEqualToSummingOddOdd(-8) == true\n  */\nconst isEqualToSummingOddOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEvenEvenEven(4) == false\n  isEqualToSummingEvenEvenEven(6) == false\n  isEqualToSummingEvenEvenEven(8) == true\n  */\nconst isEqualToSummingEvenEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOddEvenEven(4) == false\n  isEqualToSummingOddEvenEven(6) == false\n  isEqualToSummingOddEvenEven(8) == true\n  */\nconst isEqualToSummingOddEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqual", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factorial of\n\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorials[n];\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n\n  Parameters:\n  n - the number to calculate the factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentPrefix) {\n      prefixes.push(currentPrefix);\n    } else {\n      currentPrefix = string[i];\n      prefixes.push(currentPrefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = string[i];\n      suffixes.push(currentSuffix);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += string[i];\n      substrings.push(currentSub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixesUnderscore(\"Example\") == \"Example\"\n  fixesUnderscore(\"Example 1\") == \"Example_1\"\n  fixesUnderscore(\"_Example_2\") == \"_Example_2\"\n  fixesUnderscore(\"_Example   3\") == \"_Example_3\"\n  */\nconst fixesUnderscore = (text) => {\n  return text.replace(/_{2,}/g, \" \").replace(/_/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive hyphens with spaces, \n  and if a string has more than 2 consecutive hyphens, \n  then replace all consecutive hyphens with - \n  \n  fixesHyphens(\"Example\") == \"Example\"\n  fixesHyphens(\"Example 1\") == \"Example_1\"\n  fixesHyphens(\"-Example_2\") == \"-Example_2\"\n  fixesHyphens(\"-Example   3\") == \"-Example_3\"\n  */\nconst fixesHyphens = (text) => {\n  return text.replace(/-{2,}/g, \" \").replace(/-/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive periods with spaces, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with - \n  \n  fixesPeriods(\"Example\") == \"Example\"\n  fixesPeriods(\"Example 1\") == \"Example_1\"\n  fixesPeriods(\".Example_2\") == \"_Example_2\"\n  fixesPeriods(\".Example   3\") == \"_Example_3\"\n  */\nconst fixesPeriods = (text) => {\n  return text.replace(/\\.{2,}/g, \" \").replace(/\\./g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive commas with spaces, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with - \n  \n  fixesCommas(\"Example\") == \"Example\"\n  fixesCommas(\"Example 1\") == \"Example_1\"\n  fixesCommas(\",Example_2\") == \"_Example_2\"\n  fixesCommas(\",Example   3\") == \"_Example_3\"\n  */\nconst fixesCommas = (text) => {\n  return text.replace(/,{2,}/g, \" \").replace(/,/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive colons with spaces, \n  and if a string has more than 2 consecutive colons, \n  then replace all consecutive colons with - \n  \n  fixesColons(\"Example\") == \"Example\"\n  fixesColons(\"Example 1\") == \"Example_1\"\n  fixesColons(\":Example_2\") == \"_Example_2\"\n  fixesColons(\":Example   3\") == \"_Example_3\"\n  */\nconst fixesColons = (text) => {\n  return text.replace(/:{2,}/g, \" \").replace(/:/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive semicolons with spaces, \n  and if a string has more than 2 consecutive semicolons, \n  then replace all consecutive semicolons with - \n  \n  fixesSemicolons(\"Example\") == \"Example\"\n  fixesSemicolons(\"Example 1\") == \"Example_1\"\n  fixesSemicolons(\";Example_2\") == \"_Example_2\"\n  fixesSemicolons(\";Example   3\") == \"_Example_3\"\n  */\nconst fixesSemicolons = (text) => {\n  return text.replace(/;{2,}/g, \" \").replace(/;/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive colons with spaces, \n  and if a string has more than 2 consecutive colons, \n  then replace all consecutive colons with - \n  \n  fixesColons(\"Example\") == \"Example\"\n  fixesColons(\"Example 1\") == \"Example_1\"\n  fixesColons(\":Example_2\") == \"_Example_2\"\n  fixesColons(\":Example   3\") == \"_Example_3\"\n  */\nconst fixesColons = (text) => {\n  return text.replace(/:{2,}/g, \" \").replace(/:/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive slashes with spaces, \n  and if a string has more than 2 consecutive slashes, \n  then replace all consecutive slashes with - \n  \n  fixesSlashes(\"Example\") == \"Example\"\n  fixesSlashes(\"Example 1\") == \"Example_1\"\n  fixesSlashes(\"/Example_2\") == \"_Example_2\"\n  fixesSlashes(\"/Example   3\") == \"_Example_3\"\n  */\nconst fixesSlashes = (text) => {\n  return text.replace(/\\/{2,}/g, \" \").replace(/\\//g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive colons with spaces, \n  and if a string has more than 2 consecutive colons, \n  then replace all consecutive colons with - \n  \n  fixesColons(\"Example\") == \"Example\"\n  fixesColons(\"Example 1\") == \"Example_1\"\n  fixesColons(\":Example_2\") == \"_Example_2\"\n  fixesColons(\":Example   3\") == \"_Example_3\"\n  */\nconst fixesColons = (text) => {\n  return text.replace(/:{2,}/g, \" \").replace(/:/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive periods with spaces, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with - \n  \n  fixesPeriods(\"Example\") == \"Example\"\n  fixesPeriods(\"Example 1\") == \"Example_1\"\n  fixesPeriods(\".Example_2\") == \"_Example_2\"\n  fixesPeriods(\".Example   3\") == \"_Example_3\"\n  */\nconst fixesPeriods = (text) => {\n  return text.replace(/\\.{2,}/g, \" \").replace(/\\./g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive commas with spaces, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with - \n  \n  fixesCommas(\"Example\") == \"Example\"\n  fixesCommas(\"Example 1\") == \"Example_1\"\n  fixesCommas(\",Example_2\") == \"_Example_2\"\n  fixesCommas(\",Example   3\") == \"_Example_3\"\n  */\nconst fixesCommas = (text) => {\n  return text.replace(/,{2,}/g, \" \").replace(/,/g, \"-\")\n}\n\n/*\n  Given a string text, \n  replace all consecutive hyphens with spaces, \n  and if a string has more than 2 consecutive hyphen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.replace(/\\./g,'');\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,2);\n  let file_name = file_name.substring(0,3);\n  let file_name = file_name.substring(0,4);\n  let file_name = file_name.substring(0,5);\n  let file_name = file_name.substring(0,6);\n  let file_name = file_name.substring(0,7);\n  let file_name = file_name.substring(0,8);\n  let file_name = file_name.substring(0,9);\n  let file_name = file_name.substring(0,10);\n  let file_name = file_name.substring(0,11);\n  let file_name = file_name.substring(0,12);\n  let file_name = file_name.substring(0,13);\n  let file_name = file_name.substring(0,14);\n  let file_name = file_name.substring(0,15);\n  let file_name = file_name.substring(0,16);\n  let file_name = file_name.substring(0,17);\n  let file_name = file_name.substring(0,18);\n  let file_name = file_name.substring(0,19);\n  let file_name = file_name.substring(0,20);\n  let file_name = file_name.substring(0,21);\n  let file_name = file_name.substring(0,22);\n  let file_name = file_name.substring(0,23);\n  let file_name = file_name.substring(0,24);\n  let file_name = file_name.substring(0,25);\n  let file_name = file_name.substring(0,26);\n  let file_name = file_name.substring(0,27);\n  let file_name = file_name.substring(0,28);\n  let file_name = file_name.substring(0,29);\n  let file_name = file_name.substring(0,30);\n  let file_name = file_name.substring(0,31);\n  let file_name = file_name.substring(0,32);\n  let file_name = file_name.substring(0,33);\n  let file_name = file_name.substring(0,34);\n  let file_name = file_name.substring(0,35);\n  let file_name = file_name.substring(0,36);\n  let file_name = file_name.substring(0,37);\n  let file_name = file_name.substring(0,38);\n  let file_name = file_name.substring(0,39);\n  let file_name = file_name.substring(0,40);\n  let file_name = file_name.substring(0,41);\n  let file_name = file_name.substring(0,42);\n  let file_name = file_name.substring(0,43);\n  let file_name = file_name.substring(0,44);\n  let file_name = file_name.substring(0,45);\n  let file_name = file_name.substring(0,46);\n  let file_name = file_name.substring(0,47);\n  let file_name = file_name.substring(0,48);\n  let file_name = file_name.substring(0,49);\n  let file_name = file_name.substring(0,50);\n  let file_name = file_name.substring(0,51);\n  let file_name = file_name.substring(0,52);\n  let file_name = file_name.substring(0,53);\n  let file_name = file_name.substring(0,54);\n  let file_name = file_name.substring(0,55);\n  let file_name = file_name.substring(0,56);\n  let file_name = file_name.substring(0,57);\n  let file_name = file_name.substring(0,58);\n  let file_name = file_name.substring(0,59);\n  let file_name = file_name.substring(0,60);\n  let file_name = file_name.substring(0,61);\n  let file_name = file_name.substring(0,62);\n  let file_name = file_name.substring(0,63);\n  let file_name = file_name.substring(0,64);\n  let file_name = file_name.substring(0,65);\n  let file_name = file_name.substring(0,66);\n  let file_name = file_name.substring(0,67);\n  let file_name = file_name.substring(0,68);\n  let file_name = file_name.substring(0,69);\n  let file_name = file_name.substring(0,70);\n  let file_name = file_name.substring(0,71);\n  let file_name = file_name.substring(0,72);\n  let file_name = file_name.substring(0,73);\n  let file_name = file_name.substring(0,74);\n  let file_name = file_name.substring(0,75);\n  let file_name = file_name.substring(0,76);\n  let file_name = file_name.substring(0,77);\n  let file_name = file_name.substring(0,78);\n  let file_name = file_name.substring(0,79);\n  let file_name = file_name.substring(0,80);\n  let file_name = file_name.substring(0,81);\n  let file_name = file_name.substring(0,82);\n  let file_name = file_name.substring(0,83);\n  let file_name = file_name.substring(0,84);\n  let file_name = file_name.substring(0,85);\n  let file_name = file_name.substring(0,86);\n  let file_name = file_name.substring(0,87);\n  let file_name = file_name.substring(0,88);\n  let file_name = file_name.substring(0,89);\n  let file_name = file_name.substring(0,90);\n  let file_name = file_name.substring(0,91);\n  let file_name = file_name.substring(0,92);\n  let file_name = file_name.substring(0,93);\n  let file_name = file_name.substring(0,94);\n  let file_name = file_name.substring(0,95);\n  let file_name = file_name.substring(0,96);\n  let file_name = file_name.substring(0,97);\n  let file_name = file_name.substring(0,98);\n  let file_name = file_name.substring(0,99);\n  let file_name = file_name.substring(0,100);\n  let file_name = file_name.substring(0,101);\n  let file_name = file_name.substring(0,102);\n  let file_name = file_name.substring(0,103);\n  let file_name = file_name.substring(0,104);\n  let file_name = file_name.substring(0,105);\n  let file_name = file_name.substring(0,106);\n  let file_name = file_name.substring(0,107);\n  let file_name = file_name.substring(0,108);\n  let file_name = file_name.substring(0,109);\n  let file_name = file_name.substring(0,110);\n  let file_name = file_name.substring(0,111);\n  let file_name = file_name.substring(0,112);\n  let file_name = file_name.substring(0,113);\n  let file_name = file_name.substring(0,114);\n  let file_name = file_name.substring(0,115);\n  let file_name = file_name.substring(0,116);\n  let file_name = file_name.substring(0,117);\n  let file_name = file_name.substring(0,118);\n  let file_name = file_name.substring(0,119);\n  let file_name = file_name.substring(0,120);\n  let file_name = file_name.substring(0,121);\n  let file_name = file_name.substring(0,122);\n  let file_name = file_name.substring(0,123);\n  let file_name = file_name.substring(0,124);\n  let file_name = file_name.substring(0,125);\n  let file_name = file_name.substring(0,126);\n  let file_name = file_name.substring(0,127);\n  let file_name = file_name.substring(0,128);\n  let file_name = file_name.substring(0,129);\n  let file_name = file_name.substring(0,130);\n  let file_name = file_name.substring(0,131);\n  let file_name = file_name.substring(0,132);\n  let file_name = file_name.substring(0,133);\n  let file_name = file_name.substring(0,134);\n  let file_name = file_name.substring(0,135);\n  let file_name = file_name.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiples = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4.\n  The function shall then return the sum of all entries.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst sumsMultiplesWithoutZeros = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += 1;\n    } else if (lst[i] % 3!== 0) {\n      sum += 1;\n    } else if (lst[i] % 4!== 0) {\n      sum += 1;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences2 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences2 }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences3 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences3 }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences4 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences4 }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences5 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences5 }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences6 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences6 }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences7 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word).find(f => f === word.length)\n    if (prime) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordInSentences7 }\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences8 = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/2\", \"1/2\"));\nconsole.log(simplify(\"1/2\", \"1/3\"));\nconsole.log(simplify(\"1/2\", \"1/4\"));\nconsole.log(simplify(\"1/2\", \"1/5\"));\nconsole.log(simplify(\"1/2\", \"1/6\"));\nconsole.log(simplify(\"1/2\", \"1/7\"));\nconsole.log(simplify(\"1/2\", \"1/8\"));\nconsole.log(simplify(\"1/2\", \"1/9\"));\nconsole.log(simplify(\"1/2\", \"1/10\"));\nconsole.log(simplify(\"1/2\", \"1/11\"));\nconsole.log(simplify(\"1/2\", \"1/12\"));\nconsole.log(simplify(\"1/2\", \"1/13\"));\nconsole.log(simplify(\"1/2\", \"1/14\"));\nconsole.log(simplify(\"1/2\", \"1/15\"));\nconsole.log(simplify(\"1/2\", \"1/16\"));\nconsole.log(simplify(\"1/2\", \"1/17\"));\nconsole.log(simplify(\"1/2\", \"1/18\"));\nconsole.log(simplify(\"1/2\", \"1/19\"));\nconsole.log(simplify(\"1/2\", \"1/20\"));\nconsole.log(simplify(\"1/2\", \"1/21\"));\nconsole.log(simplify(\"1/2\", \"1/22\"));\nconsole.log(simplify(\"1/2\", \"1/23\"));\nconsole.log(simplify(\"1/2\", \"1/24\"));\nconsole.log(simplify(\"1/2\", \"1/25\"));\nconsole.log(simplify(\"1/2\", \"1/26\"));\nconsole.log(simplify(\"1/2\", \"1/27\"));\nconsole.log(simplify(\"1/2\", \"1/28\"));\nconsole.log(simplify(\"1/2\", \"1/29\"));\nconsole.log(simplify(\"1/2\", \"1/30\"));\nconsole.log(simplify(\"1/2\", \"1/31\"));\nconsole.log(simplify(\"1/2\", \"1/32\"));\nconsole.log(simplify(\"1/2\", \"1/33\"));\nconsole.log(simplify(\"1/2\", \"1/34\"));\nconsole.log(simplify(\"1/2\", \"1/35\"));\nconsole.log(simplify(\"1/2\", \"1/36\"));\nconsole.log(simplify(\"1/2\", \"1/37\"));\nconsole.log(simplify(\"1/2\", \"1/38\"));\nconsole.log(simplify(\"1/2\", \"1/39\"));\nconsole.log(simplify(\"1/2\", \"1/40\"));\nconsole.log(simplify(\"1/2\", \"1/41\"));\nconsole.log(simplify(\"1/2\", \"1/42\"));\nconsole.log(simplify(\"1/2\", \"1/43\"));\nconsole.log(simplify(\"1/2\", \"1/44\"));\nconsole.log(simplify(\"1/2\", \"1/45\"));\nconsole.log(simplify(\"1/2\", \"1/46\"));\nconsole.log(simplify(\"1/2\", \"1/47\"));\nconsole.log(simplify(\"1/2\", \"1/48\"));\nconsole.log(simplify(\"1/2\", \"1/49\"));\nconsole.log(simplify(\"1/2\", \"1/50\"));\nconsole.log(simplify(\"1/2\", \"1/51\"));\nconsole.log(simplify(\"1/2\", \"1/52\"));\nconsole.log(simplify(\"1/2\", \"1/53\"));\nconsole.log(simplify(\"1/2\", \"1/54\"));\nconsole.log(simplify(\"1/2\", \"1/55\"));\nconsole.log(simplify(\"1/2\", \"1/56\"));\nconsole.log(simplify(\"1/2\", \"1/57\"));\nconsole.log(simplify(\"1/2\", \"1/58\"));\nconsole.log(simplify(\"1/2\", \"1/59\"));\nconsole.log(simplify(\"1/2\", \"1/60\"));\nconsole.log(simplify(\"1/2\", \"1/61\"));\nconsole.log(simplify(\"1/2\", \"1/62\"));\nconsole.log(simplify(\"1/2\", \"1/63\"));\nconsole.log(simplify(\"1/2\", \"1/64\"));\nconsole.log(simplify(\"1/2\", \"1/65\"));\nconsole.log(simplify(\"1/2\", \"1/66\"));\nconsole.log(simplify(\"1/2\", \"1/67\"));\nconsole.log(simplify(\"1/2\", \"1/68\"));\nconsole.log(simplify(\"1/2\", \"1/69\"));\nconsole.log(simplify(\"1/2\", \"1/70\"));\nconsole.log(simplify(\"1/2\", \"1/71\"));\nconsole.log(simplify(\"1/2\", \"1/72\"));\nconsole.log(simplify(\"1/2\", \"1/73\"));\nconsole.log(simplify(\"1/2\", \"1/74\"));\nconsole.log(simplify(\"1/2\", \"1/75\"));\nconsole.log(simplify(\"1/2\", \"1/76\"));\nconsole.log(simplify(\"1/2\", \"1/77\"));\nconsole.log(simplify(\"1/2\", \"1/78\"));\nconsole.log(simplify(\"1/2\", \"1/79\"));\nconsole.log(simplify(\"1/2\", \"1/80\"));\nconsole.log(simplify(\"1/2\", \"1/81\"));\nconsole.log(simplify(\"1/2\", \"1/82\"));\nconsole.log(simplify(\"1/2\", \"1/83\"));\nconsole.log(simplify(\"1/2\", \"1/84\"));\nconsole.log(simplify(\"1/2\", \"1/85\"));\nconsole.log(simplify(\"1/2\", \"1/86\"));\nconsole.log(simplify(\"1/2\", \"1/87\"));\nconsole.log(simplify(\"1/2\", \"1/88\"));\nconsole.log(simplify(\"1/2\", \"1/89\"));\nconsole.log(simplify(\"1/2\", \"1/90\"));\nconsole.log(simplify(\"1/2\", \"1/91\"));\nconsole.log(simplify(\"1/2\", \"1/92\"));\nconsole.log(simplify(\"1/2\", \"1/93\"));\nconsole.log(simplify(\"1/2\", \"1/94\"));\nconsole.log(simplify(\"1/2\", \"1/95\"));\nconsole.log(simplify(\"1/2\", \"1/96\"));\nconsole.log(simplify(\"1/2\", \"1/97\"));\nconsole.log(simplify(\"1/2\", \"1/98\"));\nconsole.log(simplify(\"1/2\", \"1/99\"));\nconsole.log(simplify(\"1/2\", \"1/100\"));\nconsole.log(simplify(\"1/2\", \"1/101\"));\nconsole.log(simplify(\"1/2\", \"1/102\")); // false\nconsole.log(simplify(\"1/2\", \"1/103\"));\nconsole.log(simplify(\"1/2\", \"1/104\"));\nconsole.log(simplify(\"1/2\", \"1/105\"));\nconsole.log(simplify(\"1/2\", \"1/106\"));\nconsole.log(simplify(\"1/2\", \"1/107\"));\nconsole.log(simplify(\"1/2\", \"1/108\"));\nconsole.log(simplify(\"1/2\", \"1/109\"));\nconsole.log(simplify(\"1/2\", \"1/110\"));\nconsole.log(simplify(\"1/2\", \"1/111\"));\nconsole.log(simplify(\"1/2\", \"1/112\"));\nconsole.log(simplify(\"1/2\", \"1/113\"));\nconsole.log(simplify(\"1/2\", \"1/114\"));\nconsole.log(simplify(\"1/2\", \"1/115\"));\nconsole.log(simplify(\"1/2\", \"1/116\"));\nconsole.log(simplify(\"1/2\", \"1/117\"));\nconsole.log(simplify(\"1/2\", \"1/118\"));\nconsole.log(simplify(\"1/2\", \"1/119\"));\nconsole.log(simplify(\"1/2\", \"1/120\"));\nconsole.log(simplify(\"1/2\", \"1/121\"));\nconsole.log(simplify(\"1/2\", \"1/122\"));\nconsole.log(simplify(\"1/2\", \"1/123\"));\nconsole.log(simplify(\"1/2\", \"1/124\"));\nconsole.log(simplify(\"1/2\", \"1/125\"));\nconsole.log(simplify(\"1/2\", \"1/126\"));\nconsole.log(simplify(\"1/2\", \"1/127\"));\nconsole.log(simplify(\"1/2\", \"1/128\"));\nconsole.log(simplify(\"1/2\", \"1/129\"));\nconsole.log(simplify(\"1/2\", \"1/130\"));\nconsole.log(simplify(\"1/2\", \"1/131\"));\nconsole.log(simplify(\"1/2\", \"1/132\"));\nconsole.log(simplify(\"1/2\", \"1/133\"));\nconsole.log(simplify(\"1/2\", \"1/134\"));\nconsole.log(simplify(\"1/2\", \"1/135\"));\nconsole.log(simplify(\"1/2\", \"1/136\"));\nconsole.log(simplify(\"1/2\", \"1/137\"));\nconsole.log(simplify(\"1/2\", \"1/138\"));\nconsole.log(simplify(\"1/2\", \"1/139\"));\nconsole.log(simplify(\"1/2\", \"1/140\"));\nconsole.log(simplify(\"1/2\", \"1/141\"));\nconsole.log(simplify(\"1/2\", \"1/142\"));\nconsole.log(simplify(\"1/2\", \"1/143\"));\nconsole.log(simplify(\"1/2\", \"1/144\"));\nconsole.log(simplify(\"1/2\", \"1/145\"));\nconsole.log(simplify(\"1/2\", \"1/146\"));\nconsole.log(simplify(\"1/2\", \"1/147\"));\nconsole.log(simplify(\"1/2\", \"1/148\"));\nconsole.log(simplify(\"1/2\", \"1/149\"));\nconsole.log(simplify(\"1/2\", \"1/150\"));\nconsole.log(simplify(\"1/2\", \"1/151\"));\nconsole.log(simplify(\"1/2\", \"1/152\"));\nconsole.log(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return aSum - bSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digitSums[a]\n    const bSum = digitSums[b]\n    return bSum - aSum\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const digitSums = nums.map(n => n.toString().split('').map(Number).reduce((sum, num) => sum + num, 0))\n  return nums.sort((a, b) => {\n    const aSum = digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated the answer. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated the answer. :)\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = a[j];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] === i * i - i + 1) {\n          a[j] = a[k];\n          a[k] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    return planets.map(planet2 => {\n      return [planet, planet2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanets = orbits.map(orbit => {\n    return orbits.map(orbit2 => {\n      return [orbit, orbit2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n    return a[0] - b[0]\n  })\n  return orbitsBetweenPlanetsSorted.map(orbit => {\n    return orbit[0]\n  })\n}\n\n/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    return planets.map(planet2 => {\n      return [planet, planet2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanets = orbits.map(orbit => {\n    return orbits.map(orbit2 => {\n      return [orbit, orbit2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n    return a[1] - b[1]\n  })\n  return orbitsBetweenPlanetsSorted.map(orbit => {\n    return orbit[1]\n  })\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    return planets.map(planet2 => {\n      return [planet, planet2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanets = orbits.map(orbit => {\n    return orbits.map(orbit2 => {\n      return [orbit, orbit2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n    return a[1] - b[1]\n  })\n  return orbitsBetweenPlanetsSorted.map(orbit => {\n    return orbit[1]\n  })\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    return planets.map(planet2 => {\n      return [planet, planet2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanets = orbits.map(orbit => {\n    return orbits.map(orbit2 => {\n      return [orbit, orbit2]\n    }).flat()\n  }).flat()\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n    return a[1] - b[1]\n  })\n  return orbitsBetweenPlanetsSorted.map(orbit => {\n    return orbit[1]\n  })\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < lst[i + 1].length) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  sortedList2.sort((a, b) => a.localeCompare(b));\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums2 = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < lst[i + 1].length) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums3 = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < lst[i + 1].length) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.length - b.length);\n  sortedList2.sort((a, b) => a.localeCompare(b));\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums4 = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < lst[i + 1].length) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums5 = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < lst[i + 1].length) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums6 = (lst) => {\n  const sortedList = [];\n  const sortedList2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < lst[i + 1].length) {\n      sortedList.push(lst[i]);\n    } else {\n      sortedList2.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a.localeCompare(b));\n  sortedList2.sort((a, b) => a.length - b.length);\n  return sortedList.concat(sortedList2);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list that\n  are odd. Ignore numbers that are negative or not integers. If the input list is\n  empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers. If the input\n  list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  const results = []\n  for (let i = 0; i < guesses.length; i++) {\n    if (guesses[i] === scores[i]) {\n      results.push(0)\n    } else {\n      results.push(Math.abs(guesses[i] - scores[i]))\n    }\n  }\n  return results\n}\n\n// Tests\nconst tests = [\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 1],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 3],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 4],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 7],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 8],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 9],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 10],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 11],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 12],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 13],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 14],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 15],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 16],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 17],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 18],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 19],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 20],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 21],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 22],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 23],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 24],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 25],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 26],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 27],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 28],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 29],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 30],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 31],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 32],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 33],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 34],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 35],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 36],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 37],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 38],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 39],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 40],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 41],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 42],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 43],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 44],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 45],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 46],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 47],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 48],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 49],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 50],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 51],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 52],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 53],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 54],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 55],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 56],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 57],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 58],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 59],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 60],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 61],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 62],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 63],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 64],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 65],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 66],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 67],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 68],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 69],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 70],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 71],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 72],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 73],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 74],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 75],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 76],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 77],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 78],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 79],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 80],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_lower = class_name.toLowerCase();\n  const extensions_lower = extensions.map(extension => extension.toLowerCase());\n  const extensions_count = extensions_lower.length;\n  const class_name_count = class_name_lower.length;\n  const strength = extensions_count - class_name_count;\n  return class_name + extensions[extensions_lower.indexOf(strength > 0? strength : extensions_lower.shift())];\n};\n\n/*\n  Given a class name, a list of the extensions, and a list of the methods,\n  find the name of the class with the strongest number of methods.\n  For example, given the following input:\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method','my_twelfth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method','my_twelfth_method','my_thirteenth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method','my_twelfth_method','my_thirteenth_method','my_fourteenth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method','my_twelfth_method','my_thirteenth_method','my_fourteenth_method','my_fifteenth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method','my_twelfth_method','my_thirteenth_method','my_fourteenth_method','my_fifteenth_method','my_sixteenth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method','my_tenth_method','my_eleventh_method','my_twelfth_method','my_thirteenth_method','my_fourteenth_method','my_fifteenth_method','my_sixteenth_method','my_seventeenth_method') ->'my_class.Be'\n  strongestMethod('my_class', ['AA', 'Be', 'CC'],'my_method','my_other_method','my_third_method','my_fourth_method','my_fifth_method','my_sixth_method','my_seventh_method','my_eighth_method','my_ninth_method', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let flag = false;\n  for (let i = 0; i < aArr.length; i++) {\n    if (bArr.includes(aArr[i])) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 2) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a new string where all occurrences of its first character have been replaced with 'x'.\n\n   Example:\n      replaceFirst('abc', 'a', 'x') ==> 'xbc'\n      replaceFirst('abc', 'a', 'x') ==> 'xxbc'\n      replaceFirst('abc', 'a', 'x') ==> 'x'\n      replaceFirst('abc', 'a', 'x') ==> 'x'\n*/\nconst replaceFirst = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its last character have been replaced with 'x'.\n\n   Example:\n      replaceLast('abc', 'a', 'x') ==> 'abcx'\n      replaceLast('abc', 'a', 'x') ==> 'abcxx'\n      replaceLast('abc', 'a', 'x') ==> 'abcx'\n      replaceLast('abc', 'a', 'x') ==> 'abcx'\n*/\nconst replaceLast = (str, char, replacement) => {\n  let newString = str;\n  for (let i = newString.length - 1; i >= 0; i--) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle character have been replaced with 'x'.\n\n   Example:\n      replaceMiddle('abc', 'a', 'x') ==> 'axbc'\n      replaceMiddle('abc', 'a', 'x') ==> 'axbxc'\n      replaceMiddle('abc', 'a', 'x') ==> 'axbxc'\n      replaceMiddle('abc', 'a', 'x') ==> 'axbxc'\n*/\nconst replaceMiddle = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length - 1; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle and last character have been replaced with 'x'.\n\n   Example:\n      replaceMiddleAndLast('abc', 'a', 'x') ==> 'axbxc'\n      replaceMiddleAndLast('abc', 'a', 'x') ==> 'axbxcx'\n      replaceMiddleAndLast('abc', 'a', 'x') ==> 'axbxcx'\n      replaceMiddleAndLast('abc', 'a', 'x') ==> 'axbxcx'\n*/\nconst replaceMiddleAndLast = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length - 1; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle and first character have been replaced with 'x'.\n\n   Example:\n      replaceMiddleAndFirst('abc', 'a', 'x') ==> 'xabc'\n      replaceMiddleAndFirst('abc', 'a', 'x') ==> 'xabxc'\n      replaceMiddleAndFirst('abc', 'a', 'x') ==> 'xabxc'\n      replaceMiddleAndFirst('abc', 'a', 'x') ==> 'xabxc'\n*/\nconst replaceMiddleAndFirst = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length - 1; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle and first and last character have been replaced with 'x'.\n\n   Example:\n      replaceMiddleAndFirstAndLast('abc', 'a', 'x') ==> 'xabxc'\n      replaceMiddleAndFirstAndLast('abc', 'a', 'x') ==> 'xabxcx'\n      replaceMiddleAndFirstAndLast('abc', 'a', 'x') ==> 'xabxcx'\n      replaceMiddleAndFirstAndLast('abc', 'a', 'x') ==> 'xabxcx'\n*/\nconst replaceMiddleAndFirstAndLast = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length - 1; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle and first and last and middle character have been replaced with 'x'.\n\n   Example:\n      replaceMiddleAndFirstAndLastAndMiddle('abc', 'a', 'x') ==> 'xabxcx'\n      replaceMiddleAndFirstAndLastAndMiddle('abc', 'a', 'x') ==> 'xabxcxax'\n      replaceMiddleAndFirstAndLastAndMiddle('abc', 'a', 'x') ==> 'xabxcxax'\n      replaceMiddleAndFirstAndLastAndMiddle('abc', 'a', 'x') ==> 'xabxcxax'\n*/\nconst replaceMiddleAndFirstAndLastAndMiddle = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length - 1; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle and first and last and middle and last character have been replaced with 'x'.\n\n   Example:\n      replaceMiddleAndFirstAndLastAndMiddleAndLast('abc', 'a', 'x') ==> 'xabxcxaxbxc'\n      replaceMiddleAndFirstAndLastAndMiddleAndLast('abc', 'a', 'x') ==> 'xabxcxaxbxcx'\n      replaceMiddleAndFirstAndLastAndMiddleAndLast('abc', 'a', 'x') ==> 'xabxcxaxbxcx'\n      replaceMiddleAndFirstAndLastAndMiddleAndLast('abc', 'a', 'x') ==> 'xabxcxaxbxcx'\n*/\nconst replaceMiddleAndFirstAndLastAndMiddleAndLast = (str, char, replacement) => {\n  let newString = str;\n  for (let i = 0; i < newString.length - 1; i++) {\n    if (newString[i] === char) {\n      newString = newString.replace(char, replacement);\n    }\n  }\n  return newString;\n};\n\n/*Given a string, return a new string where all occurrences of its middle and first and last and middle and last and middle character have been replaced with 'x'.\n\n   Example:\n      replaceMiddleAndFirstAndLastAndMiddleAndLastAndMiddle('abc', 'a', 'x') ==> 'xabxcxaxbxcxaxbxc'\n      replaceMiddleAndFirstAndLastAndMiddleAndLastAndMiddle('abc', 'a', 'x') ==> 'xabxcxaxbxcxaxbxcx'\n      replaceMiddleAndFirstAndLastAndMiddleAndLastAndMiddle('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let numStr = number.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    const char = numStr.charAt(i);\n    if (char === '0') {\n      roman += 'i';\n    } else if (char === '1') {\n      roman += 'v';\n    } else if (char === '2') {\n      roman += 'vi';\n    } else if (char === '3') {\n      roman += 'vii';\n    } else if (char === '4') {\n      roman += 'viii';\n    } else if (char === '5') {\n      roman += 'ix';\n    } else if (char === '6') {\n      roman += 'x';\n    } else if (char === '7') {\n      roman += 'xi';\n    } else if (char === '8') {\n      roman += 'xii';\n    } else if (char === '9') {\n      roman += 'xiii';\n    } else if (char === 'a') {\n      roman += 'a';\n    } else if (char === 'b') {\n      roman += 'b';\n    } else if (char === 'c') {\n      roman += 'c';\n    } else if (char === 'd') {\n      roman += 'd';\n    } else if (char === 'e') {\n      roman += 'e';\n    } else if (char === 'f') {\n      roman += 'f';\n    } else if (char === 'g') {\n      roman += 'g';\n    } else if (char === 'h') {\n      roman += 'h';\n    } else if (char === 'i') {\n      roman += 'i';\n    } else if (char === 'j') {\n      roman += 'j';\n    } else if (char === 'k') {\n      roman += 'k';\n    } else if (char === 'l') {\n      roman += 'l';\n    } else if (char ==='m') {\n      roman +='m';\n    } else if (char === 'n') {\n      roman += 'n';\n    } else if (char === 'o') {\n      roman += 'o';\n    } else if (char === 'p') {\n      roman += 'p';\n    } else if (char === 'q') {\n      roman += 'q';\n    } else if (char === 'r') {\n      roman += 'r';\n    } else if (char ==='s') {\n      roman +='s';\n    } else if (char === 't') {\n      roman += 't';\n    } else if (char === 'u') {\n      roman += 'u';\n    } else if (char === 'v') {\n      roman += 'v';\n    } else if (char === 'w') {\n      roman += 'w';\n    } else if (char === 'x') {\n      roman += 'x';\n    } else if (char === 'y') {\n      roman += 'y';\n    } else if (char === 'z') {\n      roman += 'z';\n    }\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '427'\n  */\nconst intToDecimal = (number) => {\n  let decimal = '';\n  let numStr = number.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    const char = numStr.charAt(i);\n    if (char === '0') {\n      decimal += '0';\n    } else if (char === '1') {\n      decimal += '1';\n    } else if (char === '2') {\n      decimal += '2';\n    } else if (char === '3') {\n      decimal += '3';\n    } else if (char === '4') {\n      decimal += '4';\n    } else if (char === '5') {\n      decimal += '5';\n    } else if (char === '6') {\n      decimal += '6';\n    } else if (char === '7') {\n      decimal += '7';\n    } else if (char === '8') {\n      decimal += '8';\n    } else if (char === '9') {\n      decimal += '9';\n    } else if (char === 'a') {\n      decimal += 'a';\n    } else if (char === 'b') {\n      decimal += 'b';\n    } else if (char === 'c') {\n      decimal += 'c';\n    } else if (char === 'd') {\n      decimal += 'd';\n    } else if (char === 'e') {\n      decimal += 'e';\n    } else if (char === 'f') {\n      decimal += 'f';\n    } else if (char === 'g') {\n      decimal += 'g';\n    } else if (char === 'h') {\n      decimal += 'h';\n    } else if (char === 'i') {\n      decimal += 'i';\n    } else if (char === 'j') {\n      decimal += 'j';\n    } else if (char === 'k') {\n      decimal += 'k';\n    } else if (char === 'l') {\n      decimal += 'l';\n    } else if (char ==='m') {\n      decimal +='m';\n    } else if (char === 'n') {\n      decimal += 'n';\n    } else if (char === 'o') {\n      decimal += 'o';\n    } else if (char === 'p') {\n      decimal += 'p';\n    } else if (char === 'q') {\n      decimal += 'q';\n    } else if (char === 'r') {\n      decimal += 'r';\n    } else if (char ==='s') {\n      decimal +='s';\n    } else if (char === 't') {\n      decimal += 't';\n    } else if (char === 'u') {\n      decimal += 'u';\n    } else if (char === 'v') {\n      decimal += 'v';\n    } else if (char === 'w') {\n      decimal += 'w';\n    } else if (char === 'x') {\n      decimal += 'x';\n    } else if (char === 'y') {\n      decimal += 'y';\n    } else if (char === 'z') {\n      decimal += 'z';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '427'\n  */\nconst intToHex = (number) => {\n  let hex = '';\n  let numStr = number.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    const char = numStr.charAt(i);\n    if (char === '0') {\n      hex += '0';\n    } else if (char === '1') {\n      hex += '1';\n    } else if (char === '2') {\n      hex += '2';\n    } else if (char === '3') {\n      hex += '3';\n    } else if (char === '4') {\n      hex += '4';\n    } else if (char === '5') {\n      hex += '5';\n    } else if (char === '6') {\n      hex += '6';\n    } else if (char === '7') {\n      hex += '7';\n    } else if (char === '8') {\n      hex += '8';\n    } else if (char === '9') {\n      hex += '9';\n    } else if (char === 'a') {\n      hex += 'a';\n    } else if (char === 'b') {\n      hex += 'b';\n    } else if (char === 'c') {\n      hex += 'c';\n    } else if (char === 'd') {\n      hex += 'd';\n    } else if (char === 'e') {\n      hex += 'e';\n    } else if (char === 'f') {\n      hex += 'f';\n    } else if (char === 'g') {\n      hex += 'g';\n    } else if (char === 'h') {\n      hex += 'h';\n    } else if (char === 'i') {\n      hex += 'i';\n    } else if (char === 'j') {\n      hex += 'j';\n    } else if (char === 'k') {\n      hex += 'k';\n    } else if (char === 'l') {\n      hex += 'l';\n    } else if (char ==='m') {\n      hex +='m';\n    } else if (char === 'n') {\n      hex += 'n';\n    } else if (char === 'o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0 && ab <= bc && ab <= c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0 && ab <= bc && ab <= c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0 && ab <= bc && ab <= c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  return ab >= 0 && bc >= 0 && ab <= bc && ab <= c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMin([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst foundMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  foundMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMaxUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst foundMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of unique\n  characters. If multiple strings have minimum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  foundMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMinUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"bb\"\n  */\nconst foundMinUnique = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  foundMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMaxUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"bb\"\n  */\nconst foundMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of unique\n  characters. If multiple strings have minimum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  foundMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMinUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"string\"\n  */\nconst foundMinUnique = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  foundMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMaxUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"string\"\n  */\nconst foundMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of unique\n  characters. If multiple strings have minimum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  foundMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMinUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  foundMinUnique([\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    carrots += 1;\n    needs = needs - 1;\n  }\n  \n  while (carrots > 0) {\n    carrots -= 1;\n    remaining += 1;\n    result.push(remaining);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    carrots += 1;\n    needs = needs - 1;\n  }\n  \n  while (carrots > 0) {\n    carrots -= 1;\n    remaining += 1;\n    result.push(remaining);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    carrots += 1;\n    needs = needs - 1;\n  }\n  \n  while (carrots > 0) {\n    carrots -= 1;\n    remaining += 1;\n    result.push(remaining);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    carrots += 1;\n    needs = needs - 1;\n  }\n  \n  while (carrots > 0) {\n    carrots -= 1;\n    remaining += 1;\n    result.push(remaining);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i])!== i) {\n      distincterChars++;\n    }\n  }\n  return distincterChars;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distincterChar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Your task is to find and print all substrings of length k that \n  consist only of letters from the given string.\n  Examples\n  substrings(\"ab\", 2) = [\"ab\", \"ba\"]\n  substrings(\"ab\", 3) = [\"ab\", \"ba\", \"b\"]\n  substrings(\"ab\", 4) = [\"ab\", \"ba\", \"b\", \"a\"]\n  substrings(\"ab\", 5) = [\"ab\", \"ba\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 6) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\"]\n  substrings(\"ab\", 7) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 8) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]\n  substrings(\"ab\", 9) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 10) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 11) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 12) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 13) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 14) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 15) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 16) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\n  substrings(\"ab\", 17) = [\"ab\", \"ba\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a33b28acfcaeab7bdc4123ea8'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha1')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9424c10d46199e4c4d359a48f'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '8278fa6aa9c60e86afcaeab7bdc4123ea8dc0f90a2b5806ad41c7a47d1386afa7'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a33b28acfcaeab7bdc4123ea8'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a33b28acfcaeab7bdc4123ea8'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a33b28acfcaeab7bdc4123ea8'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a33b28acfcaeab7bdc4123ea8'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a33b28acfcaeab7bdc4123ea8'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation. For example: 5 in base 10 returns 5, and 12 in base 10\n  returns 3.\n\n  For example:\n  digitsInBase10(5) => 5\n  digitsInBase10(12) => 3\n  */\nconst digitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation. For example: 5 in base 10 returns 5, and 12 in base 10\n  returns 3.\n\n  For example:\n  digitsInBase10(5) => 5\n  digitsInBase10(12) => 3\n  */\nconst digitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation. For example: 5 in base 10 returns 5, and 12 in base 10\n  returns 3.\n\n  For example:\n  digitsInBase10(5) => 5\n  digitsInBase10(12) => 3\n  */\nconst digitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation. For example: 5 in base 10 returns 5, and 12 in base 10\n  returns 3.\n\n  For example:\n  digitsInBase10(5) => 5\n  digitsInBase10(12) => 3\n  */\nconst digitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation. For example: 5 in base 10 returns 5, and 12 in base 10\n  returns 3.\n\n  For example:\n  digitsInBase10(5) => 5\n  digitsInBase10(12) => 3\n  */\nconst digitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in base 10.\n\n  For example:\n  sumOfDigitsInBase10(5) => 5\n  sumOfDigitsInBase10(12) => 13\n  */\nconst sumOfDigitsInBase10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_key = music_note[0];\n    const music_note_value = music_note[1];\n    music_notes_map.set(music_note_key, music_note_value);\n  }\n  const music_notes_array = Array.from(music_notes_map.values());\n  const music_notes_array_length = music_notes_array.length;\n  const music_notes_array_map = new Map();\n  for (let i = 0; i < music_notes_array_length; i++) {\n    const music_notes_array_value = music_notes_array[i];\n    const music_notes_array_key = music_notes_array[i];\n    music_notes_array_map.set(music_notes_array_key, music_notes_array_value);\n  }\n  const music_notes_array_array = Array.from(music_notes_array_map.values());\n  const music_notes_array_array_length = music_notes_array_array.length;\n  const music_notes_array_array_map = new Map();\n  for (let i = 0; i < music_notes_array_array_length; i++) {\n    const music_notes_array_array_value = music_notes_array_array[i];\n    const music_notes_array_array_key = music_notes_array_array[i];\n    music_notes_array_array_map.set(music_notes_array_array_key, music_notes_array_array_value);\n  }\n  const music_notes_array_array_array_length = music_notes_array_array_array.length;\n  const music_notes_array_array_array_map = new Map();\n  for (let i = 0; i < music_notes_array_array_array_length; i++) {\n    const music_notes_array_array_array_value = music_notes_array_array_array[i];\n    const music_notes_array_array_array_key = music_notes_array_array_array[i];\n    music_notes_array_array_array_map.set(music_notes_array_array_array_key, music_notes_array_array_array_value);\n  }\n  const music_notes_array_array_array_array_length = music_notes_array_array_array_array.length;\n  const music_notes_array_array_array_array_map = new Map();\n  for (let i = 0; i < music_notes_array_array_array_array_length; i++) {\n    const music_notes_array_array_array_array_value = music_notes_array_array_array_array[i];\n    const music_notes_array_array_array_array_key = music_notes_array_array_array_array[i];\n    music_notes_array_array_array_array_map.set(music_notes_array_array_array_array_key, music_notes_array_array_array_array_array_value);\n  }\n  const music_notes_array_array_array_array_array_length = music_notes_array_array_array_array_array.length;\n  const music_notes_array_array_array_array_array_map = new Map();\n  for (let i = 0; i < music_notes_array_array_array_array_array_length; i++) {\n    const music_notes_array_array_array_array_array_value = music_notes_array_array_array_array_array_array[i];\n    const music_notes_array_array_array_array_array_array_key = music_notes_array_array_array_array_array_array[i];\n    music_notes_array_array_array_array_array_array_map.set(music_notes_array_array_array_array_array_array_array_key, music_notes_array_array_array_array_array_array_array_value);\n  }\n  const music_notes_array_array_array_array_array_array_array_length = music_notes_array_array_array_array_array_array_array_array.length;\n  const music_notes_array_array_array_array_array_array_array_array_map = new Map();\n  for (let i = 0; i < music_notes_array_array_array_array_array_array_array_array_length; i++) {\n    const music_notes_array_array_array_array_array_array_array_array_array_value = music_notes_array_array_array_array_array_array_array_array_array[i];\n    const music_notes_array_array_array_array_array_array_array_array_array_key = music_notes_array_array_array_array_array_array_array_array_array[i];\n    music_notes_array_array_array_array_array_array_array_array_array_map.set(music_notes_array_array_array_array_array_array_array_array_array_array_key, music_notes_array_array_array_array_array_array_array_array_array_array_value);\n  }\n  const music_notes_array_array_array_array_array_array_array_array_array_array_length = music_notes_array_array_array_array_array_array_array_array_array_array_array_array.length;\n  const music_notes_array_array_array_array_array_array_array_array_array_array_array_array_map = new Map();\n  for (let i = 0; i < music_notes_array_array_array_array_array_array_array_array_array_array_array_array_length; i++) {\n    const music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array_value = music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array[i];\n    const music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array_key = music_notes_array_array_array_array_array_array_array_array_array_array_array_array[i];\n    music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array_map.set(music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array_array_key, music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_value);\n  }\n  const music_notes_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_array_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count += 1\n    }\n    index++\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sortsLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedLetterArray = letterArray.sort((a, b) => a - b);\n  return sortedLetterArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a space-delimited string of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with words sorted from smallest to largest\n  >>> sortsWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort((a, b) => a.length - b.length);\n  return sortedWordArray.join(' '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');\n  return parseInt(integerPart);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPartToNearest = (number, decimals) => {\n  const [integerPart, decimalPart] = number.toFixed(decimals).split('.');", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.slice(0, 2);\n  return [closestElements[0], closestElements[1]];\n};\n\n/**\n * Given a number and a range, find the closest number in the range that is a multiple of the number.\n * If the number is not in the range, it returns the number itself.\n * If the range is only one number, the number itself is returned.\n * If the range is more than one number, the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number closest to the number itself is returned.\n * If the range is more than one number, the number closest to the number closest to the number closest to the number closest to the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFloat(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') length++\n  }\n  return length\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strfind('abc', 'a')\n  0\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'c')\n  -1\n  */\nconst strfind = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrfind('abc', 'a')\n  3\n  >>> strrfind('abc', 'b')\n  1\n  >>> strrfind('abc', 'c')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  1\n  >>> strrindex('abc', 'c')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given substring in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor > maxDivisor) {\n        maxDivisor = divisor;\n        maxDivisorFactor = i;\n      }\n    }\n  }\n  return maxDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i;\n      }\n    }\n  }\n  return minDivisorFactor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (n % divisor === 0) {\n        divisor++;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes2 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes3 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes4 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes5 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes6 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes7 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes8 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes9 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes10 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes11 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const newArray = [];\n  numbers.forEach((num) => {\n    if (newArray.indexOf(num) === -1) {\n      newArray.push(num);\n    }\n  });\n  return newArray;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipsCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst flipCases = (string) => {\n  return string.toLowerCase().split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, flip all uppercase letters to lowercase and lowercase letters to uppercase.\n  >>> flipCases('HELLO')\n  'hELLO'\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((string, stringToAppend) => {\n    return string + stringToAppend;\n  }, '');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a', '']\n  >>> toCharArray('ab')\n  ['a', 'b', '']\n  >>> toCharArray('abc')\n  ['a', 'b', 'c', '']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* Convert an array of characters to a string\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.join('');\n};\n\n/* Convert a string to an array of characters\n  >>> toCharArray('a')\n  ['a']\n  >>> toCharArray('ab')\n  ['ab']\n  >>> toCharArray('abc')\n  ['abc']\n  */\nconst toCharArray = (string) => {\n  return string.split('');\n};\n\n/* ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given sub", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZero", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -3]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n  */\nconst gottenNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return the sum of all the numbers in the list.\n  >>> sum([-1, 2, -4, 5, 6])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst sum = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\n/*Return the average of the numbers in the list.\n  >>> average([-1, 2, -4, 5, 6])\n  1.5\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.3\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of the numbers in the list.\n  >>> median([-1, 2, -4, 5, 6])\n  -1\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    counts[x] = (counts[x] || 0) + 1;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? null : maxCountIndex;\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([-1, 2, -4, 5, 6])\n  -1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPri", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxNonZeroCoefficient = i;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      zeroPoint = i;\n    }\n  }\n  return zeroPoint + maxNonZeroCoefficient * Math.pow(10, xs.length - 1);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds maximum value from given xs.\n  findMax returns only maximum value point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxValue = 0;\n  let maxValuePoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > maxValue) {\n      maxValue = xs[i];\n      maxValuePoint = i;\n    }\n  }\n  return maxValuePoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds minimum value from given xs.\n  findMin returns only minimum value point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minValue = 0;\n  let minValuePoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < minValue) {\n      minValue = xs[i];\n      minValuePoint = i;\n    }\n  }\n  return minValuePoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoot finds root of polynomial with coefficients xs.\n  findRoot returns only root point, even if there are many.\n  Moreover, findRoot only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot = (xs) => {\n  let rootPoint = 0;\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxNonZeroCoefficient = i;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      rootPoint = i;\n    }\n  }\n  return rootPoint + maxNonZeroCoefficient * Math.pow(10, xs.length - 1);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoots finds roots of polynomial with coefficients xs.\n  findRoots returns only roots point, even if there are many.\n  Moreover, findRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoots = (xs) => {\n  let rootPoints = [];\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxNonZeroCoefficient = i;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      rootPoints.push(i);\n    }\n  }\n  return rootPoints;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRootsOf finds roots of polynomial with coefficients xs.\n  findRootsOf returns only roots point, even if there are many.\n  Moreover, findRootsOf only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRootsOf([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRootsOf([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRootsOf = (xs) => {\n  let rootPoints = [];\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxNonZeroCoefficient = i;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      rootPoints.push(i);\n    }\n  }\n  return rootPoints;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRootsOf finds roots of polynomial with coefficients xs.\n  findRootsOf returns only roots point, even if there are many.\n  Moreover, findRootsOf only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRootsOf([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRootsOf([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRootsOf = (xs) => {\n  let rootPoints = [];\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      maxNonZeroCoefficient = i;\n    }\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      rootPoints.push(i);\n    }\n  }\n  return rootPoints;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRootsOf finds roots of polynomial with coefficients xs.\n  findRootsOf ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsFifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsFifth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsSeventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsSeventh = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsNinth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsNinth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTenth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty ones, while its values at the indicies that are divisible by twenty ones are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentyOnes([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentyOnes([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTwentyOnes = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 21 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty twos, while its values at the indicies that are divisible by twenty twos are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentyTwos([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentyTwos([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTwentyTwos = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 22 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty threes, while its values at the indicies that are divisible by twenty threes are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentyThrees([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentyThrees([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTwentyThrees = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 23 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty fours, while its values at the indicies that are divisible by twenty fours are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentyFours([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentyFours([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTwentyFours = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 24 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (l, f) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElements = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst sumLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  0\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sumEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not equal to the given number.\n  >>> sumNotEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumNotEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumNotEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not less than the given number.\n  >>> sumNotLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumNotLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumNotLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not less than or equal to the given number.\n  >>> sumNotLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumNotLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumNotLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not greater than the given number.\n  >>> sumNotGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumNotGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumNotGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not greater than or equal to the given number.\n  >>> sumNotGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumNotGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumNotGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not equal to the given number.\n  >>> sumNotEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumNotEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  */\nconst sumNotEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are not less than the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  1\n  >>> fizzBuzzes(79)\n  1\n  */\nconst fizzBuzzes3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes3(50)\n  0\n  >>> fizzBuzzes3(78)\n  1\n  >>> fizzBuzzes3(79)\n  1\n  */\nconst fizzBuzzes5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes5(50)\n  0\n  >>> fizzBuzzes5(78)\n  1\n  >>> fizzBuzzes5(79)\n  1\n  */\nconst fizzBuzzes7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes7(50)\n  0\n  >>> fizzBuzzes7(78)\n  1\n  >>> fizzBuzzes7(79)\n  1\n  */\nconst fizzBuzzes11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes11(50)\n  0\n  >>> fizzBuzzes11(78)\n  1\n  >>> fizzBuzzes11(79)\n  1\n  */\nconst fizzBuzzes13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes13(50)\n  0\n  >>> fizzBuzzes13(78)\n  1\n  >>> fizzBuzzes13(79)\n  1\n  */\nconst fizzBuzzesFizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0 || i % 19 === 0 || i % 21 === 0 || i % 23 === 0 || i % 25 === 0 || i % 27 === 0 || i % 29 === 0 || i % 31 === 0 || i % 33 === 0 || i % 35 === 0 || i % 37 === 0 || i % 39 === 0 || i % 41 === 0 || i % 43 === 0 || i % 45 === 0 || i % 47 === 0 || i % 49 === 0 || i % 51 === 0 || i % 53 === 0 || i % 55 === 0 || i % 57 === 0 || i % 59 === 0 || i % 61 === 0 || i % 63 === 0 || i % 65 === 0 || i % 67 === 0 || i % 69 === 0 || i % 71 === 0 || i % 73 === 0 || i % 75 === 0 || i % 77 === 0 || i % 79 === 0 || i % 81 === 0 || i % 83 === 0 || i % 85 === 0 || i % 87 === 0 || i % 89 === 0 || i % 91 === 0 || i % 93 === 0 || i % 95 === 0 || i % 97 === 0 || i % 99 === 0 || i % 101 === 0 || i % 103 === 0 || i % 105 === 0 || i % 107 === 0 || i % 109 === 0 || i % 111 === 0 || i % 113 === 0 || i % 115 === 0 || i % 117 === 0 || i % 119 === 0 || i % 121 === 0 || i % 123 === 0 || i % 125 === 0 || i % 127 === 0 || i % 129 === 0 || i % 131 === 0 || i % 133 === 0 || i % 135 === 0 || i % 137 === 0 || i % 139 === 0 || i % 141 === 0 || i % 143 === 0 || i % 145 === 0 || i % 147 === 0 || i % 149 === 0 || i % 151 === 0 || i % 153 === 0 || i % 155 === 0 || i % 157 === 0 || i % 159 === 0 || i % 161 === 0 || i % 163 === 0 || i % 165 === 0 || i % 167 === 0 || i % 169 === 0 || i % 171 === 0 || i % 173 === 0 || i % 175 === 0 || i % 177 === 0 || i % 179 === 0 || i % 181 === 0 || i % 183 === 0 || i % 185 === 0 || i % 187 === 0 || i % 189 === 0 || i % 191 === 0 || i % 193 === 0 || i % 195 === 0 || i % 197 === 0 || i % 199 === 0 || i % 201 === 0 || i % 203 === 0 || i % 205 === 0 || i % 207 === 0 || i % 209 === 0 || i % 211 === 0 || i % 213 === 0 || i % 215 === 0 || i % 217 === 0 || i % 219 === 0 || i % 221 === 0 || i % 223 === 0 || i % 225 === 0 || i % 227 === 0 || i % 229 === 0 || i % 231 === 0 || i % 233 === 0 || i % 235 === 0 || i % 237 === 0 || i % 239 === 0 || i % 241 === 0 || i % 243 === 0 || i % 245 === 0 || i % 247 === 0 || i % 249 === 0 || i % 251 === 0 || i % 253 === 0 || i % 255 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzesFizzBuzz(50)\n  0\n  >>> fizzBuzzesFizzBuzz(78)\n  1\n  >>> fizzBuzzesFizzBuzz(79)\n  1\n  */\nconst fizzBuzzesFizzBuzz3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0 || i % 19 === 0 || i % 21 === 0 || i % 23 === 0 || i % 25 === 0 || i % 27 === 0 || i % 29 === 0 || i % 31 === 0 || i % 33 === 0 || i % 35 === 0 || i % 37 === 0 || i % 39 === 0 || i % 41 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((_, i) => i % 2 === 0);\n  const odd = l.filter((_, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const meaner = mean(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - meaner, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianerAbsolutesDeviation = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - median, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> modeAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst modeAbsolutesDeviation = (numbers) => {\n  const mode = mode(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - mode, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianerAbsolutesDeviation = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - median, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const meaner = mean(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - meaner, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianerAbsolutesDeviation = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - median, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> modeAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst modeAbsolutesDeviation = (numbers) => {\n  const mode = mode(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - mode, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianerAbsolutesDeviation = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - median, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const meaner = mean(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - meaner, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> medianerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianerAbsolutesDeviation = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - median, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> modeAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst modeAbsolutesDeviation = (numbers) => {\n  const mode = mode(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - mode, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absol", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSumIndex === 0;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  const maxSum = l.reduce((a, b) => a + b, 0);\n  const maxSumIndex = 0;\n  for (let i = 1; i < n; ++i) {\n    const sum = l[i] + l[i - 1];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumIndex = i;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 45, 15, 30, 45, 15, 30, 45]\n  */\nconst multLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] * i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 45, 15, 30, 45, 15, 30, 45]\n  */\nconst multLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] * i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 45, 15, 30, 45, 15, 30, 45]\n  */\nconst multLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] * i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 45, 15, 30, 45, 15, 30, 45]\n  */\nconst multLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] * i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 45, 15, 30, 45, 15, 30, 45]\n  */\nconst multLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] * i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst divLists = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] / i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let pairSumsFound = false;\n  let pairSumsFound2 = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairSumsFound = true;\n        pairSumsFound2 = true;\n        break;\n      }\n    }\n  }\n  return pairSumsFound && pairSumsFound2;\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Given a binary number represented as a string, return its decimal equivalent.\n  >>> binaryToDecimal('1100')\n  5\n  >>> binaryToDecimal('1110')\n  6\n  >>> binaryToDecimal('1111')\n  7\n  >>> binaryToDecimal('11111')\n  8\n  >>> binaryToDecimal('111111')\n  9\n  >>> binaryToDecimal('1111111')\n  10\n  >>> binaryToDecimal('11111111')\n  11\n  >>> binaryToDecimal('111111111')\n  12\n  >>> binaryToDecimal('1111111111')\n  13\n  >>> binaryToDecimal('11111111111')\n  14\n  >>> binaryToDecimal('111111111111')\n  15\n  >>> binaryToDecimal('1111111111111')\n  16\n  >>> binaryToDecimal('11111111111111')\n  17\n  >>> binaryToDecimal('111111111111111')\n  18\n  >>> binaryToDecimal('1111111111111110')\n  19\n  >>> binaryToDecimal('11111111111111110')\n  20\n  >>> binaryToDecimal('111111111111111101')\n  21\n  >>> binaryToDecimal('1111111111111111010')\n  22\n  >>> binaryToDecimal('11111111111111110100')\n  23\n  >>> binaryToDecimal('111111111111111101000')\n  24\n  >>> binaryToDecimal('1111111111111111010000')\n  25\n  >>> binaryToDecimal('11111111111111110100000')\n  26\n  >>> binaryToDecimal('111111111111111101000000')\n  27\n  >>> binaryToDecimal('1111111111111111010000000')\n  28\n  >>> binaryToDecimal('11111111111111110100000000')\n  29\n  >>> binaryToDecimal('111111111111111101000000000')\n  30\n  >>> binaryToDecimal('1111111111111111010000000000')\n  31\n  >>> binaryToDecimal('11111111111111110100000000000')\n  32\n  >>> binaryToDecimal('111111111111111101000000000000')\n  33\n  >>> binaryToDecimal('1111111111111111010000000000000')\n  34\n  >>> binaryToDecimal('11111111111111110100000000000000')\n  35\n  >>> binaryToDecimal('111111111111111101000000000000000')\n  36\n  >>> binaryToDecimal('1111111111111111010000000000000000')\n  37\n  >>> binaryToDecimal('11111111111111110100000000000000000')\n  38\n  >>> binaryToDecimal('111111111111111101000000000000000000')\n  39\n  >>> binaryToDecimal('1111111111111111010000000000000000000')\n  40\n  >>> binaryToDecimal('11111111111111110100000000000000000000')\n  41\n  >>> binaryToDecimal('111111111111111101000000000000000000000')\n  42\n  >>> binaryToDecimal('1111111111111111010000000000000000000000')\n  43\n  >>> binaryToDecimal('11111111111111110100000000000000000000000')\n  44\n  >>> binaryToDecimal('111111111111111101000000000000000000000000')\n  45\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000')\n  46\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000')\n  47\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000')\n  48\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000')\n  49\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000')\n  50\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000')\n  51\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000')\n  52\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000')\n  53\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000')\n  54\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000')\n  55\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000')\n  56\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000')\n  57\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000')\n  58\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000')\n  59\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000')\n  60\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000')\n  61\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000')\n  62\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000')\n  63\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000')\n  64\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000')\n  65\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000')\n  66\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000')\n  67\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000000')\n  68\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000000')\n  69\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000000')\n  70\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000000000')\n  71\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000000000')\n  72\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000000000')\n  73\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000000000000')\n  74\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000000000000')\n  75\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000000000000')\n  76\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000000000000000')\n  77\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000000000000000')\n  78\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000000000000000')\n  79\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000000000000000000')\n  80\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000000000000000000')\n  81\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000000000000000000')\n  82\n  >>> binaryToDecimal('11111111111111110100000000000000000000000000000000000000000000000000000000000000')\n  83\n  >>> binaryToDecimal('111111111111111101000000000000000000000000000000000000000000000000000000000000000')\n  84\n  >>> binaryToDecimal('1111111111111111010000000000000000000000000000000000000000000000000000000000000000')\n  85\n  >>> binary", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresAreas(5, 3)\n  7.5\n  */\nconst squaresAreas = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesAreas(5, 3)\n  7.5\n  */\nconst circlesAreas = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesCircumference(5, 3)\n  7.5\n  */\nconst trianglesCircumference = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresCircumference(5, 3)\n  7.5\n  */\nconst squaresCircumference = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesCircumference(5, 3)\n  7.5\n  */\nconst circlesCircumference = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesPerimeter(5, 3)\n  7.5\n  */\nconst circlesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesPerimeter(5, 3)\n  7.5\n  */\nconst circlesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesPerimeter(5, 3)\n  7.5\n  */\nconst circlesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesPerimeter(5, 3)\n  7.5\n  */\nconst circlesPerimeter = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * (Math.sqrt(3) / 2);\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 2;\n  } else if (n === 3) {\n    return 0;\n  } else if (n === 4) {\n    return 1;\n  } else if (n === 5) {\n    return 2;\n  } else if (n === 6) {\n    return 3;\n  } else if (n === 7) {\n    return 4;\n  } else if (n === 8) {\n    return 5;\n  } else if (n === 9) {\n    return 6;\n  } else if (n === 10) {\n    return 7;\n  } else if (n === 11) {\n    return 8;\n  } else if (n === 12) {\n    return 9;\n  } else if (n === 13) {\n    return 10;\n  } else if (n === 14) {\n    return 11;\n  } else if (n === 15) {\n    return 12;\n  } else if (n === 16) {\n    return 13;\n  } else if (n === 17) {\n    return 14;\n  } else if (n === 18) {\n    return 15;\n  } else if (n === 19) {\n    return 16;\n  } else if (n === 20) {\n    return 17;\n  } else if (n === 21) {\n    return 18;\n  } else if (n === 22) {\n    return 19;\n  } else if (n === 23) {\n    return 20;\n  } else if (n === 24) {\n    return 21;\n  } else if (n === 25) {\n    return 22;\n  } else if (n === 26) {\n    return 23;\n  } else if (n === 27) {\n    return 24;\n  } else if (n === 28) {\n    return 25;\n  } else if (n === 29) {\n    return 26;\n  } else if (n === 30) {\n    return 27;\n  } else if (n === 31) {\n    return 28;\n  } else if (n === 32) {\n    return 29;\n  } else if (n === 33) {\n    return 30;\n  } else if (n === 34) {\n    return 31;\n  } else if (n === 35) {\n    return 32;\n  } else if (n === 36) {\n    return 33;\n  } else if (n === 37) {\n    return 34;\n  } else if (n === 38) {\n    return 35;\n  } else if (n === 39) {\n    return 36;\n  } else if (n === 40) {\n    return 37;\n  } else if (n === 41) {\n    return 38;\n  } else if (n === 42) {\n    return 39;\n  } else if (n === 43) {\n    return 40;\n  } else if (n === 44) {\n    return 41;\n  } else if (n === 45) {\n    return 42;\n  } else if (n === 46) {\n    return 43;\n  } else if (n === 47) {\n    return 44;\n  } else if (n === 48) {\n    return 45;\n  } else if (n === 49) {\n    return 46;\n  } else if (n === 50) {\n    return 47;\n  } else if (n === 51) {\n    return 48;\n  } else if (n === 52) {\n    return 49;\n  } else if (n === 53) {\n    return 50;\n  } else if (n === 54) {\n    return 51;\n  } else if (n === 55) {\n    return 52;\n  } else if (n === 56) {\n    return 53;\n  } else if (n === 57) {\n    return 54;\n  } else if (n === 58) {\n    return 55;\n  } else if (n === 59) {\n    return 56;\n  } else if (n === 60) {\n    return 57;\n  } else if (n === 61) {\n    return 58;\n  } else if (n === 62) {\n    return 59;\n  } else if (n === 63) {\n    return 60;\n  } else if (n === 64) {\n    return 61;\n  } else if (n === 65) {\n    return 62;\n  } else if (n === 66) {\n    return 63;\n  } else if (n === 67) {\n    return 64;\n  } else if (n === 68) {\n    return 65;\n  } else if (n === 69) {\n    return 66;\n  } else if (n === 70) {\n    return 67;\n  } else if (n === 71) {\n    return 68;\n  } else if (n === 72) {\n    return 69;\n  } else if (n === 73) {\n    return 70;\n  } else if (n === 74) {\n    return 71;\n  } else if (n === 75) {\n    return 72;\n  } else if (n === 76) {\n    return 73;\n  } else if (n === 77) {\n    return 74;\n  } else if (n === 78) {\n    return 75;\n  } else if (n === 79) {\n    return 76;\n  } else if (n === 80) {\n    return 77;\n  } else if (n === 81) {\n    return 78;\n  } else if (n === 82) {\n    return 79;\n  } else if (n === 83) {\n    return 80;\n  } else if (n === 84) {\n    return 81;\n  } else if (n === 85) {\n    return 82;\n  } else if (n === 86) {\n    return 83;\n  } else if (n === 87) {\n    return 84;\n  } else if (n === 88) {\n    return 85;\n  } else if (n === 89) {\n    return 86;\n  } else if (n === 90) {\n    return 87;\n  } else if (n === 91) {\n    return 88;\n  } else if (n === 92) {\n    return 89;\n  } else if (n === 93) {\n    return 90;\n  } else if (n === 94) {\n    return 91;\n  } else if (n === 95) {\n    return 92;\n  } else if (n === 96) {\n    return 93;\n  } else if (n === 97) {\n    return 94;\n  } else if (n === 98) {\n    return 95;\n  } else if (n === 99) {\n    return 96;\n  } else if (n === 100) {\n    return 97;\n  } else if (n === 101) {\n    return 98;\n  } else if (n === 102) {\n    return 99;\n  } else if (n === 103) {\n    return 100;\n  } else if (n === 104) {\n    return 101;\n  } else if (n === 105) {\n    return 102;\n  } else if (n === 106) {\n    return 103;\n  } else if (n === 107) {\n    return 104;\n  } else if (n === 108) {\n    return 105;\n  } else if (n === 109) {\n    return 106;\n  } else if (n === 110) {\n    return 107;\n  } else if (n === 111) {\n    return 108;\n  } else if (n === 112) {\n    return 109;\n  } else if (n === 113) {\n    return 110;\n  } else if (n === 114) {\n    return 111;\n  } else if (n === 115) {\n    return 112;\n  } else if (n === 116) {\n    return 113;\n  } else if (n === 117) {\n    return 114;\n  } else if (n === 118) {\n    return 115;\n  } else if (n === 119) {\n    return 116;\n  } else if (n === 120) {\n    return 117;\n  } else if (n === 121) {\n    return 118;\n  } else if (n === 122) {\n    return 119;\n  } else if (n === 123) {\n    return 120;\n  } else if (n === 124) {\n    return 121;\n  } else if (n === 125) {\n    return 122;\n  } else if (n === 126) {\n    return 123;\n  } else if (n === 127) {\n    return 124;\n  } else if (n === 128) {\n    return 125;\n  } else if (n === 129) {\n    return 126;\n  } else if (n === 130) {\n    return 127;\n  } else if (n === 131) {\n    return 128;\n  } else if (n === 132) {\n    return 129;\n  } else if (n === 133) {\n    return 130;\n  } else if (n === 134) {\n    return 131;\n  } else if (n === 135) {\n    return 132;\n  } else if (n === 136) {\n    return 133;\n  } else if (n === 137) {\n    return 134;\n  } else if (n === 138) {\n    return 135;\n  } else if (n === 139) {\n    return 136;\n  } else if (n === 140) {\n    return 137;\n  } else if (n === 141) {\n    return 138;\n  } else if (n === 142) {\n    return 139;\n  } else if (n === 143) {\n    return 140;\n  } else if (n === 144) {\n    return 141;\n  } else if (n === 145) {\n    return 142;\n  } else if (n === 146) {\n    return 143;\n  } else if (n === 147) {\n    return 144;\n  } else if (n === 148) {\n    return 145;\n  } else if (n === 149) {\n    return 146;\n  } else if (n === 150) {\n    return 147;\n  } else if (n === 151) {\n    return 148;\n  } else if (n === 152) {\n    return 149;\n  } else if (n === 153) {\n    return 150;\n  } else if (n === 154) {\n    return 151;\n  } else if (n === 155) {\n    return 152;\n  } else if (n === 156) {\n    return 153;\n  } else if (n === 157) {\n    return 154;\n  } else if (n === 158) {\n    return 155;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  const mid = sorted.length / 2;\n  return sorted.length % 2 === 0\n   ? sorted[mid]\n    : sorted[mid-1] + sorted[mid];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 0;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text.toLowerCase()!== text) {\n    return false;\n  }\n  return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % p;\n  return m === 0? p : m;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 15)\n  12\n  >>> modpow(2, 31, 5)\n  12\n  >>> modpow(2, 31, 15)\n  12\n  >>> modpow(2, 32, 5)\n  16\n  >>> modpow(2, 32, 15)\n  16\n  >>> modpow(2, 33, 5)\n  8\n  >>> modpow(2, 33, 15)\n  8\n  >>> modpow(2, 34, 5)\n  0\n  >>> modpow(2, 34, 15)\n  0\n  >>> modpow(2, 35, 5)\n  1\n  >>> modpow(2, 35, 15)\n  1\n  >>> modpow(2, 36, 5)\n  2\n  >>> modpow(2, 36, 15)\n  2\n  >>> modpow(2, 37, 5)\n  2\n  >>> modpow(2, 37, 15)\n  2\n  >>> modpow(2, 38, 5)\n  4\n  >>> modpow(2, 38, 15)\n  4\n  >>> modpow(2, 39, 5)\n  4\n  >>> modpow(2, 39, 15)\n  4\n  >>> modpow(2, 40, 5)\n  8\n  >>> modpow(2, 40, 15)\n  8\n  >>> modpow(2, 41, 5)\n  8\n  >>> modpow(2, 41, 15)\n  8\n  >>> modpow(2, 42, 5)\n  16\n  >>> modpow(2, 42, 15)\n  16\n  >>> modpow(2, 43, 5)\n  16\n  >>> modpow(2, 43, 15)\n  16\n  >>> modpow(2, 44, 5)\n  8\n  >>> modpow(2, 44, 15)\n  8\n  >>> modpow(2, 45, 5)\n  8\n  >>> modpow(2, 45, 15)\n  8\n  >>> modpow(2, 46, 5)\n  0\n  >>> modpow(2, 46, 15)\n  0\n  >>> modpow(2, 47, 5)\n  1\n  >>> modpow(2, 47, 15)\n  1\n  >>> modpow(2, 48, 5)\n  2\n  >>> modpow(2, 48, 15)\n  2\n  >>> modpow(2, 49, 5)\n  2\n  >>> modpow(2, 49, 15)\n  2\n  >>> modpow(2, 50, 5)\n  4\n  >>> modpow(2, 50, 15)\n  4\n  >>> modpow(2, 51, 5)\n  4\n  >>> modpow(2, 51, 15)\n  4\n  >>> modpow(2, 52, 5)\n  8\n  >>> modpow(2, 52, 15)\n  8\n  >>> modpow(2, 53, 5)\n  8\n  >>> modpow(2, 53, 15)\n  8\n  >>> modpow(2, 54, 5)\n  16\n  >>> modpow(2, 54, 15)\n  16\n  >>> modpow(2, 55, 5)\n  16\n  >>> modpow(2, 55, 15)\n  16\n  >>> modpow(2, 56, 5)\n  8\n  >>> modpow(2, 56, 15)\n  8\n  >>> modpow(2, 57, 5)\n  8\n  >>> modpow(2, 57, 15)\n  8\n  >>> modpow(2, 58, 5)\n  0\n  >>> modpow(2, 58, 15)\n  0\n  >>> modpow(2, 59, 5)\n  1\n  >>> modpow(2, 59, 15)\n  1\n  >>> modpow(2, 60, 5)\n  2\n  >>> modpow(2, 60, 15)\n  2\n  >>> modpow(2, 61, 5)\n  2\n  >>> modpow(2, 61, 15)\n  2\n  >>> modpow(2, 62, 5)\n  4\n  >>> modpow(2, 62, 15)\n  4\n  >>> modpow(2, 63, 5)\n  4\n  >>> modpow(2, 63, 15)\n  4\n  >>> modpow(2, 64, 5)\n  8\n  >>> modpow(2, 64, 15)\n  8\n  >>> modpow(2, 65, 5)\n  8\n  >>> modpow(2, 65, 15)\n  8\n  >>> modpow(2, 66, 5)\n  0\n  >>> modpow(2, 66, 15)\n  0\n  >>> modpow(2, 67, 5)\n  1\n  >>> modpow(2, 67, 15)\n  1\n  >>> modpow(2, 68, 5)\n  2\n  >>> modpow(2, 68, 15)\n  2\n  >>> modpow(2, 69, 5)\n  2\n  >>> modpow(2, 69, 15)\n  2\n  >>> modpow(2, 70, 5)\n  4\n  >>> modpow(2, 70, 15)\n  4\n  >>> modpow(2, 71, 5)\n  4\n  >>> modpow(2, 71, 15)\n  4\n  >>> modpow(2, 72, 5)\n  8\n  >>> modpow(2, 72, 15)\n  8\n  >>> modpow(2, 73, 5)\n  8\n  >>> modpow(2, 73, 15)\n  8\n  >>> modpow(2, 74, 5)\n  16\n  >>> modpow(2, 74, 15)\n  16\n  >>> modpow(2, 75, 5)\n  16\n  >>> modpow(2, 75, 15)\n  16\n  >>> modpow(2, 76, 5)\n  8\n  >>> modpow(2, 76, 15)\n  8\n  >>> modpow(2, 77, 5)\n  8\n  >>> modpow(2, 77, 15)\n  8\n  >>> modpow(2, 78, 5)\n  0\n  >>> modpow(2, 78, 15)\n  0\n  >>> modpow(2, 79, 5)\n  1\n  >>> modpow(2, 79, 15)\n  1\n  >>> modpow(2, 80, 5)\n  2\n  >>> modpow(2, 80, 15)\n  2\n  >>> modpow(2, 81, 5)\n  2\n  >>> modpow(2, 81, 15)\n  2\n  >>> modpow(2, 82, 5)\n  4\n  >>> modpow(2, 82, 15)\n  4\n  >>> modpow(2, 83, 5)\n  4\n  >>> modpow(2, 83, 15)\n  4\n  >>> modpow(2, 84, 5)\n  8\n  >>> modpow(2, 84, 15)\n  8\n  >>> modpow(2, 85, 5)\n  8\n  >>> modpow(2, 85, 15)\n  8\n  >>> modpow(2, 86, 5)\n  0\n  >>> modpow(2, 86, 15)\n  0\n  >>> modpow(2, 87, 5)\n  1\n  >>> modpow(2, 87, 15)\n  1\n  >>> modpow(2, 88, 5)\n  2\n  >>> modpow(2, 88, 15)\n  2\n  >>> modpow(2, 89, 5)\n  2\n  >>> modpow(2, 89, 15)\n  2\n  >>> modpow(2, 90, 5)\n  4\n  >>> modpow(2, 90, 15)\n  4\n  >>> modpow(2, 91, 5)\n  4\n  >>> modpow(2, 91, 15)\n  4\n  >>> modpow(2, 92, 5)\n  8\n  >>> modpow(2, 92, 15)\n  8\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = _curry2((n, xs) => {\n  return slice(0, n < 0? Infinity : n, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 &&!fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate two consecutive elements.\n * The first element in a series of equal element is the one being preserved.\n *\n * Dispatches to the `dropRepeatsWith` method of the first argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nconst dropRepeatsWith = _curry2((pred, list) => _repeat(pred, Infinity, xDropRepeatsWith(pred, list)));\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate two consecutive elements.\n * The first element in a series of equal element is the one being preserved.\n *\n * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nconst dropRepeatsWith = _curry2((pred, list) => _repeat(pred, Infinity, xDropRepeatsWith(pred, list)));\n\n/**\n * Returns a new list without any consecutive elements. Equality is determined by\n * applying the supplied predicate two consecutive elements. Prefer the result\n * of `R.equals` to check whether two sets are equal.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} fn The function called per iteration.\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLast, R.transduce, R.addIndex\n * @example\n *\n *      const l = [1, 2, 3, 4, 3, 2, 1];\n *      R.dropWhile(x => x &lt; 3, l); //=> [2, 3, 4]\n *\n *      R.dropWhile(x => x &lt; 1, l); //=> [1, 2, 3, 4]\n */\nconst dropWhile = _curry2((fn, list) => dropRepeatsWith(pred, _dropWhile(fn, list)));\n\n/**\n * Returns a new list excluding all the elements that satisfy the given predicate\n * function. The predicate function is passed one argument: *(value)*.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 4 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string and returns string without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcf\\nghjklm'\n  >>> removeConsonants('abcdef')\n  'abcf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'B'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> remove", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThresholds([1, 2, 4, 10], 100)\n  false\n  >>> aboveThresholds([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtracting(2, 3)\n  1\n  >>> subtracting(5, 7)\n  3\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  21\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> dividing(2, 3)\n  1.5\n  >>> dividing(5, 7)\n  3.3\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the square root of number x\n  >>> square(-3)\n  3\n  >>> square(3)\n  9\n  */\nconst square = x => {\n  return x * x;\n};\n\n/*Get the cube root of number x\n  >>> cube(-3)\n  3\n  >>> cube(3)\n  6\n  */\nconst cube = x => {\n  return x * x * x;\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3.5)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3.5)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(-3)\n  -3\n  >>> round(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(-3)\n  -3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = x => {\n  return Math.sign(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the square root of number x\n  >>> square(-3)\n  3\n  >>> square(3)\n  9\n  */\nconst square = x => {\n  return x * x;\n};\n\n/*Get the cube root of number x\n  >>> cube(-3)\n  3\n  >>> cube(3)\n  6\n  */\nconst cube = x => {\n  return x * x * x;\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3.5)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3.5)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(-3)\n  -3\n  >>> round(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(-3)\n  -3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = x => {\n  return Math.sign(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the square root of number x\n  >>> square(-3)\n  3\n  >>> square(3)\n  9\n  */\nconst square = x => {\n  return x * x;\n};\n\n/*Get the cube root of number x\n  >>> cube(-3)\n  3\n  >>> cube(3)\n  6\n  */\nconst cube = x => {\n  return x * x * x;\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3.5)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3.5)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(-3)\n  -3\n  >>> round(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(-3)\n  -3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = x => {\n  return Math.sign(x);\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the square root of number x\n  >>> square(-3)\n  3\n  >>> square(3)\n  9\n  */\nconst square = x => {\n  return x * x;\n};\n\n/*Get the cube root of number x\n  >>> cube(-3)\n  3\n  >>> cube(3)\n  6\n  */\nconst cube = x => {\n  return x * x * x;\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3.5)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddddddabc')\n  true\n  >>> sameCharReverse('dddddddabc', 'abcd')\n  true\n  >>> sameCharReverse('eabcd', 'dddddddabc')\n  false\n  >>> sameCharReverse('abcd', 'dddddddabce')\n  false\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharReverse = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharReverse('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharReverse('abcd', 'dddd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fib", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i += 1) {\n    const bracket = brackets[i];\n    if (bracket === \"<\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== \"<\") {\n        return false;\n      }\n      stack.pop();\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== \">\") {\n        return false;\n      }\n      stack.push(bracket);\n    } else {\n      stack.push(bracket);\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if the given string is a valid function name.\n */\nconst isValidFunctionName = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z][A-Za-z0-9]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n */\nconst isValidVariableName = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z][A-Za-z0-9]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter.\n */\nconst isValidFunctionParameter = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter.\n */\nconst isValidVariableParameter = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function return type.\n */\nconst isValidFunctionReturnType = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable return type.\n */\nconst isValidVariableReturnType = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter type.\n */\nconst isValidFunctionParameterType = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter type.\n */\nconst isValidVariableParameterType = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid function parameter default value.\n */\nconst isValidFunctionParameterDefaultValue = (str) => {\n  // TODO: Use a regex or something.\n  return /^[A-Za-z0-9_]*$/.test(str);\n};\n\n/**\n * Returns true if the given string is a valid variable parameter default value.\n */\nconst isValidVariableParameterDefaultValue = (str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49, b50, b51, b52, b53, b54, b55, b56, b57, b58, b59, b60, b61, b62, b63, b64, 65536;\n  s0 = w0 = v0 = a0 = b0 = z0 = y0 = x0 = null; s1 = w1 = v1 = a1 = a1 = b1 = z1 = y1 = null; s2 = w2 = v2 = a2 = b2 = z2 = y2 = null; s3 = w3 = v3 = a3 = b3 = z3 = y3 = null; s4 = w4 = v4 = a4 = b4 = z4 = y4 = null; s5 = w5 = v5 = a5 = b5 = z5 = y5 = null; s6 = w6 = v6 = a6 = b6 = z6 = y6 = null; s7 = w7 = v7 = a7 = b7 = z7 = y7 = null; s8 = w8 = v8 = a8 = b8 = z8 = y8 = null; s9 = w9 = v9 = a9 = b9 = z9 = y9 = null; b10 = 65536; b11 = 65536; b12 = 65536; b13 = 65536; b14 = 65536; b15 = 65536; b16 = 65536; b17 = 65536; b18 = 65536; b19 = 65536; b20 = 65536; b21 = 65536; b22 = 65536; b23 = 65536; b24 = 65536; b25 = 65536; b26 = 65536; b27 = 65536; b28 = 65536; b29 = 65536; b30 = 65536; b31 = 65536; b32 = 65536; b33 = 65536; b34 = 65536; b35 = 65536; b36 = 65536; b37 = 65536; b38 = 65536; b39 = 65536; b40 = 65536; b41 = 65536; b42 = 65536; b43 = 65536; b44 = 65536; b45 = 65536; b46 = 65536; b47 = 65536; b48 = 65536; b49 = 65536; b50 = 65536; b51 = 65536; b52 = 65536; b53 = 65536; b54 = 65536; b55 = 65536; b56 = 65536; b57 = 65536; b58 = 65536; b59 = 65536; b60 = 65536; b61 = 65536; b62 = 65536; b63 = 65536; b64 = 65536;\n  ref = (l = ((ref = l.length)!= null? ref.length : void 0) || 1), i = 0;\n  while (i < ref) {\n    j = i;\n    while (j < ref) {\n      if (a[j] < b[j]) {\n        b[j] = a[j];\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  ref1 = (function() {\n    var k, l, len, ref1, results;\n    ref1 = (l = ((ref1 = l.length)!= null? ref1.length : void 0) || 1), results = [];\n    for (k = 0, len = ref1; k < len; k += 1) {\n      l = l[k];\n      results.push(l);\n    }\n    return results;\n  })(), a0 = ref1[0], a1 = ref1[1], a2 = ref1[2], a3 = ref1[3], a4 = ref1[4], a5 = ref1[5], a6 = ref1[6], a7 = ref1[7], a8 = ref1[8], a9 = ref1[9], b0 = ref1[10], b1 = ref1[11], b2 = ref1[12], b3 = ref1[13], b4 = ref1[14], b5 = ref1[15], b6 = ref1[16], b7 = ref1[17], b8 = ref1[18], b9 = ref1[19], b10 = ref1[20], b11 = ref1[21], b12 = ref1[22], b13 = ref1[23], b14 = ref1[24], b15 = ref1[25], b16 = ref1[26], b17 = ref1[27], b18 = ref1[28], b19 = ref1[29], b20 = ref1[30], b21 = ref1[31], b22 = ref1[32], b23 = ref1[33], b24 = ref1[34], b25 = ref1[35], b26 = ref1[36], b27 = ref1[37], b28 = ref1[38], b29 = ref1[39], b30 = ref1[40], b31 = ref1[41], b32 = ref1[42], b33 = ref1[43], b34 = ref1[44], b35 = ref1[45], b36 = ref1[46], b37 = ref1[47], b38 = ref1[48], b39 = ref1[49], b40 = ref1[50], b41 = ref1[51], b42 = ref1[52], b43 = ref1[53], b44 = ref1[54], b45 = ref1[55], b46 = ref1[56], b47 = ref1[57], b48 = ref1[58], b49 = ref1[59], b50 = ref1[60], b51 = ref1[61], b52 = ref1[62], b53 = ref1[63], b54 = ref1[64], b55 = ref1[65], b56 = ref1[66], b57 = ref1[67], b58 = ref1[68], b59 = ref1[69], b60 = ref1[70], b61 = ref1[71], b62 = ref1[72], b63 = ref1[73], b64 = ref1[74];\n  ref2 = (function() {\n    var k, l, len, ref2, results;\n    ref2 = (l = ((ref2 = l.length)!= null? ref2.length : void 0) || 1), results = [];\n    for (k = 0, len = ref2; k < len; k += 1) {\n      l = l[k];\n      results.push(l);\n    }\n    return results;\n  })(), a0 = ref2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return n\n}\n\n/*\n  Find the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return n\n}\n\n/*\n  Find the greatest common divisor of n. Assume n > 1.\n  >>> greatestCommonDivisor(8, 12)\n  4\n  >>> greatestCommonDivisor(8, 13)\n  2\n  >>> greatestCommonDivisor(8, 14)\n  2\n  >>> greatestCommonDivisor(15, 14)\n  5\n  */\nconst greatestCommonDivisor = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommonMultiple(8, 13)\n  8\n  >>> leastCommonMultiple(8, 14)\n  8\n  >>> leastCommonMultiple(15, 14)\n  40\n  */\nconst leastCommonMultiple = (n1, n2) => {\n  let i = 1\n  while (i < n1 && i < n2) {\n    if (n1 % i === 0 && n2 % i === 0) {\n      return i * i\n    }\n    i++\n  }\n  return n1 % n2 === 0? (n1 % n2) : (n1 % n2)\n}\n\n/*\n  Find the least common multiple of the given numbers. Assume n > 1.\n  >>> leastCommonMultiple(8, 12)\n  24\n  >>> leastCommon", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_groups_with_spaces = paren_string.match(/\\(([^()]+)\\)\\s+/g);\n  const paren_groups_with_spaces_reversed = paren_string.match(/\\(([^()]+)\\)\\s+\\(([^()]+)\\)/g);\n\n  const max_level = Math.max(paren_groups.length, paren_groups_with_spaces.length, paren_groups_with_spaces_reversed.length);\n  const levels = [];\n\n  for (let i = 0; i < max_level; i++) {\n    levels.push(paren_groups.length < i? paren_groups.length : i);\n    levels.push(paren_groups_with_spaces.length < i? paren_groups_with_spaces.length : i);\n    levels.push(paren_groups_with_spaces_reversed.length < i? paren_groups_with_spaces_reversed.length : i);\n  }\n\n  return levels;\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst parseNestParensMax = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return levels[levels.length - 1];\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax2 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax2('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax3 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax3('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax4 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax4('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax5 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax5('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax6 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax6('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax7 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax7('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax8 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax8('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax9 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax9('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax10 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax10('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax11 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepest level of nesting.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNestParensMax11('(()()) ((())) () ((())()())')\n * 3\n */\nconst parseNestParensMax12 = (paren_string) => {\n  const levels = parseNestParens(paren_string);\n  return Math.max(...levels);\n};\n\n/**\n * Parse a string of nested parentheses and return the deepe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string of characters, return a new string with all but the first character\n * capitalized.\n *\n * >>> capitalizeFirstLetter('hello')\n * 'Hello'\n * >>> capitalizeFirstLetter('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string of characters, return a new string with the first character capitalized\n * and the rest lowercased.\n *\n * >>> capitalizeFirstAndLowerCase('hello')\n * 'Hello'\n * >>> capitalizeFirstAndLowerCase('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstAndLowerCase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map((word) => {\n    return capitalizeFirstLetter(word.toLowerCase());\n  }).join(' ');\n};\n\n/**\n * Given a string of characters, return a new string with the first letter of each word\n * capitalized and each word lowercased.\n *\n * >>> capitalizeEachWord('hello world')\n * 'Hello World'\n */\nconst capitalizeEachWord = (string) => {\n  return string.split(' ').map", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivative.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial in same form as derivativeOf.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return derivative of this polynomial in the same form.\n * >>> derivativeOf([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivativeOf([1, 2, 3])\n * [2, 6]\n */\nconst derivativeOf = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/**\n * Returns derivative of polynomial", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,4,9])\n  25\n  >>> squareSum([1,4,9,16])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25,36])\n  490\n  >>> squareSum([1,4,9,16,25,36,49])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,463])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,25", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  str = str.split('').reverse().join('');\n  str = str.split('').reduce((acc, curr, i) => {\n    if (i % shift === 0) {\n      acc += curr;\n    }\n    return acc;\n  }, '');\n  return str;\n};\n\n/*\n  Given a number x, return the number of digits in x. x can\n  be a string or an integer.\n  >>> countDigits(123)\n  3\n  >>> countDigits('123')\n  3\n  >>> countDigits(0)\n  0\n  >>> countDigits(-0)\n  0\n  >>> countDigits(1.5)\n  2\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(12.3)\n  3\n  >>> countDigits(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const apples = parseInt(arr[0]);\n  const oranges = parseInt(arr[1]);\n  const mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n\nThis solution uses regular expressions to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions allow us to extract information from strings using patterns. In this case, we are using patterns to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions allow us to extract information from strings using patterns. In this case, we are using patterns to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for parsing strings. In this case, we are using them to extract the numbers from the string. Regular expressions are a powerful tool for ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a, b));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = oddValues.reduce((a, b) => Math.min(a, b));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOdd };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = oddValues.reduce((a, b) => Math.min(a, b));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex2 = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = oddValues.reduce((a, b) => Math.min(a, b));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex3 = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq > maxFreq? maxFreq : -1;\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sort([5, 4, 3, 2, 1]) = [1, 2, 3]\n      sort([]) = []\n*/\nconst sort = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDesc([5, 4, 3, 2, 1]) = [3, 2, 1]\n      sortDesc([]) = []\n*/\nconst sortDesc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAsc([5, 4, 3, 2, 1]) = [1, 2, 3, 5, 4, 6]\n      sortAsc([]) = []\n*/\nconst sortAsc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescAsc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescAsc([]) = []\n*/\nconst sortDescAsc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscAsc([5, 4, 3, 2, 1]) = [1, 2, 5, 4, 3, 6]\n      sortAscAsc([]) = []\n*/\nconst sortAscAsc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescDesc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescDesc([]) = []\n*/\nconst sortDescDesc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscDesc([5, 4, 3, 2, 1]) = [1, 2, 5, 4, 3, 6]\n      sortAscDesc([]) = []\n*/\nconst sortAscDesc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescAscDesc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescAscDesc([]) = []\n*/\nconst sortDescAscDesc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscAscAsc([5, 4, 3, 2, 1]) = [1, 2, 5, 4, 3, 6]\n      sortAscAscAsc([]) = []\n*/\nconst sortAscAscAsc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescDescDesc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescDesc([]) = []\n*/\nconst sortDescDescDesc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscAscAsc([5, 4, 3, 2, 1]) = [1, 2, 5, 4, 3, 6]\n      sortAscAscAsc([]) = []\n*/\nconst sortAscAscAsc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescDescDesc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescDesc([]) = []\n*/\nconst sortDescDescDesc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscAscAscAsc([5, 4, 3, 2, 1]) = [1, 2, 5, 4, 3, 6]\n      sortAscAscAscAsc([]) = []\n*/\nconst sortAscAscAscAsc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescDescDescDesc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescDescDesc([]) = []\n*/\nconst sortDescDescDesc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in ascending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscAscAscAscAsc([5, 4, 3, 2, 1]) = [1, 2, 5, 4, 3, 6]\n      sortAscAscAscAscAsc([]) = []\n*/\nconst sortAscAscAscAscAsc = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortDescAscAscAscAsc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortDescAscAscAscAsc([]) = []\n*/\nconst sortDescAscAscAscAsc = (lst) => {\n  return lst.sort((a, b) => b - a);\n};\n\n/*\n  You are given a list of integers. Your task is to sort them in descending order and return the result.\n  If the list is empty, return an empty list.\n  Examples:\n      sortAscDescAscAscAsc([5, 4, 3, 2, 1]) = [5, 4, 3, 2, 1]\n      sortAscDescAscAscAsc([]) = []\n*/\nconst sortA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(minValue);\n  sortedList.push(maxValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(minValue);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending order.\n  Ascending order is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingSortsLists([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingSortsLists([]) == []\n  */\nconst ascendingSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(minValue);\n  sortedList.push(maxValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n    }\n    if (lst[i] < maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in descending order.\n  Descending order is when you start with the maximum value,\n  then minimum of the remaining integers, then maximum and so on.\n\n  Examples:\n  descendingSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descendingSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descendingSortsLists([]) == []\n  */\nconst descendingSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] < maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(maxValue);\n  sortedList.push(minValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n    if (lst[i] < minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending order.\n  Ascending order is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingSortsLists([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingSortsLists([]) == []\n  */\nconst ascendingSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(minValue);\n  sortedList.push(maxValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n    }\n    if (lst[i] < maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in descending order.\n  Descending order is when you start with the maximum value,\n  then minimum of the remaining integers, then maximum and so on.\n\n  Examples:\n  descendingSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descendingSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descendingSortsLists([]) == []\n  */\nconst descendingSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] < maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(maxValue);\n  sortedList.push(minValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n    if (lst[i] < minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending order.\n  Ascending order is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingSortsLists([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingSortsLists([]) == []\n  */\nconst ascendingSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(minValue);\n  sortedList.push(maxValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      sortedList.push(minValue);\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in descending order.\n  Descending order is when you start with the maximum value,\n  then minimum of the remaining integers, then maximum and so on.\n\n  Examples:\n  descendingSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descendingSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descendingSortsLists([]) == []\n  */\nconst descendingSortsLists = (lst) => {\n  const sortedList = [];\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] < maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  sortedList.push(maxValue);\n  sortedList.push(minValue);\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      sortedList.push(maxValue);\n      maxValue = lst[i];\n    }\n    if (lst[i] < minValue) {\n      sortedList.push(minValue);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0;\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  return a + b + c > Math.max(a, b, c)? Math.round((a + b + c) / 2) : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesArea_ = (a, b, c) => trianglesAreas(a, b, c) * trianglesAreas(b, c, a);\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n  if (q[0] === q[q.length - 1]) return true\n  if (q[0] > q[q.length - 1]) return false\n  let max = 0\n  for (let i = 0; i < q.length - 1; i++) {\n    if (q[i] > q[i + 1]) {\n      max = Math.max(max, q[i] + q[i + 1])\n    }\n  }\n  return max <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n  if (q[0] === q[q.length - 1]) return true\n  if (q[0] > q[q.length - 1]) return false\n  let max = 0\n  for (let i = 0; i < q.length - 1; i++) {\n    if (q[i] > q[i + 1]) {\n      max = Math.max(max, q[i] + q[i + 1])\n    }\n  }\n  return max <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n  if (q[0] === q[q.length - 1]) return true\n  if (q[0] > q[q.length - 1]) return false\n  let max = 0\n  for (let i = 0; i < q.length - 1; i++) {\n    if (q[i] > q[i + 1]) {\n      max = Math.max(max, q[i] + q[i + 1])\n    }\n  }\n  return max <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n  if (q[0] === q[q.length - 1]) return true\n  if (q[0] > q[q.length - 1]) return false\n  let max = 0\n  for (let i = 0; i < q.length - 1; i++) {\n    if (q[i] > q[i + 1]) {\n      max = Math.max(max, q[i] + q[i + 1])\n    }\n  }\n  return max <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n  if (q[0] === q[q.length - 1]) return true\n  if (q[0] > q[q.length - 1]) return false\n  let max = 0\n  for (let i = 0; i < q.length - 1; i++) {\n    if (q[i] > q[i + 1]) {\n      max = Math.max(max, q[i] + q[i + 1])\n    }\n  }\n  return max <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  const len = arr.length;\n  if (len < 2) return 0;\n  let min = 0;\n  for (let i = 0; i < len; i++) {\n    const left = len - 1 - i;\n    const right = len - 1 - i;\n    if (arr[left] > arr[right]) {\n      min = Math.min(min, arr[left] - arr[right]);\n    } else {\n      min = Math.min(min, arr[right] - arr[left]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array. This\n  is defined as the largest number in the array that can be made from the\n  elements of the array.\n\n  For example:\n  maxNumberInArray([1,2,3,4,5,6,7]) == 7\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 15\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  maxNumberInArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst2.filter(x => lst1.indexOf(x) < lst1.indexOf(x))\n}\n\n/*\n  Write a function that accepts two strings and returns true if both strings have\n  the same number of vowels.\n\n  Examples\n  vowelsMatch('hello', 'helo') ➞ true\n  vowelsMatch('hello', 'helol') ➞ false\n  vowelsMatch('hello', 'helo') ➞ false\n  vowelsMatch('hello', 'helol') ➞ false\n  vowelsMatch('hello', 'helolo') ➞ true\n  vowelsMatch('hello', 'helolol') ➞ false\n  vowelsMatch('hello', 'helololo') ➞ true\n  vowelsMatch('hello', 'helololol') ➞ false\n  */\nconst vowelsMatch = (str1, str2) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const str1Array = str1.split('')\n  const str2Array = str2.split('')\n  const arr1 = str1Array.filter(x => vowels.indexOf(x) > -1)\n  const arr2 = str2Array.filter(x => vowels.indexOf(x) > -1)\n  return arr1.length === arr2.length\n}\n\n/*\n  Write a function that accepts two strings and returns true if both strings have\n  the same number of consonants.\n\n  Examples\n  consonantsMatch('hello', 'helo') ➞ true\n  consonantsMatch('hello', 'helol') ➞ false\n  consonantsMatch('hello', 'helo') ➞ false\n  consonantsMatch('hello', 'helol') ➞ false\n  consonantsMatch('hello', 'helolo') ➞ true\n  consonantsMatch('hello', 'helolol') ➞ false\n  consonantsMatch('hello', 'helololo') ➞ true\n  consonantsMatch('hello', 'helololol') ➞ false\n  */\nconst consonantsMatch = (str1, str2) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const str1Array = str1.split('')\n  const str2Array = str2.split('')\n  const arr1 = str1Array.filter(x => consonants.indexOf(x) > -1)\n  const arr2 = str2Array.filter(x => consonants.indexOf(x) > -1)\n  return arr1.length === arr2.length\n}\n\n/*\n  Write a function that accepts two strings and returns true if both strings have\n  the same number of words.\n\n  Examples\n  wordsMatch('hello', 'helo') ➞ true\n  wordsMatch('hello', 'helol') ➞ false\n  wordsMatch('hello', 'helo') ➞ false\n  wordsMatch('hello', 'helol') ➞ false\n  wordsMatch('hello', 'helolo') ➞ true\n  wordsMatch('hello', 'helolol') ➞ false\n  wordsMatch('hello', 'helololo') ➞ true\n  wordsMatch('hello', 'helololol') ➞ false\n  */\nconst wordsMatch = (str1, str2) => {\n  const str1Array = str1.split(' ')\n  const str2Array = str2.split(' ')\n  const arr1 = str1Array.filter(x => x.length > 0)\n  const arr2 = str2Array.filter(x => x.length > 0)\n  return arr1.length === arr2.length\n}\n\n/*\n  Write a function that accepts two strings and returns true if both strings have\n  the same number of sentences.\n\n  Examples\n  sentencesMatch('hello', 'helo') ➞ true\n  sentencesMatch('hello', 'helol') ➞ false\n  sentencesMatch('hello', 'helo') ➞ false\n  sentencesMatch('hello', 'helol') ➞ false\n  sentencesMatch('hello', 'helolo') ➞ true\n  sentencesMatch('hello', 'helolol') ➞ false\n  sentencesMatch('hello', 'helololo') ➞ true\n  sentencesMatch('hello', 'helololol') ➞ false\n  */\nconst sentencesMatch = (str1, str2) => {\n  const str1Array = str1.split('.')\n  const str2Array = str2.split('.')\n  const arr1 = str1Array.filter(x => x.length > 0)\n  const arr2 = str2Array.filter(x => x.length > 0)\n  return arr1.length === arr2.length\n}\n\n/*\n  Write a function that accepts two strings and returns true if both strings have\n  the same number of letters.\n\n  Examples\n  lettersMatch('hello', 'helo') ➞ true\n  lettersMatch('hello', 'helol') ➞ false\n  lettersMatch('hello', 'helo') ➞ false\n  lettersMatch('hello', 'helol') ➞ false\n  lettersMatch('hello', 'helolo') ➞ true\n  lettersMatch('hello', 'helolol') ➞ false\n  lettersMatch('hello', 'helololo') ➞ true\n  lettersMatch('hello', 'helololol') ➞ false\n  */\nconst lettersMatch = (str1, str2) => {\n  const str1Array = str1.split('')\n  const str2Array = str2.split('')\n  const arr1 = str1Array.filter(x => x.length > 0)\n  const arr2 = str2Array.filter(x => x.length > 0)\n  return arr1.length === arr2.length\n}\n\n/*\n  Write a function that accepts two strings and returns true if both strings have\n  the same number of digits.\n\n  Examples\n  digitsMatch('hello', 'helo') ➞ true\n  digitsMatch('hello', 'helol') ➞ false\n  digitsMatch('hello', 'helo') ➞ false\n  digitsMatch('hello', 'helol') ➞ false\n  digitsMatch('hello', 'helolo') ➞ true\n  digitsMatch('hello', 'helolol') ➞ false\n  digitsMatch('hello', 'helololo') ➞ true\n  digitsMatch('hello', 'helololo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isMultiplyPrime = true\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPrime = true\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*Write a function that returns true if the given number is a perfect power of 3 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 5 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 5; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 7 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 7; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 11 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 11; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 13 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 13; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 17 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 17; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 19 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 19; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 23 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 23; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 29 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 29; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 31 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfectPower = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let isPerfectPower = true\n  for (let i = 31; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      isPerfectPower = false\n      break\n    }\n  }\n  return isPerfectPower\n}\n\n/*Write a function that returns true if the given number is a perfect power of 37 and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfectPower(30) == true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower9 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower10 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  const hexesArray = num.split('').map(Number);\n  const hexesArrayLength = hexesArray.length;\n  let hexesKeysArray = [];\n  for (let i = 0; i < hexesArrayLength; i++) {\n    let hexesKeysArrayLength = hexesArray[i].toString().length;\n    for (let j = 0; j < hexesKeysArrayLength; j++) {\n      if (hexesArray[i] % hexesArray[j] === 0) {\n        hexesKeysArray.push(hexesArray[i]);\n      }\n    }\n  }\n  return hexesKeysArray.length;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesValues = (num) => {\n  const hexesArray = num.split('').map(Number);\n  const hexesArrayLength = hexesArray.length;\n  let hexesValuesArray = [];\n  for (let i = 0; i < hexesArrayLength; i++) {\n    let hexesValuesArrayLength = hexesArray[i].toString().length;\n    for (let j = 0; j < hexesValuesArrayLength; j++) {\n      if (hexesArray[i] % hexesArray[j] === 0) {\n        hexesValuesArray.push(hexesArray[i]);\n      }\n    }\n  }\n  return hexesValuesArray.length;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesPrimes = (num) => {\n  const hexesArray = num.split('').map(Number);\n  const hexesArrayLength = hexesArray.length;\n  let hexesPrimesArray = [];\n  for (let i = 0; i < hexesArrayLength; i++) {\n    let hexesPrimesArrayLength = hexesArray[i].toString().length;\n    for (let j = 0; j < hexesPrimesArrayLength; j++) {\n      if (hexesArray[i] % hexesArray[j] === 0) {\n        hexesPrimesArray.push(hexesArray[i]);\n      }\n    }\n  }\n  return hexesPrimesArray.length;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesPrimesAndKeys = (num) => {\n  const hexesArray = num.split('').map(Number);\n  const hexesArrayLength = hexesArray.length;\n  let hexesPrimesArray = [];\n  let hexesKeysArray = [];\n  for (let i = 0; i < hexesArrayLength; i++) {\n    let hexesPrimesArrayLength = hexesArray[i].toString().length;\n    for (let j = 0; j < hexesPrimesArrayLength; j++) {\n      if (hexesArray[i] % hexesArray[j] === 0) {\n        hexesPrimesArray.push(hexesArray[i]);\n      }\n    }\n    let hexesKeysArrayLength = hexesArray[i].toString().length;\n    for (let j = 0; j < hexesKeysArrayLength; j++) {\n      if (hexesArray[i] % hexesArray[j] === 0) {\n        hexesKeysArray.push(hexesArray[i]);\n      }\n    }\n  }\n  return { hexesPrimesArray: hexesPrimesArray, hexesKeysArray: hexesKeysArray };\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = '';\n  let decimals = decimal;\n  while (decimals > 0) {\n    decimals = decimals % 2;\n    binary = binary === '0'? '1' : '0';\n  }\n  return `db${binary}db`;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  in decimal form.\n\n  Examples:\n  binaryToDecimal(\"100000\") # returns 15\n  binaryToDecimal(\"111111\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary number. The decimal number will\n  be given as a string. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal = decimal % 2;\n  }\n  return `db${binary}db`;\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal number. The decimal number will\n  be given as a string. The function should return a string, with each character representing a hexadecimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHexa(15)   # returns \"db1111db\"\n  decimalToHexa(32)   # returns \"db100000db\"\n  */\nconst decimalToHexa = (decimal) => {\n  let hexa = '';\n  while (decimal > 0) {\n    hexa = hexa === '0'? '1' : '0';\n    decimal = decimal % 16;\n  }\n  return `db${hexa}db`;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  in decimal form.\n\n  Examples:\n  hexaToDecimal(\"db1111db\") # returns 15\n  hexaToDecimal(\"db100000db\") # returns 32\n  */\nconst hexaToDecimal = (hexa) => {\n  let decimal = 0;\n  for (let i = 0; i < hexa.length; i++) {\n    decimal = decimal + (parseInt(hexa[i], 16) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a binary number to hexadecimal number. The binary number will\n  be given as a string. The function should return a string, with each character representing a hexadecimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToHexa(\"db1111db\") # returns \"db1111db\"\n  binaryToHexa(\"db100000db\") # returns \"db100000db\"\n  */\nconst binaryToHexa = (binary) => {\n  let hexa = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexa = hexa === '0'? '1' : '0';\n    binary = binary === '0'? '1' : '0';\n  }\n  return `db${hexa}db`;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary number. The hexadecimal number will\n  be given as a string. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  hexaToBinary(\"db1111db\") # returns \"100000\"\n  hexaToBinary(\"db100000db\") # returns \"111111\"\n  */\nconst hexaToBinary = (hexa) => {\n  let binary = '';\n  for (let i = 0; i < hexa.length; i++) {\n    binary = binary === '0'? '1' : '0';\n    hexa = hexa === '0'? '1' : '0';\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to octal number. The binary number will\n  be given as a string. The function should return a string, with each character representing an octal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  binaryToOctal(\"100000\") # returns \"014\"\n  binaryToOctal(\"111111\") # returns \"037\"\n  */\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal === '0'? '1' : '0';\n    binary = binary === '0'? '1' : '0';\n  }\n  return `0${octal}`;\n};\n\n/*\n  Write a function that will convert an octal number to decimal number. The octal number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  in decimal form.\n\n  Examples:\n  octalToDecimal(\"014\") # returns 15\n  octalToDecimal(\"037\") # returns 32\n  */\nconst octalToDecimal = (octal) => {\n  let decimal = 0;\n  for (let i = 0; i < octal.length; i++) {\n    decimal = decimal + (parseInt(octal[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert an octal number to binary number. The octal number will\n  be given as a string. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  octalToBinary(\"014\") # returns \"100000\"\n  octalToBinary(\"037\") # returns \"111111\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  for (let i = 0; i < octal.length; i++) {\n    binary = binary === '0'? '1' : '0';\n    octal = octal === '0'? '1' : '0';\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to hexadecimal number. The binary number will\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  Return true if it contains only letters a-z and false otherwise.\n  For example:\n  containsOnlyLetters(a) => true\n  containsOnlyLetters(ab) => false\n  containsOnlyLetters(abc) => false\n  containsOnlyLetters(aba) => false\n  containsOnlyLetters(abca) => true\n  containsOnlyLetters(abcadef) => false\n  containsOnlyLetters(abcadefg) => false\n  containsOnlyLetters(abcadefgh) => false\n  containsOnlyLetters(abcadefghi) => false\n  containsOnlyLetters(abcadefghij) => false\n  containsOnlyLetters(abcadefghijk) => false\n  containsOnlyLetters(abcadefghijkl) => false\n  containsOnlyLetters(abcadefghijklm) => false\n  containsOnlyLetters(abcadefghijklmn) => false\n  containsOnlyLetters(abcadefghijklmno) => false\n  containsOnlyLetters(abcadefghijklmnop) => false\n  containsOnlyLetters(abcadefghijklmnopq) => false\n  containsOnlyLetters(abcadefghijklmnopqr) => false\n  containsOnlyLetters(abcadefghijklmnopqrs) => false\n  containsOnlyLetters(abcadefghijklmnopqrst) => false\n  containsOnlyLetters(abcadefghijklmnopqrstu) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuv) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvw) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwx) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxy) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyz) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyza) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzab) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabc) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcd) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcde) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdef) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefg) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefgh) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghi) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghij) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijk) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijkl) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklm) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12345) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123456) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234567) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12345678) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123456789) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234567890) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12345678901) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123456789012) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234567890123) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12345678901234) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123456789012345) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234567890123456) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12345678901234567) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123456789012345678) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234567890123456789) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn12345678901234567890) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn123456789012345678901) => false\n  containsOnlyLetters(abcadefghijklmnopqrstuvwxyzabcdefghijklmn1234567890123456789012) => false\n  containsOnlyLetters(abcadefghijklmno", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesLength = grades.length;\n  const gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  const gradesAverage = gradesSum / gradesLength;\n\n  return grades.map((grade) => {\n    if (grade >= gradesAverage) {\n      return \"A+\";\n    }\n    if (grade > gradesAverage && grade <= gradesAverage + 0.2) {\n      return \"A\";\n    }\n    if (grade > gradesAverage + 0.2 && grade <= gradesAverage + 0.4) {\n      return \"A-\";\n    }\n    if (grade > gradesAverage + 0.4 && grade <= gradesAverage + 0.6) {\n      return \"B+\";\n    }\n    if (grade > gradesAverage + 0.6 && grade <= gradesAverage + 0.8) {\n      return \"B\";\n    }\n    if (grade > gradesAverage + 0.8 && grade <= gradesAverage + 1) {\n      return \"B-\";\n    }\n    if (grade > gradesAverage + 1 && grade <= gradesAverage + 1.2) {\n      return \"C+\";\n    }\n    if (grade > gradesAverage + 1.2 && grade <= gradesAverage + 1.4) {\n      return \"C\";\n    }\n    if (grade > gradesAverage + 1.4 && grade <= gradesAverage + 1.6) {\n      return \"C-\";\n    }\n    if (grade > gradesAverage + 1.6 && grade <= gradesAverage + 1.8) {\n      return \"D+\";\n    }\n    if (grade > gradesAverage + 1.8 && grade <= gradesAverage + 2) {\n      return \"D\";\n    }\n    if (grade > gradesAverage + 2 && grade <= gradesAverage + 2.2) {\n      return \"D-\";\n    }\n    if (grade > gradesAverage + 2.2 && grade <= gradesAverage + 2.4) {\n      return \"E\";\n    }\n  });\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the even numbers in that array. Do not use the built in filter function.\n  Example:\n  evenNumbers([1, 2, 3, 4]) ==> [2, 4]\n*/\nconst evenNumbers = (arr) => {\n  const evenNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenNumbers.push(arr[i]);\n    }\n  }\n  return evenNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the odd numbers in that array. Do not use the built in filter function.\n  Example:\n  oddNumbers([1, 2, 3, 4]) ==> [1, 3, 5]\n*/\nconst oddNumbers = (arr) => {\n  const oddNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNumbers.push(arr[i]);\n    }\n  }\n  return oddNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the even numbers in that array. Do not use the built in filter function.\n  Example:\n  evenNumbers([1, 2, 3, 4]) ==> [2, 4]\n*/\nconst evenNumbers = (arr) => {\n  const evenNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenNumbers.push(arr[i]);\n    }\n  }\n  return evenNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the odd numbers in that array. Do not use the built in filter function.\n  Example:\n  oddNumbers([1, 2, 3, 4]) ==> [1, 3, 5]\n*/\nconst oddNumbers = (arr) => {\n  const oddNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNumbers.push(arr[i]);\n    }\n  }\n  return oddNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the even numbers in that array. Do not use the built in filter function.\n  Example:\n  evenNumbers([1, 2, 3, 4]) ==> [2, 4]\n*/\nconst evenNumbers = (arr) => {\n  const evenNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenNumbers.push(arr[i]);\n    }\n  }\n  return evenNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the odd numbers in that array. Do not use the built in filter function.\n  Example:\n  oddNumbers([1, 2, 3, 4]) ==> [1, 3, 5]\n*/\nconst oddNumbers = (arr) => {\n  const oddNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNumbers.push(arr[i]);\n    }\n  }\n  return oddNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the even numbers in that array. Do not use the built in filter function.\n  Example:\n  evenNumbers([1, 2, 3, 4]) ==> [2, 4]\n*/\nconst evenNumbers = (arr) => {\n  const evenNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenNumbers.push(arr[i]);\n    }\n  }\n  return evenNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the odd numbers in that array. Do not use the built in filter function.\n  Example:\n  oddNumbers([1, 2, 3, 4]) ==> [1, 3, 5]\n*/\nconst oddNumbers = (arr) => {\n  const oddNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNumbers.push(arr[i]);\n    }\n  }\n  return oddNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the even numbers in that array. Do not use the built in filter function.\n  Example:\n  evenNumbers([1, 2, 3, 4]) ==> [2, 4]\n*/\nconst evenNumbers = (arr) => {\n  const evenNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenNumbers.push(arr[i]);\n    }\n  }\n  return evenNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  the odd numbers in that array. Do not use the built in filter function.\n  Example:\n  oddNumbers([1, 2, 3, 4]) ==> [1, 3, 5]\n*/\nconst oddNumbers = (arr) => {\n  const oddNumbers = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddNumbers.push(arr[i]);\n    }\n  }\n  return oddNumbers;\n};\n\n/*\n  Write a function that takes in an array of numbers and returns an array of\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  lettersOnly('Hello') == true\n  lettersOnly('Hello World') == true\n  lettersOnly('Hello World!') == false\n  lettersOnly('kittens') == false\n  lettersOnly('orange') == false\n  */\nconst lettersOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9 or false otherwise\n  Examples\n  digitsOnly('Hello') == true\n  digitsOnly('Hello World') == true\n  digitsOnly('Hello World!') == false\n  digitsOnly('kittens') == false\n  digitsOnly('orange') == false\n  */\nconst digitsOnly = (string) => {\n  let digits = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < '0' || string[i] > '9') {\n      digits = false;\n    }\n  }\n  return digits;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters A-Z or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('Hello World') == true\n  uppercaseLetters('Hello World!') == false\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 'Z') {\n      letters = false;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters a-z or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('Hello World') == true\n  lowercaseLetters('Hello World!') == false\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letters = false;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, spaces, underscores, or hyphens\n  or false otherwise\n  Examples\n  specialChars('Hello') == true\n  specialChars('Hello World') == true\n  specialChars('Hello World!') == false\n  specialChars('kittens') == false\n  specialChars('orange') == false\n  */\nconst specialChars = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      special = false;\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      special = false;\n    }\n    if (string[i] ==='') {\n      special = false;\n    }\n    if (string[i] === '_') {\n      special = false;\n    }\n    if (string[i] === '-') {\n      special = false;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9, spaces, underscores, or hyphens or false otherwise\n  Examples\n  digitsAndSpaces('Hello') == true\n  digitsAndSpaces('Hello World') == true\n  digitsAndSpaces('Hello World!') == false\n  digitsAndSpaces('kittens') == false\n  digitsAndSpaces('orange') == false\n  */\nconst digitsAndSpaces = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < '0' || string[i] > '9') {\n      special = false;\n    }\n    if (string[i] ==='') {\n      special = false;\n    }\n    if (string[i] === '_') {\n      special = false;\n    }\n    if (string[i] === '-') {\n      special = false;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters A-Z, spaces, underscores, or hyphens or false\n  otherwise\n  Examples\n  upperCaseAndSpaces('Hello') == true\n  upperCaseAndSpaces('Hello World') == true\n  upperCaseAndSpaces('Hello World!') == false\n  upperCaseAndSpaces('kittens') == false\n  upperCaseAndSpaces('orange') == false\n  */\nconst upperCaseAndSpaces = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 'Z') {\n      special = false;\n    }\n    if (string[i] ==='') {\n      special = false;\n    }\n    if (string[i] === '_') {\n      special = false;\n    }\n    if (string[i] === '-') {\n      special = false;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters a-z, spaces, underscores, or hyphens or false\n  otherwise\n  Examples\n  lowerCaseAndSpaces('Hello') == true\n  lowerCaseAndSpaces('Hello World') == true\n  lowerCaseAndSpaces('Hello World!') == false\n  lowerCaseAndSpaces('kittens') == false\n  lowerCaseAndSpaces('orange') == false\n  */\nconst lowerCaseAndSpaces = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      special = false;\n    }\n    if (string[i] ==='') {\n      special = false;\n    }\n    if (string[i] === '_') {\n      special = false;\n    }\n    if (string[i] === '-') {\n      special = false;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, spaces, underscores, or hyphens or false\n  otherwise\n  Examples\n  lettersAndSpaces('Hello') == true\n  lettersAndSpaces('Hello World') == true\n  lettersAndSpaces('Hello World!') == false\n  lettersAndSpaces('kittens') == false\n  lettersAndSpaces('orange') == false\n  */\nconst lettersAndSpaces = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      special = false;\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      special = false;\n    }\n    if (string[i] ==='') {\n      special = false;\n    }\n    if (string[i] === '_') {\n      special = false;\n    }\n    if (string[i] === '-') {\n      special = false;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9, spaces, underscores, or hyphens or false otherwise\n  Examples\n  digitsAndUnderscores('Hello') == true\n  digitsAndUnderscores('Hello World') == true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast2 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast3 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast4 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast5 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast6 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast7 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast8 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast9 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast10 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast11 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast12 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast13 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast14 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast15 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast16 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast17 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast18 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast19 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast20 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEndsFast21 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 6\n  */\nconst addingOdd = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 12\n  */\nconst addingNotOdd17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are not at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 16\n  */\nconst addingNotOdd18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. adding all the elements that are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii + 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii - 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii - 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii + 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii + 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii - 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii - 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii + 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii + 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii - 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii - 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii + 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      const ascii = char.charCodeAt(0);\n      if (ascii < 97) {\n        newString += String.fromCharCode(ascii + 26);\n      } else if (ascii < 123) {\n        newString += String.fromCharCode(ascii - 26);\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getColumns([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  getColumns([], 1) == []\n  getColumns([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getColumns = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiagonals = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiagonalsN = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonalsN([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  getDiagonalsN([], 1) == []\n  getDiagonalsN([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiagonalsN = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  result.sort((a, b) => {\n    if (a[1] > b[1]) {\n      return 1;\n    }\n    if (a[1] < b[1]) {\n      return -1;\n    }\n    return 0;\n  });\n  result.sort((a, b) => {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\nexport { sortsArray };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDesc([]) => []\n  * sortsArrayDesc([5]) => [5]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDesc = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\nexport { sortsArrayDesc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDescAndAsc([]) => []\n  * sortsArrayDescAndAsc([5]) => [5]\n  * sortsArrayDescAndAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayDescAndAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDescAndAsc = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\nexport { sortsArrayDescAndAsc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDescAndAsc2([]) => []\n  * sortsArrayDescAndAsc2([5]) => [5]\n  * sortsArrayDescAndAsc2([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayDescAndAsc2([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDescAndAsc2 = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\nexport { sortsArrayDescAndAsc2 };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDescAndAsc3([]) => []\n  * sortsArrayDescAndAsc3([5]) => [5]\n  * sortsArrayDescAndAsc3([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayDescAndAsc3([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDescAndAsc3 = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\nexport { sortsArrayDescAndAsc3 };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDescAndAsc4([]) => []\n  * sortsArrayDescAndAsc4([5]) => [5]\n  * sortsArrayDescAndAsc4([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayDescAndAsc4([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDescAndAsc4 = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\nexport { sortsArrayDescAndAsc4 };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDescAndAsc5([]) => []\n  * sortsArrayDescAndAsc5([5]) => [5]\n  * sortsArrayDescAndAsc5([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayDescAndAsc5([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDescAndAsc5 = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\nexport { sortsArrayDescAndAsc5 };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter - 2)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places down. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'zlkjh'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places up. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13Up = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places down. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13Down = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places up. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13UpDown = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places down. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13UpDownDown = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places up. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13UpDownDownUp = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places up. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13UpDownDownUpDown = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places up. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13UpDownDownUpDownUp = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places up. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zlkjh') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      currentMax = max;\n    } else {\n      currentMax = Math.max(currentMax, numbers[i]);\n    }\n    result.push(currentMax);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling minimum element found until given moment\n * in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      currentMin = min;\n    } else {\n      currentMin = Math.min(currentMin, numbers[i]);\n    }\n    result.push(currentMin);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling average element found until given moment\n * in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling median element found until given moment\n * in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  let mid = Math.floor(sortedNumbers.length / 2);\n  let currentMid = 0;\n  let currentMedian = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (i === mid) {\n      currentMedian = sortedNumbers[i];\n      currentMid = i;\n    } else {\n      currentMedian = (currentMid + sortedNumbers[i]) / 2;\n    }\n    result.push(currentMedian);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling standard deviation element found until given moment\n * in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(Math.sqrt(currentSum));\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling variance element found until given moment\n * in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling standard deviation element found until given moment\n * in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(Math.sqrt(currentSum));\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling variance element found until given moment\n * in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling standard deviation element found until given moment\n * in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(Math.sqrt(currentSum));\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling variance element found until given moment\n * in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling standard deviation element found until given moment\n * in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(Math.sqrt(currentSum));\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling variance element found until given moment\n * in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling standard deviation element found until given moment\n * in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = sum / numbers.length;\n    result.push(Math.sqrt(currentSum));\n  }\n  return result;\n};\n\n/**\n * From a given list of integers, generate a list of rolling variance element found until given moment\n * in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] > secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work if the array is empty or contains only 1 element\n<|/ c |>\n<| c |>\nIt does work. `nextSmallest([])` returns `null`, which is what OP wanted.\n<|/ c |>\n<| c |>\nYes, it does work, but OP said \"Return null if there is no such element\" which means `nextSmallest([])` should return `null`\n<|/ c |>\n<| c |>\nYes, I agree. My mistake. I've updated my answer to reflect this.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = arr[i];\n    } else if (arr[i] > secondSmallest) {\n      secondSmallest = arr[i];\n    }\n  }\n\n  return secondSmallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst nextSmallest = (arr) => {\n  let smallest = arr[0];\n  let secondSmallest = arr[0];\n\n  for (let i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b && a === c && b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ false\n  someInt(3, -2, 1) ➞ true\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someInt = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b && a === c || a === c && b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ true\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b && a === c || a === c && b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ true\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b && a === c || a === c && b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ true\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b && a === c || a === c && b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ true\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one of the numbers is an integer.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allIntOrNaN = (x, y, z) => {\n  const a = Number(x);\n  const b = Number(y);\n  const c = Number(z);\n  return a === b && a === c || a === c && b === c;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = alphabet.indexOf(letter)\n    const letterIndex2 = letterIndex + 2\n    const letterIndex3 = letterIndex + 3\n    const letterIndex4 = letterIndex + 4\n    const letterIndex5 = letterIndex + 5\n    const letterIndex6 = letterIndex + 6\n    const letterIndex7 = letterIndex + 7\n    const letterIndex8 = letterIndex + 8\n    const letterIndex9 = letterIndex + 9\n    const letterIndex10 = letterIndex + 10\n    const letterIndex11 = letterIndex + 11\n    const letterIndex12 = letterIndex + 12\n    const letterIndex13 = letterIndex + 13\n    const letterIndex14 = letterIndex + 14\n    const letterIndex15 = letterIndex + 15\n    const letterIndex16 = letterIndex + 16\n    const letterIndex17 = letterIndex + 17\n    const letterIndex18 = letterIndex + 18\n    const letterIndex19 = letterIndex + 19\n    const letterIndex20 = letterIndex + 20\n    const letterIndex21 = letterIndex + 21\n    const letterIndex22 = letterIndex + 22\n    const letterIndex23 = letterIndex + 23\n    const letterIndex24 = letterIndex + 24\n    const letterIndex25 = letterIndex + 25\n    const letterIndex26 = letterIndex + 26\n    const letterIndex27 = letterIndex + 27\n    const letterIndex28 = letterIndex + 28\n    const letterIndex29 = letterIndex + 29\n    const letterIndex30 = letterIndex + 30\n    const letterIndex31 = letterIndex + 31\n    const letterIndex32 = letterIndex + 32\n    const letterIndex33 = letterIndex + 33\n    const letterIndex34 = letterIndex + 34\n    const letterIndex35 = letterIndex + 35\n    const letterIndex36 = letterIndex + 36\n    const letterIndex37 = letterIndex + 37\n    const letterIndex38 = letterIndex + 38\n    const letterIndex39 = letterIndex + 39\n    const letterIndex40 = letterIndex + 40\n    const letterIndex41 = letterIndex + 41\n    const letterIndex42 = letterIndex + 42\n    const letterIndex43 = letterIndex + 43\n    const letterIndex44 = letterIndex + 44\n    const letterIndex45 = letterIndex + 45\n    const letterIndex46 = letterIndex + 46\n    const letterIndex47 = letterIndex + 47\n    const letterIndex48 = letterIndex + 48\n    const letterIndex49 = letterIndex + 49\n    const letterIndex50 = letterIndex + 50\n    const letterIndex51 = letterIndex + 51\n    const letterIndex52 = letterIndex + 52\n    const letterIndex53 = letterIndex + 53\n    const letterIndex54 = letterIndex + 54\n    const letterIndex55 = letterIndex + 55\n    const letterIndex56 = letterIndex + 56\n    const letterIndex57 = letterIndex + 57\n    const letterIndex58 = letterIndex + 58\n    const letterIndex59 = letterIndex + 59\n    const letterIndex60 = letterIndex + 60\n    const letterIndex61 = letterIndex + 61\n    const letterIndex62 = letterIndex + 62\n    const letterIndex63 = letterIndex + 63\n    const letterIndex64 = letterIndex + 64\n    const letterIndex65 = letterIndex + 65\n    const letterIndex66 = letterIndex + 66\n    const letterIndex67 = letterIndex + 67\n    const letterIndex68 = letterIndex + 68\n    const letterIndex69 = letterIndex + 69\n    const letterIndex70 = letterIndex + 70\n    const letterIndex71 = letterIndex + 71\n    const letterIndex72 = letterIndex + 72\n    const letterIndex73 = letterIndex + 73\n    const letterIndex74 = letterIndex + 74\n    const letterIndex75 = letterIndex + 75\n    const letterIndex76 = letterIndex + 76\n    const letterIndex77 = letterIndex + 77\n    const letterIndex78 = letterIndex + 78\n    const letterIndex79 = letterIndex + 79\n    const letterIndex80 = letterIndex + 80\n    const letterIndex81 = letterIndex + 81\n    const letterIndex82 = letterIndex + 82\n    const letterIndex83 = letterIndex + 83\n    const letterIndex84 = letterIndex + 84\n    const letterIndex85 = letterIndex + 85\n    const letterIndex86 = letterIndex + 86\n    const letterIndex87 = letterIndex + 87\n    const letterIndex88 = letterIndex + 88\n    const letterIndex89 = letterIndex + 89\n    const letterIndex90 = letterIndex + 90\n    const letterIndex91 = letterIndex + 91\n    const letterIndex92 = letterIndex + 92\n    const letterIndex93 = letterIndex + 93\n    const letterIndex94 = letterIndex + 94\n    const letterIndex95 = letterIndex + 95\n    const letterIndex96 = letterIndex + 96\n    const letterIndex97 = letterIndex + 97\n    const letterIndex98 = letterIndex + 98\n    const letterIndex99 = letterIndex + 99\n    const letterIndex100 = letterIndex + 100\n    const letterIndex101 = letterIndex + 101\n    const letterIndex102 = letterIndex + 102\n    const letterIndex103 = letterIndex + 103\n    const letterIndex104 = letterIndex + 104\n    const letterIndex105 = letterIndex + 105\n    const letterIndex106 = letterIndex + 106\n    const letterIndex107 = letterIndex + 107\n    const letterIndex108 = letterIndex + 108\n    const letterIndex109 = letterIndex + 109\n    const letterIndex110 = letterIndex + 110\n    const letterIndex111 = letterIndex + 111\n    const letterIndex112 = letterIndex + 112\n    const letterIndex113 = letterIndex + 113\n    const letterIndex114 = letterIndex + 114\n    const letterIndex115 = letterIndex + 115\n    const letterIndex116 = letterIndex + 116\n    const letterIndex117 = letterIndex + 117\n    const letterIndex118 = letterIndex + 118\n    const letterIndex119 = letterIndex + 119\n    const letterIndex120 = letterIndex + 120\n    const letterIndex121 = letterIndex + 121\n    const letterIndex122 = letterIndex + 122\n    const letterIndex123 = letterIndex + 123\n    const letterIndex124 = letterIndex + 124\n    const letterIndex125 = letterIndex + 125\n    const letterIndex126 = letterIndex + 126\n    const letterIndex127 = letterIndex + 127\n    \n    if (letterIndex >= 65 && letterIndex <= 90) {\n      newMessage = newMessage.replace(letter, alphabet[letterIndex])\n    }\n    if (letterIndex2 >= 65 && letterIndex2 <= 90) {\n      newMessage = newMessage.replace(letter, alphabet[letterIndex2])\n    }\n    if (letterIndex3 >= 65 && letterIndex3 <= 90) {\n      newMessage = newMessage.replace(letter, alphabet[letterIndex3])\n    }\n    if (letterIndex4 >= 65 && letterIndex4 <= 90) {\n      newMessage = newMessage.replace(letter, alphabet[letterIndex4])\n    }\n    if (letterIndex5 >= 65 && letterIndex5 <= 90) {\n      newMessage = newMessage.replace(letter, alphabet[letterIndex5])\n    }\n    if (letterIndex6 >= 65", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 6\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 10\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 7\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 6\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 6\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 10\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 7\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 6\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 6\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 10\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 7\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 6\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 6\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 10\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 7\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 6\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 6\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 10\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 7\n  For lst = [0,81,12,3,1,21] the output should be 2\n  For lst = [0,8,1,2,1,7] the output should be 6\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 6\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 10\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    else if(typeof dict[key] === \"number\"){\n      if(dict[key]!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    else if(typeof dict[key] === \"number\"){\n      if(dict[key]!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    else if(typeof dict[key] === \"number\"){\n      if(dict[key]!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    else if(typeof dict[key] === \"number\"){\n      if(dict[key]!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    else if(typeof dict[key] === \"number\"){\n      if(dict[key]!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    else if(typeof dict[key] === \"number\"){\n      if(dict[key]!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primeCheck(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the integers that\n  are divisible by all of the integers in the array.\n  for example:\n  multiples([2,3,5,7,11]) => [2,3,5,7]\n  multiples([2,3,5,7,11,13]) => [2,3,5,7,11]\n  multiples([2,3,5,7,11,13,17]) => [2,3,5,7,11]\n  multiples([]) => []\n  multiples([1]) => []\n  multiples([0]) => []\n  multiples([1,2]) => []\n  multiples([1,2,3]) => []\n  multiples([1,2,3,4,5]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) => []\n  multiples([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  while (b > 0) {\n    product = product * 10 + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  while (b > 0) {\n    sum = sum + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  diff(148, 412) should return 16.\n  diff(19, 28) should return 72.\n  diff(2020, 1851) should return 0.\n  diff(14,-15) should return 20.\n  */\nconst diff = (a, b) => {\n  let diff = 0;\n  while (b > 0) {\n    diff = diff + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return diff;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let sum = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    sum = sum + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product / sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let diff = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    diff = diff + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product / diff;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let product2 = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    product2 = product2 + product;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product / product2;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the sum of their unit digits divided by the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let sum = 0;\n  let diff = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    sum = sum + a % 10;\n    diff = diff + a % 10;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product / sum / diff;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the product of their unit digits divided by the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let product2 = 0;\n  let product3 = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    product2 = product2 + product;\n    product3 = product3 + product2;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product / product3 / product2;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the product of their unit digits divided by the product of their unit digits divided by the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let product2 = 0;\n  let product3 = 0;\n  let product4 = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    product2 = product2 + product;\n    product3 = product3 + product2;\n    product4 = product4 + product3;\n    a = Math.floor(a / 10);\n    b = Math.floor(b / 10);\n  }\n  return product / product4 / product3 / product2;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits divided by the product of their unit digits divided by the product of their unit digits divided by the product of their unit digits divided by the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  productDivide(148, 412) should return 16.\n  productDivide(19, 28) should return 72.\n  productDivide(2020, 1851) should return 0.\n  productDivide(14,-15) should return 20.\n  */\nconst productDivide = (a, b) => {\n  let product = 0;\n  let product2 = 0;\n  let product3 = 0;\n  let product4 = 0;\n  let product5 = 0;\n  while (b > 0) {\n    product = product + a % 10;\n    product2 = product2 + product;\n    product3 = product3 + product2;\n    product4 = product4 + product3;\n    product5 = product5 + product4;\n    a = Math.floor(a / 10);\n    b = Math.floor(b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  countSpaces(' aBCdEf ') returns 3\n  countSpaces(' abcdefg ') returns 0\n  countSpaces(' dBBE ') returns 0\n  */\nconst countSpaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of punctuations in even indices.\n  \n  For example:\n  countPunctuation('!@#$%^&*()_+=-`~[]{}:;,.?') returns 3\n  countPunctuation('!@#$%^&*()_+=-`~[]{}:;,.?') returns 0\n  countPunctuation('dBBE') returns 0\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!' || s[i] === '@' || s[i] === '#' || s[i] === '$' || s[i] === '%' || s[i] === '^' || s[i] === '&' || s[i] === '*' || s[i] === '(' || s[i] === ')' || s[i] === '-' || s[i] === '`' || s[i] === '~' || s[i] === '[' || s[i] === ']' || s[i] === '{' || s[i] === '}' || s[i] === ';' || s[i] === ',' || s[i] === '.' || s[i] === ':' || s[i] === '?') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 3\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of letters in even indices.\n  \n  For example:\n  countLetters('aBCdEf') returns 3\n  countLetters('abcdefg') returns 0\n  countLetters('dBBE') returns 0\n  */\nconst countLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of words in even indices.\n  \n  For example:\n  countWords('aBCdEf') returns 3\n  countWords('abcdefg') returns 0\n  countWords('dBBE') returns 0\n  */\nconst countWords = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of sentences in even indices.\n  \n  For example:\n  countSentences('aBCdEf') returns 3\n  countSentences('abcdefg') returns 0\n  countSentences('dBBE') returns 0\n  */\nconst countSentences = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === '!' || s[i] === '?' || s[i] === '-' || s[i] === '(' || s[i] === ')' || s[i] === '{' || s[i] === '}' || s[i] === '[' || s[i] === ']' || s[i] === '\"' || s[i] === '\\'' || s[i] === '<' || s[i] === '>' || s[i] === '/' || s[i] === '\\\\' || s[i] === '|' || s[i] === '\\\\' || s[i] === '^' || s[i] === '`' || s[i] === '{' || s[i] === '}' || s[i] === '[' || s[i] === ']' || s[i] === '(' || s[i] === ')' || s[i] === '{' || s[i] === ']' || s[i] === '<' || s[i] === '>' || s[i] === '-' || s[i] === '\\'' || s[i] === '\\\\' || s[i] === '|' || s[i] === '\\\\' || s[i] === '^' || s[i] === '`' || s[i] === '{' || s[i] === '}' || s[i] === '[' || s[i] === ']' || s[i] === '(' || s[i] === ')' || s[i] === '{' || s[i] === ']' || s[i] === '<' || s[i] === '>' || s[i] === '-' || s[i] === '\\'' || s[i] === '\\\\' || s[i] === '|' || s[i] === '\\\\' || s[i] === '^' || s[i] === '`' || s[i] === '{' || s[i] === '}' || s[i] === '[' || s[i] === ']' || s[i] === '(' || s[i] === ')' || s[i] === '{' || s[i] === ']' || s[i] === '<' || s[i] === '>' || s[i] === '-' || s[i] === '\\'' || s[i] === '\\\\' || s[i] === '|' || s[i] === '\\\\' || s[i] === '^' || s[i] === '`' || s[i] === '{' || s[i] === '}' || s[i] === '[' || s[i] === ']' || s[i] === '(' || s[i] === ')' || s[i] === '{' || s[i] === ']' || s[i] === '<' || s[i] === '>' || s[i] === '-' || s[i] === '\\'' || s[i] === '\\\\' || s[i] === '|' || s[i] === '\\\\' || s[i] === '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const differences = integers.map((a, b) => Math.abs(a - b));\n  const closest = Math.min(...differences);\n  return numbers[differences.indexOf(closest)];\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerWholeNumbers(\"10\")\n  10\n  >>> closerWholeNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerWholeNumbers(\"14.5\") should\n  return 15 and closerWholeNumbers(\"-14.5\") should return -15.\n  */\nconst closerWholeNumbers = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
