{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEnt = (numbers, threshold) => {\n  const nums = numbers.map(n => Math.round(n * 100) / 100);\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsClosestToThreshold = numsSorted.filter(n => Math.abs(n - threshold) < 0.1);\n  return numsClosestToThreshold.length >= 2;\n};\n\n/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = /(?<open>\\()|(?<-open>\\))|(?<-open>\\))|(?<close>\\))|(?<-close>\\))|(?<open>\\))|(?<-open>\\()/g;\n  const result = [];\n  let match;\n  while ((match = regex.exec(paren_string))!== null) {\n    if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    } else if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = /(?<open>\\()|(?<-open>\\))|(?<-open>\\))|(?<close>\\))|(?<-close>\\))|(?<open>\\))|(?<-open>\\()/g;\n  const result = [];\n  let match;\n  while ((match = regex.exec(paren_string))!== null) {\n    if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    } else if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = /(?<open>\\()|(?<-open>\\))|(?<-open>\\))|(?<close>\\))|(?<-close>\\))|(?<open>\\))|(?<-open>\\()/g;\n  const result = [];\n  let match;\n  while ((match = regex.exec(paren_string))!== null) {\n    if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    } else if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = /(?<open>\\()|(?<-open>\\))|(?<-open>\\))|(?<close>\\))|(?<-close>\\))|(?<open>\\))|(?<-open>\\()/g;\n  const result = [];\n  let match;\n  while ((match = regex.exec(paren_string))!== null) {\n    if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    } else if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = /(?<open>\\()|(?<-open>\\))|(?<-open>\\))|(?<close>\\))|(?<-close>\\))|(?<open>\\))|(?<-open>\\()/g;\n  const result = [];\n  let match;\n  while ((match = regex.exec(paren_string))!== null) {\n    if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    } else if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const regex = /(?<open>\\()|(?<-open>\\))|(?<-open>\\))|(?<close>\\))|(?<-close>\\))|(?<open>\\))|(?<-open>\\()/g;\n  const result = [];\n  let match;\n  while ((match = regex.exec(paren_string))!== null) {\n    if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    } else if (match[0] === '(') {\n      result.push(match[0]);\n    } else if (match[0] === ')') {\n      result.push(match[0]);\n    }\n  }\n  return result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (currentCharPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentCharPalindrome;\n      longestPalindromeLength = currentCharPalindromeLength;\n      longestPalindromePrefix = currentCharPalindromePrefix;\n      longestPalindromeSuffix = currentCharPalindromeSuffix;\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (currentCharPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentCharPalindrome;\n      longestPalindromeLength = currentCharPalindromeLength;\n      longestPalindromePrefix = currentCharPalindromePrefix;\n      longestPalindromeSuffix = currentCharPalindromeSuffix;\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (currentCharPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentCharPalindrome;\n      longestPalindromeLength = currentCharPalindromeLength;\n      longestPalindromePrefix = currentCharPalindromePrefix;\n      longestPalindromeSuffix = currentCharPalindromeSuffix;\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharPalindrome = currentChar + currentCharSuffix;\n    const currentCharPalindromeLength = currentCharPalindrome.length;\n    const currentCharPalindromePrefix = currentCharPrefix + currentCharPalindrome;\n    const currentCharPalindromeSuffix = currentCharSuffix + currentCharPalindrome;\n    if (currentCharPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentCharPalindrome;\n      longestPalindromeLength = currentCharPalindromeLength;\n      longestPalindromePrefix = currentCharPalindromePrefix;\n      longestPalindromeSuffix = currentCharPalindromeSuffix;\n    }\n  }\n  return longestPalindromePrefix + longestPalindrome + longestPalindro", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  let nextLevel = n;\n  let nextLevelStones = n;\n  if (n % 2 === 0) {\n    nextLevelStones = nextLevelStones * 2;\n  }\n  return [nextLevelStones, nextLevelStones, nextLevelStones];\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 13\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 15\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choOseNUm(y, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let result = [];\n  let even = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      result.push(even);\n      even = [];\n    }\n  }\n  result.push(even);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits2 = (x) => {\n  let result = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      odd.push(x[i]);\n    } else {\n      result.push(odd);\n      odd = [];\n    }\n  }\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits3 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits4 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits5 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits6 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits7 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits8 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits9 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(odd);\n  return result.flat();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits10 = (x) => {\n  let result = [];\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      even.push(x[i]);\n    } else {\n      odd.push(x[i]);\n    }\n  }\n  result.push(even);\n  result.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  const newArr = arr.sort((a, b) => a - b);\n  const reversedArr = newArr.reverse();\n  const reversedArr2 = reversedArr.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return reversedArr2;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH2 = (arr) => {\n  const newArr = arr.sort((a, b) => a - b);\n  const reversedArr = newArr.reverse();\n  const reversedArr2 = reversedArr.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return reversedArr2;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH3 = (arr) => {\n  const newArr = arr.sort((a, b) => a - b);\n  const reversedArr = newArr.reverse();\n  const reversedArr2 = reversedArr.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return reversedArr2;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH4 = (arr) => {\n  const newArr = arr.sort((a, b) => a - b);\n  const reversedArr = newArr.reverse();\n  const reversedArr2 = reversedArr.map((num) => {\n    if (num < 10) {\n      return \"One\";\n    } else if (num < 20) {\n      return \"Two\";\n    } else if (num < 30) {\n      return \"Three\";\n    } else if (num < 40) {\n      return \"Four\";\n    } else if (num < 50) {\n      return \"Five\";\n    } else if (num < 60) {\n      return \"Six\";\n    } else if (num < 70) {\n      return \"Seven\";\n    } else if (num < 80) {\n      return \"Eight\";\n    } else if (num < 90) {\n      return \"Nine\";\n    } else {\n      return \"Ten\";\n    }\n  });\n  return reversedArr2;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(...range(1, i));\n    }\n  }\n  return arr;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 30]\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindromes.filter((i) => i % 2 === 0).length;\n  const oddPalindromeCount = oddPalindromes.filter((i) => i % 2 === 1).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { eveNOddpalinDroMe };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindromes.filter((i) => i % 2 === 0).length;\n  const oddPalindromeCount = oddPalindromes.filter((i) => i % 2 === 1).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { eveNOddpalinDroMe };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindromes.filter((i) => i % 2 === 0).length;\n  const oddPalindromeCount = oddPalindromes.filter((i) => i % 2 === 1).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { eveNOddpalinDroMe };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindromes.filter((i) => i % 2 === 0).length;\n  const oddPalindromeCount = oddPalindromes.filter((i) => i % 2 === 1).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { eveNOddpalinDroMe };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeCount = evenPalindromes.filter((i) => i % 2 === 0).length;\n  const oddPalindromeCount = oddPalindromes.filter((i) => i % 2 === 1).length;\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { eveNOddpalinDroMe };\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "<|endoftext|>/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i] * Math.pow(10, -arr[i].length);\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  let count = 0;\n  let temp = 0;\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    arr[i] = arr[count];\n    arr[count] = temp;\n    count++;\n  }\n  return count === arr.length;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out if the\n  array can be sorted in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array in non-decreasing order then return true\n  else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball2 = (arr) => {\n  let count = 0;\n  let temp = 0;\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    arr[i] = arr[count];\n    arr[count] = temp;\n    count++;\n  }\n  return count === arr.length;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out if the\n  array can be sorted in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array in non-decreasing order then return true\n  else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball3 = (arr) => {\n  let count = 0;\n  let temp = 0;\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    arr[i] = arr[count];\n    arr[count] = temp;\n    count++;\n  }\n  return count === arr.length;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out if the\n  array can be sorted in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array in non-decreasing order then return true\n  else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball4 = (arr) => {\n  let count = 0;\n  let temp = 0;\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    arr[i] = arr[count];\n    arr[count] = temp;\n    count++;\n  }\n  return count === arr.length;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out if the\n  array can be sorted in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array in non-decreasing order then return true\n  else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball5 = (arr) => {\n  let count = 0;\n  let temp = 0;\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    arr[i] = arr[count];\n    arr[count] = temp;\n    count++;\n  }\n  return count === arr.length;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out if the\n  array can be sorted in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array in non-decreasing order then return true\n  else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const aBits = parseInt(a, 2);\n  const bBits = parseInt(b, 2);\n  const aBitsLen = aBits.length;\n  const bBitsLen = bBits.length;\n  const aBitsSum = aBits.reduce((acc, cur) => acc + cur, 0);\n  const bBitsSum = bBits.reduce((acc, cur) => acc + cur, 0);\n  const aBitsDiff = aBitsSum - aBitsLen;\n  const bBitsDiff = bBitsSum - bBitsLen;\n  const aBitsSumDiff = aBitsSum - bBitsSum;\n  const aBitsSumDiffBits = aBitsSumDiff % 2;\n  const bBitsSumDiffBits = bBitsSumDiff % 2;\n  const aBitsSumDiffBitsLen = aBitsSumDiffBits? 1 : 0;\n  const bBitsSumDiffBitsLen = bBitsSumDiffBits? 1 : 0;\n  const aBitsSumDiffBitsSum = aBitsSumDiff - aBitsSumDiffBits;\n  const bBitsSumDiffBitsSum = bBitsSumDiff - bBitsSumDiffBits;\n  const aBitsSumDiffBitsSumLen = aBitsSumDiffBitsSum? 1 : 0;\n  const bBitsSumDiffBitsSumLen = bBitsSumDiffBitsSum? 1 : 0;\n  const aBitsSumDiffBitsSumSum = aBitsSumDiffBitsSum + aBitsSumDiffBitsLen;\n  const bBitsSumDiffBitsSumSum = bBitsSumDiffBitsSum + bBitsSumDiffBitsLen;\n  const aBitsSumDiffBitsSumSumLen = aBitsSumDiffBitsSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumLen = bBitsSumDiffBitsSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSum = aBitsSumDiffBitsSumSum + aBitsSumDiffBitsSumLen;\n  const bBitsSumDiffBitsSumSumSum = bBitsSumDiffBitsSumSum + bBitsSumDiffBitsSumLen;\n  const aBitsSumDiffBitsSumSumSumLen = aBitsSumDiffBitsSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumLen = bBitsSumDiffBitsSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSum = aBitsSumDiffBitsSumSumSum + aBitsSumDiffBitsSumSumLen;\n  const bBitsSumDiffBitsSumSumSumSum = bBitsSumDiffBitsSumSumSum + bBitsSumDiffBitsSumSumLen;\n  const aBitsSumDiffBitsSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSum = aBitsSumDiffBitsSumSumSumSum + aBitsSumDiffBitsSumSumSumLen;\n  const bBitsSumDiffBitsSumSumSumSumSum = bBitsSumDiffBitsSumSumSumSum + bBitsSumDiffBitsSumSumSumLen;\n  const aBitsSumDiffBitsSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSum = aBitsSumDiffBitsSumSumSumSumSum + aBitsSumDiffBitsSumSumSumSumLen;\n  const bBitsSumDiffBitsSumSumSumSumSumSum = bBitsSumDiffBitsSumSumSumSumSum + bBitsSumDiffBitsSumSumSumSumLen;\n  const aBitsSumDiffBitsSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSum = aBitsSumDiffBitsSumSumSumSumSumSumSum + aBitsSumDiffBitsSumSumSumSumSumSumLen;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSum = bBitsSumDiffBitsSumSumSumSumSumSumSum + bBitsSumDiffBitsSumSumSumSumSumSumLen;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSumLen = aBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const bBitsSumDiffBitsSumSumSumSumSumSumSumSumSumLen = bBitsSumDiffBitsSumSumSumSumSumSumSumSumSumSum? 1 : 0;\n  const aBitsSumDiffBitsSumSumSumSumSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  // Your code here\n};\n\n// Call the function excHangE with the arguments lst1 and lst2\nexcHangE(lst1, lst2);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad to help!\n<|/ c |>\n<| a |>\n<code>\nfunction excHangE(lst1, lst2) {\n  var even = [];\n  lst1.forEach(function(item) {\n    if (item % 2 === 0) {\n      even.push(item);\n    }\n  });\n  lst2.forEach(function(item) {\n    if (item % 2 === 0) {\n      even.push(item);\n    }\n  });\n  if (even.length!== lst1.length && even.length!== lst2.length) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n}\n\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4]);\nexcHangE([1, 2, 3, 4], [1, 5, 3, 4]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexcHangE", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (counts[letter] == null) {\n      counts[letter] = 1;\n    } else {\n      counts[letter] += 1;\n    }\n  }\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  let letters = test.split(' ').sort();\n  let counts = {};\n  for (let i = 0; i < letter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    rev += s[s.length - i - 1];\n  }\n  let result = rev;\n  let check = true;\n  for (let i = 0; i < c.length; i += 1) {\n    if (result.indexOf(c[i]) === -1) {\n      check = false;\n    }\n  }\n  return [result, check];\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings2 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings3 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings4 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings5 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings6 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings7 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings8 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n      temp = \"\";\n      counter = 0;\n    }\n    temp += s[i];\n    counter += 1;\n  }\n  result.push(temp);\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k.\n  You need to find and print all the substrings of s of length k that contain the letters a, b, or c.\n  You should print all the substrings in order of their appearance.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abcab\n  abcb\n  abc\n  bc\n  bb\n  */\nconst findSubstrings9 = (s, k) => {\n  let result = [];\n  let counter = 0;\n  let temp = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (counter === k) {\n      result.push(temp);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenCountString = \"\";\n  let oddCountString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfOddDigits = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"1\") {\n        numOfOddDigits++;\n      }\n    }\n    if (numOfOddDigits % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount === oddCount) {\n      evenCountString = evenCountString + evenCount;\n      oddCountString = oddCountString + oddCount;\n    }\n  }\n  return [evenCountString, oddCountString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evencounT(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evencounT(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evencounT = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenCountString = \"\";\n  let oddCountString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEvenDigits = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEvenDigits++;\n      }\n    }\n    if (numOfEvenDigits % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount === oddCount) {\n      evenCountString = evenCountString + evenCount;\n      oddCountString = oddCountString + oddCount;\n    }\n  }\n  return [evenCountString, oddCountString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenCountString = \"\";\n  let oddCountString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEvenDigits = 0;\n    let numOfOddDigits = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEvenDigits++;\n      } else if (str[j] === \"1\") {\n        numOfOddDigits++;\n      }\n    }\n    if (numOfEvenDigits % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount === oddCount) {\n      evenCountString = evenCountString + evenCount;\n      oddCountString = oddCountString + oddCount;\n    }\n  }\n  return [evenCountString, oddCountString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenCountString = \"\";\n  let oddCountString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEvenDigits = 0;\n    let numOfOddDigits = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEvenDigits++;\n      } else if (str[j] === \"1\") {\n        numOfOddDigits++;\n      }\n    }\n    if (numOfEvenDigits % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount === oddCount) {\n      evenCountString = evenCountString + evenCount;\n      oddCountString = oddCountString + oddCount;\n    }\n  }\n  return [evenCountString, oddCountString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenoddevenT(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenoddevenT(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenoddevenT = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenCountString = \"\";\n  let oddCountString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEvenDigits = 0;\n    let numOfOddDigits = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        numOfEvenDigits++;\n      } else if (str[j] === \"1\") {\n        numOfOddDigits++;\n      }\n    }\n    if (numOfEvenDigits % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount === oddCount) {\n      evenCountString = evenCountString + evenCount;\n      oddCountString = oddCountString + oddCount;\n    }\n  }\n  return [evenCountString, oddCountString];\n};\n\n/*Given a list of strings, where each string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  minsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst minsubARrayProdSum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod < min) {\n        min = prod;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARraySUm([2, 3, 4, 1, 2, 4]) == 10\n  maxsubARraySUm([-1, -2, -3]) == -3\n  */\nconst maxsubARraySUm = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([-1, -2, -3]) == -24\n  */\nconst maxsubARrayProdSum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    let prod = 1;\n    for (let j = 0; j < nums.length; j++) {\n      prod *= nums[j];\n      if (prod > max) {\n        max = prod;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxsubARrayProdSum([2, 3, 4, 1, 2, 4]) == 24\n  maxsubARrayProdSum([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n};\n\nconsole.log(maxfill(grid, 1));\nconsole.log(maxfill(grid, 2));\nconsole.log(maxfill(grid, 5));</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for the answer! I understand it better now. Just one question, why did you use buckets.length instead of buckets.length -1? I thought that since we start counting at 0, we would have to subtract 1 from buckets.length to get the correct number of times to lower the buckets.\n<|/ c |>\n<| c |>\nYes, you are right. Bucket length is always one less than the number of buckets. So the correct number of times to lower the buckets is `buckets.length - 1`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\nvar bucket_capacity = 2;\n\nfunction maxfill(grid, bucket_capacity) {\n  var n = grid.length;\n  var m = grid[0].length;\n  var buckets = new Array(bucket_capacity).fill(0);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  var count = 0;\n  for (var i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n}\n\nconsole.log(maxfill(grid, bucket_capacity));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxfill(grid, bucket_capacity) {\n  var n = grid.length;\n  var m = grid[0].length;\n  var buckets = new Array(bucket_capacity).fill(0);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  var count = 0;\n  for (var i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n}\n\nconsole.log(maxfill(grid, 1));\nconsole.log(maxfill(grid, 2));\nconsole.log(maxfill(grid, 5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxfill(grid, bucket_capacity) {\n  var n = grid.length;\n  var m = grid[0].length;\n  var buckets = new Array(bucket_capacity).fill(0);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  var count = 0;\n  for (var i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n}\n\nconsole.log(maxfill(grid, 1));\nconsole.log(maxfill(grid, 2));\nconsole.log(maxfill(grid, 5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxfill(grid, bucket_capacity) {\n  var n = grid.length;\n  var m = grid[0].length;\n  var buckets = new Array(bucket_capacity).fill(0);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  var count = 0;\n  for (var i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n}\n\nconsole.log(maxfill(grid, 1));\nconsole.log(maxfill(grid, 2));\nconsole.log(maxfill(grid, 5));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxfill(grid, bucket_capacity) {\n  var n = grid.length;\n  var m = grid[0].length;\n  var buckets = new Array(bucket_capacity).fill(0);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  var count = 0;\n  for (var i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n}\n\nconsole.log(maxfill(grid, 1));\nconsole.log(maxfill(grid, 2));\nconsole.log(maxfill(grid, 5));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction maxfill(grid, bucket_capacity) {\n  var n = grid.length;\n  var m = grid[0].length;\n  var buckets = new Array(bucket_capacity).fill(0);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  var count = 0;\n  for (var i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i];\n  }\n  return count;\n}\n\nconsole.log(maxfill(grid, 1));\nconsole.log(maxfill(grid, 2));\nconsole.log(maxfill(grid, 5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const tens = arr.filter((x) => x === 10).length;\n  const hundreds = arr.filter((x) => x === 100).length;\n  const thousands = arr.filter((x) => x === 1000).length;\n  const millions = arr.filter((x) => x === 1000000).length;\n  const billions = arr.filter((x) => x === 1000000000).length;\n  const trillions = arr.filter((x) => x === 1000000000000).length;\n  const quadrillions = arr.filter((x) => x === 1000000000000000).length;\n  const quintillions = arr.filter((x) => x === 1000000000000000000).length;\n  const sextillions = arr.filter((x) => x === 100000000000000000000).length;\n  const septillions = arr.filter((x) => x === 100000000000000000000000).length;\n  const octillions = arr.filter((x) => x === 100000000000000000000000000).length;\n  const nonillions = arr.filter((x) => x === 1000000000000000000000000000).length;\n  const decillions = arr.filter((x) => x === 1000000000000000000000000000000).length;\n  const undecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const duodecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const tredecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const quattuordecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const quindecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const sexdecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const septendecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const octodecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const novemdecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const vigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const unvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const duovigintillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const trevigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const quattuorvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const quinvigintillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const sexvigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const septenvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const octovigintillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const novemvigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const centillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const nonillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const decillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const undecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const duodecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const tredecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const quattuordecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const quindecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const sexdecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const septendecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const octodecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const novemdecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const vigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const unvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const duovigintillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const trevigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const quattuorvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const quinvigintillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const sexvigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const septenvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const octovigintillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const novemvigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const centillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const nonillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const decillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const undecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const duodecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const tredecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const quattuordecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const quindecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const sexdecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const septendecillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const octodecillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const novemdecillions = arr.filter((x) => x === 10000000000000000000000000000000000).length;\n  const vigintillions = arr.filter((x) => x === 100000000000000000000000000000000).length;\n  const unvigintillions = arr.filter((x) => x === 1000000000000000000000000000000000).length;\n  const duo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  if (s === '') return [];\n  const arr = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      if (arr.length > 0) arr.push(s.substr(0, i));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + 1));\n      arr.push(s.substr(i + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCount2 = vowelsCount - 1;\n  let vowelsCount3 = vowelsCount - 2;\n  let vowelsCount4 = vowelsCount - 3;\n  let vowelsCount5 = vowelsCount - 4;\n  let vowelsCount6 = vowelsCount - 5;\n  let vowelsCount7 = vowelsCount - 6;\n  let vowelsCount8 = vowelsCount - 7;\n  let vowelsCount9 = vowelsCount - 8;\n  let vowelsCount10 = vowelsCount - 9;\n  let vowelsCount11 = vowelsCount - 10;\n  let vowelsCount12 = vowelsCount - 11;\n  let vowelsCount13 = vowelsCount - 12;\n  let vowelsCount14 = vowelsCount - 13;\n  let vowelsCount15 = vowelsCount - 14;\n  let vowelsCount16 = vowelsCount - 15;\n  let vowelsCount17 = vowelsCount - 16;\n  let vowelsCount18 = vowelsCount - 17;\n  let vowelsCount19 = vowelsCount - 18;\n  let vowelsCount20 = vowelsCount - 19;\n  let vowelsCount21 = vowelsCount - 20;\n  let vowelsCount22 = vowelsCount - 21;\n  let vowelsCount23 = vowelsCount - 22;\n  let vowelsCount24 = vowelsCount - 23;\n  let vowelsCount25 = vowelsCount - 24;\n  let vowelsCount26 = vowelsCount - 25;\n  let vowelsCount27 = vowelsCount - 26;\n  let vowelsCount28 = vowelsCount - 27;\n  let vowelsCount29 = vowelsCount - 28;\n  let vowelsCount30 = vowelsCount - 29;\n  let vowelsCount31 = vowelsCount - 30;\n  let vowelsCount32 = vowelsCount - 31;\n  let vowelsCount33 = vowelsCount - 32;\n  let vowelsCount34 = vowelsCount - 33;\n  let vowelsCount35 = vowelsCount - 34;\n  let vowelsCount36 = vowelsCount - 35;\n  let vowelsCount37 = vowelsCount - 36;\n  let vowelsCount38 = vowelsCount - 37;\n  let vowelsCount39 = vowelsCount - 38;\n  let vowelsCount40 = vowelsCount - 39;\n  let vowelsCount41 = vowelsCount - 40;\n  let vowelsCount42 = vowelsCount - 41;\n  let vowelsCount43 = vowelsCount - 42;\n  let vowelsCount44 = vowelsCount - 43;\n  let vowelsCount45 = vowelsCount - 44;\n  let vowelsCount46 = vowelsCount - 45;\n  let vowelsCount47 = vowelsCount - 46;\n  let vowelsCount48 = vowelsCount - 47;\n  let vowelsCount49 = vowelsCount - 48;\n  let vowelsCount50 = vowelsCount - 49;\n  let vowelsCount51 = vowelsCount - 50;\n  let vowelsCount52 = vowelsCount - 51;\n  let vowelsCount53 = vowelsCount - 52;\n  let vowelsCount54 = vowelsCount - 53;\n  let vowelsCount55 = vowelsCount - 54;\n  let vowelsCount56 = vowelsCount - 55;\n  let vowelsCount57 = vowelsCount - 56;\n  let vowelsCount58 = vowelsCount - 57;\n  let vowelsCount59 = vowelsCount - 58;\n  let vowelsCount60 = vowelsCount - 59;\n  let vowelsCount61 = vowelsCount - 60;\n  let vowelsCount62 = vowelsCount - 61;\n  let vowelsCount63 = vowelsCount - 62;\n  let vowelsCount64 = vowelsCount - 63;\n  let vowelsCount65 = vowelsCount - 64;\n  let vowelsCount66 = vowelsCount - 65;\n  let vowelsCount67 = vowelsCount - 66;\n  let vowelsCount68 = vowelsCount - 67;\n  let vowelsCount69 = vowelsCount - 68;\n  let vowelsCount70 = vowelsCount - 69;\n  let vowelsCount71 = vowelsCount - 70;\n  let vowelsCount72 = vowelsCount - 71;\n  let vowelsCount73 = vowelsCount - 72;\n  let vowelsCount74 = vowelsCount - 73;\n  let vowelsCount75 = vowelsCount - 74;\n  let vowelsCount76 = vowelsCount - 75;\n  let vowelsCount77 = vowelsCount - 76;\n  let vowelsCount78 = vowelsCount - 77;\n  let vowelsCount79 = vowelsCount - 78;\n  let vowelsCount80 = vowelsCount - 79;\n  let vowelsCount81 = vowelsCount - 80;\n  let vowelsCount82 = vowelsCount - 81;\n  let vowelsCount83 = vowelsCount - 82;\n  let vowelsCount84 = vowelsCount - 83;\n  let vowelsCount85 = vowelsCount - 84;\n  let vowelsCount86 = vowelsCount - 85;\n  let vowelsCount87 = vowelsCount - 86;\n  let vowelsCount88 = vowelsCount - 87;\n  let vowelsCount89 = vowelsCount - 88;\n  let vowelsCount90 = vowelsCount - 89;\n  let vowelsCount91 = vowelsCount - 90;\n  let vowelsCount92 = vowelsCount - 91;\n  let vowelsCount93 = vowelsCount - 92;\n  let vowelsCount94 = vowelsCount - 93;\n  let vowelsCount95 = vowelsCount - 94;\n  let vowelsCount96 = vowelsCount - 95;\n  let vowelsCount97 = vowelsCount - 96;\n  let vowelsCount98 = vowelsCount - 97;\n  let vowelsCount99 = vowelsCount - 98;\n  let vowelsCount100 = vowelsCount - 99;\n  let vowelsCount101 = vowelsCount - 100;\n  let vowelsCount102 = vowelsCount - 101;\n  let vowelsCount103 = vowelsCount - 102;\n  let vowelsCount104 = vowelsCount - 103;\n  let vowelsCount105 = vowelsCount - 104;\n  let vowelsCount106 = vowelsCount - 105;\n  let vowelsCount107 = vowelsCount - 106;\n  let vowelsCount108 = vowelsCount - 107;\n  let vowelsCount109 = vowelsCount ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "<|endoftext|>/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length >= longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in reverse order. Return null if the\n  list is empty.\n  >>> longestReverse([])\n\n  >>> longestReverse(['a', 'b', 'c'])\n  'c'\n  >>> longestReverse(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestReverse = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the shortest string in alphabetical order. Return null if the\n  list is empty.\n  >>> shortestAlpha([])\n\n  >>> shortestAlpha(['a', 'b', 'c'])\n  'a'\n  >>> shortestAlpha(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortestAlpha = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/* Given a list of strings, return the shortest string in reverse alphabetical order. Return null if the\n  list is empty.\n  >>> shortestAlphaReverse([])\n\n  >>> shortestAlphaReverse(['a', 'b', 'c'])\n  'c'\n  >>> shortestAlphaReverse(['a', 'bb', 'ccc'])\n  'c'\n  */\nconst shortestAlphaReverse = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/* Given a list of strings, return the longest string in alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlpha([])\n\n  >>> longestAlpha(['a', 'b', 'c'])\n  'b'\n  >>> longestAlpha(['a', 'bb', 'ccc'])\n  'bb'\n  */\nconst longestAlpha = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in reverse alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlphaReverse([])\n\n  >>> longestAlphaReverse(['a', 'b', 'c'])\n  'c'\n  >>> longestAlphaReverse(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestAlphaReverse = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlpha([])\n\n  >>> longestAlpha(['a', 'b', 'c'])\n  'b'\n  >>> longestAlpha(['a', 'bb', 'ccc'])\n  'bb'\n  */\nconst longestAlpha = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in reverse alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlphaReverse([])\n\n  >>> longestAlphaReverse(['a', 'b', 'c'])\n  'c'\n  >>> longestAlphaReverse(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestAlphaReverse = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlpha([])\n\n  >>> longestAlpha(['a', 'b', 'c'])\n  'b'\n  >>> longestAlpha(['a', 'bb', 'ccc'])\n  'bb'\n  */\nconst longestAlpha = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in reverse alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlphaReverse([])\n\n  >>> longestAlphaReverse(['a', 'b', 'c'])\n  'c'\n  >>> longestAlphaReverse(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestAlphaReverse = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlpha([])\n\n  >>> longestAlpha(['a', 'b', 'c'])\n  'b'\n  >>> longestAlpha(['a', 'bb', 'ccc'])\n  'bb'\n  */\nconst longestAlpha = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in reverse alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlphaReverse([])\n\n  >>> longestAlphaReverse(['a', 'b', 'c'])\n  'c'\n  >>> longestAlphaReverse(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestAlphaReverse = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in alphabetical order. Return null if the\n  list is empty.\n  >>> longestAlpha([])\n\n  >>> longestAlpha(['a', 'b', 'c'])\n  'b'\n  >>> longestAlpha(['a', 'bb', 'ccc'])\n  'bb'\n  */\nconst longestAlpha = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/* Given a list of strings, return the longest string in reverse ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const maxIndex = arr.indexOf(Math.max(...arr));\n    result.push(arr[maxIndex]);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n};\n\nexport { maxImum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minImum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const minIndex = arr.indexOf(Math.min(...arr));\n    result.push(arr[minIndex]);\n    arr.splice(minIndex, 1);\n  }\n  return result;\n};\n\nexport { minImum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the sum of the numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, 8, 12]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 0, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const sumIndex = arr.indexOf(arr.reduce((acc, curr) => acc + curr, 0));\n    result.push(arr[sumIndex]);\n    arr.splice(sumIndex, 1);\n  }\n  return result;\n};\n\nexport { sum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the product of the numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-24, 8, 120]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-16, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 0, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst product = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const productIndex = arr.indexOf(arr.reduce((acc, curr) => acc * curr, 1));\n    result.push(arr[productIndex]);\n    arr.splice(productIndex, 1);\n  }\n  return result;\n};\n\nexport { product };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the largest number in the array.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst largest = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const maxIndex = arr.indexOf(Math.max(...arr));\n    result.push(arr[maxIndex]);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n};\n\nexport { largest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the smallest number in the array.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst smallest = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const minIndex = arr.indexOf(Math.min(...arr));\n    result.push(arr[minIndex]);\n    arr.splice(minIndex, 1);\n  }\n  return result;\n};\n\nexport { smallest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the largest number in the array.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst largestIndex = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const maxIndex = arr.indexOf(Math.max(...arr));\n    result.push(maxIndex);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n};\n\nexport { largestIndex };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the smallest number in the array.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst smallestIndex = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    const minIndex = arr.indexOf(Math.min(...arr));\n    result.push(minIndex);\n    arr.splice(minIndex, 1);\n  }\n  return result;\n};\n\nexport { smallestIndex };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the sum of the numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, 8, 12]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 0, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sumIndex = (arr, k) => {\n  const result = [];\n  for (let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears first in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [8, 7, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solUtioN1 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears last in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN2 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears first in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN3 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears last in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN4 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears first in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN5 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears last in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN6 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears first in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN7 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears last in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN8 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears first in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solUtioN([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solUtioN9 = (lst) => {\n  let newArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      newArr.push(lst[i]);\n    } else {\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except for those that come after the index of the element that appears last in the original list.\n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> [5, 1]\n  solUtioN([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum % 10);\n    sum = Math.floor(sum / 10);\n  }\n  return result.join('');\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3;\n    }\n    prev = next;\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3;\n    }\n    prev = next;\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3;\n    }\n    prev = next;\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3;\n    }\n    prev = next;\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3;\n    }\n    prev = next;\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let arr = [];\n  let prev = 1;\n  let next = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      next = prev * 2 + 1;\n    } else {\n      next = prev * 3;\n    }\n    prev = next;\n    arr.push(next);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Col", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthsInYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = date", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = words.filter(word => word.length > 0);\n  return result.length > 0? result : words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    } else {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (i === lst.length - 1) {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    } else {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSOrteD = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    } else {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (i === lst.length - 1) {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    } else {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length - 1) {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    } else {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ false\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (i === lst.length - 1) {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    } else {\n      if (lst[i] === lst[i + 1]) {\n        sorted = true;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5]) ➞ false\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval1End;\n  }\n\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1Start;\n  }\n\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1End;\n  }\n\n  return false;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval1End;\n  }\n\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1Start;\n  }\n\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1End;\n  }\n\n  return false;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval1End;\n  }\n\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1Start;\n  }\n\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1End;\n  }\n\n  return false;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n\n  if (interval1Start > interval1End) {\n    return interval1Start <= interval2End && interval2Start <= interval1End;\n  }\n\n  if (interval2Start > interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1Start;\n  }\n\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return interval1Start === interval2Start;\n  }\n\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return interval1Start <= interval2Start && interval2End <= interval1End;\n  }\n\n  return false;\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : arr[i] > 0? 1 : 0\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N * N).fill(0);\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      M[i * N + j] = grid[i][j];\n      if (i === 0 || j === 0) lst_A[i * N + j] = 0;\n      if (i === N - 1 || j === N - 1) lst_B[i * N + j] = 0;\n    }\n  }\n  let ans = [];\n  let i = 0;\n  let j = 0;\n  while (i < N && j < N) {\n    if (M[i * N + j] === 0) i++;\n    else if (M[i * N + j] === grid[i][j]) j++;\n    else {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n      i++;\n      j++;\n    }\n  }\n  while (i < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    i++;\n    j++;\n  }\n  while (j < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    j++;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < N && j < N) {\n    if (M[i * N + j] === 0) i++;\n    else if (M[i * N + j] === grid[i][j]) j++;\n    else {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n      i++;\n      j++;\n    }\n  }\n  while (i < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    i++;\n    j++;\n  }\n  while (j < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    j++;\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (lst_A[i * N + j] === lst_B[i * N + j]) {\n        ans.push(lst_A[i * N + j]);\n      }\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minpath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N * N).fill(0);\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      M[i * N + j] = grid[i][j];\n      if (i === 0 || j === 0) lst_A[i * N + j] = 0;\n      if (i === N - 1 || j === N - 1) lst_B[i * N + j] = 0;\n    }\n  }\n  let ans = [];\n  let i = 0;\n  let j = 0;\n  while (i < N && j < N) {\n    if (M[i * N + j] === 0) i++;\n    else if (M[i * N + j] === grid[i][j]) j++;\n    else {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n      i++;\n      j++;\n    }\n  }\n  while (i < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    i++;\n    j++;\n  }\n  while (j < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    j++;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < N && j < N) {\n    if (M[i * N + j] === 0) i++;\n    else if (M[i * N + j] === grid[i][j]) j++;\n    else {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n      i++;\n      j++;\n    }\n  }\n  while (i < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    i++;\n    j++;\n  }\n  while (j < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    j++;\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (lst_A[i * N + j] === lst_B[i * N + j]) {\n        ans.push(lst_A[i * N + j]);\n      }\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minpath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N * N).fill(0);\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      M[i * N + j] = grid[i][j];\n      if (i === 0 || j === 0) lst_A[i * N + j] = 0;\n      if (i === N - 1 || j === N - 1) lst_B[i * N + j] = 0;\n    }\n  }\n  let ans = [];\n  let i = 0;\n  let j = 0;\n  while (i < N && j < N) {\n    if (M[i * N + j] === 0) i++;\n    else if (M[i * N + j] === grid[i][j]) j++;\n    else {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n      i++;\n      j++;\n    }\n  }\n  while (i < N) {\n    lst_A[i * N + j] = grid[i][j];\n    lst_B[i * N + j] = grid[i][j];\n    i++;\n    j++;\n  }\n  while (j < N) {\n    lst_A", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  const resto = a % b;\n  return resto == 0? a : greAtesTCommOnDIvisoR(b, resto);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnDIvisoR(a, b) * greAtesTCommOnDIvisoR(b, a);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOnDIvisoR(b, a));\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> greAtesTCommOnLCM(3, 5)\n  3\n  >>> greAtesTCommOnLCM(25, 15)\n  15\n  */\nconst greAtesTCommOnLCM = (a, b) => {\n  return greAtesTCommOnLCM(greAtesTCommOnDIvisoR(a, b), greAtesTCommOn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence that are less than or equal to n.\n  Examples:\n  fib(3) = [1, 1, 2, 3]\n  fib(4) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(8) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(9) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(12) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(13) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(14) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(15) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(16) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(17) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(18) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(19) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n  fib(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst oddDigIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits2 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigits2 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits3 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigits3 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits4 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigits4 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits5 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigits5 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits6 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigits6 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits7 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst oddDigits7 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digIts.\n  Return 0 if all digIts are odd.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 4\n  digIts(235) == 235\n  */\nconst evenDigits8 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let lastOpenBrackets = 0;\n  let lastCloseBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        if (stack.length === 1) {\n          return true;\n        }\n      }\n      stack.pop();\n    } else if (char === '[') {\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n    }\n\n    if (openBrackets > lastOpenBrackets) {\n      lastOpenBrackets = openBrackets;\n    }\n    if (closeBrackets > lastCloseBrackets) {\n      lastCloseBrackets = closeBrackets;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let lastOpenBrackets = 0;\n  let lastCloseBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        if (stack.length === 1) {\n          return true;\n        }\n      }\n      stack.pop();\n    } else if (char === '[') {\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n    }\n\n    if (openBrackets > lastOpenBrackets) {\n      lastOpenBrackets = openBrackets;\n    }\n    if (closeBrackets > lastCloseBrackets) {\n      lastCloseBrackets = closeBrackets;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let lastOpenBrackets = 0;\n  let lastCloseBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        if (stack.length === 1) {\n          return true;\n        }\n      }\n      stack.pop();\n    } else if (char === '[') {\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n    }\n\n    if (openBrackets > lastOpenBrackets) {\n      lastOpenBrackets = openBrackets;\n    }\n    if (closeBrackets > lastCloseBrackets) {\n      lastCloseBrackets = closeBrackets;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let lastOpenBrackets = 0;\n  let lastCloseBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        if (stack.length === 1) {\n          return true;\n        }\n      }\n      stack.pop();\n    } else if (char === '[') {\n      openBrackets++;\n    } else if (char === ']') {\n      closeBrackets++;\n    }\n\n    if (openBrackets > lastOpenBrackets) {\n      lastOpenBrackets = openBrackets;\n    }\n    if (closeBrackets > lastCloseBrackets) {\n      lastCloseBrackets = closeBrackets;\n    }\n  }\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let lastOpenBrackets = 0;\n  let lastCloseBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastCharNotWord;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastCharNotWord && lastChar.match(/[0-9]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastCharNotWord && lastChar.match(/[0-9]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastCharNotWord && lastChar.match(/[0-9]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastCharNotWord && lastChar.match(/[0-9]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastCharNotWord && lastChar.match(/[0-9]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharAlpha = lastChar.match(/[a-z]/i);\n  const isLastCharNotWord = lastChar.match(/[^ ]/i);\n  return isLastCharAlpha &&!isLastChar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNle([1,2,4,3,5]) = 2\n  canarraNle([1,2,3]) = -1\n  */\nconst canarraNle = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraIndex([1,2,4,3,5], 4) = 1\n  canarraIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraIndex = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraLastIndex([1,2,4,3,5], 4) = 3\n  canarraLastIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraLastIndex = (arr, element) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraFirstIndex([1,2,4,3,5], 4) = 1\n  canarraFirstIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraFirstIndex = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraLastIndex([1,2,4,3,5], 4) = 3\n  canarraLastIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraLastIndex = (arr, element) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraFirstIndex([1,2,4,3,5], 4) = 1\n  canarraFirstIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraFirstIndex = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraLastIndex([1,2,4,3,5], 4) = 3\n  canarraLastIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraLastIndex = (arr, element) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraFirstIndex([1,2,4,3,5], 4) = 1\n  canarraFirstIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraFirstIndex = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraLastIndex([1,2,4,3,5], 4) = 3\n  canarraLastIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraLastIndex = (arr, element) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraFirstIndex([1,2,4,3,5], 4) = 1\n  canarraFirstIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraFirstIndex = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraLastIndex([1,2,4,3,5], 4) = 3\n  canarraLastIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraLastIndex = (arr, element) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraFirstIndex([1,2,4,3,5], 4) = 1\n  canarraFirstIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraFirstIndex = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraLastIndex([1,2,4,3,5], 4) = 3\n  canarraLastIndex([1,2,4,3,5], 5) = -1\n  */\nconst canarraLastIndex = (arr, element) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the given element in the given array. Return -1 in the event that the\n  element is not found.\n\n  Examples:\n  canarraFirstIndex([1,2,4,3,5], 4) = 1\n  canarraFirstIndex([1,2,4,3,5], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestlargeEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestlargeEstintegErs([]) == (null, null)\n  larGestlargeEstintegErs([0]) == (null, null)\n  */\nconst larGestlargeEstintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestestintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestestintegErs([]) == (null, null)\n  larGestestintegErs([0]) == (null, null)\n  */\nconst larGestestintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestestintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestestintegErs([]) == (null, null)\n  larGestestintegErs([0]) == (null, null)\n  */\nconst larGestestintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestestintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestestintegErs([]) == (null, null)\n  larGestestintegErs([0]) == (null, null)\n  */\nconst larGestestintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestestintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestestintegErs([]) == (null, null)\n  larGestestintegErs([0]) == (null, null)\n  */\nconst larGestestintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestestintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestestintegErs([]) == (null, null)\n  larGestestintegErs([0]) == (null, null)\n  */\nconst larGestestintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestestintegErs([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larGestestintegErs([]) == (null, null)\n  larGestestintegErs([0]) == (null, null)\n  */\nconst larGestestintegErs = (lst) => {\n  const largest = lst.reduce((largest, num) => {\n    if (num > largest) {\n      return num;\n    }\n    return largest;\n  }, 0);\n  const smallest = lst.reduce((smallest, num) => {\n    if (num < smallest) {\n      return num;\n    }\n    return smallest;\n  }, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === null || b === null) return null\n  if (a === b) return a\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return comPareone(a, b.replace(\",\", \"\"))\n  if (!a.includes(\",\") &&!b.includes(\",\")) return comPareone(a, b)\n  if (a.includes(\",\") && b.includes(\",\")) return comPareone(a.split(\",\")[1], b.split(\",\")[1])\n  if (a.includes(\",\") &&!b.includes(\",\")) return comPareone(a.split(\",\")[1], b)\n  if (!a.includes(\",\") && b.includes(\",\")) return com", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isSumeveN(4) == false\n  isSumeveN(6) == false\n  isSumeveN(8) == true\n  */\nconst isSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd integers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isSumeveN(4) == false\n  isSumeveN(6) == false\n  isSumeveN(8) == true\n  */\nconst isSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even integers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd integers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isSumeveN(4) == false\n  isSumeveN(6) == false\n  isSumeveN(8) == true\n  */\nconst isSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd integers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isSumeveN(4) == false\n  isSumeveN(6) == false\n  isSumeveN(8) == true\n  */\nconst isSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even integers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd integers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isSumeveN(4) == false\n  isSumeveN(6) == false\n  isSumeveN(8) == true\n  */\nconst isSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd integers\n  Example\n  isOddSumeveN(4) == false\n  isOddSumeveN(6) == false\n  isOddSumeveN(8) == true\n  */\nconst isOddSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isSumeveN(4) == false\n  isSumeveN(6) == false\n  is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The factorial of a number is a product of all the numbers from 1 to that number.\n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n\n  The function will receive an integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const prefixes = [];\n  let longest = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    const prefix = string.substr(0, i);\n    if (prefix.length > longest) {\n      longest = prefix.length;\n    }\n    if (char === prefix) {\n      prefixes.push(i);\n    }\n  }\n  return prefixes.reverse();\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesReverse = (string) => {\n  const suffixes = [];\n  let longest = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    const suffix = string.substr(i + 1);\n    if (suffix.length > longest) {\n      longest = suffix.length;\n    }\n    if (char === suffix) {\n      suffixes.unshift(i);\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  const spaces = text.match(/\\s/g);\n  if (spaces && spaces.length > 2) {\n    return text.replace(\n      new RegExp(\n        spaces.map(s => `\\\\s{${s.length}}`).join('|'),\n        'g'\n      ),\n      s => s.replaceAll(/\\s+/g, '_')\n    );\n  } else {\n    return text;\n  }\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters from it\n  \n  cleanEs(\"Example\") == \"Example\"\n  cleanEs(\"Example 1\") == \"Example1\"\n  cleanEs(\"Example 2\") == \"Example2\"\n  cleanEs(\"Example 3\") == \"Example3\"\n  cleanEs(\"Example 4\") == \"Example4\"\n  cleanEs(\"Example 5\") == \"Example5\"\n  cleanEs(\"Example 6\") == \"Example6\"\n  cleanEs(\"Example 7\") == \"Example7\"\n  cleanEs(\"Example 8\") == \"Example8\"\n  cleanEs(\"Example 9\") == \"Example9\"\n  cleanEs(\"Example 10\") == \"Example10\"\n  cleanEs(\"Example 11\") == \"Example11\"\n  cleanEs(\"Example 12\") == \"Example12\"\n  cleanEs(\"Example 13\") == \"Example13\"\n  cleanEs(\"Example 14\") == \"Example14\"\n  cleanEs(\"Example 15\") == \"Example15\"\n  cleanEs(\"Example 16\") == \"Example16\"\n  cleanEs(\"Example 17\") == \"Example17\"\n  cleanEs(\"Example 18\") == \"Example18\"\n  cleanEs(\"Example 19\") == \"Example19\"\n  cleanEs(\"Example 20\") == \"Example20\"\n  cleanEs(\"Example 21\") == \"Example21\"\n  cleanEs(\"Example 22\") == \"Example22\"\n  cleanEs(\"Example 23\") == \"Example23\"\n  cleanEs(\"Example 24\") == \"Example24\"\n  cleanEs(\"Example 25\") == \"Example25\"\n  cleanEs(\"Example 26\") == \"Example26\"\n  cleanEs(\"Example 27\") == \"Example27\"\n  cleanEs(\"Example 28\") == \"Example28\"\n  cleanEs(\"Example 29\") == \"Example29\"\n  cleanEs(\"Example 30\") == \"Example30\"\n  cleanEs(\"Example 31\") == \"Example31\"\n  cleanEs(\"Example 32\") == \"Example32\"\n  cleanEs(\"Example 33\") == \"Example33\"\n  cleanEs(\"Example 34\") == \"Example34\"\n  cleanEs(\"Example 35\") == \"Example35\"\n  cleanEs(\"Example 36\") == \"Example36\"\n  cleanEs(\"Example 37\") == \"Example37\"\n  cleanEs(\"Example 38\") == \"Example38\"\n  cleanEs(\"Example 39\") == \"Example39\"\n  cleanEs(\"Example 40\") == \"Example40\"\n  cleanEs(\"Example 41\") == \"Example41\"\n  cleanEs(\"Example 42\") == \"Example42\"\n  cleanEs(\"Example 43\") == \"Example43\"\n  cleanEs(\"Example 44\") == \"Example44\"\n  cleanEs(\"Example 45\") == \"Example45\"\n  cleanEs(\"Example 46\") == \"Example46\"\n  cleanEs(\"Example 47\") == \"Example47\"\n  cleanEs(\"Example 48\") == \"Example48\"\n  cleanEs(\"Example 49\") == \"Example49\"\n  cleanEs(\"Example 50\") == \"Example50\"\n  cleanEs(\"Example 51\") == \"Example51\"\n  cleanEs(\"Example 52\") == \"Example52\"\n  cleanEs(\"Example 53\") == \"Example53\"\n  cleanEs(\"Example 54\") == \"Example54\"\n  cleanEs(\"Example 55\") == \"Example55\"\n  cleanEs(\"Example 56\") == \"Example56\"\n  cleanEs(\"Example 57\") == \"Example57\"\n  cleanEs(\"Example 58\") == \"Example58\"\n  cleanEs(\"Example 59\") == \"Example59\"\n  cleanEs(\"Example 60\") == \"Example60\"\n  cleanEs(\"Example 61\") == \"Example61\"\n  cleanEs(\"Example 62\") == \"Example62\"\n  cleanEs(\"Example 63\") == \"Example63\"\n  cleanEs(\"Example 64\") == \"Example64\"\n  cleanEs(\"Example 65\") == \"Example65\"\n  cleanEs(\"Example 66\") == \"Example66\"\n  cleanEs(\"Example 67\") == \"Example67\"\n  cleanEs(\"Example 68\") == \"Example68\"\n  cleanEs(\"Example 69\") == \"Example69\"\n  cleanEs(\"Example 70\") == \"Example70\"\n  cleanEs(\"Example 71\") == \"Example71\"\n  cleanEs(\"Example 72\") == \"Example72\"\n  cleanEs(\"Example 73\") == \"Example73\"\n  cleanEs(\"Example 74\") == \"Example74\"\n  cleanEs(\"Example 75\") == \"Example75\"\n  cleanEs(\"Example 76\") == \"Example76\"\n  cleanEs(\"Example 77\") == \"Example77\"\n  cleanEs(\"Example 78\") == \"Example78\"\n  cleanEs(\"Example 79\") == \"Example79\"\n  cleanEs(\"Example 80\") == \"Example80\"\n  cleanEs(\"Example 81\") == \"Example81\"\n  cleanEs(\"Example 82\") == \"Example82\"\n  cleanEs(\"Example 83\") == \"Example83\"\n  cleanEs(\"Example 84\") == \"Example84\"\n  cleanEs(\"Example 85\") == \"Example85\"\n  cleanEs(\"Example 86\") == \"Example86\"\n  cleanEs(\"Example 87\") == \"Example87\"\n  cleanEs(\"Example 88\") == \"Example88\"\n  cleanEs(\"Example 89\") == \"Example89\"\n  cleanEs(\"Example 90\") == \"Example90\"\n  cleanEs(\"Example 91\") == \"Example91\"\n  cleanEs(\"Example 92\") == \"Example92\"\n  cleanEs(\"Example 93\") == \"Example93\"\n  cleanEs(\"Example 94\") == \"Example94\"\n  cleanEs(\"Example 95\") == \"Example95\"\n  cleanEs(\"Example 96\") == \"Example96\"\n  cleanEs(\"Example 97\") == \"Example97\"\n  cleanEs(\"Example 98\") == \"Example98\"\n  cleanEs(\"Example 99\") == \"Example99\"\n  cleanEs(\"Example 100\") == \"Example100\"\n  cleanEs(\"Example 101\") == \"Example101\"\n  cleanEs(\"Example 102\") == \"Example102\"\n  cleanEs(\"Example 103\") == \"Example103\"\n  cleanEs(\"Example 104\") == \"Example104\"\n  cleanEs(\"Example 105\") == \"Example105\"\n  cleanEs(\"Example 106\") == \"Example106\"\n  cleanEs(\"Example 107\") == \"Example107\"\n  cleanEs(\"Example 108\") == \"Example108\"\n  cleanEs(\"Example 109\") == \"Example109\"\n  cleanEs(\"Example 110\") == \"Example110\"\n  cleanEs(\"Example 111\") == \"Example111\"\n  cleanEs(\"Example 112\") == \"Example112\"\n  cleanEs(\"Example 11", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  let file_name = file_name.toUpperCase();\n  let file_name = file_name.replace(/\\./g,'');\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the index of the first entry \n  whose value is greater than or equal to 0. The function will not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall not change the entries in the list whose values are less than 0. \n  The function shall then return the index of the first entry whose value is greater than or equal to 0. The function shall \n  not change the entries in the list whose values are greater than 0. The function shall then return the index of the first entry \n  whose value is greater than or equal to 0. The function shall ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce2 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce3 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce3 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce4 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce5 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce5 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce6 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce7 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce7 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce8 = (sentence) => {\n  const arr = sentence.split(\" \");\n  let newArr = arr.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  return newArr.join(\" \");\n};\n\nexport { worDsInsenteNce8 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "<|endoftext|>/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifZ the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifZ(\"1/5\", \"5/1\") = true\n  simPlifZ(\"1/6\", \"2/1\") = false\n  simPlifZ(\"7/10\", \"10/2\") = false\n  */\nconst simPlifZ = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifW the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifW(\"1/5\", \"5/1\") = true\n  simPlifW(\"1/6\", \"2/1\") = false\n  simPlifW(\"7/10\", \"10/2\") = false\n  */\nconst simPlifW = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifX the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifX(\"1/5\", \"5/1\") = true\n  simPlifX(\"1/6\", \"2/1\") = false\n  simPlifX(\"7/10\", \"10/2\") = false\n  */\nconst simPlifX = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifZ the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifZ(\"1/5\", \"5/1\") = true\n  simPlifZ(\"1/6\", \"2/1\") = false\n  simPlifZ(\"7/10\", \"10/2\") = false\n  */\nconst simPlifZ = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifW the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifW(\"1/5\", \"5/1\") = true\n  simPlifW(\"1/6\", \"2/1\") = false\n  simPlifW(\"7/10\", \"10/2\") = false\n  */\nconst simPlifW = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifX the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifX(\"1/5\", \"5/1\") = true\n  simPlifX(\"1/6\", \"2/1\") = false\n  simPlifX(\"7/10\", \"10/2\") = false\n  */\nconst simPlifX = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifZ the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifZ(\"1/5\", \"5/1\") = true\n  simPlifZ(\"1/6\", \"2/1\") = false\n  simPlifZ(\"7/10\", \"10/2\") = false\n  */\nconst simPlifZ = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simPlifW the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifW(\"1/5\", \"5/1\") = true\n  simPlifW(\"1/6\", \"2/1\") = false\n  simPlifW(\"7/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> ordErBypointD([]) == []\n  */\nconst ordErBypointD = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointD([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> ordErBypointD([]) == []\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 3 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (2, 4, 6, 8, 10).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[j] += a[k];\n          a[k] += a[i];\n          a[i] += a[j];\n          a[j] = 0;\n          a[k] = 0;\n          a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) + (3, 5, 3) = 1000\n      (1, 2, 3) + (1, 3, 5) + (3, 5, 1) = 1000\n      (1, 2, 3) + (1, 3, 5) = 1000\n      (1, 2, 3) = 1000\n  */\nconst getmaxTriplets = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] + nums[j] + nums[k] === 1000) {\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) in the given array such that a + b + c = 1000.\n  \n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      (1, 2, 3) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = orbit(planet1, planet2);\n  const orbit2 = orbit(planet2, planet1);\n  const distance = distanceBetween(orbit1, orbit2);\n  const orbits = orbits.filter(orbit => orbit.distance < distance);\n  return orbits.sort((a, b) => a.distance - b.distance);\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = orbit(planet1, planet2);\n  const orbit2 = orbit(planet2, planet1);\n  const distance = distanceBetween(orbit1, orbit2);\n  const orbits = orbits.filter(orbit => orbit.distance > distance);\n  return orbits.sort((a, b) => a.distance - b.distance);\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = orbit(planet1, planet2);\n  const orbit2 = orbit(planet2, planet1);\n  const distance = distanceBetween(orbit1, orbit2);\n  const orbits = orbits.filter(orbit => orbit.distance < distance);\n  return orbits.sort((a, b) => a.distance - b.distance);\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf3(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const newList = lst\n   .map((word) => {\n      const newWord = word\n      newWord = newWord.split(\"\")\n      newWord = newWord.filter((word) => {\n        return word.length % 2!== 0\n      })\n      newWord = newWord.sort()\n      return newWord.join(\"\")\n    })\n   .sort()\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const newList = lst\n   .map((word) => {\n      const newWord = word\n      newWord = newWord.split(\"\")\n      newWord = newWord.filter((word) => {\n        return word.length % 2!== 0\n      })\n      newWord = newWord.sort()\n      return newWord.join(\"\")\n    })\n   .sort()\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const newList = lst\n   .map((word) => {\n      const newWord = word\n      newWord = newWord.split(\"\")\n      newWord = newWord.filter((word) => {\n        return word.length % 2!== 0\n      })\n      newWord = newWord.sort()\n      return newWord.join(\"\")\n    })\n   .sort()\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const newList = lst\n   .map((word) => {\n      const newWord = word\n      newWord = newWord.split(\"\")\n      newWord = newWord.filter((word) => {\n        return word.length % 2!== 0\n      })\n      newWord = newWord.sort()\n      return newWord.join(\"\")\n    })\n   .sort()\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const newList = lst\n   .map((word) => {\n      const newWord = word\n      newWord = newWord.split(\"\")\n      newWord = newWord.filter((word) => {\n        return word.length % 2!== 0\n      })\n      newWord = newWord.sort()\n      return newWord.join(\"\")\n    })\n   .sort()\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const newList = lst\n   .map((word) => {\n      const newWord = word\n      newWord = newWord.split(\"\")\n      newWord = newWord.filter((word) => {\n        return word.length % 2!== 0\n      })\n      newWord = newWord.sort()\n      return newWord.join(\"\")\n    })\n   .sort()\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquence(0)\n  '0'\n  >>> strIngSEquence(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 3 * 2 * 1 = 6\n  douBleTHeDifFerEnce([-1, -2, 0]) == 1\n  douBleTHeDifFerEnce([9, -2]) == -9\n  douBleTHeDifFerEnce([0]) == 1\n  If the input list is empty, return 1.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a new list with the largest number in\n  the list followed by the smallest number in the list. Ignore numbers\n  that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [3, 2, 0]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [-2, -1]\n  douBleTHeDifFerEnce([9, -2]) == [9, -2]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Given a list of numbers, return a new list with the largest number in\n  the list followed by the smallest number in the list. Ignore numbers\n  that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [3, 2, 0]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [-2, -1]\n  douBleTHeDifFerEnce([9, -2]) == [9, -2]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Given a list of numbers, return a new list with the largest number in\n  the list followed by the smallest number in the list. Ignore numbers\n  that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [3, 2, 0]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [-2, -1]\n  douBleTHeDifFerEnce([9, -2]) == [9, -2]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Given a list of numbers, return a new list with the largest number in\n  the list followed by the smallest number in the list. Ignore numbers\n  that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [3, 2, 0]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [-2, -1]\n  douBleTHeDifFerEnce([9, -2]) == [9, -2]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Given a list of numbers, return a new list with the largest number in\n  the list followed by the smallest number in the list. Ignore numbers\n  that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [3, 2, 0]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [-2, -1]\n  douBleTHeDifFerEnce([9, -2]) == [9, -2]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Given a list of numbers, return a new list with the largest number in\n  the list followed by the smallest number in the list. Ignore numbers\n  that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == [3, 2, 0]\n  douBleTHeDifFerEnce([-1, -2, 0]) == [-2, -1]\n  douBleTHeDifFerEnce([9, -2]) == [9, -2]\n  douBleTHeDifFerEnce([0]) == [0]\n  If the input list is empty, return an empty list.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n  */\nconst score = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = guess.map(x => Math.abs(x))\n  return scores.map((score, index) => {\n    if (score === 0) return 0\n    return guesses[index] - score\n  })\n}\n\n/*\n  Write a function which takes an array of numbers and a number as arguments. \n  Your function should return an array of the same length denoting how far off each guess was. \n  If the guess was correct, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  example:\n\n  score([1,2,3,4,5,1],2) -> [0,0,0,0,3,3]\n  score([0,5,0,0,0,4],4) -> [4,4,1,0,0,6]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_ext = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const ext = extensions[i];\n    const cap = ext.toUpperCase().length;\n    const sm = ext.toLowerCase();\n    const strength = cap - sm;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_ext = ext;\n    }\n  }\n  return `${class_name}.${strongest_ext}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears.\n  Example:\n  countString('abcabcbb') should return 3\n  countString('abca') should return 1\n  countString('') should return 0\n  countString('abcadefg') should return 4\n  countString('abcadefg', 2) should return 2\n  countString('abcadefg', 3) should return 1\n  countString('abcadefg', 4) should return 0\n  countString('abcadefg', 5) should return 0\n  countString('abcadefg', 6) should return 0\n  countString('abcadefg', 7) should return 0\n  countString('abcadefg', 8) should return 0\n  countString('abcadefg', 9) should return 0\n  countString('abcadefg', 10) should return 0\n  countString('abcadefg', 11) should return 0\n  countString('abcadefg', 12) should return 0\n  countString('abcadefg', 13) should return 0\n  countString('abcadefg', 14) should return 0\n  countString('abcadefg', 15) should return 0\n  countString('abcadefg', 16) should return 0\n  countString('abcadefg', 17) should return 0\n  countString('abcadefg', 18) should return 0\n  countString('abcadefg', 19) should return 0\n  countString('abcadefg', 20) should return 0\n  countString('abcadefg', 21) should return 0\n  countString('abcadefg', 22) should return 0\n  countString('abcadefg', 23) should return 0\n  countString('abcadefg', 24) should return 0\n  countString('abcadefg', 25) should return 0\n  countString('abcadefg', 26) should return 0\n  countString('abcadefg', 27) should return 0\n  countString('abcadefg', 28) should return 0\n  countString('abcadefg', 29) should return 0\n  countString('abcadefg', 30) should return 0\n  countString('abcadefg', 31) should return 0\n  countString('abcadefg', 32) should return 0\n  countString('abcadefg', 33) should return 0\n  countString('abcadefg', 34) should return 0\n  countString('abcadefg', 35) should return 0\n  countString('abcadefg', 36) should return 0\n  countString('abcadefg', 37) should return 0\n  countString('abcadefg', 38) should return 0\n  countString('abcadefg', 39) should return 0\n  countString('abcadefg', 40) should return 0\n  countString('abcadefg', 41) should return 0\n  countString('abcadefg', 42) should return 0\n  countString('abcadefg', 43) should return 0\n  countString('abcadefg', 44) should return 0\n  countString('abcadefg', 45) should return 0\n  countString('abcadefg', 46) should return 0\n  countString('abcadefg', 47) should return 0\n  countString('abcadefg', 48) should return 0\n  countString('abcadefg', 49) should return 0\n  countString('abcadefg', 50) should return 0\n  countString('abcadefg', 51) should return 0\n  countString('abcadefg', 52) should return 0\n  countString('abcadefg', 53) should return 0\n  countString('abcadefg', 54) should return 0\n  countString('abcadefg', 55) should return 0\n  countString('abcadefg', 56) should return 0\n  countString('abcadefg', 57) should return 0\n  countString('abcadefg', 58) should return 0\n  countString('abcadefg', 59) should return 0\n  countString('abcadefg', 60) should return 0\n  countString('abcadefg', 61) should return 0\n  countString('abcadefg', 62) should return 0\n  countString('abcadefg', 63) should return 0\n  countString('abcadefg', 64) should return 0\n  countString('abcadefg', 65) should return 0\n  countString('abcadefg', 66) should return 0\n  countString('abcadefg', 67) should return 0\n  countString('abcadefg', 68) should return 0\n  countString('abcadefg', 69) should return 0\n  countString('abcadefg', 70) should return 0\n  countString('abcadefg', 71) should return 0\n  countString('abcadefg', 72) should return 0\n  countString('abcadefg', 73) should return 0\n  countString('abcadefg', 74) should return 0\n  countString('abcadefg', 75) should return 0\n  countString('abcadefg', 76) should return 0\n  countString('abcadefg', 77) should return 0\n  countString('abcadefg', 78) should return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aArrLen = aArr.length;\n  let bArrLen = bArr.length;\n  let aArrSubStrLen = 0;\n  let bArrSubStrLen = 0;\n  let aArrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let bArrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrSubStrLen = 0;\n  let aArrSubStrSubStrSubStrSubStrSubStrSub", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(\"12\") ==> (1, 1)\n      eveNOddcount(\"123\") ==> (1, 2)\n*/\nconst eveNOddcount = (str) => {\n  let evenCount = 0;\n  let oddCount", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toLowerCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnUp = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnMIX = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.charAt(1).toLowerCase() + romanNumber.slice(2);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnSPACES = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.charAt(1).toLowerCase() + romanNumber.slice(2);\n  }).join(' ');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case with spaces between each letter and each number.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnSPACESNUM = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.charAt(1).toLowerCase() + romanNumber.slice(2) + romanNumber.charAt(3).toLowerCase() + romanNumber.slice(4);\n  }).join(' ');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case with spaces between each letter and each number and each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnSPACESNUMLET = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.charAt(1).toLowerCase() + romanNumber.slice(2) + romanNumber.charAt(3).toLowerCase() + romanNumber.slice(4) + romanNumber.charAt(5).toLowerCase() + romanNumber.slice(6);\n  }).join(' ');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case with spaces between each letter and each number and each letter and each number.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnSPACESNUMLETNUM = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.charAt(1).toLowerCase() + romanNumber.slice(2) + romanNumber.charAt(3).toLowerCase() + romanNumber.slice(4) + romanNumber.charAt(5).toLowerCase() + romanNumber.slice(6) + romanNumber.charAt(7).toLowerCase() + romanNumber.slice(8);\n  }).join(' ');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case with spaces between each letter and each number and each letter and each number and each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnSPACESNUMLETNUMLET = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.charAt(1).toLowerCase() + romanNumber.slice(2) + romanNumber.charAt(3).toLowerCase() + romanNumber.slice(4) + romanNumber.charAt(5).toLowerCase() + romanNumber.slice(6) + romanNumber.charAt(7).toLowerCase() + romanNumber.slice(8) + romanNumber.charAt(9).toLowerCase() + romanNumber.slice(10);\n  }).join(' ');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case with spaces between each letter and each number and each letter and each number and each letter and each number.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'XIX'\n  >>> inttoMiNiRomAn(152) == 'CLII'\n  >>> inttoMiNiRomAn(426) == 'CDXXVI'\n  */\nconst inttoMiNiRomAnSPACESNUMLETNUMLETNUM = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax2 = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords.push(words[i]);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical order.\n\n  finDMax2([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax2([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax2([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax3 = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords.push(words[i]);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical order.\n\n  finDMax3([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax3([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax3([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax4 = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords.push(words[i]);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical order.\n\n  finDMax4([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax4([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax4([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax5 = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords.push(words[i]);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical order.\n\n  finDMax5([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax5([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax5([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax6 = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords.push(words[i]);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical order.\n\n  finDMax6([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax6([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax6([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax7 = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords.push(words[i]);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings and returns a list of strings\n  which contains all the words in the list with maximum number of unique characters.\n  If multiple strings have maximum number of unique characters, return the one which\n  comes first in lexicographical ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  \n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  \n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  \n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  \n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOfCharacters;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const lowerCaseString = string.toLowerCase();\n  const upperCaseString = string.toUpperCase();\n  const lowerCaseStringLength = lowerCaseString.length;\n  const upperCaseStringLength = upperCaseString.length;\n  const numberOfCharacters = lowerCaseStringLength + upperCaseStringLength;\n  return numberOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newS += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newS += s.charAt(i).toUpperCase();\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all duplicate characters from this string.\n  If the string contains no duplicates, return the string unmodified.\n  Examples\n  removeDup(\"abcabc\") =  \"abc\"\n  removeDup(\"abca\")  =  \"abca\"\n  removeDup(\"ab\")    =  \"ab\"\n  removeDup(\"a\")     =  \"a\"\n  removeDup(\"aa\")    =  \"aa\"\n  removeDup(\"aaaa\")  =  \"aaaa\"\n  removeDup(\"aaaaa\")  =  \"aaaaa\"\n  removeDup(\"aaaaaa\") =  \"aaaaaa\"\n  removeDup(\"aaaaaaa\") =  \"aaaaaaa\"\n  removeDup(\"aaaaaaab\") =  \"aaaaaaab\"\n  removeDup(\"aaaaaaabb\") =  \"aaaaaaabb\"\n  removeDup(\"aaaaaaabbb\") =  \"aaaaaaabbb\"\n  removeDup(\"aaaaaaabbbc\") =  \"aaaaaaabbbc\"\n  removeDup(\"aaaaaaabbbcc\") =  \"aaaaaaabbbcc\"\n  removeDup(\"aaaaaaabbbccc\") =  \"aaaaaaabbbccc\"\n  removeDup(\"aaaaaaabbbccca\") =  \"aaaaaaabbbccca\"\n  removeDup(\"aaaaaaabbbcccaa\") =  \"aaaaaaabbbcccaa\"\n  removeDup(\"aaaaaaabbbcccaaa\") =  \"aaaaaaabbbcccaaa\"\n  removeDup(\"aaaaaaabbbcccaaaa\") =  \"aaaaaaabbbcccaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaa\") =  \"aaaaaaabbbcccaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaa\") =  \"aaaaaaabbbcccaaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaa\") =  \"aaaaaaabbbcccaaaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaa\") =  \"aaaaaaabbbcccaaaaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaab\") =  \"aaaaaaabbbcccaaaaaaaab\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabb\") =  \"aaaaaaabbbcccaaaaaaaabb\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbb\") =  \"aaaaaaabbbcccaaaaaaaabbb\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbc\") =  \"aaaaaaabbbcccaaaaaaaabbbc\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcc\") =  \"aaaaaaabbbcccaaaaaaaabbbcc\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbccc\") =  \"aaaaaaabbbcccaaaaaaaabbbccc\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbccca\") =  \"aaaaaaabbbcccaaaaaaaabbbccca\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaab\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaab\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabb\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabb\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbb\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbb\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbc\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbc\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcc\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcc\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccc\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccc\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccca\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbccca\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaaa\") =  \"aaaaaaabbbcccaaaaaaaabbbcccaaaaaaaabbbcccaaa\"\n  removeDup(\"aaaaaaabbbcccaaaaaaaab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037a6e'\n  */\nconst strIngTOSha1 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha1')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strIngTOSha256 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strIngTOSha512 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strIngTOSha3 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerO = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSum = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr;\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumDesc = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.reverse();\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order and with duplicates removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDup = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order and with duplicates removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDupDesc = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index).reverse();\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order and with duplicates removed and with duplicate\n  numbers removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDupAndDup = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index).filter((item, index) => arr.indexOf(item) === index);\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order and with duplicates removed and with duplicate\n  numbers removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDupAndDupDesc = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index).filter((item, index) => arr.indexOf(item) === index).reverse();\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order and with duplicates removed and with duplicate\n  numbers removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDupAndDupDesc = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index).filter((item, index) => arr.indexOf(item) === index).reverse();\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order and with duplicates removed and with duplicate\n  numbers removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDupAndDupDesc = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index).filter((item, index) => arr.indexOf(item) === index).reverse();\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in ascending order and with duplicates removed and with duplicate\n  numbers removed.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerSumWithDupAndDupDesc = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i++) {\n    arr.push(i.toString());\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index).filter((item, index) => arr.indexOf(item) === index).reverse();\n};\n\n/*\n  Given two positive integers a and b, return the sum of all digits between a\n  and b, in descending order and with duplic", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beats_length = music_notes.map(note => note.length);\n  const music_notes_beats_sum = music_notes_beats_length.reduce((acc, val) => acc + val, 0);\n\n  const music_notes_beats_count_array = music_notes_beats_length.map(\n    (beats_count, index) => music_notes_beats_sum / music_notes_length * beats_count,\n  );\n\n  return music_notes_beats_count_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beats_length = music_notes.map(note => note.length);\n  const music_notes_beats_sum = music_notes_beats_length.reduce((acc, val) => acc + val, 0);\n\n  const music_notes_beats_count_array = music_notes_beats_length.map(\n    (beats_count, index) => music_notes_beats_sum / music_notes_length * beats_count,\n  );\n\n  return music_notes_beats_count_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beats_length = music_notes.map(note => note.length);\n  const music_notes_beats_sum = music_notes_beats_length.reduce((acc, val) => acc + val, 0);\n\n  const music_notes_beats_count_array = music_notes_beats_length.map(\n    (beats_count, index) => music_notes_beats_sum / music_notes_length * beats_count,\n  );\n\n  return music_notes_beats_count_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beats_length = music_notes.map(note => note.length);\n  const music_notes_beats_sum = music_notes_beats_length.reduce((acc, val) => acc + val, 0);\n\n  const music_notes_beats_count_array = music_notes_beats_length.map(\n    (beats_count, index) => music_notes_beats_sum / music_notes_length * beats_count,\n  );\n\n  return music_notes_beats_count_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beats_length = music_notes.map(note => note.length);\n  const music_notes_beats_sum = music_notes_beats_length.reduce((acc, val) => acc + val, 0);\n\n  const music_notes_beats_count_array = music_notes_beats_length.map(\n    (beats_count, index) => music_notes_beats_sum / music_notes_length * beats_count,\n  );\n\n  return music_notes_beats_count_array;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beats_length = music_notes.map(note => note.length);\n  const music_notes_beats_sum = music_notes_beats_length.reduce((acc, val) => acc + val, 0);\n\n  const music_notes_beats_count_array = music_notes_beats_length.map(\n    (beats_count, index) => music_notes_beats_sum / ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const nums = numbers.split(' ');\n  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorTLettters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorTLettters = (letters) => {\n  const letters = letters.split(' ');\n  letters.sort((a, b) => a - b);\n  return letters.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbIn = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbIn(3.5, 2)\n  3\n  */\nconst truNcatENumbInRound = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRound(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer).toFixed(precision)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number rounded to a specified precision.\n  >>> truNcatENumbInRoundToToTo(3.5, 2)\n  3\n  */\nconst truNcatENumbInRoundToToTo = (number, precision) => {\n  const [integer, decimal] = number.to", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] - closestNumbers[1]) {\n      closestNumbers[0] = sortedNumbers[i];\n    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return closestNumbers;\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const firstNumberIsNegative = firstNumber < 0;\n  const lastNumberIsNegative = lastNumber < 0;\n  const firstNumberIsPositive = firstNumber > 0;\n  const lastNumberIsPositive = lastNumber > 0;\n  const firstNumberIsZero = firstNumber === 0;\n  const lastNumberIsZero = lastNumber === 0;\n  const firstNumberIsOne = firstNumber === 1;\n  const lastNumberIsOne = lastNumber === 1;\n  const firstNumberIsTwo = firstNumber === 2;\n  const lastNumberIsTwo = lastNumber === 2;\n  const firstNumberIsThree = firstNumber === 3;\n  const lastNumberIsThree = lastNumber === 3;\n  const firstNumberIsFour = firstNumber === 4;\n  const lastNumberIsFour = lastNumber === 4;\n  const firstNumberIsFive = firstNumber === 5;\n  const lastNumberIsFive = lastNumber === 5;\n  const firstNumberIsSix = firstNumber === 6;\n  const lastNumberIsSix = lastNumber === 6;\n  const firstNumberIsSeven = firstNumber === 7;\n  const lastNumberIsSeven = lastNumber === 7;\n  const firstNumberIsEight = firstNumber === 8;\n  const lastNumberIsEight = lastNumber === 8;\n  const firstNumberIsNine = firstNumber === 9;\n  const lastNumberIsNine = lastNumber === 9;\n  const firstNumberIsTen = firstNumber === 10;\n  const lastNumberIsTen = lastNumber === 10;\n  const firstNumberIsEleven = firstNumber === 11;\n  const lastNumberIsEleven = lastNumber === 11;\n  const firstNumberIsTwelve = firstNumber === 12;\n  const lastNumberIsTwelve = lastNumber === 12;\n  const firstNumberIsThirteen = firstNumber === 13;\n  const lastNumberIsThirteen = lastNumber === 13;\n  const firstNumberIsFourteen = firstNumber === 14;\n  const lastNumberIsFourteen = lastNumber === 14;\n  const firstNumberIsFifteen = firstNumber === 15;\n  const lastNumberIsFifteen = lastNumber === 15;\n  const firstNumberIsSixteen = firstNumber === 16;\n  const lastNumberIsSixteen = lastNumber === 16;\n  const firstNumberIsSeventeen = firstNumber === 17;\n  const lastNumberIsSeventeen = lastNumber === 17;\n  const firstNumberIsEighteen = firstNumber === 18;\n  const lastNumberIsEighteen = lastNumber === 18;\n  const firstNumberIsNineteen = firstNumber === 19;\n  const lastNumberIsNineteen = lastNumber === 19;\n  const firstNumberIsTwenty = firstNumber === 20;\n  const lastNumberIsTwenty = lastNumber === 20;\n  const firstNumberIsTwentyOne = firstNumber === 21;\n  const lastNumberIsTwentyOne = lastNumber === 21;\n  const firstNumberIsTwentyTwo = firstNumber === 22;\n  const lastNumberIsTwentyTwo = lastNumber === 22;\n  const firstNumberIsTwentyThree = firstNumber === 23;\n  const lastNumberIsTwentyThree = lastNumber === 23;\n  const firstNumberIsTwentyFour = firstNumber === 24;\n  const lastNumberIsTwentyFour = lastNumber === 24;\n  const firstNumberIsTwentyFive = firstNumber === 25;\n  const lastNumberIsTwentyFive = lastNumber === 25;\n  const firstNumberIsTwentySix = firstNumber === 26;\n  const lastNumberIsTwentySix = lastNumber === 26;\n  const firstNumberIsTwentySeven = firstNumber === 27;\n  const lastNumberIsTwentySeven = lastNumber === 27;\n  const firstNumberIsTwentyEight = firstNumber === 28;\n  const lastNumberIsTwentyEight = lastNumber === 28;\n  const firstNumberIsTwentyNine = firstNumber === 29;\n  const lastNumberIsTwentyNine = lastNumber === 29;\n  const firstNumberIsThirty = firstNumber === 30;\n  const lastNumberIsThirty = lastNumber === 30;\n  const firstNumberIsThirtyOne = firstNumber === 31;\n  const lastNumberIsThirtyOne = lastNumber === 31;\n  const firstNumberIsThirtyTwo = firstNumber === 32;\n  const lastNumberIsThirtyTwo = lastNumber === 32;\n  const firstNumberIsThirtyThree = firstNumber === 33;\n  const lastNumberIsThirtyThree = lastNumber === 33;\n  const firstNumberIsThirtyFour = firstNumber === 34;\n  const lastNumberIsThirtyFour = lastNumber === 34;\n  const firstNumberIsThirtyFive = firstNumber === 35;\n  const lastNumberIsThirtyFive = lastNumber === 35;\n  const firstNumberIsThirtySix = firstNumber === 36;\n  const lastNumberIsThirtySix = lastNumber === 36;\n  const firstNumberIsThirtySeven = firstNumber === 37;\n  const lastNumberIsThirtySeven = lastNumber === 37;\n  const firstNumberIsThirtyEight = firstNumber === 38;\n  const lastNumberIsThirtyEight = lastNumber === 38;\n  const firstNumberIsThirtyNine = firstNumber === 39;\n  const lastNumberIsThirtyNine = lastNumber === 39;\n  const firstNumberIsFourty = firstNumber === 40;\n  const lastNumberIsFourty = lastNumber === 40;\n  const firstNumberIsFourtyOne = firstNumber === 41;\n  const lastNumberIsFourtyOne = lastNumber === 41;\n  const firstNumberIsFourtyTwo = firstNumber === 42;\n  const lastNumberIsFourtyTwo = lastNumber === 42;\n  const firstNumberIsFourtyThree = firstNumber === 43;\n  const lastNumberIsFourtyThree = lastNumber === 43;\n  const firstNumberIsFourtyFour = firstNumber === 44;\n  const lastNumberIsFourtyFour = lastNumber === 44;\n  const firstNumberIsFourtyFive = firstNumber === 45;\n  const lastNumberIsFourtyFive = lastNumber === 45;\n  const firstNumberIsFourtySix = firstNumber === 46;\n  const lastNumberIsFourtySix = lastNumber === 46;\n  const firstNumberIsFourtySeven = firstNumber === 47;\n  const lastNumberIsFourtySeven = lastNumber === 47;\n  const firstNumberIsFourtyEight = firstNumber === 48;\n  const lastNumberIsFourtyEight = lastNumber === 48;\n  const firstNumberIsFourtyNine = firstNumber === 49;\n  const lastNumberIsFourtyNine = lastNumber === 49;\n  const firstNumberIsFifty = firstNumber === 50;\n  const lastNumberIsFifty = lastNumber === 50;\n  const firstNumberIsFifty", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for floats\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 'abc', {}, []]\n  */\nconst filTerINtegeRf = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [true, false]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      len++;\n    }\n  }\n  return len;\n};\n\n/**\n * Returns true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abd')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) === index;\n};\n\n/**\n * Returns true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  true\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.length - prefix.length;\n  return index >= 0 && string.indexOf(prefix, index) === index;\n};\n\n/**\n * Returns true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  true\n  >>> contains('abc', 'abd')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'ab', 1)\n  true\n  >>> containsAtIndex('abc', 'ab', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring at given index\n * >>> contains", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLt = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisGt = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisGtOr = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisGtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisGtOr = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisGtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisGtOr = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n  >>> larGestdivisGt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> larGestdivisLt(15)\n  5\n  */\nconst larGestdivisLtOr = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n        result.push(numbers[i]);\n        counter--;\n      }\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      counter++;\n    } else {\n      if (counter > 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCaseE('Hello')\n  'hELLO'\n  */\nconst fliPCaseE = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to lowercase and uppercase to uppercase.\n  >>> fliPCase('Hello')\n  'hELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to lowercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to lowercase and uppercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to lowercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, function (c) {\n    return c === c.toUpperCase()? c.toUpperCase() : c.toLowerCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'HELLO'\n  */\nconst fliPCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, function (c) {\n    return c === c.toLowerCase()? c.toLowerCase() : c.toUpperCase();\n  });\n};\n\n/**\n * Given a string, flip all characters to uppercase and lowercase to uppercase.\n  >>> fliPCase('Hello", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, str) => `${acc}${str}`);\n};\n\n/* Return the first element of an array\n  >>> first([1,2,3])\n  1\n  */\nconst first = (arr) => {\n  return arr[0];\n};\n\n/* Return the last element of an array\n  >>> last([1,2,3])\n  3\n  */\nconst last = (arr) => {\n  return arr[arr.length - 1];\n};\n\n/* Return the sum of the elements of an array\n  >>> sum([1,2,3])\n  6\n  */\nconst sum = (arr) => {\n  return arr.reduce((acc, val) => acc + val, 0);\n};\n\n/* Return the average of the elements of an array\n  >>> average([1,2,3])\n  2\n  */\nconst average = (arr) => {\n  return sum(arr) / arr.length;\n};\n\n/* Return the median of the elements of an array\n  >>> median([1,2,3])\n  2\n  */\nconst median = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const middleIndex = Math.floor(arr.length / 2);\n  return sortedArr[middleIndex];\n};\n\n/* Return the mode of the elements of an array\n  >>> mode([1,2,3])\n  2\n  */\nconst mode = (arr) => {\n  const counts = {};\n  for (let i = 0; i < arr.length; i++) {\n    const val = arr[i];\n    counts[val] = counts[val]? counts[val] + 1 : 1;\n  }\n  return Object.entries(counts)\n   .sort((a, b) => b[1] - a[1])\n   .map(([key, val]) => key);\n};\n\n/* Return the standard deviation of the elements of an array\n  >>> std([1,2,3])\n  1.5811388300841898\n  */\nconst std = (arr) => {\n  const mean = average(arr);\n  const variance = arr.map((x) => Math.pow(x - mean, 2)).reduce((acc, val) => acc + val, 0);\n  return Math.sqrt(variance);\n};\n\n/* Return the variance of the elements of an array\n  >>> variance([1,2,3])\n  1.5\n  */\nconst variance = (arr) => {\n  const mean = average(arr);\n  const variance = arr.map((x) => Math.pow(x - mean, 2)).reduce((acc, val) => acc + val, 0);\n  return variance / arr.length;\n};\n\n/* Return the minimum of the elements of an array\n  >>> min([1,2,3])\n  1\n  */\nconst min = (arr) => {\n  return Math.min.apply(null, arr);\n};\n\n/* Return the maximum of the elements of an array\n  >>> max([1,2,3])\n  3\n  */\nconst max = (arr) => {\n  return Math.max.apply(null, arr);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(val - arr2[0])).filter((val) => val!== 0);\n};\n\n/* Return the absolute difference between the elements of two arrays\n  >>> absDiff([1,2,3], [1,2,3])\n  0\n  >>> absDiff([1,2,3], [1,2])\n  1\n  */\nconst absDiff = (arr1, arr2) => {\n  return arr1.map((val) => Math.abs(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const filtered = strings.filter(s => s.startsWith(prefix));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filTerBYPrefIxIx = (strings, suffix) => {\n  const filtered = strings.filter(s => s.endsWith(suffix));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filTerBYPrefIxIx = (strings, substring) => {\n  const filtered = strings.filter(s => s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filTerBYPrefIxIxIxIxIxIxIxIxIx = (strings, substring) => {\n  const filtered = strings.filter(s =>!s.includes(substring));\n  return filtered.length > 0? filtered : [];\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYPrefIx([], 'a')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRoRo([1, 2, 3])\n  false\n  >>> belOwZeRoRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRoRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  let posi = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) posi.push(l[i]);\n  }\n  return posi;\n};\n\n/*Return only negative numbers in the list.\n  >>> getnegTive([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getnegTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, -9, 0, 123, 1]\n  */\nconst getnegTive = (l) => {\n  let negati = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) negati.push(l[i]);\n  }\n  return negati;\n};\n\n/*Return only numbers in the list.\n  >>> getnumTive([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getnumTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getnumTive = (l) => {\n  let nums = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= null && l[i]!= \"\") nums.push(l[i]);\n  }\n  return nums;\n};\n\n/*Return only strings in the list.\n  >>> getstrTive([-1, 2, -4, 5, 6])\n  [\"-1\", \"2\", \"-4\", \"5\", \"6\"]\n  >>> getstrTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [\"5\", \"3\", \"-5\", \"2\", \"-3\", \"3\", \"9\", \"0\", \"123\", \"1\", \"-10\"]\n  */\nconst getstrTive = (l) => {\n  let strs = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= null && l[i]!= \"\") strs.push(l[i]);\n  }\n  return strs;\n};\n\n/*Return only booleans in the list.\n  >>> getboolTive([-1, 2, -4, 5, 6])\n  [false, true, false, true, false, true]\n  >>> getboolTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n <= 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return true;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return true;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return true;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return true;\n  if (n % 43 === 0) return false;\n  if (n % 53 === 0) return true;\n  if (n % 63 === 0) return false;\n  if (n % 73 === 0) return true;\n  if (n % 83 === 0) return false;\n  if (n % 93 === 0) return true;\n  if (n % 103 === 0) return false;\n  if (n % 113 === 0) return true;\n  if (n % 123 === 0) return false;\n  if (n % 133 === 0) return true;\n  if (n % 143 === 0) return false;\n  if (n % 153 === 0) return true;\n  if (n % 163 === 0) return false;\n  if (n % 173 === 0) return true;\n  if (n % 183 === 0) return false;\n  if (n % 193 === 0) return true;\n  if (n % 203 === 0) return false;\n  if (n % 213 === 0) return true;\n  if (n % 223 === 0) return false;\n  if (n % 233 === 0) return true;\n  if (n % 243 === 0) return false;\n  if (n % 253 === 0) return true;\n  if (n % 263 === 0) return false;\n  if (n % 273 === 0) return true;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return true;\n  if (n % 303 === 0) return false;\n  if (n % 313 === 0) return true;\n  if (n % 323 === 0) return false;\n  if (n % 333 === 0) return true;\n  if (n % 343 === 0) return false;\n  if (n % 353 === 0) return true;\n  if (n % 363 === 0) return false;\n  if (n % 373 === 0) return true;\n  if (n % 383 === 0) return false;\n  if (n % 393 === 0) return true;\n  if (n % 403 === 0) return false;\n  if (n % 413 === 0) return true;\n  if (n % 423 === 0) return false;\n  if (n % 433 === 0) return true;\n  if (n % 443 === 0) return false;\n  if (n % 455 === 0) return true;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return true;\n  if (n % 483 === 0) return false;\n  if (n % 493 === 0) return true;\n  if (n % 503 === 0) return false;\n  if (n % 513 === 0) return true;\n  if (n % 523 === 0) return false;\n  if (n % 533 === 0) return true;\n  if (n % 543 === 0) return false;\n  if (n % 553 === 0) return true;\n  if (n % 563 === 0) return false;\n  if (n % 573 === 0) return true;\n  if (n % 583 === 0) return false;\n  if (n % 593 === 0) return true;\n  if (n % 603 === 0) return false;\n  if (n % 613 === 0) return true;\n  if (n % 623 === 0) return false;\n  if (n % 633 === 0) return true;\n  if (n % 643 === 0) return false;\n  if (n % 653 === 0) return true;\n  if (n % 663 === 0) return false;\n  if (n % 673 === 0) return true;\n  if (n % 683 === 0) return false;\n  if (n % 693 === 0) return true;\n  if (n % 703 === 0) return false;\n  if (n % 713 === 0) return true;\n  if (n % 723 === 0) return false;\n  if (n % 733 === 0) return true;\n  if (n % 743 === 0) return false;\n  if (n % 755 === 0) return true;\n  if (n % 763 === 0) return false;\n  if (n % 773 === 0) return true;\n  if (n % 783 === 0) return false;\n  if (n % 793 === 0) return true;\n  if (n % 803 === 0) return false;\n  if (n % 813 === 0) return true;\n  if (n % 823 === 0) return false;\n  if (n % 833 === 0) return true;\n  if (n % 843 === 0) return false;\n  if (n % 855 === 0) return true;\n  if (n % 863 === 0) return false;\n  if (n % 873 === 0) return true;\n  if (n % 883 === 0) return false;\n  if (n % 893 === 0) return true;\n  if (n % 903 === 0) return false;\n  if (n % 913 === 0) return true;\n  if (n % 923 === 0) return false;\n  if (n % 931 === 0) return true;\n  if (n % 943 === 0) return false;\n  if (n % 953 === 0) return true;\n  if (n % 963 === 0) return false;\n  if (n % 973 === 0) return true;\n  if (n % 983 === 0) return false;\n  if (n % 993 === 0) return true;\n  if (n % 1003 === 0) return false;\n  if (n % 1013 === 0) return true;\n  if (n % 1023 == 0) return false;\n  if (n % 1033 === 0) return true;\n  if (n % 1053 == 0) return false;\n  if (n % 1063 == 0) return true;\n  if (n % 1083 == 0) return false;\n  if (n % 1093 == 0) return true;\n  if (n % 1103 == 0) return false;\n  if (n % 1113 == 0) return true;\n  if (n % 1123 == 0) return false;\n  if (n % 1133 == 0) return true;\n  if (n % 1153 == 0) return false;\n  if (n % 1163 == 0) return true;\n  if (n % 1173 == 0) return false;\n  if (n % 1193 == 0) return true;\n  if (n % 1203 == 0) return false;\n  if (n % 1213 == 0) return true;\n  if (n % 1223 == 0) return false;\n  if (n % 1233 == 0) return true;\n  if (n % 1253 == 0) return false;\n  if (n % 1263 == 0) return true;\n  if (n % 1273 == 0) return false;\n  if (n % 1293 == 0) return true;\n  if (n % 1303 == 0) return false;\n  if (n % 1313 == 0) return true;\n  if (n % 1323 == 0) return false;\n  if (n % 1333 == 0) return true;\n  if (n % 1353 == 0) return false;\n  if (n % 1363 == 0) return true;\n  if (n % 1373 == 0) return false;\n  if (n % 1393 == 0) return true;\n  if (n % 1403 == 0) return false;\n  if (n % 1413 == 0) return true;\n  if (n % 1423 == 0) return false;\n  if (n % 1433 == 0) return true;\n  if (n % 1453 == 0) return false;\n  if (n % 1463 == 0) return true;\n  if (n % 1473 == 0) return false;\n  if (n % 1483 == 0) return true;\n  if (n % 1493 == 0) return false;\n  if (n % 1503 == 0) return true;\n  if (n % 1513 == 0) return false;\n  if (n % 1523 == 0) return true;\n  if (n % 1533 == 0) return false;\n  if (n % 1553 == 0) return true;\n  if (n % 1563 == 0) return false;\n  if (n % 1573 == 0) return true;\n  if (n % 1583 == 0) return false;\n  if (n % 1593 == 0) return true;\n  if (n % 1603 == 0) return false;\n  if (n % 1613 == 0) return true;\n  if (n % 1623 == 0) return false;\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "<|endoftext|>/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      zeroPoint = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  if (maxCoefficient === 0) {\n    return zeroPoint;\n  }\n  for (let i = zeroPoint + 1; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      return i;\n    }\n  }\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findMax finds largest coefficient of polY(xs).\n  findMax returns only largest coefficient of polY(xs), even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (xs[i] > maxCoefficient) {\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findMin finds smallest coefficient of polY(xs).\n  findMin returns only smallest coefficient of polY(xs), even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (xs[i] < minCoefficient) {\n      minCoefficient = xs[i];\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findRoot finds root of polY(xs).\n  findRoot returns only root of polY(xs), even if there are many.\n  Moreover, findRoot only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot = (xs) => {\n  let root = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      root = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  if (maxCoefficient === 0) {\n    return root;\n  }\n  for (let i = root + 1; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      return i;\n    }\n  }\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findCubic finds cubic root of polY(xs).\n  findCubic returns only cubic root of polY(xs), even if there are many.\n  Moreover, findCubic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubic([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findCubic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCubic = (xs) => {\n  let root = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      root = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  if (maxCoefficient === 0) {\n    return root;\n  }\n  for (let i = root + 1; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      return i;\n    }\n  }\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findQuadratic finds quadratic root of polY(xs).\n  findQuadratic returns only quadratic root of polY(xs), even if there are many.\n  Moreover, findQuadratic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findQuadratic([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findQuadratic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findQuadratic = (xs) => {\n  let root = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      root = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  if (maxCoefficient === 0) {\n    return root;\n  }\n  for (let i = root + 1; i < xs.length; i = i + 2) {\n    if (xs[i] === 0) {\n      return i;\n    }\n  }\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findCubicRoot finds cubic root of polY(xs).\n  findCubicRoot returns only cubic root of polY(xs), even if there are many.\n  Moreover, findCubicRoot only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubicRoot([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findCubicRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCubicRoot = (xs) => {\n  let root = 0;\n  let maxCo", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in descending order.\n  >>> sorTThiRd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 5, 4, 6, 3, 2]\n  */\nconst sorTThiRdDesc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in ascending order.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorTThiRdAsc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in ascending order.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorTThiRdAscDesc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in ascending order.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorTThiRdAscAsc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in descending order.\n  >>> sorTThiRd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 5, 4, 6, 3, 2]\n  */\nconst sorTThiRdDescDesc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in descending order.\n  >>> sorTThiRd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 5, 4, 6, 3, 2]\n  */\nconst sorTThiRdDescAsc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in descending order.\n  >>> sorTThiRd([1, 2, 3])\n  [3, 2, 1]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 5, 4, 6, 3, 2]\n  */\nconst sorTThiRdDescAscDesc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted in ascending order.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorTThiRdAscDescAsc = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "<|endoftext|>/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }\n  }\n  return u;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.splice(i, 1)[0]) < 0) {\n      u.push(l.splice(i, 1)[0]);\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minelemEnt = (l) => {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumEnt([1, 2, 3])\n  6\n  >>> sumEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -56\n  */\nconst sumEnt = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> proEnt([1, 2, 3])\n  6\n  >>> proEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -56\n  */\nconst proEnt = (l) => {\n  let pro = 1;\n  for (let i = 0; i < l.length; i++) {\n    pro *= l[i];\n  }\n  return pro;\n};\n\n/*Return mean of all elements in the list.\n  >>> meanEnt([1, 2, 3])\n  1.5\n  >>> meanEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10.5\n  */\nconst meanEnt = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in the list.\n  >>> medianEnt([1, 2, 3])\n  1.5\n  >>> medianEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst medianEnt = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let left = l.slice(0, mid);\n  let right = l.slice(mid);\n  return median(left) + median(right);\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt([1, 2, 3])\n  1\n  >>> modeEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeEnt = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt2(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt2(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt2(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt2 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt3(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt3(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt3(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt3 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt4(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt4(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt4(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt4 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt5(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt5(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt5(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt5 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt6(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt6(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt6(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt6 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt7(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt7(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt7(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt7 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      maxCount++;\n    }\n  }\n  return maxCountIndex;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeEnt8(['a', 'b', 'c', 'd', 'e'])\n  'd'\n  >>> modeEnt8(['b', 'c', 'd', 'e'])\n  'b'\n  >>> modeEnt8(['b', 'c', 'd', 'e', 'f'])\n  'b'\n  */\nconst modeEnt8 = (l) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i];\n      maxCount = 0;\n      maxCountIndex = i;\n    } else if (l[i] === mode) {\n      max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 1 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 2 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 3 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 4 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 5 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 6 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return Math.floor(n/11) % 10 === 0? 0 : 2;\n  }\n  return Math.floor(n/13) % 10 === 0? 0 : 3;\n};\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => a - b);\n  oddIndexes.sort((a, b) => a - b);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorTEveO([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveO([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorTEveO = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(l[i]);\n    } else {\n      oddIndexes.push(l[i]);\n    }\n  }\n  evenIndexes.sort((a, b) => b - a);\n  oddIndexes.sort((a, b) => b - a);\n  return evenIndexes.concat(oddIndexes);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encOdeCYclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encOdeCYclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encOdeCYclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encOdeCYclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "<|endoftext|>/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiB(n / 2);\n  }\n  return priMeFiB(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return priMeFiBN(n / 2);\n  }\n  return priMeFiBN(3 * n + 1);\n};\n\n/*\n  priMeFiBN returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiBN(1)\n  2\n  >>> priMeFiBN(2)\n  3\n  >>> priMeFiBN(3)\n  5\n  >>> priMeFiBN(4)\n  13\n  >>> priMeFiBN(5)\n  89\n  */\nconst priMeFiBN = (n) => {\n  if (n === 1 || n === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  mean = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  median = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - median, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  mode = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - mode, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  mean = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  median = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - median, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  mode = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - mode, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  mean = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  let median = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  median = sum / numbers.length;\n  let sum2 = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum2 += Math.pow(numbers[i] - median, 2);\n  }\n  return Math.sqrt(sum2 / numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meaNAbsOlutedevIatioM([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioM = (numbers) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "<|endoftext|>/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSioN[i].collide(carsSioN[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSio = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsSio[i].collide(carsSio[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decRLisT([1, 2, 3])\n  [2, 1, 1]\n  >>> decRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decRLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multRLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multRLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divRLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divRLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 3;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 3.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 3;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 4;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 4.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 4;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 5;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 5.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 5;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 6.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 6;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 6.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 6;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 7.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 7;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 7.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 7;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 8.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 8;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 8.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst divLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 8;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 9.\n  >>> multLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123]\n  */\nconst multLisT = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 9;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 9.\n  >>> divLisT([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> divLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 12", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "<|endoftext|>/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuM", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x.length) {\n    const digit = parseInt(x.charAt(i), base);\n    if (digit < 10) {\n      res += digit;\n    } else {\n      res += '0' + digit;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> chaNgeBAse('22', 3)\n  '22'\n  >>> chaNgeBAse('22', 2)\n  '1000'\n  >>> chaNgeBAse('111', 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = '';", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Problem 8\n  ---------\n  Write a function that takes a positive integer n and returns the nth Fibonacci number.\n  >>> fib(5)\n  5\n  >>> fib(6)\n  8\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  1213925\n  >>> fib(27)\n  1964185\n  >>> fib(28)\n  31781185\n  >>> fib(29)\n  51422925\n  >>> fib(30)\n  832040575\n  >>> fib(31)\n  1346269345\n  >>> fib(32)\n  217830375\n  >>> fib(33)\n  3524578125\n  >>> fib(34)\n  5702887125\n  >>> fib(35)\n  949755813\n  >>> fib(36)\n  1597274925\n  >>> fib(37)\n  2588324785\n  >>> fib(38)\n  3690881615\n  >>> fib(39)\n  5521176253\n  >>> fib(40)\n  8956457785\n  >>> fib(41)\n  14542236353\n  >>> fib(42)\n  23372928337\n  >>> fib(43)\n  37720611389\n  >>> fib(44)\n  6346475229\n  >>> fib(45)\n  10233415125\n  >>> fib(46)\n  17711773125\n  >>> fib(47)\n  28657480396\n  >>> fib(48)\n  4636874417\n  >>> fib(49)\n  7502532481\n  >>> fib(50)\n  12139250653\n  >>> fib(51)\n  19641846671\n  >>> fib(52)\n  31781180797\n  >>> fib(53)\n  51422957421\n  >>> fib(54)\n  83204885791\n  >>> fib(55)\n  13462693952\n  >>> fib(56)\n  21783091134\n  >>> fib(57)\n  35245781469\n  >>> fib(58)\n  57028874735\n  >>> fib(59)\n  94975570681\n  >>> fib(60)\n  15972740543\n  >>> fib(61)\n  25883247645\n  >>> fib(62)\n  36908816229\n  >>> fib(63)\n  55211762549\n  >>> fib(64)\n  89564577857\n  >>> fib(65)\n  145422363557\n  >>> fib(66)\n  233729283357\n  >>> fib(67)\n  377206113953\n  >>> fib(68)\n  63464752273\n  >>> fib(69)\n  102334151257\n  >>> fib(70)\n  177117731271\n  >>> fib(71)\n  286574803957\n  >>> fib(72)\n  463687441776\n  >>> fib(73)\n  75025324807\n  >>> fib(74)\n  121392506557\n  >>> fib(75)\n  196418466755\n  >>> fib(76)\n  317811807971\n  >>> fib(77)\n  514229574217\n  >>> fib(78)\n  832048857871\n  >>> fib(79)\n  134626939557\n  >>> fib(80)\n  217830911349\n  >>> fib(81)\n  352457814697\n  >>> fib(82)\n  570288747353\n  >>> fib(83)\n  949755706857\n  >>> fib(84)\n  1597274054357\n  >>> fib(85)\n  258832476453\n  >>> fib(86)\n  369088162295\n  >>> fib(87)\n  552117625497\n  >>> fib(88)\n  895645778575\n  >>> fib(89)\n  1454223635575\n  >>> fib(90)\n  2337292833575\n  >>> fib(91)\n  377206113953\n  >>> fib(92)\n  63464752273\n  >>> fib(93)\n  1023341512577\n  >>> fib(94)\n  1771177312711\n  >>> fib(95)\n  2865748039577\n  >>> fib(96)\n  4636874417761\n  >>> fib(97)\n  7502532480711\n  >>> fib(98)\n  12139250655771\n  >>> fib(99)\n  19641846675511\n  >>> fib(100)\n  3178118079711\n  >>> fib(101)\n  51422957421711\n  >>> fib(102)\n  8320488578711\n  >>> fib(103)\n  13462693955771\n  >>> fib(104)\n  21783091134", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "<|endoftext|>/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[mid]) {\n      count++;\n    }\n  }\n  return count === 0? 0 : l[mid];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = [...text].reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  const m = n % (p || 1);\n  return m >= p? m : modP(m, p);\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2 = (n) => {\n  return n!== n? undefined : n!== 0? n & n - 1 : 0;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrNaN = (n) => {\n  return isPowerOf2(n) || Number.isNaN(n);\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrInfinity = (n) => {\n  return isPowerOf2(n) || Number.isFinite(n);\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrNegative = (n) => {\n  return isPowerOf2(n) || n < 0;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrZero = (n) => {\n  return isPowerOf2(n) || n === 0;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrOne = (n) => {\n  return isPowerOf2(n) || n === 1;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrTwo = (n) => {\n  return isPowerOf2(n) || n === 2;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrThree = (n) => {\n  return isPowerOf2(n) || n === 3;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrFour = (n) => {\n  return isPowerOf2(n) || n === 4;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrFive = (n) => {\n  return isPowerOf2(n) || n === 5;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrSix = (n) => {\n  return isPowerOf2(n) || n === 6;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrSeven = (n) => {\n  return isPowerOf2(n) || n === 7;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrEight = (n) => {\n  return isPowerOf2(n) || n === 8;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrNine = (n) => {\n  return isPowerOf2(n) || n === 9;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrTen = (n) => {\n  return isPowerOf2(n) || n === 10;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrEleven = (n) => {\n  return isPowerOf2(n) || n === 11;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrTwelve = (n) => {\n  return isPowerOf2(n) || n === 12;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrThirteen = (n) => {\n  return isPowerOf2(n) || n === 13;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrFourteen = (n) => {\n  return isPowerOf2(n) || n === 14;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrFifteen = (n) => {\n  return isPowerOf2(n) || n === 15;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrSixteen = (n) => {\n  return isPowerOf2(n) || n === 16;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrSeventeen = (n) => {\n  return isPowerOf2(n) || n === 17;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrEighteen = (n) => {\n  return isPowerOf2(n) || n === 18;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrNineteen = (n) => {\n  return isPowerOf2(n) || n === 19;\n};\n\n/**\n * Returns true if n is a power of 2.\n * Returns false if n is not a power of 2.\n * Returns undefined if n is NaN.\n */\nconst isPowerOf2OrTwenty = (n) => {\n  return isPowerOf2(n) || n === 20;\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot function. Returns decoded string.\n  */\nconst decodeROT = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot3 function. Returns decoded string.\n  */\nconst decodeROT3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot4 function. Returns decoded string.\n  */\nconst decodeROT4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot5 function. Returns decoded string.\n  */\nconst decodeROT5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot6 function. Returns decoded string.\n  */\nconst decodeROT6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot7 function. Returns decoded string.\n  */\nconst decodeROT7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot8 function. Returns decoded string.\n  */\nconst decodeROT8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot9 function. Returns decoded string.\n  */\nconst decodeROT9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot10 function. Returns decoded string.\n  */\nconst decodeROT10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rot11 function. Returns decoded string.\n  */\nconst decodeROT11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encOdeROT12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "<|endoftext|>/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  remOveVowelsExceptFirst is a function that takes string and returns string without vowels.\n  >>> remOveVowelsExceptFirst('', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('a', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaa', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaAaaaA', 'a')\n  'a'\n  >>> remOveVowelsExceptFirst('aaaAaaaAaaaAaaa", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belOwThReshoUd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoUd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoUd = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLd([1, 2, 4, 10], 100, 5)\n  true\n  >>> belOwThReshoUdReshoLd([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst belOwThReshoUdReshoLd = (l, t, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoUd([1, 2, 4, 10], 100, 5)\n  true\n  >>> belOwThReshoUdReshoUd([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst belOwThReshoUdReshoUd = (l, t, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] < u) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] < u || l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoLdReshoUd = (l, t, u, r) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < u && l[i] > r) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold u.\n  >>> belOwThReshoUdReshoLdReshoUd([1, 2, 4, 10], 100, 5, 20)\n  true\n  >>> belOwThReshoUdReshoLdReshoUd([1, 20, 4, 10], 5, 100, 20)\n  false\n  */\nconst belOwThReshoUdReshoL", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = x => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.6)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the quotient of number x divided by number y\n  >>> quotient(10, 3)\n  3\n  >>> quotient(10, 5)\n  3\n  */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*Get the remainder of number x divided by number y\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, 5)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulo of two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRsR('abcd', 'dddddddabc')\n  true\n  >>> samEChaRsR('dddddddabc', 'abcd')\n  true\n  >>> samEChaRsR('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRsR('abcd', 'dddddddabce')\n  false\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRsR = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> samEChaRsR('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samE", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  4\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n  >>> fib(32)\n  2178309\n  >>> fib(33)\n  3524578\n  >>> fib(34)\n  5702887\n  >>> fib(35)\n  9497558\n  >>> fib(36)\n  14930352\n  >>> fib(37)\n  24157817\n  >>> fib(38)\n  39088169\n  >>> fib(39)\n  63245986\n  >>> fib(40)\n  102334155\n  >>> fib(41)\n  165580141\n  >>> fib(42)\n  267914296\n  >>> fib(43)\n  433494437\n  >>> fib(44)\n  701408733\n  >>> fib(45)\n  1134903170\n  >>> fib(46)\n  1836311903\n  >>> fib(47)\n  2971215073\n  >>> fib(48)\n  4807526976\n  >>> fib(49)\n  7778742049\n  >>> fib(50)\n  12586269025\n  >>> fib(51)\n  17167680221\n  >>> fib(52)\n  27153050094\n  >>> fib(53)\n  37244509570\n  >>> fib(54)\n  53583952234\n  >>> fib(55)\n  83886072349\n  >>> fib(56)\n  137438101623\n  >>> fib(57)\n  217830375878\n  >>> fib(58)\n  352457724013\n  >>> fib(59)\n  570288744735\n  >>> fib(60)\n  949755813887\n  >>> fib(61)\n  1493035280225\n  >>> fib(62)\n  2415781655789\n  >>> fib(63)\n  3908816957351\n  >>> fib(64)\n  6324598625930\n  >>> fib(65)\n  10233415241075\n  >>> fib(66)\n  16558014290047\n  >>> fib(67)\n  26791429686511\n  >>> fib(68)\n  43349443700885\n  >>> fib(69)\n  70140873317993\n  >>> fib(70)\n  113490317701331\n  >>> fib(71)\n  183631190310066\n  >>> fib(72)\n  297121507317027\n  >>> fib(73)\n  480752697652063\n  >>> fib(74)\n  77787420496009\n  >>> fib(75)\n  125862690259057\n  >>> fib(76)\n  171676802210033\n  >>> fib(77)\n  271530500940122\n  >>> fib(78)\n  37244509570227\n  >>> fib(79)\n  535839522341311\n  >>> fib(80)\n  838860723496097\n  >>> fib(81)\n  1374381016230067\n  >>> fib(82)\n  217830375878075\n  >>> fib(83)\n  352457724013746\n  >>> fib(84)\n  570288744735187\n  >>> fib(85)\n  949755813887491\n  >>> fib(86)\n  1493035280225487\n  >>> fib(87)\n  241578165578957\n  >>> fib(88)\n  390881695735147\n  >>> fib(89)\n  632459862593073\n  >>> fib(90)\n  1023341524107537\n  >>> fib(91)\n  1655801429004755\n  >>> fib(92)\n  2679142968651113\n  >>> fib(93)\n  4334944370088529\n  >>> fib(94)\n  7014087331799323\n  >>> fib(95)\n  11349031770133113\n  >>> fib(96)\n  18363119031006629\n  >>> fib(97)\n  29712150731702741\n  >>> fib(98)\n  48075269765206367\n  >>> fib(99)\n  7778742049600941\n  >>> fib(100)\n  12586269025905743\n  >>> fib(101)\n  17167680221003351\n  >>> fib(102)\n  27153050094012227\n  >>> fib(103)\n  37244509570227447\n  >>> fib(104)\n  53583952234131113\n  >>> fib(105)\n  83886072349609743\n  >>> fib(106)\n  137438101623006733\n  >>> fib(107)\n  21783037587807557\n  >>> fib(10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    const openingBracket = openingBrackets[i];\n    const closingBracket = closingBrackets[i];\n\n    if (openingBracket!== closingBracket) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Returns true if the given string is a valid rectangle bracket expression.\n *\n * A rectangle bracket expression consists of two or more opening brackets\n * and zero or more closing brackets.\n *\n * >>> corRectbrackEtiNg(\"<<><>>\")\n * true\n * >>> corRectbrackEtiNg(\"<><<><>>\")\n * true\n * >>> corRectbrackEtiNg(\"<><<><>><<><>>\")\n * true\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>\")\n * false\n * >>> corRectbrackEtiNg(\"<><<><>><<><", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "<|endoftext|>/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonic (increasing or decreasing).\n  >>> monotonicIc([1, 2, 4, 20])\n  true\n  >>> monotonicIc([1, 20, 4, 10])\n  false\n  >>> monotonicIc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "<|endoftext|>/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const com = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      com.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return com;\n};\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTau = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTau(13195)\n  29\n  >>> larGestprimefacTau(2048)\n  2\n  */\nconst larGestprimefacTau = (n) => {\n  let maxFactor = 1;\n  let maxFactorIndex = 1;\n  for (let i = 3; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTau(13195)\n  29\n  >>> larGestprimefacTau(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 4; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let maxFactor = 1;\n  let maxFactorIndex = 1;\n  for (let i = 6; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 8; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let maxFactor = 1;\n  let maxFactorIndex = 1;\n  for (let i = 10; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 12; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let maxFactor = 1;\n  let maxFactorIndex = 1;\n  for (let i = 14; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 16; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let maxFactor = 1;\n  let maxFactorIndex = 1;\n  for (let i = 18; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 20; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let maxFactor = 1;\n  let maxFactorIndex = 1;\n  for (let i = 22; i < n; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n      maxFactorIndex = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let minFactor = 1;\n  let minFactorIndex = 1;\n  for (let i = 24; i < n; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n      minFactorIndex = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTh(13195)\n  29\n  >>> larGestprimefacTh(2048)\n  2\n  */\nconst larGestprimefacTh = (n) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]*?)\\)/g);\n  const max_level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const level = groups[i].match(/\\(([^()]*?)\\)/).length;\n    if (level > max_level) {\n      max_level = level;\n    }\n  }\n  return max_level;\n};\n\n/**\n * Given a string representing a mathematical expression in infix notation, return the string in postfix notation.\n * E.g. (a+b)*(c+d) -> (a+b)*(c+d) -> a+b+c+d\n * \n * >>> postFixToInfix('(a + b) * c + d')\n * '(a + b) * c + d'\n */\nconst postFixToInfix = (postfix_string) => {\n  const stack = [];\n  let postfix_stack = [];\n  let postfix_strings = postfix_string.split(' ');\n  for (let i = 0; i < postfix_strings.length; i++) {\n    const postfix_string = postfix_strings[i];\n    if (postfix_string.startsWith('(')) {\n      postfix_stack.push(postfix_string);\n    } else if (postfix_string.startsWith(')')) {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        if (postfix_string.startsWith('(')) {\n          stack.push(postfix_string);\n        } else {\n          postfix_stack.push(postfix_string);\n        }\n      }\n    } else {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        postfix_stack.push(postfix_string);\n      }\n      stack.push(postfix_string);\n    }\n  }\n  while (stack.length > 0) {\n    const postfix_string = stack.pop();\n    postfix_stack.push(postfix_string);\n  }\n  return postfix_stack.join(' ');\n};\n\n/**\n * Given a string representing a mathematical expression in infix notation, return the string in prefix notation.\n * E.g. (a+b)*(c+d) -> (a+b)*(c+d) -> a+b+c+d\n * \n * >>> postFixToInfix('(a + b) * c + d')\n * '(a + b) * c + d'\n */\nconst postFixToPrefix = (postfix_string) => {\n  const stack = [];\n  let postfix_stack = [];\n  let postfix_strings = postfix_string.split(' ');\n  for (let i = 0; i < postfix_strings.length; i++) {\n    const postfix_string = postfix_strings[i];\n    if (postfix_string.startsWith('(')) {\n      postfix_stack.push(postfix_string);\n    } else if (postfix_string.startsWith(')')) {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        if (postfix_string.startsWith('(')) {\n          stack.push(postfix_string);\n        } else {\n          postfix_stack.push(postfix_string);\n        }\n      }\n    } else {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        postfix_stack.push(postfix_string);\n      }\n      stack.push(postfix_string);\n    }\n  }\n  while (stack.length > 0) {\n    const postfix_string = stack.pop();\n    postfix_stack.push(postfix_string);\n  }\n  return postfix_stack.join(' ');\n};\n\n/**\n * Given a string representing a mathematical expression in infix notation, return the string in prefix notation.\n * E.g. (a+b)*(c+d) -> (a+b)*(c+d) -> a+b+c+d\n * \n * >>> postFixToInfix('(a + b) * c + d')\n * '(a + b) * c + d'\n */\nconst postFixToPrefix = (postfix_string) => {\n  const stack = [];\n  let postfix_stack = [];\n  let postfix_strings = postfix_string.split(' ');\n  for (let i = 0; i < postfix_strings.length; i++) {\n    const postfix_string = postfix_strings[i];\n    if (postfix_string.startsWith('(')) {\n      postfix_stack.push(postfix_string);\n    } else if (postfix_string.startsWith(')')) {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        if (postfix_string.startsWith('(')) {\n          stack.push(postfix_string);\n        } else {\n          postfix_stack.push(postfix_string);\n        }\n      }\n    } else {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        postfix_stack.push(postfix_string);\n      }\n      stack.push(postfix_string);\n    }\n  }\n  while (stack.length > 0) {\n    const postfix_string = stack.pop();\n    postfix_stack.push(postfix_string);\n  }\n  return postfix_stack.join(' ');\n};\n\n/**\n * Given a string representing a mathematical expression in infix notation, return the string in prefix notation.\n * E.g. (a+b)*(c+d) -> (a+b)*(c+d) -> a+b+c+d\n * \n * >>> postFixToInfix('(a + b) * c + d')\n * '(a + b) * c + d'\n */\nconst postFixToPrefix = (postfix_string) => {\n  const stack = [];\n  let postfix_stack = [];\n  let postfix_strings = postfix_string.split(' ');\n  for (let i = 0; i < postfix_strings.length; i++) {\n    const postfix_string = postfix_strings[i];\n    if (postfix_string.startsWith('(')) {\n      postfix_stack.push(postfix_string);\n    } else if (postfix_string.startsWith(')')) {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        if (postfix_string.startsWith('(')) {\n          stack.push(postfix_string);\n        } else {\n          postfix_stack.push(postfix_string);\n        }\n      }\n    } else {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        postfix_stack.push(postfix_string);\n      }\n      stack.push(postfix_string);\n    }\n  }\n  while (stack.length > 0) {\n    const postfix_string = stack.pop();\n    postfix_stack.push(postfix_string);\n  }\n  return postfix_stack.join(' ');\n};\n\n/**\n * Given a string representing a mathematical expression in infix notation, return the string in prefix notation.\n * E.g. (a+b)*(c+d) -> (a+b)*(c+d) -> a+b+c+d\n * \n * >>> postFixToInfix('(a + b) * c + d')\n * '(a + b) * c + d'\n */\nconst postFixToPrefix = (postfix_string) => {\n  const stack = [];\n  let postfix_stack = [];\n  let postfix_strings = postfix_string.split(' ');\n  for (let i = 0; i < postfix_strings.length; i++) {\n    const postfix_string = postfix_strings[i];\n    if (postfix_string.startsWith('(')) {\n      postfix_stack.push(postfix_string);\n    } else if (postfix_string.startsWith(')')) {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_stack.pop();\n        if (postfix_string.startsWith('(')) {\n          stack.push(postfix_string);\n        } else {\n          postfix_stack.push(postfix_string);\n        }\n      }\n    } else {\n      while (postfix_stack.length > 0) {\n        const postfix_string = postfix_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "<|endoftext|>/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[()]+/g);\n  const closeBrackets = brackets.match(/[)]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[[]]+/g);\n  const closeBrackets = brackets.match(/[[]]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[()]+/g);\n  const closeBrackets = brackets.match(/[)]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[[]]+/g);\n  const closeBrackets = brackets.match(/[[]]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[()]+/g);\n  const closeBrackets = brackets.match(/[)]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"[\")\n  false\n  >>> corRectbrackEtiNg(\"[]\")\n  true\n  >>> corRectbrackEtiNg(\"[[]]\")\n  true\n  >>> corRectbrackEtiNg(\"[]]\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[[]]+/g);\n  const closeBrackets = brackets.match(/[[]]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[()]+/g);\n  const closeBrackets = brackets.match(/[)]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.match(/[()]+/g);\n  const closeBrackets = brackets.match(/[)]+/g);\n  const openBracketsCount = openBrackets? openBrackets.length : 0;\n  const closeBracketsCount = closeBrackets? closeBrackets.length : 0;\n  return openBracketsCount === closeBracketsCount;\n};\n\n/**\n * Return true if brackets is a string of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve2 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve3 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve4 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve5 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve6 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve7 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve8 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve9 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve10 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;\n};\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve11 = (xs) => {\n  const n = xs.length;\n  const der = [];\n  for (let i = 0; i < n; i++) {\n    der[i] = xs[i];\n  }\n  for (let i = n; i > 0; i--) {\n    der[i] = der[i - 1] * i;\n  }\n  return der;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,25])\n  25\n  >>> squareSum([1,4,9,16,", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "<|endoftext|>/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt2 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt2(\"abcde\")\n  2\n  >>> vowElsCOunt2(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt2 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt3 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt3(\"abcde\")\n  2\n  >>> vowElsCOunt3(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt3 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt4 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt4(\"abcde\")\n  2\n  >>> vowElsCOunt4(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt4 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt5 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt5(\"abcde\")\n  2\n  >>> vowElsCOunt5(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt5 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt6 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt6(\"abcde\")\n  2\n  >>> vowElsCOunt6(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt6 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt7 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt7(\"abcde\")\n  2\n  >>> vowElsCOunt7(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt7 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt8 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt8(\"abcde\")\n  2\n  >>> vowElsCOunt8(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt8 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt9 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt9(\"abcde\")\n  2\n  >>> vowElsCOunt9(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt9 = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowElsCOunt10 which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShift = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShifT(12, 1)\n  \"12\"\n  >>> cirCulaLShifT(12, 2)\n  \"21\"\n  */\nconst cirCulaLShifT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"12\"\n  >>> cirCulaLShift(12, 2)\n  \"21\"\n  */\nconst cirCulaLShift = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"12\"\n  >>> cirCulaRShift(12, 2)\n  \"21\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"21\"\n  >>> cirCulaLShift(12, 2)\n  \"12\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"21\"\n  >>> cirCulaLShift(12, 2)\n  \"12\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"12\"\n  >>> cirCulaLShift(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"21\"\n  >>> cirCulaLShift(12, 2)\n  \"12\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"12\"\n  >>> cirCulaLShift(12, 2)\n  \"21\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"21\"\n  >>> cirCulaLShift(12, 2)\n  \"12\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"21\"\n  >>> cirCulaLShift(12, 2)\n  \"12\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(12, 2)\n  \"12\"\n  */\nconst cirCulaRShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, str.length - shift) + str.substr(str.length - shift);\n};\n\n/*\n  >>> cirCulaLShift(12, 1)\n  \"21\"\n  >>> cirCulaLShift(12, 2)\n  \"12\"\n  */\nconst cirCulaLShiftT = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  return str.substr(0, shift) + str.substr(shift);\n};\n\n/*\n  >>> cirCulaRShift(12, 1)\n  \"21\"\n  >>> cirCulaRShift(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woAr", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = n.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    sum += parseInt(arr2[i]);\n  }\n  return sum - arr2.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = n.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    sum += parseInt(arr2[i]);\n  }\n  return sum - arr2.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = n.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    sum += parseInt(arr2[i]);\n  }\n  return sum - arr2.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = n.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    sum += parseInt(arr2[i]);\n  }\n  return sum - arr2.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = n.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    sum += parseInt(arr2[i]);\n  }\n  return sum - arr2.length;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = n.split(\" \");\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr2.length; i++) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const evenValues = arr.filter(item => item % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [2, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const oddValues = arr.filter(item => item % 2!== 0);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = Math.max(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [2, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const oddValues = arr.filter(item => item % 2!== 0);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = Math.min(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [2, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const oddValues = arr.filter(item => item % 2!== 0);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = Math.max(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluCk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [2, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const oddValues = arr.filter(item => item % 2!== 0);\n  if (oddValues.length === 0) {\n    return [];\n  }\n  const smallestOddValue = Math.min(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the number of positive integers\n  that do not occur in the given list.\n  Examples:\n      countPositives([1, 3, 5]) == 2\n      countPositives([1, 3, 6, 5, 2, 3]) == 3\n      countPositives([1, 3, 6, 5, 2, 3]) == -1\n  */\nconst countPositives = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the number of negative integers\n  that do not occur in the given list.\n  Examples:\n      countNegatives([1, 3, 5]) == 2\n      countNegatives([1, 3, 6, 5, 2, 3]) == 3\n      countNegatives([1, 3, 6, 5, 2, 3]) == -1\n  */\nconst countNegatives = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the number of integers that are even.\n  Examples:\n      countEvens([1, 3, 5]) == 2\n      countEvens([1, 3, 6, 5, 2, 3]) == 3\n      countEvens([1, 3, 6, 5, 2, 3]) == -1\n  */\nconst countEvens = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the number of integers that are odd.\n  Examples:\n      countOdds([1, 3, 5]) == 2\n      countOdds([1, 3, 6, 5, 2, 3]) == 3\n      countOdds([1, 3, 6, 5, 2, 3]) == -1\n  */\nconst countOdds = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the sum of the integers in the list.\n  Examples:\n      sumOfList([1, 2, 3]) == 6\n      sumOfList([-1, -2, -3]) == -3\n      sumOfList([-1, -2, -3, -4, -5]) == -5\n  */\nconst sumOfList = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the product of the integers in the list.\n  Examples:\n      productOfList([1, 2, 3]) == 6\n      productOfList([-1, -2, -3]) == -3\n      productOfList([-1, -2, -3, -4, -5]) == -5\n  */\nconst productOfList = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the largest integer in the list.\n  Examples:\n      largestOfList([1, 2, 3]) == 3\n      largestOfList([-1, -2, -3]) == -3\n      largestOfList([-1, -2, -3, -4, -5]) == -5\n  */\nconst largestOfList = (lst) => {\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers. Write a function that returns the smallest integer in the list.\n  Examples:\n      smallestOfList([1, 2, 3]) == 1\n      smallestOfList([-1, -2, -3]) == -1\n      smallestOfList([-1, -2, -3, -4, -5]) == -5\n  */\nconst smallestOfList = (lst) => {\n  let min = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if the list contains no duplicates.\n  Examples:\n      noDuplicates([1, 2, 3, 3]) == true\n      noDuplicates([1, 2, 3, 3, 3]) == false\n      noDuplicates([1, 2, 3, 3]) == false\n  */\nconst noDuplicates = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n    }\n  }\n  return unique.length === lst.length;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if the list contains no duplicates.\n  Examples:\n      noDuplicates([1, 2, 3, 3]) == true\n      noDuplicates([1, 2, 3, 3, 3]) == false\n      noDuplicates([1, 2, 3, 3]) == false\n  */\nconst noDuplicates = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n    }\n  }\n  return unique.length === lst.length;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if the list contains no duplicates.\n  Examples:\n      noDuplicates([1, 2, 3, 3]) == true\n      noDuplicates([1, 2, 3, 3, 3]) == false\n      noDuplicates([1, 2, 3, 3]) == false\n  */\nconst noDuplicates = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n    }\n  }\n  return unique.length === lst.length;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if the list contains no duplicates.\n  Examples:\n      noDuplicates([1, 2, 3, 3]) == true\n      noDuplicates([1, 2, 3, 3, 3]) == false\n      noDuplicates([1, 2, 3, 3]) == false\n  */\nconst noDuplicates = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n    }\n  }\n  return unique.length === lst.length;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if the list contains no duplicates.\n  Examples:\n      noDuplicates([1, 2, 3, 3]) == true\n      noDuplicates([1, 2, 3, 3, 3]) == false\n      noDuplicates([1, 2, 3, 3]) == false\n  */\nconst noDuplicates = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n    }\n  }\n  return unique.length === lst.length;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if the list contains no duplicates.\n  Examples:\n      noDuplicates([1, 2, 3, 3]) == true\n      noDuplicates([1, 2, 3, 3, 3]) == false\n      noDuplicates([1, 2, 3, 3]) == false\n  */\nconst noDuplicates = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filTerBYSubsTriNgNo = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNo([], 'a')\n  []\n  >>> filTerBYSubsTriNgNo", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst2 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst3 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst4 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst5 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst6 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst7 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst8 = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let res = [];\n  while (min < max) {\n    res.push(min);\n    min = min + 1;\n  }\n  res.push(max);\n  return res;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea2 = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea3 = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea4 = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea5 = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea6 = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea7 = (a, b, c) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea8 = (a, b, c, d) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  if (d > a && d > b) return Math.round(d * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea9 = (a, b, c, d, e) => {\n  if (a > b && a > c) return Math.round(a * 100) / 100\n  if (b > a && b > c) return Math.round(b * 100) / 100\n  if (c > a && c > b) return Math.round(c * 100) / 100\n  if (d > a && d > b) return Math.round(d * 100) / 100\n  if (e > a && e > b) return Math.round(e * 100) / 100\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[mid+1]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x));\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello') ➞ 'olleh'\n  reverseStr('hello", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 1\n  let c = 0\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 2\n  let o = 2\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let A = 1\n  let B = 1\n  let C = 1\n  let D = 1\n  let E = 1\n  let F = 1\n  let G = 1\n  let H = 1\n  let I = 1\n  let J = 1\n  let K = 1\n  let L = 1\n  let M = 1\n  let N = 1\n  let O = 1\n  let P = 1\n  let Q = 1\n  let R = 1\n  let S = 1\n  let T = 1\n  let U = 1\n  let V = 1\n  let W = 1\n  let X = 1\n  let Y = 1\n  let Z = 1\n  let a = 1\n  let b = 1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSImplEPoweR(x / 2, n - 1);\n  if (n % 2 === 1) return isSImplEPoweR(x / 2, n - 2);\n  return false;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 64) return false; // not cube\n  if (a % 3 === 0) return false; // not cube\n  if (a % 5 === 0) return false; // not cube\n  if (a % 7 === 0) return false; // not cube\n  if (a % 9 === 0) return false; // not cube\n  if (a % 11 === 0) return false; // not cube\n  if (a % 13 === 0) return false; // not cube\n  if (a % 15 === 0) return false; // not cube\n  if (a % 17 === 0) return false; // not cube\n  if (a % 19 === 0) return false; // not cube\n  if (a % 21 === 0) return false; // not cube\n  if (a % 23 === 0) return false; // not cube\n  if (a % 25 === 0) return false; // not cube\n  if (a % 27 === 0) return false; // not cube\n  if (a % 29 === 0) return false; // not cube\n  if (a % 31 === 0) return false; // not cube\n  if (a % 33 === 0) return false; // not cube\n  if (a % 35 === 0) return false; // not cube\n  if (a % 37 === 0) return false; // not cube\n  if (a % 39 === 0) return false; // not cube\n  if (a % 41 === 0) return false; // not cube\n  if (a % 43 === 0) return false; // not cube\n  if (a % 45 === 0) return false; // not cube\n  if (a % 47 === 0) return false; // not cube\n  if (a % 49 === 0) return false; // not cube\n  if (a % 51 === 0) return false; // not cube\n  if (a % 53 === 0) return false; // not cube\n  if (a % 55 === 0) return false; // not cube\n  if (a % 57 === 0) return false; // not cube\n  if (a % 59 === 0) return false; // not cube\n  if (a % 61 === 0) return false; // not cube\n  if (a % 63 === 0) return false; // not cube\n  if (a % 65 === 0) return false; // not cube\n  if (a % 67 === 0) return false; // not cube\n  if (a % 69 === 0) return false; // not cube\n  if (a % 71 === 0) return false; // not cube\n  if (a % 73 === 0) return false; // not cube\n  if (a % 75 === 0) return false; // not cube\n  if (a % 77 === 0) return false; // not cube\n  if (a % 79 === 0) return false; // not cube\n  if (a % 81 === 0) return false; // not cube\n  if (a % 83 === 0) return false; // not cube\n  if (a % 85 === 0) return false; // not cube\n  if (a % 87 === 0) return false; // not cube\n  if (a % 89 === 0) return false; // not cube\n  if (a % 91 === 0) return false; // not cube\n  if (a % 93 === 0) return false; // not cube\n  if (a % 95 === 0) return false; // not cube\n  if (a % 97 === 0) return false; // not cube\n  if (a % 99 === 0) return false; // not cube\n  if (a % 101 === 0) return false; // not cube\n  if (a % 103 === 0) return false; // not cube\n  if (a % 105 === 0) return false; // not cube\n  if (a % 107 === 0) return false; // not cube\n  if (a % 109 === 0) return false; // not cube\n  if (a % 111 === 0) return false; // not cube\n  if (a % 113 === 0) return false; // not cube\n  if (a % 115 === 0) return false; // not cube\n  if (a % 117 === 0) return false; // not cube\n  if (a % 119 === 0) return false; // not cube\n  if (a % 121 === 0) return false; // not cube\n  if (a % 123 === 0) return false; // not cube\n  if (a % 125 === 0) return false; // not cube\n  if (a % 127 === 0) return false; // not cube\n  if (a % 129 === 0) return false; // not cube\n  if (a % 131 === 0) return false; // not cube\n  if (a % 133 === 0) return false; // not cube\n  if (a % 135 === 0) return false; // not cube\n  if (a % 137 === 0) return false; // not cube\n  if (a % 139 === 0) return false; // not cube\n  if (a % 141 === 0) return false; // not cube\n  if (a % 143 === 0) return false; // not cube\n  if (a % 145 === 0) return false; // not cube\n  if (a % 147 === 0) return false; // not cube\n  if (a % 149 === 0) return false; // not cube\n  if (a % 151 === 0) return false; // not cube\n  if (a % 153 === 0) return false; // not cube\n  if (a % 155 === 0) return false; // not cube\n  if (a % 157 === 0) return false; // not cube\n  if (a % 159 === 0) return false; // not cube\n  if (a % 161 === 0) return false; // not cube\n  if (a % 163 === 0) return false; // not cube\n  if (a % 165 === 0) return false; // not cube\n  if (a % 167 === 0) return false; // not cube\n  if (a % 169 === 0) return false; // not cube\n  if (a % 171 === 0) return false; // not cube\n  if (a % 173 === 0) return false; // not cube\n  if (a % 175 === 0) return false; // not cube\n  if (a % 177 === 0) return false; // not cube\n  if (a % 179 === 0) return false; // not cube\n  if (a % 181 === 0) return false; // not cube\n  if (a % 183 === 0) return false; // not cube\n  if (a % 185 === 0) return false; // not cube\n  if (a % 187 === 0) return false; // not cube\n  if (a % 189 === 0) return false; // not cube\n  if (a % 191 === 0) return false; // not cube\n  if (a % 193 === 0) return false; // not cube\n  if (a % 195 === 0) return false; // not cube\n  if (a % 197 === 0) return false; // not cube\n  if (a % 199 === 0) return false; // not cube\n  if (a % 201 === 0) return false; // not cube\n  if (a % 203 === 0) return false; // not cube\n  if (a % 205 === 0) return false; // not cube\n  if (a % 207 === 0) return false; // not cube\n  if (a % 209 === 0) return false; // not cube\n  if (a % 211 === 0) return false; // not cube\n  if (a % 213 === 0) return false; // not cube\n  if (a % 215 === 0) return false; // not cube\n  if (a % 217 === 0) return false; // not cube\n  if (a % 219 === 0) return false; // not cube\n  if (a % 221 === 0) return false; // not cube\n  if (a % 223 === 0) return false; // not ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let hexnum = 0;\n  for (let i = 0; i < num.length; i++) {\n    let num = num.charCodeAt(i);\n    if (num >= 48 && num <= 57) {\n      hexnum += num - 48;\n    } else if (num >= 65 && num <= 70) {\n      hexnum += num - 65 + 10;\n    } else if (num >= 97 && num <= 102) {\n      hexnum += num - 97 + 10;\n    } else {\n      hexnum += num;\n    }\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let hexnum = 0;\n  for (let i = 0; i < num.length; i++) {\n    let num = num.charCodeAt(i);\n    if (num >= 48 && num <= 57) {\n      hexnum += num - 48;\n    } else if (num >= 65 && num <= 70) {\n      hexnum += num - 65 + 10;\n    } else if (num >= 97 && num <= 102) {\n      hexnum += num - 97 + 10;\n    } else {\n      hexnum += num;\n    }\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let hexnum = 0;\n  for (let i = 0; i < num.length; i++) {\n    let num = num.charCodeAt(i);\n    if (num >= 48 && num <= 57) {\n      hexnum += num - 48;\n    } else if (num >= 65 && num <= 70) {\n      hexnum += num - 65 + 10;\n    } else if (num >= 97 && num <= 102) {\n      hexnum += num - 97 + 10;\n    } else {\n      hexnum += num;\n    }\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let hexnum = 0;\n  for (let i = 0; i < num.length; i++) {\n    let num = num.charCodeAt(i);\n    if (num >= 48 && num <= 57) {\n      hexnum += num - 48;\n    } else if (num >= 65 && num <= 70) {\n      hexnum += num - 65 + 10;\n    } else if (num >= 97 && num <= 102) {\n      hexnum += num - 97 + 10;\n    } else {\n      hexnum += num;\n    }\n  }\n  return hexnum;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let decimalString = '';\n  let decimalStringLength = 0;\n  let decimalStringLength2 = 0;\n  let decimalStringLength3 = 0;\n  let decimalStringLength4 = 0;\n  let decimalStringLength5 = 0;\n  let decimalStringLength6 = 0;\n  let decimalStringLength7 = 0;\n  let decimalStringLength8 = 0;\n  let decimalStringLength9 = 0;\n  let decimalStringLength10 = 0;\n  let decimalStringLength11 = 0;\n  let decimalStringLength12 = 0;\n  let decimalStringLength13 = 0;\n  let decimalStringLength14 = 0;\n  let decimalStringLength15 = 0;\n  let decimalStringLength16 = 0;\n  let decimalStringLength17 = 0;\n  let decimalStringLength18 = 0;\n  let decimalStringLength19 = 0;\n  let decimalStringLength20 = 0;\n  let decimalStringLength21 = 0;\n  let decimalStringLength22 = 0;\n  let decimalStringLength23 = 0;\n  let decimalStringLength24 = 0;\n  let decimalStringLength25 = 0;\n  let decimalStringLength26 = 0;\n  let decimalStringLength27 = 0;\n  let decimalStringLength28 = 0;\n  let decimalStringLength29 = 0;\n  let decimalStringLength30 = 0;\n  let decimalStringLength31 = 0;\n  let decimalStringLength32 = 0;\n  let decimalStringLength33 = 0;\n  let decimalStringLength34 = 0;\n  let decimalStringLength35 = 0;\n  let decimalStringLength36 = 0;\n  let decimalStringLength37 = 0;\n  let decimalStringLength38 = 0;\n  let decimalStringLength39 = 0;\n  let decimalStringLength40 = 0;\n  let decimalStringLength41 = 0;\n  let decimalStringLength42 = 0;\n  let decimalStringLength43 = 0;\n  let decimalStringLength44 = 0;\n  let decimalStringLength45 = 0;\n  let decimalStringLength46 = 0;\n  let decimalStringLength47 = 0;\n  let decimalStringLength48 = 0;\n  let decimalStringLength49 = 0;\n  let decimalStringLength50 = 0;\n  let decimalStringLength51 = 0;\n  let decimalStringLength52 = 0;\n  let decimalStringLength53 = 0;\n  let decimalStringLength54 = 0;\n  let decimalStringLength55 = 0;\n  let decimalStringLength56 = 0;\n  let decimalStringLength57 = 0;\n  let decimalStringLength58 = 0;\n  let decimalStringLength59 = 0;\n  let decimalStringLength60 = 0;\n  let decimalStringLength61 = 0;\n  let decimalStringLength62 = 0;\n  let decimalStringLength63 = 0;\n  let decimalStringLength64 = 0;\n  let decimalStringLength65 = 0;\n  let decimalStringLength66 = 0;\n  let decimalStringLength67 = 0;\n  let decimalStringLength68 = 0;\n  let decimalStringLength69 = 0;\n  let decimalStringLength70 = 0;\n  let decimalStringLength71 = 0;\n  let decimalStringLength72 = 0;\n  let decimalStringLength73 = 0;\n  let decimalStringLength74 = 0;\n  let decimalStringLength75 = 0;\n  let decimalStringLength76 = 0;\n  let decimalStringLength77 = 0;\n  let decimalStringLength78 = 0;\n  let decimalStringLength79 = 0;\n  let decimalStringLength80 = 0;\n  let decimalStringLength81 = 0;\n  let decimalStringLength82 = 0;\n  let decimalStringLength83 = 0;\n  let decimalStringLength84 = 0;\n  let decimalStringLength85 = 0;\n  let decimalStringLength86 = 0;\n  let decimalStringLength87 = 0;\n  let decimalStringLength88 = 0;\n  let decimalStringLength89 = 0;\n  let decimalStringLength90 = 0;\n  let decimalStringLength91 = 0;\n  let decimalStringLength92 = 0;\n  let decimalStringLength93 = 0;\n  let decimalStringLength94 = 0;\n  let decimalStringLength95 = 0;\n  let decimalStringLength96 = 0;\n  let decimalStringLength97 = 0;\n  let decimalStringLength98 = 0;\n  let decimalStringLength99 = 0;\n  let decimalStringLength100 = 0;\n  let decimalStringLength101 = 0;\n  let decimalStringLength102 = 0;\n  let decimalStringLength103 = 0;\n  let decimalStringLength104 = 0;\n  let decimalStringLength105 = 0;\n  let decimalStringLength106 = 0;\n  let decimalStringLength107 = 0;\n  let decimalStringLength108 = 0;\n  let decimalStringLength109 = 0;\n  let decimalStringLength110 = 0;\n  let decimalStringLength111 = 0;\n  let decimalStringLength112 = 0;\n  let decimalStringLength113 = 0;\n  let decimalStringLength114 = 0;\n  let decimalStringLength115 = 0;\n  let decimalStringLength116 = 0;\n  let decimalStringLength117 = 0;\n  let decimalStringLength118 = 0;\n  let decimalStringLength119 = 0;\n  let decimalStringLength120 = 0;\n  let decimalStringLength121 = 0;\n  let decimalStringLength122 = 0;\n  let decimalStringLength123 = 0;\n  let decimalStringLength124 = 0;\n  let decimalStringLength125 = 0;\n  let decimalStringLength126 = 0;\n  let decimalStringLength127 = 0;\n  let decimalStringLength128 = 0;\n  let decimalStringLength129 = 0;\n  let decimalStringLength130 = 0;\n  let decimalStringLength131 = 0;\n  let decimalStringLength132 = 0;\n  let decimalStringLength133 = 0;\n  let decimalStringLength134 = 0;\n  let decimalStringLength135 = 0;\n  let decimalStringLength136 = 0;\n  let decimalStringLength137 = 0;\n  let decimalStringLength138 = 0;\n  let decimalStringLength139 = 0;\n  let decimalStringLength140 = 0;\n  let decimalStringLength141 = 0;\n  let decimalStringLength142 = 0;\n  let decimalStringLength143 = 0;\n  let decimalStringLength144 = 0;\n  let decimalStringLength145 = 0;\n  let decimalStringLength146 = 0;\n  let decimalStringLength147 = 0;\n  let decimalStringLength148 = 0;\n  let decimalStringLength149 = 0;\n  let decimalStringLength150 = 0;\n  let decimalStringLength151 = 0;\n  let decimalStringLength152 = 0;\n  let decimalStringLength153 = 0;\n  let decimalStringLength154 = 0;\n  let decimalStringLength155 = 0;\n  let decimalStringLength156 = 0;\n  let decimalStringLength157 = 0;\n  let decimalStringLength158 = 0;\n  let decimalStringLength159 = 0;\n  let decimalStringLength160 = 0;\n  let decimalStringLength161 = 0;\n  let decimalStringLength162 = 0;\n  let decimalStringLength163 = 0;\n  let decimalStringLength164 = 0;\n  let decimalStringLength165 = 0;\n  let decimalStringLength166 = 0;\n  let decimalStringLength167 = 0;\n  let decimalStringLength168 = 0;\n  let decimalStringLength169 = 0;\n  let decimalStringLength170 = 0;\n  let decimalStringLength171 = 0;\n  let decimalStringLength172 = 0;\n  let decimalStringLength173 = 0;\n  let decimalStringLength174 = 0;\n  let decimalStringLength175 = 0;\n  let decimalStringLength176 = 0;\n  let decimalStringLength177 = 0;\n  let decimalStringLength178 = 0;\n  let decimalStringLength179 = 0;\n  let decimalStringLength180 = 0;\n  let decimalStringLength181 = 0;\n  let decimalStringLength182 = 0;\n  let decimalStringLength183 = 0;\n  let decimalStringLength184 = 0;\n  let decimalStringLength185 = 0;\n  let decimalStringLength186 = 0;\n  let decimalStringLength187 = 0;\n  let decimalStringLength188 = 0;\n  let decimalStringLength189 = 0;\n  let decimalStringLength190 = 0;\n  let decimalStringLength191 = 0;\n  let decimalStringLength192 = 0;\n  let decimalStringLength193 = 0;\n  let decimalStringLength194 = 0;\n  let decimalStringLength195 = 0;\n  let decimalStringLength196 = 0;\n  let decimalStringLength197 = 0;\n  let decimalStringLength198 = 0;\n  let decimalStringLength199 = 0;\n  let decimalStringLength200 = 0;\n  let decimalStringLength201 = 0;\n  let decimalString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  if (numbers.length === 1) {\n    return [1, numbers[0]]\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number]\n  }, [])\n  return [sum, product]\n}\n\n/* Given a list and a number n, return a new list consisting of the first n elements of the original list.\n  >>> firstN([1, 2, 3, 4], 2)\n  [2, 3]\n  >>> firstN([1, 2, 3, 4], 3)\n  [1, 2, 3]\n  >>> firstN([1, 2, 3, 4], 4)\n  [1, 2]\n  >>> firstN([1, 2, 3, 4], 5)\n  []\n  >>> firstN([1, 2, 3, 4], 0)\n  []\n  */\nconst firstN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return firstN(list, n - 1)\n  }\n  return [list[n]]\n}\n\n/* Given a list and a number n, return a new list consisting of the last n elements of the original list.\n  >>> lastN([1, 2, 3, 4], 2)\n  [3, 4]\n  >>> lastN([1, 2, 3, 4], 3)\n  [3, 4]\n  >>> lastN([1, 2, 3, 4], 4)\n  [3, 4]\n  >>> lastN([1, 2, 3, 4], 5)\n  []\n  >>> lastN([1, 2, 3, 4], 0)\n  []\n  */\nconst lastN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return lastN(list, n - 1)\n  }\n  return [list[list.length - n]]\n}\n\n/* Given a list and a number n, return a new list consisting of the first n elements of the original list reversed.\n  >>> reverseFirstN([1, 2, 3, 4], 2)\n  [4, 3]\n  >>> reverseFirstN([1, 2, 3, 4], 3)\n  [4, 3]\n  >>> reverseFirstN([1, 2, 3, 4], 4)\n  [4, 3]\n  >>> reverseFirstN([1, 2, 3, 4], 5)\n  []\n  >>> reverseFirstN([1, 2, 3, 4], 0)\n  []\n  */\nconst reverseFirstN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return reverseFirstN(list, n - 1)\n  }\n  return [list[list.length - n]].reverse()\n}\n\n/* Given a list and a number n, return a new list consisting of the last n elements of the original list reversed.\n  >>> reverseLastN([1, 2, 3, 4], 2)\n  [4, 2]\n  >>> reverseLastN([1, 2, 3, 4], 3)\n  [4, 2]\n  >>> reverseLastN([1, 2, 3, 4], 4)\n  [4, 2]\n  >>> reverseLastN([1, 2, 3, 4], 5)\n  []\n  >>> reverseLastN([1, 2, 3, 4], 0)\n  []\n  */\nconst reverseLastN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return reverseLastN(list, n - 1)\n  }\n  return [list[list.length - n].reverse()]\n}\n\n/* Given a list and a number n, return a new list consisting of the first n elements of the original list sorted.\n  >>> sortFirstN([1, 2, 3, 4], 2)\n  [1, 2, 3]\n  >>> sortFirstN([1, 2, 3, 4], 3)\n  [1, 2, 3]\n  >>> sortFirstN([1, 2, 3, 4], 4)\n  [1, 2, 3]\n  >>> sortFirstN([1, 2, 3, 4], 5)\n  []\n  >>> sortFirstN([1, 2, 3, 4], 0)\n  []\n  */\nconst sortFirstN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return sortFirstN(list, n - 1)\n  }\n  return [list[list.length - n].sort()]\n}\n\n/* Given a list and a number n, return a new list consisting of the last n elements of the original list sorted.\n  >>> sortLastN([1, 2, 3, 4], 2)\n  [4, 3]\n  >>> sortLastN([1, 2, 3, 4], 3)\n  [4, 3]\n  >>> sortLastN([1, 2, 3, 4], 4)\n  [4, 3]\n  >>> sortLastN([1, 2, 3, 4], 5)\n  []\n  >>> sortLastN([1, 2, 3, 4], 0)\n  []\n  */\nconst sortLastN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return sortLastN(list, n - 1)\n  }\n  return [list[list.length - n].sort(true)]\n}\n\n/* Given a list and a number n, return a new list consisting of the first n elements of the original list sorted in reverse order.\n  >>> sortReverseFirstN([1, 2, 3, 4], 2)\n  [4, 3]\n  >>> sortReverseFirstN([1, 2, 3, 4], 3)\n  [4, 3]\n  >>> sortReverseFirstN([1, 2, 3, 4], 4)\n  [4, 3]\n  >>> sortReverseFirstN([1, 2, 3, 4], 5)\n  []\n  >>> sortReverseFirstN([1, 2, 3, 4], 0)\n  []\n  */\nconst sortReverseFirstN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return sortReverseFirstN(list, n - 1)\n  }\n  return [list[list.length - n].sort(true).reverse()]\n}\n\n/* Given a list and a number n, return a new list consisting of the last n elements of the original list sorted in reverse order.\n  >>> sortReverseLastN([1, 2, 3, 4], 2)\n  [4, 2]\n  >>> sortReverseLastN([1, 2, 3, 4], 3)\n  [4, 2]\n  >>> sortReverseLastN([1, 2, 3, 4], 4)\n  [4, 2]\n  >>> sortReverseLastN([1, 2, 3, 4], 5)\n  []\n  >>> sortReverseLastN([1, 2, 3, 4], 0)\n  []\n  */\nconst sortReverseLastN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return sortReverseLastN(list, n - 1)\n  }\n  return [list[list.length - n].sort(true).reverse()]\n}\n\n/* Given a list and a number n, return a new list consisting of the first n elements of the original list sorted in ascending order.\n  >>> sortFirstN([1, 2, 3, 4], 2)\n  [1, 2, 3]\n  >>> sortFirstN([1, 2, 3, 4], 3)\n  [1, 2, 3]\n  >>> sortFirstN([1, 2, 3, 4], 4)\n  [1, 2, 3]\n  >>> sortFirstN([1, 2, 3, 4], 5)\n  []\n  >>> sortFirstN([1, 2, 3, 4], 0)\n  []\n  */\nconst sortFirstN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return sortFirstN(list, n - 1)\n  }\n  return [list[list.length - n].sort()]\n}\n\n/* Given a list and a number n, return a new list consisting of the last n elements of the original list sorted in ascending order.\n  >>> sortLastN([1, 2, 3, 4], 2)\n  [4, 3]\n  >>> sortLastN([1, 2, 3, 4], 3)\n  [4, 3]\n  >>> sortLastN([1, 2, 3, 4], 4)\n  [4, 3]\n  >>> sortLastN([1, 2, 3, 4], 5)\n  []\n  >>> sortLastN([1, 2, 3, 4], 0)\n  []\n  */\nconst sortLastN = (list, n) => {\n  if (n === 0) {\n    return []\n  }\n  if (n >= list.length) {\n    return sortLastN(list, n - 1)\n  }\n  return [list[list.length - n].sort(true)]\n}\n\n/* Given a list and a number n, return a new list consisting of the first n elements of the original list sorted in reverse order.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z and A-Z.\n  For example:\n  isOnlyLetters(a) => false\n  isOnlyLetters(aa) => false\n  isOnlyLetters(abc) => true\n  isOnlyLetters(abA) => false\n  isOnlyLetters(abca) => false\n  isOnlyLetters(abcaa) => false\n  isOnlyLetters(abcaaa) => true\n  isOnlyLetters(abcaaaa) => false\n  isOnlyLetters(abcaaaaa) => false\n  isOnlyLetters(abcaaaaaa) => true\n  isOnlyLetters(abcaaaaaaa) => false\n  isOnlyLetters(abcaaaaaaaa) => false\n  isOnlyLetters(abcaaaaaaaab) => false\n  isOnlyLetters(abcaaaaaaaabb) => false\n  isOnlyLetters(abcaaaaaaaabbb) => false\n  isOnlyLetters(abcaaaaaaaabbbc) => false\n  isOnlyLetters(abcaaaaaaaabbbbc) => false\n  isOnlyLetters(abcaaaaaaaabbbbcc) => false\n  isOnlyLetters(abcaaaaaaaabbbbccc) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccde) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeef) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeff) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffg) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgf) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfg) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgf) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfg) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgf) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfg) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfgh) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghi) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiig) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigj) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjl) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlk) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmn) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnj) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjop) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqr) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs9) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs987) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs98765) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs9876543) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs98765432) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs987654321) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs9876543211) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs98765432111) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs987654321111) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs9876543211111) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs98765432111111) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs987654321111111) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs9876543211111112) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs98765432111111122) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs987654321111111222) => false\n  isOnlyLetters(abcaaaaaaaabbbbcccdeeffgfgfgfgfghiigjlkmnjopqrs9876543211111112222) => false\n  isOnlyLetters(abcaaaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const gradesArr = grades.map(grade => grade * 0.7)\n  const gradesSum = gradesArr.reduce((acc, val) => acc + val)\n  const gradesAvg = gradesSum / gradesArr.length\n  const gradesArr2 = grades.map(grade => grade * 0.3)\n  const gradesSum2 = gradesArr2.reduce((acc, val) => acc + val)\n  const gradesAvg2 = gradesSum2 / gradesArr2.length\n  const gradesArr3 = grades.map(grade => grade * 0.2)\n  const gradesSum3 = gradesArr3.reduce((acc, val) => acc + val)\n  const gradesAvg3 = gradesSum3 / gradesArr3.length\n  const gradesArr4 = grades.map(grade => grade * 0.1)\n  const gradesSum4 = gradesArr4.reduce((acc, val) => acc + val)\n  const gradesAvg4 = gradesSum4 / gradesArr4.length\n  const gradesArr5 = grades.map(grade => grade * 0.05)\n  const gradesSum5 = gradesArr5.reduce((acc, val) => acc + val)\n  const gradesAvg5 = gradesSum5 / gradesArr5.length\n  const gradesArr6 = grades.map(grade => grade * 0.02)\n  const gradesSum6 = gradesArr6.reduce((acc, val) => acc + val)\n  const gradesAvg6 = gradesSum6 / gradesArr6.length\n  const gradesArr7 = grades.map(grade => grade * 0.01)\n  const gradesSum7 = gradesArr7.reduce((acc, val) => acc + val)\n  const gradesAvg7 = gradesSum7 / gradesArr7.length\n  const gradesArr8 = grades.map(grade => grade * 0.005)\n  const gradesSum8 = gradesArr8.reduce((acc, val) => acc + val)\n  const gradesAvg8 = gradesSum8 / gradesArr8.length\n  const gradesArr9 = grades.map(grade => grade * 0.001)\n  const gradesSum9 = gradesArr9.reduce((acc, val) => acc + val)\n  const gradesAvg9 = gradesSum9 / gradesArr9.length\n  const gradesArr10 = grades.map(grade => grade * 0.0005)\n  const gradesSum10 = gradesArr10.reduce((acc, val) => acc + val)\n  const gradesAvg10 = gradesSum10 / gradesArr10.length\n  const gradesArr11 = grades.map(grade => grade * 0.0001)\n  const gradesSum11 = gradesArr11.reduce((acc, val) => acc + val)\n  const gradesAvg11 = gradesSum11 / gradesArr11.length\n  const gradesArr12 = grades.map(grade => grade * 0.00005)\n  const gradesSum12 = gradesArr12.reduce((acc, val) => acc + val)\n  const gradesAvg12 = gradesSum12 / gradesArr12.length\n  const gradesArr13 = grades.map(grade => grade * 0.00001)\n  const gradesSum13 = gradesArr13.reduce((acc, val) => acc + val)\n  const gradesAvg13 = gradesSum13 / gradesArr13.length\n  const gradesArr14 = grades.map(grade => grade * 0.000005)\n  const gradesSum14 = gradesArr14.reduce((acc, val) => acc + val)\n  const gradesAvg14 = gradesSum14 / gradesArr14.length\n  const gradesArr15 = grades.map(grade => grade * 0.000001)\n  const gradesSum15 = gradesArr15.reduce((acc, val) => acc + val)\n  const gradesAvg15 = gradesSum15 / gradesArr15.length\n  const gradesArr16 = grades.map(grade => grade * 0.0000005)\n  const gradesSum16 = gradesArr16.reduce((acc, val) => acc + val)\n  const gradesAvg16 = gradesSum16 / gradesArr16.length\n  const gradesArr17 = grades.map(grade => grade * 0.0000001)\n  const gradesSum17 = gradesArr17.reduce((acc, val) => acc + val)\n  const gradesAvg17 = gradesSum17 / gradesArr17.length\n  const gradesArr18 = grades.map(grade => grade * 0.00000005)\n  const gradesSum18 = gradesArr18.reduce((acc, val) => acc + val)\n  const gradesAvg18 = gradesSum18 / gradesArr18.length\n  const gradesArr19 = grades.map(grade => grade * 0.00000001)\n  const gradesSum19 = gradesArr19.reduce((acc, val) => acc + val)\n  const gradesAvg19 = gradesSum19 / gradesArr19.length\n  const gradesArr20 = grades.map(grade => grade * 0.000000005)\n  const gradesSum20 = gradesArr20.reduce((acc, val) => acc + val)\n  const gradesAvg20 = gradesSum20 / gradesArr20.length\n  const gradesArr21 = grades.map(grade => grade * 0.000000001)\n  const gradesSum21 = gradesArr21.reduce((acc, val) => acc + val)\n  const gradesAvg21 = gradesSum21 / gradesArr21.length\n  const gradesArr22 = grades.map(grade => grade * 0.0000000005)\n  const gradesSum22 = gradesArr22.reduce((acc, val) => acc + val)\n  const gradesAvg22 = gradesSum22 / gradesArr22.length\n  const gradesArr23 = grades.map(grade => grade * 0.0000000001)\n  const gradesSum23 = gradesArr23.reduce((acc, val) => acc + val)\n  const gradesAvg23 = gradesSum23 / gradesArr23.length\n  const gradesArr24 = grades.map(grade => grade * 0.00000000005)\n  const gradesSum24 = gradesArr24.reduce((acc, val) => acc + val)\n  const gradesAvg24 = gradesSum24 / gradesArr24.length\n  const gradesArr25 = grades.map(grade => grade * 0.00000000001)\n  const gradesSum25", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters or false otherwise\n  Examples\n  lettersOnly('Hello') == true\n  lettersOnly('abcdcba') == true\n  lettersOnly('kittens') == false\n  lettersOnly('orange') == false\n  */\nconst lettersOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only numbers or false otherwise\n  Examples\n  numbersOnly('Hello') == true\n  numbersOnly('abcdcba') == true\n  numbersOnly('kittens') == false\n  numbersOnly('orange') == false\n  */\nconst numbersOnly = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let upper = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      upper = false;\n      break;\n    }\n  }\n  return upper;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lower = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      lower = false;\n      break;\n    }\n  }\n  return lower;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbolsOnly('Hello') == true\n  symbolsOnly('abcdcba') == true\n  symbolsOnly('kittens') == false\n  symbolsOnly('orange') == false\n  */\nconst symbolsOnly = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spacesOnly('Hello') == true\n  spacesOnly('abcdcba') == true\n  spacesOnly('kittens') == false\n  spacesOnly('orange') == false\n  */\nconst spacesOnly = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only special characters or false otherwise\n  Examples\n  specialChars('Hello') == true\n  specialChars('abcdcba') == true\n  specialChars('kittens') == false\n  specialChars('orange') == false\n  */\nconst specialChars = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      special = false;\n      break;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits and false otherwise\n  Examples\n  digitsOnly('Hello') == true\n  digitsOnly('abcdcba') == true\n  digitsOnly('kittens') == false\n  digitsOnly('orange') == false\n  */\nconst digitsOnly = (string) => {\n  let digits = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      digits = false;\n      break;\n    }\n  }\n  return digits;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase and lowercase letters or false otherwise\n  Examples\n  allLetters('Hello') == true\n  allLetters('abcdcba') == true\n  allLetters('kittens') == false\n  allLetters('orange') == false\n  */\nconst allLetters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase and lowercase letters or false otherwise\n  Examples\n  allLetters('Hello') == true\n  allLetters('abcdcba') == true\n  allLetters('kittens') == false\n  allLetters('orange') == false\n  */\nconst allLetters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase and lowercase letters or false otherwise\n  Examples\n  allLetters('Hello') == true\n  allLetters('abcdcba') == true\n  allLetters('kittens') == false\n  allLetters('orange') == false\n  */\nconst allLetters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase and lowercase letters or false otherwise\n  Examples\n  allLetters('Hello') == true\n  allLetters('abcdcba') == true\n  allLetters('kittens') == false\n  allLetters('orange') == false\n  */\nconst allLetters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1) && string.charAt(i)!== string.charAt(i + 2)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase and lowercase letters or false otherwise\n  Examples\n  allLetters('Hello') == true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  let last = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n    if (i % 10 === 0 && i!== 1) {\n      count--;\n    }\n    if (i % 10 === 0 && i === 1) {\n      count++;\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe2 = (solVe) => {\n  let sum = 0;\n  let binary = \"\";\n  while (solVe > 0) {\n    sum += solVe % 2;\n    solVe = Math.floor(solVe / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe3 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe4 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe5 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe6 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe7 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe8 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe9 = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEvenEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addOddEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEvenEvenEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addOddEvenEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addEvenEvenEvenEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addOddEvenEvenEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.localeCompare(b));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst antIShuFfleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => b.localeCompare(a));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.localeCompare(b));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst antIShuFfleDescAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => b.localeCompare(a));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.localeCompare(b));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst antIShuFfleDescAscDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => b.localeCompare(a));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.localeCompare(b));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'olleh'\n  antIShuFfle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst antIShuFfleDescDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => b.localeCompare(a));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfleAscDescAsc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.localeCompare(b));\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const row = [];\n  const rowMap = new Map();\n  const rowIndexMap = new Map();\n  const rowIndexMap2 = new Map();\n  const rowIndexMap3 = new Map();\n  const rowIndexMap4 = new Map();\n  const rowIndexMap5 = new Map();\n  const rowIndexMap6 = new Map();\n  const rowIndexMap7 = new Map();\n  const rowIndexMap8 = new Map();\n  const rowIndexMap9 = new Map();\n  const rowIndexMap10 = new Map();\n  const rowIndexMap11 = new Map();\n  const rowIndexMap12 = new Map();\n  const rowIndexMap13 = new Map();\n  const rowIndexMap14 = new Map();\n  const rowIndexMap15 = new Map();\n  const rowIndexMap16 = new Map();\n  const rowIndexMap17 = new Map();\n  const rowIndexMap18 = new Map();\n  const rowIndexMap19 = new Map();\n  const rowIndexMap20 = new Map();\n  const rowIndexMap21 = new Map();\n  const rowIndexMap22 = new Map();\n  const rowIndexMap23 = new Map();\n  const rowIndexMap24 = new Map();\n  const rowIndexMap25 = new Map();\n  const rowIndexMap26 = new Map();\n  const rowIndexMap27 = new Map();\n  const rowIndexMap28 = new Map();\n  const rowIndexMap29 = new Map();\n  const rowIndexMap30 = new Map();\n  const rowIndexMap31 = new Map();\n  const rowIndexMap32 = new Map();\n  const rowIndexMap33 = new Map();\n  const rowIndexMap34 = new Map();\n  const rowIndexMap35 = new Map();\n  const rowIndexMap36 = new Map();\n  const rowIndexMap37 = new Map();\n  const rowIndexMap38 = new Map();\n  const rowIndexMap39 = new Map();\n  const rowIndexMap40 = new Map();\n  const rowIndexMap41 = new Map();\n  const rowIndexMap42 = new Map();\n  const rowIndexMap43 = new Map();\n  const rowIndexMap44 = new Map();\n  const rowIndexMap45 = new Map();\n  const rowIndexMap46 = new Map();\n  const rowIndexMap47 = new Map();\n  const rowIndexMap48 = new Map();\n  const rowIndexMap49 = new Map();\n  const rowIndexMap50 = new Map();\n  const rowIndexMap51 = new Map();\n  const rowIndexMap52 = new Map();\n  const rowIndexMap53 = new Map();\n  const rowIndexMap54 = new Map();\n  const rowIndexMap55 = new Map();\n  const rowIndexMap56 = new Map();\n  const rowIndexMap57 = new Map();\n  const rowIndexMap58 = new Map();\n  const rowIndexMap59 = new Map();\n  const rowIndexMap60 = new Map();\n  const rowIndexMap61 = new Map();\n  const rowIndexMap62 = new Map();\n  const rowIndexMap63 = new Map();\n  const rowIndexMap64 = new Map();\n  const rowIndexMap65 = new Map();\n  const rowIndexMap66 = new Map();\n  const rowIndexMap67 = new Map();\n  const rowIndexMap68 = new Map();\n  const rowIndexMap69 = new Map();\n  const rowIndexMap70 = new Map();\n  const rowIndexMap71 = new Map();\n  const rowIndexMap72 = new Map();\n  const rowIndexMap73 = new Map();\n  const rowIndexMap74 = new Map();\n  const rowIndexMap75 = new Map();\n  const rowIndexMap76 = new Map();\n  const rowIndexMap77 = new Map();\n  const rowIndexMap78 = new Map();\n  const rowIndexMap79 = new Map();\n  const rowIndexMap80 = new Map();\n  const rowIndexMap81 = new Map();\n  const rowIndexMap82 = new Map();\n  const rowIndexMap83 = new Map();\n  const rowIndexMap84 = new Map();\n  const rowIndexMap85 = new Map();\n  const rowIndexMap86 = new Map();\n  const rowIndexMap87 = new Map();\n  const rowIndexMap88 = new Map();\n  const rowIndexMap89 = new Map();\n  const rowIndexMap90 = new Map();\n  const rowIndexMap91 = new Map();\n  const rowIndexMap92 = new Map();\n  const rowIndexMap93 = new Map();\n  const rowIndexMap94 = new Map();\n  const rowIndexMap95 = new Map();\n  const rowIndexMap96 = new Map();\n  const rowIndexMap97 = new Map();\n  const rowIndexMap98 = new Map();\n  const rowIndexMap99 = new Map();\n  const rowIndexMap100 = new Map();\n  const rowIndexMap101 = new Map();\n  const rowIndexMap102 = new Map();\n  const rowIndexMap103 = new Map();\n  const rowIndexMap104 = new Map();\n  const rowIndexMap105 = new Map();\n  const rowIndexMap106 = new Map();\n  const rowIndexMap107 = new Map();\n  const rowIndexMap108 = new Map();\n  const rowIndexMap109 = new Map();\n  const rowIndexMap110 = new Map();\n  const rowIndexMap111 = new Map();\n  const rowIndexMap112 = new Map();\n  const rowIndexMap113 = new Map();\n  const rowIndexMap114 = new Map();\n  const rowIndexMap115 = new Map();\n  const rowIndexMap116 = new Map();\n  const rowIndexMap117 = new Map();\n  const rowIndexMap118 = new Map();\n  const rowIndexMap119 = new Map();\n  const rowIndexMap120 = new Map();\n  const rowIndexMap121 = new Map();\n  const rowIndexMap122 = new Map();\n  const rowIndexMap123 = new Map();\n  const rowIndexMap124 = new Map();\n  const rowIndexMap125 = new Map();\n  const rowIndexMap126 = new Map();\n  const rowIndexMap127 = new Map();\n  const rowIndexMap128 = new Map();\n  const rowIndexMap129 = new Map();\n  const rowIndexMap130 = new Map();\n  const rowIndexMap131 = new Map();\n  const rowIndexMap132 = new Map();\n  const rowIndexMap133 = new Map();\n  const rowIndexMap134 = new Map();\n  const rowIndexMap135 = new Map();\n  const rowIndexMap136 = new Map();\n  const rowIndexMap137 = new Map();\n  const rowIndexMap138 = new Map();\n  const rowIndexMap139 = new Map();\n  const rowIndexMap140 = new Map();\n  const rowIndexMap141 = new Map();\n  const rowIndexMap142 = new Map();\n  const rowIndexMap143 = new Map();\n  const rowIndexMap144 = new Map();\n  const rowIndexMap145 = new Map();\n  const rowIndexMap146 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const newArray = array.slice();\n  const sum = (first, last) => {\n    return first + last;\n  };\n  const isOdd = (sum) => {\n    return sum % 2 === 1;\n  };\n  const isEven = (sum) => {\n    return sum % 2 === 0;\n  };\n  const isEvenOrOdd = (sum) => {\n    return isEven(sum) || isOdd(sum);\n  };\n  const isEvenOrOddSum = (sum) => {\n    return isEvenOrOdd(sum);\n  };\n  const isEvenOrOddSumOrReverse = (sum) => {\n    return isEvenOrOddSum(sum) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (sum) => {\n    return isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse(sum * -1) || isEvenOrOdd(sum * -1);\n  };\n  const isEvenOrOddSumOrReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "<|endoftext|>/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 65;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt2 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt2('hi') returns 'lm'\n  encRypt2('asdfghjkl') returns 'ewhjklnop'\n  encRypt2('gf') returns 'kj'\n  encRypt2('et') returns 'ix'\n  */\nconst encRypt2 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 97;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt3 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt3('hi') returns 'lm'\n  encRypt3('asdfghjkl') returns 'ewhjklnop'\n  encRypt3('gf') returns 'kj'\n  encRypt3('et') returns 'ix'\n  */\nconst encRypt3 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 123;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt4 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt4('hi') returns 'lm'\n  encRypt4('asdfghjkl') returns 'ewhjklnop'\n  encRypt4('gf') returns 'kj'\n  encRypt4('et') returns 'ix'\n  */\nconst encRypt4 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 127;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt5 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt5('hi') returns 'lm'\n  encRypt5('asdfghjkl') returns 'ewhjklnop'\n  encRypt5('gf') returns 'kj'\n  encRypt5('et') returns 'ix'\n  */\nconst encRypt5 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 255;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt6 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt6('hi') returns 'lm'\n  encRypt6('asdfghjkl') returns 'ewhjklnop'\n  encRypt6('gf') returns 'kj'\n  encRypt6('et') returns 'ix'\n  */\nconst encRypt6 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 511;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt7 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt7('hi') returns 'lm'\n  encRypt7('asdfghjkl') returns 'ewhjklnop'\n  encRypt7('gf') returns 'kj'\n  encRypt7('et') returns 'ix'\n  */\nconst encRypt7 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 1023;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt8 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt8('hi') returns 'lm'\n  encRypt8('asdfghjkl') returns 'ewhjklnop'\n  encRypt8('gf') returns 'kj'\n  encRypt8('et') returns 'ix'\n  */\nconst encRypt8 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char.charCodeAt(0) - 2047;\n    newString += String.fromCharCode(newChar);\n  }\n  return newString;\n};\n\n/*Create a function encRypt9 that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt9('hi') returns 'lm'\n  encRypt9('asdfghjkl') returns 'ewhjklnop'\n  encRypt9('gf') returns 'kj'\n  encRypt9('et') returns 'ix'\n  */\nconst encRypt9 = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const newChar = char", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentMax = Math.max(numbers[i], currentMax);\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentMax);\n      currentMax = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolLingmin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolLingmin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentMin = Math.min(numbers[i], currentMin);\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentMin);\n      currentMin = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolLingavg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rolLingavg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentSum / numbers.length);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolLingmedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rolLingmedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentSum / numbers.length);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolLingmode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolLingmode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let currentMode = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentMode = Math.max(numbers[i], currentMode);\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentMode);\n      currentMode = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolLingstd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rolLingstd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(Math.sqrt(currentSum / numbers.length));\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolLingvar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rolLingvar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentSum / numbers.length);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolLingsum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 5]\n  */\nconst rolLingsum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentSum);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rolLingcount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolLingcount = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentIndex);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolLingsum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 5]\n  */\nconst rolLingsum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentSum);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rolLingcount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolLingcount = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentIndex);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolLingsum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 5]\n  */\nconst rolLingsum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentSum = numbers[i] + currentSum;\n    currentIndex++;\n    if (currentIndex === numbers.length - 1) {\n      result.push(currentSum);\n      currentSum = 0;\n      currentIndex = 0;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length < 2) {\n    return null\n  }\n  const [first,...rest] = lst\n  return rest.length > 0? rest[0] : first\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains at least one element that is even.\n  \n  even([2, 4, 6, 8]) ➞ true\n  even([2, 4, 6, 8, 10]) ➞ false\n  even([2, 4, 6, 8, 10, 12]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136]) ➞ false\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140]) ➞ true\n  even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  anyfloat(5, 2, 7) ➞ true\n  anyfloat(3, 2, 2) ➞ false\n  anyfloat(3, -2, 1) ➞ true\n  anyfloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyfloat = (x, y, z) => {\n  const a = parseFloat(x);\n  const b = parseFloat(y);\n  const c = parseFloat(z);\n  return a === b || a === c || b === c;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  anynegative(5, 2, 7) ➞ true\n  anynegative(3, 2, 2) ➞ false\n  anynegative(3, -2, 1) ➞ true\n  anynegative(3.6, -2.2, 2) ➞ false\n  */\nconst anynegative = (x, y, z) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a < 0 || b < 0 || c < 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  anypositive(5, 2, 7) ➞ true\n  anypositive(3, 2, 2) ➞ false\n  anypositive(3, -2, 1) ➞ true\n  anypositive(3.6, -2.2, 2) ➞ false\n  */\nconst anypositive = (x, y, z) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a > 0 || b > 0 || c > 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are even.\n  Returns false in any other cases.\n  Examples\n  anyeven(5, 2, 7) ➞ true\n  anyeven(3, 2, 2) ➞ false\n  anyeven(3, -2, 1) ➞ true\n  anyeven(3.6, -2.2, 2) ➞ false\n  */\nconst anyeven = (x, y, z) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are odd.\n  Returns false in any other cases.\n  Examples\n  anyodd(5, 2, 7) ➞ true\n  anyodd(3, 2, 2) ➞ false\n  anyodd(3, -2, 1) ➞ true\n  anyodd(3.6, -2.2, 2) ➞ false\n  */\nconst anyodd = (x, y, z) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a % 2!== 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between a range.\n  Returns false in any other cases.\n  Examples\n  anybetween(5, 2, 7, 2) ➞ true\n  anybetween(3, 2, 7, 2) ➞ false\n  anybetween(3, -2, 7, 2) ➞ true\n  anybetween(3.6, -2.2, 7, 2) ➞ false\n  */\nconst anybetween = (x, y, z, range) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a >= range && b >= range || a <= range && b <= range;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between a range.\n  Returns false in any other cases.\n  Examples\n  anybetween(5, 2, 7, 2) ➞ true\n  anybetween(3, 2, 7, 2) ➞ false\n  anybetween(3, -2, 7, 2) ➞ true\n  anybetween(3.6, -2.2, 7, 2) ➞ false\n  */\nconst anybetween = (x, y, z, range) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a <= range && b <= range || a >= range && b >= range;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between a range.\n  Returns false in any other cases.\n  Examples\n  anybetween(5, 2, 7, 2) ➞ true\n  anybetween(3, 2, 7, 2) ➞ false\n  anybetween(3, -2, 7, 2) ➞ true\n  anybetween(3.6, -2.2, 7, 2) ➞ false\n  */\nconst anybetween = (x, y, z, range) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a <= range && b <= range || a >= range && b >= range;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between a range.\n  Returns false in any other cases.\n  Examples\n  anybetween(5, 2, 7, 2) ➞ true\n  anybetween(3, 2, 7, 2) ➞ false\n  anybetween(3, -2, 7, 2) ➞ true\n  anybetween(3.6, -2.2, 7, 2) ➞ false\n  */\nconst anybetween = (x, y, z, range) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b === c || a <= range && b <= range || a >= range && b >= range;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between a range.\n  Returns false in any other cases.\n  Examples\n  anybetween(5, 2, 7, 2) ➞ true\n  anybetween(3, 2, 7, 2) ➞ false\n  anybetween(3, -2, 7, 2) ➞ true\n  anybetween(3.6, -2.2, 7, 2) ➞ false\n  */\nconst anybetween = (x, y, z, range) => {\n  const a = parseInt(x, 10);\n  const b = parseInt(y, 10);\n  const c = parseInt(z, 10);\n  return a === b || a === c || b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let nextLetter = newMessage[i + 1];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage = newMessage.replace(letter, nextLetter.toUpperCase());\n      }\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decOde('test')\n  'test'\n  >>> decOde('This is a message')\n  'This is a message'\n  */\nconst decOde = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let nextLetter = newMessage[i + 1];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage = newMessage.replace(letter, nextLetter.toLowerCase());\n      }\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and reverses the message \n  in such a way that it swaps case of all letters, replaces all \n  vowels in the message with the letter that appears 2 places ahead \n  of that vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> reverse('test')\n  'tset'\n  >>> reverse('This is a message')\n  'This is a messgae'\n  */\nconst reverse = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let nextLetter = newMessage[i + 1];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage = newMessage.replace(letter, nextLetter.toUpperCase());\n      }\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and reverses the message \n  in such a way that it swaps case of all letters, replaces all \n  vowels in the message with the letter that appears 2 places ahead \n  of that vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> reverse('test')\n  'tset'\n  >>> reverse('This is a message')\n  'This is a messgae'\n  */\nconst reverse = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let nextLetter = newMessage[i + 1];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage = newMessage.replace(letter, nextLetter.toUpperCase());\n      }\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and reverses the message \n  in such a way that it swaps case of all letters, replaces all \n  vowels in the message with the letter that appears 2 places ahead \n  of that vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> reverse('test')\n  'tset'\n  >>> reverse('This is a message')\n  'This is a messgae'\n  */\nconst reverse = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let nextLetter = newMessage[i + 1];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage = newMessage.replace(letter, nextLetter.toUpperCase());\n      }\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and reverses the message \n  in such a way that it swaps case of all letters, replaces all \n  vowels in the message with the letter that appears 2 places ahead \n  of that vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> reverse('test')\n  'tset'\n  >>> reverse('This is a message')\n  'This is a messgae'\n  */\nconst reverse = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let nextLetter = newMessage[i + 1];\n      if (nextLetter === 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter === 'u') {\n        newMessage = newMessage.replace(letter, nextLetter.toUpperCase());\n      }\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 5\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd2 = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 5\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd3 = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 5\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd4 = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 5\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd5 = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 5\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd6 = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i].toString();\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let isAllString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasF = (dict) => {\n  let isAllString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasG = (dict) => {\n  let isAllString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasH = (dict) => {\n  let isAllString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasI = (dict) => {\n  let isAllString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasJ = (dict) => {\n  let isAllString = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllString = false;\n      break;\n    }\n  }\n  return isAllString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of the squares of all the integers in the array.\n  for example:\n  sumOfSquares([2,3,4]) => [4,9,16]\n  sumOfSquares([2,3,5,7]) => [16,25,49]\n  sumOfSquares([]) => []\n  sumOfSquares([2,3,5,7,11,13,17]) => [25,49,81,121,171]\n  sumOfSquares([2,3,5,7,11,13,17,19]) => [25,49,81,121,171,252,343,494,645,811,1213,1617,1925]\n  sumOfSquares([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => [25,49,81,121,171,252,343,494,645,811,1213,1617,1925,3437,6371,8243,12289,16341,19343,25347,49349,64371,81423,125839,166791,196831,257693,497695,646797,815793,1267193,1676891,1972589,2585197,4985193,6475197,8171927,12765957,16851931,19868391,25965903,49865905,64851927,81837793,128719271,169659571,198883957,259859057,498883953,649859057,819427391,1297192739,1698595739,1990839571,2599590571,4990839573,6599590571,8197573953,129779573951,17008395739,200183957391,260095905739,500185905739,650095905739,820079573951,130019573951,170019573951,2002039573951,260020395739,50020395739,650020395739,820019573951,130020395739,170020395739,2002039573951,260020395739,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,2002039573951,26002039573951,5002039573951,65002039573951,820019573951,13002039573951,17002039573951,20020395739", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTiplY(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTiplY(a, b * 10);\n  }\n  else {\n    product = mulTiplY(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplZ(148, 412) should return 16.\n  mulTiplZ(19, 28) should return 72.\n  mulTiplZ(2020, 1851) should return 0.\n  mulTiplZ(14,-15) should return 20.\n  */\nconst mulTiplZ = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTiplZ(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTiplZ(a, b * 10);\n  }\n  else {\n    product = mulTiplZ(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTipl(a, b * 10);\n  }\n  else {\n    product = mulTipl(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTipl(a, b * 10);\n  }\n  else {\n    product = mulTipl(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTipl(a, b * 10);\n  }\n  else {\n    product = mulTipl(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTipl(a, b * 10);\n  }\n  else {\n    product = mulTipl(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTipl(a, b * 10);\n  }\n  else {\n    product = mulTipl(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl(a * 10, b);\n  }\n  else if (b < 10) {\n    product = mulTipl(a, b * 10);\n  }\n  else {\n    product = mulTipl(a * 10, b * 10);\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTipl(148, 412) should return 16.\n  mulTipl(19, 28) should return 72.\n  mulTipl(2020, 1851) should return 0.\n  mulTipl(14,-15) should return 20.\n  */\nconst mulTipl = (a, b) => {\n  let product = 0;\n  \n  if (a < 0 || b < 0) {\n    product = 0;\n  }\n  else if (a < 10) {\n    product = mulTipl", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerLower = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerVowel = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerCons = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'z') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerConsOdd = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'z') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerVowelOdd = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerConsOddOdd = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'z') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerVowelOddOdd = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        n += 1;\n      }\n    }\n  }\n  return n;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPerConsEven = (s) => {\n  let n = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const numberAsString = value.toString()\n  const numberAsInt = parseInt(numberAsString)\n  const numberAsFloat = parseFloat(numberAsString)\n  const numberAsInteger = numberAsInt\n  const numberAsFloatInt = numberAsFloat\n  const numberAsFloatFloat = numberAsFloat\n  const numberAsFloatInt = numberAsFloatInt\n  const numberAsFloatFloatInt = numberAsFloatFloat\n  const numberAsFloatFloatFloat = numberAsFloatFloatInt\n  const numberAsFloatFloatFloatInt = numberAsFloatFloatFloat\n  const numberAsFloatFloatFloatFloat = numberAsFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatInt = numberAsFloatFloatFloatFloat\n  const numberAsFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatInt = numberAsFloatFloatFloatFloatFloat\n  const numberAsFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatInt = numberAsFloatFloatFloatFloatFloatFloatFloat\n  const numberAsFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatInt = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatInt\n  const numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloatFloat = numberAsFloatFloatFloatFloatFloatFloatFloatFloatFloat", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
