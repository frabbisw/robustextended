{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const isClose = (firstNumber - lastNumber) < threshold;\n  return isClose;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * If two numbers are closer to each other than given threshold, then return true.\n * If two numbers are not closer to each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If given number is not in given list of numbers, are any two numbers closer to\n * each other than given threshold, then return false.\n * If given number is in given list of numbers, are any two numbers closer to each\n * other than given threshold, then return true.\n * If ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position++;\n      current_group.push(current_char);\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position++;\n      if (open_brace_count === closed_brace_count) {\n        if (open_brace_position === closed_brace_position) {\n          open_brace_count = 0;\n          closed_brace_count = 0;\n          open_brace_position = 0;\n          closed_brace_position = 0;\n          current_group.push(current_char);\n        } else {\n          open_brace_count--;\n          open_brace_position--;\n          closed_brace_count--;\n          closed_brace_position--;\n        }\n      } else {\n        open_brace_count--;\n        open_brace_position--;\n      }\n    } else {\n      current_group.push(current_char);\n    }\n  }\n\n  for (let i = 0; i < current_group.length; i++) {\n    groups.push(current_group[i]);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position++;\n      current_group.push(current_char);\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position++;\n      if (open_brace_count === closed_brace_count) {\n        if (open_brace_position === closed_brace_position) {\n          open_brace_count = 0;\n          closed_brace_count = 0;\n          open_brace_position = 0;\n          closed_brace_position = 0;\n          current_group.push(current_char);\n        } else {\n          open_brace_count--;\n          open_brace_position--;\n          closed_brace_count--;\n          closed_brace_position--;\n        }\n      } else {\n        open_brace_count--;\n        open_brace_position--;\n      }\n    } else {\n      current_group.push(current_char);\n    }\n  }\n\n  for (let i = 0; i < current_group.length; i++) {\n    groups.push(current_group[i]);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position++;\n      current_group.push(current_char);\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position++;\n      if (open_brace_count === closed_brace_count) {\n        if (open_brace_position === closed_brace_position) {\n          open_brace_count = 0;\n          closed_brace_count = 0;\n          open_brace_position = 0;\n          closed_brace_position = 0;\n          current_group.push(current_char);\n        } else {\n          open_brace_count--;\n          open_brace_position--;\n          closed_brace_count--;\n          closed_brace_position--;\n        }\n      } else {\n        open_brace_count--;\n        open_brace_position--;\n      }\n    } else {\n      current_group.push(current_char);\n    }\n  }\n\n  for (let i = 0; i < current_group.length; i++) {\n    groups.push(current_group[i]);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_brace_position = 0;\n  let closed_brace_position = 0;\n  let current_position = 0;\n  let current_char;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    current_char = paren_string[i];\n    if (current_char === '(') {\n      open_brace_count++;\n      open_brace_position++;\n      current_group.push(current_char);\n    } else if (current_char === ')') {\n      closed_brace_count++;\n      closed_brace_position++;\n      if (open_brace_count === closed_brace_count) {\n        if (open_brace_position === closed_brace_position) {\n          open_brace_count = 0;\n          closed_brace_count = 0;\n          open_brace_position = 0;\n          closed_brace_position = 0;\n          current_group.push(current_char);\n        } else {\n          open_brace_count--;\n          open_brace_position--;\n          closed_brace_count--;\n          closed_brace_position--;\n        }\n      } else {\n        open_brace_count--;\n        open_brace_position--;\n      }\n    } else {\n      current_group.push(current_char);\n    }\n  }\n\n  for (let i = 0; i < current_group.length; i++) {\n    groups.push(current_group[i]);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverse = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabetical = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabeticalAndReverse = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabeticalAndReverseAndAlphabetical = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().reverse().sort().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabeticalAndReverseAndAlphabeticalAndReverse = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().reverse().sort().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabeticalAndReverseAndAlphabeticalAndReverseAndAlphabetical = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().reverse().sort().reverse().sort().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order and in reverse order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabeticalAndReverseAndAlphabeticalAndReverseAndAlphabeticalAndReverse = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().reverse().sort().reverse().sort().reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst bibleStringReverseAndAlphabeticalAndReverseAndAlphabeticalAndReverseAndAlphabeticalAndReverseAndAlphabetical = (s) => {\n  let words = s.split(/,|\\s+/);\n  \n  return words.reverse().sort().reverse().sort().reverse().sort().reverse().sort().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  in alphabetical order and in reverse order and in alphabetical order and in reverse order and \n  in alphabetical order and in reverse order and in alphabe", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + (y - x)\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x + y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x > y) {\n    return x\n  }\n  if (x % 2 === 0) {\n    return x - y\n  }\n  return -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n// Test Cases\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEven = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOddOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigitOddEvenOddOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    } else {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> aloneDigit([152, 323, 1422, 10])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    if (num >= 1 && num <= 9) {\n      result.push(`One`);\n    } else if (num >= 10 && num <= 19) {\n      result.push(`Two`);\n    } else if (num >= 20 && num <= 29) {\n      result.push(`Three`);\n    } else if (num >= 30 && num <= 39) {\n      result.push(`Four`);\n    } else if (num >= 40 && num <= 49) {\n      result.push(`Five`);\n    } else if (num >= 50 && num <= 59) {\n      result.push(`Six`);\n    } else if (num >= 60 && num <= 69) {\n      result.push(`Seven`);\n    } else if (num >= 70 && num <= 79) {\n      result.push(`Eight`);\n    } else if (num >= 80 && num <= 89) {\n      result.push(`Nine`);\n    } else {\n      result.push(`Unknown`);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    if (num >= 1 && num <= 9) {\n      result.push(`One`);\n    } else if (num >= 10 && num <= 19) {\n      result.push(`Two`);\n    } else if (num >= 20 && num <= 29) {\n      result.push(`Three`);\n    } else if (num >= 30 && num <= 39) {\n      result.push(`Four`);\n    } else if (num >= 40 && num <= 49) {\n      result.push(`Five`);\n    } else if (num >= 50 && num <= 59) {\n      result.push(`Six`);\n    } else if (num >= 60 && num <= 69) {\n      result.push(`Seven`);\n    } else if (num >= 70 && num <= 79) {\n      result.push(`Eight`);\n    } else if (num >= 80 && num <= 89) {\n      result.push(`Nine`);\n    } else {\n      result.push(`Unknown`);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration3 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    if (num >= 1 && num <= 9) {\n      result.push(`One`);\n    } else if (num >= 10 && num <= 19) {\n      result.push(`Two`);\n    } else if (num >= 20 && num <= 29) {\n      result.push(`Three`);\n    } else if (num >= 30 && num <= 39) {\n      result.push(`Four`);\n    } else if (num >= 40 && num <= 49) {\n      result.push(`Five`);\n    } else if (num >= 50 && num <= 59) {\n      result.push(`Six`);\n    } else if (num >= 60 && num <= 69) {\n      result.push(`Seven`);\n    } else if (num >= 70 && num <= 79) {\n      result.push(`Eight`);\n    } else if (num >= 80 && num <= 89) {\n      result.push(`Nine`);\n    } else {\n      result.push(`Unknown`);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration4 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    if (num >= 1 && num <= 9) {\n      result.push(`One`);\n    } else if (num >= 10 && num <= 19) {\n      result.push(`Two`);\n    } else if (num >= 20 && num <= 29) {\n      result.push(`Three`);\n    } else if (num >= 30 && num <= 39) {\n      result.push(`Four`);\n    } else if (num >= 40 && num <= 49) {\n      result.push(`Five`);\n    } else if (num >= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 3, 9, 27, 81]\n  */\nconst i = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 9, 27, 81]\n  */\nconst l = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 9, 27, 81]\n  */\nconst n = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is odd, and two of them are even.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are odd, and 6 of them are even.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "<|endoftext|>/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums([]) == 0\n  >>> findNums([-1, 11, -11]) == 1\n  >>> findNums([1, 1, 2]) == 3\n  */\nconst findNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums2 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums2([]) == 0\n  >>> findNums2([-1, 11, -11]) == 1\n  >>> findNums2([1, 1, 2]) == 3\n  */\nconst findNums2 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums3 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums3([]) == 0\n  >>> findNums3([-1, 11, -11]) == 1\n  >>> findNums3([1, 1, 2]) == 3\n  */\nconst findNums3 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums4 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums4([]) == 0\n  >>> findNums4([-1, 11, -11]) == 1\n  >>> findNums4([1, 1, 2]) == 3\n  */\nconst findNums4 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums5 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums5([]) == 0\n  >>> findNums5([-1, 11, -11]) == 1\n  >>> findNums5([1, 1, 2]) == 3\n  */\nconst findNums5 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums6 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums6([]) == 0\n  >>> findNums6([-1, 11, -11]) == 1\n  >>> findNums6([1, 1, 2]) == 3\n  */\nconst findNums6 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums7 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums7([]) == 0\n  >>> findNums7([-1, 11, -11]) == 1\n  >>> findNums7([1, 1, 2]) == 3\n  */\nconst findNums7 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums8 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums8([]) == 0\n  >>> findNums8([-1, 11, -11]) == 1\n  >>> findNums8([1, 1, 2]) == 3\n  */\nconst findNums8 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums9 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums9([]) == 0\n  >>> findNums9([-1, 11, -11]) == 1\n  >>> findNums9([1, 1, 2]) == 3\n  */\nconst findNums9 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums10 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums10([]) == 0\n  >>> findNums10([-1, 11, -11]) == 1\n  >>> findNums10([1, 1, 2]) == 3\n  */\nconst findNums10 = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      nums++;\n      arr[i] = -arr[i];\n    }\n  }\n  return nums;\n};\n\n/*\n  Write a function findNums11 which takes an array of integers and returns the\n  number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> findNums11([]) == 0\n  >>> findNums11([-1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  let arr1 = arr;\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238 = [];\n  let arr239 = [];\n  let arr240 = [];\n  let arr241 = [];\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const aInt = parseInt(a, 2);\n  const bInt = parseInt(b, 2);\n  return binary(aInt, bInt).join('');\n};\n\n/**\n * Given two strings representing a binary number, return the number of\n * 1s found in the first string and 0s found in the second string.\n * \n * Example:\n * \n * Given '10' and '11', return 2.\n * \n * Given '10' and '01', return 1.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * \n * Given '10' and '00', return 0.\n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n      evenCount++\n    } else {\n      odd.push(lst1[i])\n      oddCount++\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n      evenCount++\n    } else {\n      odd.push(lst2[i])\n      oddCount++\n    }\n  }\n  if (evenCount === even.length && oddCount === odd.length) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst centralOdd = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n      evenCount++\n    } else {\n      odd.push(lst1[i])\n      oddCount++\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n      evenCount++\n    } else {\n      odd.push(lst2[i])\n      oddCount++\n    }\n  }\n  if (evenCount === even.length && oddCount === odd.length) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  centralOdd([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  centralOdd([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst centralEven = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n      evenCount++\n    } else {\n      odd.push(lst1[i])\n      oddCount++\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n      evenCount++\n    } else {\n      odd.push(lst2[i])\n      oddCount++\n    }\n  }\n  if (evenCount === even.length && oddCount === odd.length) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  centralOdd([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  centralOdd([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst centralOddEven = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n      evenCount++\n    } else {\n      odd.push(lst1[i])\n      oddCount++\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n      evenCount++\n    } else {\n      odd.push(lst2[i])\n      oddCount++\n    }\n  }\n  if (evenCount === even.length && oddCount === odd.length) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  centralEven([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  centralEven([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst centralEvenOdd = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n      evenCount++\n    } else {\n      odd.push(lst1[i])\n      oddCount++\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n      evenCount++\n    } else {\n      odd.push(lst2[i])\n      oddCount++\n    }\n  }\n  if (evenCount === even.length && oddCount === odd.length) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  centralOddEven([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  centralOddEven([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst centralOddEvenOdd = (lst1, lst2) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let freq = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (freq[letter] == null) {\n      freq[letter] = 1;\n    } else {\n      freq[letter] += 1;\n    }\n  }\n  return freq;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to find out if there is a palindrome in s whose length is less than or equal to k.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('abcde',true)\n  For s = \"abcde\", k = 30, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, the result should be ('abcde',false)\n  For s = \"abcde\", k = 50, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of odd elements ${oddDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount2 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of even elements ${evenDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount3 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of even and odd elements ${evenDigits(lst[i]) + oddDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount4 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of even and odd elements ${evenDigits(lst[i]) + oddDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount5 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of even and odd elements ${evenDigits(lst[i]) + oddDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount6 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of even and odd elements ${evenDigits(lst[i]) + oddDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount7 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of even and odd elements ${evenDigits(lst[i]) + oddDigits(lst[i])} of the ${lst[i]}`);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount8 = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArrayMax = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayMax([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayMax([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProduct([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMax = (nums) => {\n  let product = 1;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMax([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMax([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSum = (nums) => {\n  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSum([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSum([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMax = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMax([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMax([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProduct = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMaxProduct([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMaxProduct([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProductMax = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMaxProductMax([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMaxProductMax([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProductMaxSum = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMaxProductMaxSum([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMaxProductMaxSum([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProductMaxSumMax = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMaxProductMaxSumMax([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMaxProductMaxSumMax([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProductMaxSumMaxProduct = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMaxProductMaxSumMaxProduct([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMaxProductMaxSumMaxProduct([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProductMaxSumMaxProductMax = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n    sum += product;\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArrayProductMaxSumMaxProductMaxSumMaxProductMax([2, 3, 4, 1, 2, 4]) == 24\n  minuteSubArrayProductMaxSumMaxProductMaxSumMaxProductMax([-1, -2, -3]) == -1\n  */\nconst minuteSubArrayProductMaxSumMaxProductMaxSumMaxProductMaxSum = (nums) => {\n  let product = 1;\n  let sum = 0;\n  let max = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) {\n      count += buckets[i] / n;\n    }\n  }\n  return count;\n};\n\nconst test = (...args) => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1],\n  ];\n  const bucket_capacity = 1;\n  const actual = soapFill(grid, bucket_capacity);\n  console.log(\"The expected value is\", expected);\n  console.log(\"The actual value is\", actual);\n  console.assert(actual === expected);\n};\n\n// const grid = [\n//   [0, 0, 1, 0],\n//   [0, 1, 0, 0],\n//   [1, 1, 1, 1],\n// ];\n// const bucket_capacity = 1;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 1, 1],\n//   [0, 0, 0, 0],\n//   [1, 1, 1, 1],\n//   [0, 1, 1, 1],\n// ];\n// const bucket_capacity = 2;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 5;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual === expected);\n\n// const grid = [\n//   [0, 0, 0],\n//   [0, 0, 0],\n// ];\n// const bucket_capacity = 0;\n// const actual = soapFill(grid, bucket_capacity);\n// console.log(\"The expected value is\", expected);\n// console.log(\"The actual value is\", actual);\n// console.assert(actual ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .map((num) => num * 2)\n   .sort((a, b) => a - b)\n   .map((num) => num / 2)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num) => parseInt(num.toString(2), 2))\n   .map((num) => num > 0? num : -num)\n   .map((num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let arr = [];\n  \n  if(s.length === 0) {\n    return arr;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n    \n    if(s.charAt(i) === s.charAt(i + n)) {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n  }\n  \n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let arr = [];\n  \n  if(s.length === 0) {\n    return arr;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n    \n    if(s.charAt(i) === s.charAt(i + n)) {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n  }\n  \n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let arr = [];\n  \n  if(s.length === 0) {\n    return arr;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n    \n    if(s.charAt(i) === s.charAt(i + n)) {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n  }\n  \n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let arr = [];\n  \n  if(s.length === 0) {\n    return arr;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n    \n    if(s.charAt(i) === s.charAt(i + n)) {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n  }\n  \n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let arr = [];\n  \n  if(s.length === 0) {\n    return arr;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n    \n    if(s.charAt(i) === s.charAt(i + n)) {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n  }\n  \n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let arr = [];\n  \n  if(s.length === 0) {\n    return arr;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsCount = vowels.length;\n  const vowelsCountFromRight = vowelsCount - 1;\n  const vowelsCountFromLeft = vowelsCount - 2;\n  const vowelsCountFromRightAndLeft = vowelsCount - 3;\n\n  const vowelsCountFromRightAndLeftFromRight = vowelsCount - 4;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeft = vowelsCount - 5;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 6;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 7;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 8;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 9;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 10;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 11;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 12;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 13;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 14;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 15;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 16;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 17;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 18;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 19;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 20;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 21;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 22;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 23;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 24;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 25;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 26;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 27;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 28;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 29;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 30;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 31;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 32;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 33;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRight = vowelsCount - 34;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeft = vowelsCount - 35;\n\n  const vowelsCountFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAndLeftFromRightAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of integers lst. Your job is to find the maximum number\n  in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  max([1, 2, 3]) == 3\n  max([1, 3, 2]) == 2\n  max([2, 1]) == 1\n  max([2, 3]) == 3\n  max([3, 1, 2]) == 2\n  max([3, 2, 1]) == 1\n  max([3, 2, 3]) == 3\n  max([3, 1, 2, 4]) == 4\n  max([4, 3, 2, 1]) == 1\n  max([4, 3, 2, 3]) == 3\n  max([4, 3, 1, 2]) == 2\n  max([4, 3, 2, 4]) == 4\n  */\nconst max = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/* You are given a list of integers lst. Your job is to find the minimum number\n  in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  min([1, 2, 3]) == 1\n  min([1, 3, 2]) == 3\n  min([2, 1]) == 2\n  min([2, 3]) == 3\n  min([3, 1, 2]) == 1\n  min([3, 2, 1]) == 2\n  min([3, 2, 3]) == 3\n  min([3, 1, 2, 4]) == 4\n  min([4, 3, 2, 1]) == 1\n  min([4, 3, 2, 3]) == 3\n  min([4, 3, 1, 2]) == 2\n  min([4, 3, 2, 4]) == 4\n  */\nconst min = (lst) => {\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/* You are given a list of integers lst. Your job is to find the sum of all\n  the numbers in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  sum([1, 2, 3]) == 6\n  sum([1, 3, 2]) == 3\n  sum([2, 1]) == 2\n  sum([2, 3]) == 3\n  sum([3, 1, 2]) == 1\n  sum([3, 2, 1]) == 2\n  sum([3, 2, 3]) == 3\n  sum([3, 1, 2, 4]) == 4\n  sum([4, 3, 2, 1]) == 1\n  sum([4, 3, 2, 3]) == 3\n  sum([4, 3, 1, 2]) == 2\n  sum([4, 3, 2, 4]) == 4\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/* You are given a list of integers lst. Your job is to find the product of all\n  the numbers in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  product([1, 2, 3]) == 6\n  product([1, 3, 2]) == 3\n  product([2, 1]) == 2\n  product([2, 3]) == 3\n  product([3, 1, 2]) == 1\n  product([3, 2, 1]) == 2\n  product([3, 2, 3]) == 3\n  product([3, 1, 2, 4]) == 4\n  product([4, 3, 2, 1]) == 1\n  product([4, 3, 2, 3]) == 3\n  product([4, 3, 1, 2]) == 2\n  product([4, 3, 2, 4]) == 4\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/* You are given a list of integers lst. Your job is to find the sum of the\n  first n numbers in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  firstN([1, 2, 3]) == 6\n  firstN([1, 3, 2]) == 3\n  firstN([2, 1]) == 2\n  firstN([2, 3]) == 3\n  firstN([3, 1, 2]) == 1\n  firstN([3, 2, 1]) == 2\n  firstN([3, 2, 3]) == 3\n  firstN([3, 1, 2, 4]) == 4\n  firstN([4, 3, 2, 1]) == 1\n  firstN([4, 3, 2, 3]) == 3\n  firstN([4, 3, 1, 2]) == 2\n  firstN([4, 3, 2, 4]) == 4\n  */\nconst firstN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (sum >= lst[i]) {\n      break;\n    }\n  }\n  return sum;\n};\n\n/* You are given a list of integers lst. Your job is to find the sum of the\n  last n numbers in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  lastN([1, 2, 3]) == 6\n  lastN([1, 3, 2]) == 3\n  lastN([2, 1]) == 2\n  lastN([2, 3]) == 3\n  lastN([3, 1, 2]) == 1\n  lastN([3, 2, 1]) == 2\n  lastN([3, 2, 3]) == 3\n  lastN([3, 1, 2, 4]) == 4\n  lastN([4, 3, 2, 1]) == 1\n  lastN([4, 3, 2, 3]) == 3\n  lastN([4, 3, 1, 2]) == 2\n  lastN([4, 3, 2, 4]) == 4\n  */\nconst lastN = (lst) => {\n  let sum = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    sum += lst[i];\n    if (sum >= lst[i]) {\n      break;\n    }\n  }\n  return sum;\n};\n\n/* You are given a list of integers lst. Your job is to find the sum of the\n  middle n numbers in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  middleN([1, 2, 3]) == 6\n  middleN([1, 3, 2]) == 3\n  middleN([2, 1]) == 2\n  middleN([2, 3]) == 3\n  middleN([3, 1, 2]) == 1\n  middleN([3, 2, 1]) == 2\n  middleN([3, 2, 3]) == 3\n  middleN([3, 1, 2, 4]) == 4\n  middleN([4, 3, 2, 1]) == 1\n  middleN([4, 3, 2, 3]) == 3\n  middleN([4, 3, 1, 2]) == 2\n  middleN([4, 3, 2, 4]) == 4\n  */\nconst middleN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length / 2; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/* You are given a list of integers lst. Your job is to find the sum of the\n  first and last n numbers in lst.\n  Return 'Yes' if there's a way to make a good list, and return 'No' otherwise.\n  Examples:\n  firstLastN([1, 2, 3]) == 6\n  firstLastN([1, 3, 2]) == 3\n  firstLastN([2, 1]) == 2\n  firstLastN", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "<|endoftext|>/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const maxLength = Math.max(...strings.map(s => s.length))\n  return strings.find(s => s.length === maxLength)? strings[0] : null\n}\n\n/*\n  >>> isPalindrome('abba')\n  true\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindro", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { maximal };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimal = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result;\n};\n\nexport { minimal };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [6, 4]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5, 3, 6, 2, 4]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst topK = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { topK };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5, 3, 6, 2, 4]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst bottomK = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result;\n};\n\nexport { bottomK };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [4, 6, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5, 4, 3, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst bottomKDescending = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result.sort((a, b) => b - a);\n};\n\nexport { bottomKDescending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [4, 6, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5, 4, 3, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst topKDescending = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result.sort((a, b) => b - a);\n};\n\nexport { topKDescending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr in ascending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5, 3, 6, 2, 4]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst topKAscending = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result.sort((a, b) => a - b);\n};\n\nexport { topKAscending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr in ascending order.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [4, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of strings, return a new array with the duplicates removed.\n\n  Duplicate Removal\n  Given an array nums consisting of the numbers 1, 2, 3, and 4, and an array string consisting of the strings “a”, “b”, “c”, and “d”, remove all occurrences of “a”, “b”, and “c” from nums and return the new array.\n\n  Examples\n  removeDuplicates([1, 2, 3, 4, \"a\", \"b\", \"c\", \"d\"]) ==> [1, 2, 3, 4]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  removeDuplicates([1, 2, 3, 4, 5]) ==> [1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [11", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n  while (n) {\n    if (n % 2 === 0) {\n      next = next * 2 + 1;\n    } else {\n      next = next * 3 + 1;\n    }\n    list.push(next);\n    prev = next;\n    n = prev;\n  }\n  return list.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n  while (n) {\n    if (n % 2 === 0) {\n      next = next * 2 + 1;\n    } else {\n      next = next * 3 + 1;\n    }\n    list.push(next);\n    prev = next;\n    n = prev;\n  }\n  return list.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n  while (n) {\n    if (n % 2 === 0) {\n      next = next * 2 + 1;\n    } else {\n      next = next * 3 + 1;\n    }\n    list.push(next);\n    prev = next;\n    n = prev;\n  }\n  return list.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n  while (n) {\n    if (n % 2 === 0) {\n      next = next * 2 + 1;\n    } else {\n      next = next * 3 + 1;\n    }\n    list.push(next);\n    prev = next;\n    n = prev;\n  }\n  return list.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst catchEvenCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n  while (n) {\n    if (n % 2 === 0) {\n      next = next * 2 + 1;\n    } else {\n      next = next * 3 + 1;\n    }\n    list.push(next);\n    prev = next;\n    n = prev;\n  }\n  return list.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let next = 1;\n  while (n) {\n    if (n % 2 === 0) {\n      next = next * 2 + 1;\n    } else {\n      next = next * 3 + 1;\n    }\n    list.push(next);\n    prev = next;\n    n = prev;\n  }\n  return list.sort((", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonthArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let monthArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [0, 20];\n  let yearArrayArray = [0, 20];\n  let dateArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dateArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toLowerCase())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsEven = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toLowerCase())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsOdd = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toUpperCase())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsEven = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toUpperCase())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with odd order in the\n  alphabet, ord('0') = 0, ord('1') = 1,... ord('9') = 10, ord('a') = 10, ord('b') = 11\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsOdd = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toString())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with even order in the\n  alphabet, ord('0') = 0, ord('1') = 1,... ord('9') = 10, ord('a') = 10, ord('b') = 11\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsEven = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toString())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with even order in the\n  alphabet, ord('0') = 0, ord('1') = 1,... ord('9') = 10, ord('a') = 10, ord('b') = 11\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsOdd = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toString())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with odd order in the\n  alphabet, ord('0') = 0, ord('1') = 1,... ord('9') = 10, ord('a') = 10, ord('b') = 11\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWordsEven = (txt) => {\n  const words = txt.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length > 1) {\n      result.push(word)\n    } else {\n      result.push(word.toString())\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of digits with even order in the\n  alphabet, ord('0') = 0, ord('1') = 1,... ord('9') = 10, ord('a') = 10, ord('b') = 11\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  // Sort the list first\n  lst.sort((a, b) => a - b);\n\n  // Check if there are duplicates\n  const isDuplicate = lst.some((item, index) => {\n    return index === lst.indexOf(item);\n  });\n\n  // If there are duplicates, return false\n  return!isDuplicate;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenDesc = (lst) => {\n  // Sort the list first\n  lst.sort((a, b) => b - a);\n\n  // Check if there are duplicates\n  const isDuplicate = lst.some((item, index) => {\n    return index === lst.indexOf(item);\n  });\n\n  // If there are duplicates, return false\n  return!isDuplicate;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenAsc = (lst) => {\n  // Sort the list first\n  lst.sort((a, b) => a - b);\n\n  // Check if there are duplicates\n  const isDuplicate = lst.some((item, index) => {\n    return index === lst.indexOf(item);\n  });\n\n  // If there are duplicates, return false\n  return!isDuplicate;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenDescAsc = (lst) => {\n  // Sort the list first\n  lst.sort((a, b) => b - a);\n\n  // Check if there are duplicates\n  const isDuplicate = lst.some((item, index) => {\n    return index === lst.indexOf(item);\n  });\n\n  // If there are duplicates, return false\n  return!isDuplicate;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenAscDesc = (lst) => {\n  // Sort the list first\n  lst.sort((a, b) => a - b);\n\n  // Check if there are duplicates\n  const isDuplicate = lst.some((item, index) => {\n    return index === lst.indexOf(item);\n  });\n\n  // If there are duplicates, return false\n  return!isDuplicate;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 3]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 3]) ➞ false\n  */\nconst isScreenDescAsc = (lst) => {\n  // Sort the list first\n  lst.sort((a, b) => b - a);\n\n  // Check if there are duplicates\n  const isDuplicate = lst.some((item, index) => {\n    return index === lst.indexOf(item);\n  });\n\n  // If there are duplicates, return false\n  return!isDuplicate;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 <= end2 && start2 <= end1) return \"NO\"\n  if (start2 <= end1 && start1 <= end2) return \"NO\"\n  if (start1 <= end2 && start2 >= end1) return \"NO\"\n  if (start2 <= end1 && start1 >= end2) return \"NO\"\n  if (start1 <= end2 && start2 <= end1 && start1 <= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 <= end2) return \"YES\"\n  if (start1 <= end2 && start2 <= end1 && start1 >= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap2 = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 <= end2 && start2 <= end1) return \"NO\"\n  if (start2 <= end1 && start1 <= end2) return \"NO\"\n  if (start1 <= end2 && start2 >= end1) return \"NO\"\n  if (start2 <= end1 && start1 >= end2) return \"NO\"\n  if (start1 <= end2 && start2 <= end1 && start1 <= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 <= end2) return \"YES\"\n  if (start1 <= end2 && start2 <= end1 && start1 >= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap3 = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 <= end2 && start2 <= end1) return \"NO\"\n  if (start2 <= end1 && start1 <= end2) return \"NO\"\n  if (start1 <= end2 && start2 >= end1) return \"NO\"\n  if (start2 <= end1 && start1 >= end2) return \"NO\"\n  if (start1 <= end2 && start2 <= end1 && start1 <= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 <= end2) return \"YES\"\n  if (start1 <= end2 && start2 <= end1 && start1 >= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap4 = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 <= end2 && start2 <= end1) return \"NO\"\n  if (start2 <= end1 && start1 <= end2) return \"NO\"\n  if (start1 <= end2 && start2 >= end1) return \"NO\"\n  if (start2 <= end1 && start1 >= end2) return \"NO\"\n  if (start1 <= end2 && start2 <= end1 && start1 <= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 <= end2) return \"YES\"\n  if (start1 <= end2 && start2 <= end1 && start1 >= end2) return \"YES\"\n  if (start2 <= end1 && start1 >= end2 && start1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign\n    sign *= -1\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = [];\n  queue.push({ x: 0, y: 0, value: grid[0][0] });\n  while (queue.length > 0) {\n    const { x, y, value } = queue.shift();\n    if (visited[x] || visited[y]) {\n      continue;\n    }\n    visited[x] = visited[y] = true;\n    result.push(value);\n    for (let i = x; i <= N; i++) {\n      if (i === x || i === y) {\n        continue;\n      }\n      queue.push({ x: x, y: y, value: value + grid[i][y] });\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the minimum number of water cells to land \n  on that position. \n  Note: You have to move to that cell only when you can land on that cell \n  and only when you land on that cell you can move to that cell.\n\n  Example:\n\n      Input: grid = [ [1,1,1], [1,1,1], [1,1,1] ], start = ( 2, 0 )\n      Output: 3\n\n      Input: grid = [ [0,0], [0,0], [0,0] ], start = ( 0, 0 )\n      Output: 2\n*/\nconst waterPath = (grid, start) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = [];\n  queue.push({ x: start[0], y: start[1], value: grid[start[0]][start[1]] });\n  while (queue.length > 0) {\n    const { x, y, value } = queue.shift();\n    if (visited[x] || visited[y]) {\n      continue;\n    }\n    visited[x] = visited[y] = true;\n    result.push(value);\n    for (let i = x; i <= N; i++) {\n      if (i === x || i === y) {\n        continue;\n      }\n      queue.push({ x: x, y: y, value: value + grid[i][y] });\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the minimum number of water cells to land \n  on that position. \n  Note: You have to move to that cell only when you can land on that cell \n  and only when you land on that cell you can move to that cell.\n\n  Example:\n\n      Input: grid = [ [1,1,1], [1,1,1], [1,1,1] ], start = ( 2, 0 )\n      Output: 3\n\n      Input: grid = [ [0,0], [0,0], [0,0] ], start = ( 0, 0 )\n      Output: 2\n*/\nconst waterPath2 = (grid, start) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = [];\n  queue.push({ x: start[0], y: start[1], value: grid[start[0]][start[1]] });\n  while (queue.length > 0) {\n    const { x, y, value } = queue.shift();\n    if (visited[x] || visited[y]) {\n      continue;\n    }\n    visited[x] = visited[y] = true;\n    result.push(value);\n    for (let i = x; i <= N; i++) {\n      if (i === x || i === y) {\n        continue;\n      }\n      queue.push({ x: x, y: y, value: value + grid[i][y] });\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the minimum number of water cells to land \n  on that position. \n  Note: You have to move to that cell only when you can land on that cell \n  and only when you land on that cell you can move to that cell.\n\n  Example:\n\n      Input: grid = [ [1,1,1], [1,1,1], [1,1,1] ], start = ( 2, 0 )\n      Output: 3\n\n      Input: grid = [ [0,0], [0,0], [0,0] ], start = ( 0, 0 )\n      Output: 2\n*/\nconst waterPath3 = (grid, start) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = [];\n  queue.push({ x: start[0], y: start[1], value: grid[start[0]][start[1]] });\n  while (queue.length > 0) {\n    const { x, y, value } = queue.shift();\n    if (visited[x] || visited[y]) {\n      continue;\n    }\n    visited[x] = visited[y] = true;\n    result.push(value);\n    for (let i = x; i <= N; i++) {\n      if (i === x || i === y) {\n        continue;\n      }\n      queue.push({ x: x, y: y, value: value + grid[i][y] });\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a 2D grid map of '1's (land) and '0's (water), and a start cell \n  position (row and column), count the minimum number of water cells to land \n  on that position. \n  Note: You have to move to that cell only when you can land on that cell \n  and only when you land on that cell you can move to that cell.\n\n  Example:\n\n      Input: grid = [ [1,1,1], [1,1,1], [1,1,1] ], start = ( 2, 0 )\n      Output: 3\n\n      Input: grid = [ [0,0], [0,0], [0,0] ], start = ( 0, 0 )\n      Output: 2\n*/\nconst waterPath4 = (grid, start) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = [];\n  queue.push({ x: start[0], y: start[1], value: grid[start[0]][start[1]] });\n  while (queue.length > 0) {\n    const { x, y, value } = queue.shift();\n    if (visited[x] || visited[y]) {\n      continue;\n    }\n    visited[x] = visited[y] = true;\n    result.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return gcd(a, b);\n};\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 15)\n * 15\n */\nconst leastCommonMultipleOf = (a, b) => {\n  if (a === 0 || ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2));\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 1) * spiral(n - 2) * spiral(n - 3) if n is odd.\n  For example:\n  spiral(3) = spiral(1) * spiral(2) * spiral(3)\n         = 1 * 2 * 3\n         = 1 * 2 * 3 * 1\n         = 1 + 2 + 3 + 1 = 8\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 3, 8]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else if (n % 2 === 0) {\n    arr.push(spiral(n - 1) * spiral(n - 1));\n  } else {\n    arr.push(spiral(n - 1) * spiral(n - 2) * spiral(n - 3));\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral's square, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral's square.\n  Spiral's square is defined by the recurrence:\n  spiral'(1) = 1\n  spiral'(n) = n * spiral'(n - 1), if n is even.\n  spiral'(n) = spiral'(n - 1) * spiral'(n - 2) * spiral'(n - 3) if n is odd.\n  For example:\n  spiral'(3) = spiral'(1) * spiral'(2) * spiral'(3)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1)\n         = spiral'(1) * spiral'(2) * spiral'(3) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'(1) * spiral'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitEven = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all digit.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digit(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit even.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitEven(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 2.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByTwo = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 3.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByThree = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 4.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByFour = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 5.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByFive = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 6.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedBySix = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 7.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedBySeven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 8.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByEight = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 9.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByNine = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 10.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByTen = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 11.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByEleven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 12.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByTwelve = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 13.\n  Return 0 if all digit are 0.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst digitSumOddDividedByThirteen = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digitOdd(i) / 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit odd divided by 14.\n  Return 0 if all digit are 0.\n  For example:\n  digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ')', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.floor(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 16\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst summarizeSquareFloor = (lst) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[a-z]/i) &&!lastChar.match(/[A-Z]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a vowel, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharVowel(\"apple pie\") ➞ false\n  determineIfConcludingCharVowel(\"apple pi e\") ➞ true\n  determineIfConcludingCharVowel(\"apple pi e \") ➞ false\n  determineIfConcludingCharVowel(\"\") ➞ false\n  */\nconst determineIfConcludingCharVowel = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[aeiou]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a consonant, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConsonant(\"apple pie\") ➞ false\n  determineIfConcludingCharConsonant(\"apple pi e\") ➞ true\n  determineIfConcludingCharConsonant(\"apple pi e \") ➞ false\n  determineIfConcludingCharConsonant(\"\") ➞ false\n  */\nconst determineIfConcludingCharConsonant = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[bcdfghjklmnpqrstvwxyz]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharNumber(\"apple pie\") ➞ false\n  determineIfConcludingCharNumber(\"apple pi e\") ➞ true\n  determineIfConcludingCharNumber(\"apple pi e \") ➞ false\n  determineIfConcludingCharNumber(\"\") ➞ false\n  */\nconst determineIfConcludingCharNumber = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[0-9]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharSpecialChar(\"apple pie\") ➞ false\n  determineIfConcludingCharSpecialChar(\"apple pi e\") ➞ true\n  determineIfConcludingCharSpecialChar(\"apple pi e \") ➞ false\n  determineIfConcludingCharSpecialChar(\"\") ➞ false\n  */\nconst determineIfConcludingCharSpecialChar = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharSymbol(\"apple pie\") ➞ false\n  determineIfConcludingCharSymbol(\"apple pi e\") ➞ true\n  determineIfConcludingCharSymbol(\"apple pi e \") ➞ false\n  determineIfConcludingCharSymbol(\"\") ➞ false\n  */\nconst determineIfConcludingCharSymbol = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharPunctuation(\"apple pie\") ➞ false\n  determineIfConcludingCharPunctuation(\"apple pi e\") ➞ true\n  determineIfConcludingCharPunctuation(\"apple pi e \") ➞ false\n  determineIfConcludingCharPunctuation(\"\") ➞ false\n  */\nconst determineIfConcludingCharPunctuation = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharWord(\"apple pie\") ➞ true\n  determineIfConcludingCharWord(\"apple pi e\") ➞ true\n  determineIfConcludingCharWord(\"apple pi e \") ➞ true\n  determineIfConcludingCharWord(\"\") ➞ false\n  */\nconst determineIfConcludingCharWord = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = words[words.length - 1];\n  return lastChar.match(/[a-z]+/i);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharNumber(\"apple pie\") ➞ false\n  determineIfConcludingCharNumber(\"apple pi e\") ➞ true\n  determineIfConcludingCharNumber(\"apple pi e \") ➞ false\n  determineIfConcludingCharNumber(\"\") ➞ false\n  */\nconst determineIfConcludingCharNumber = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 0\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the largest value less than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the largest value less than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the largest value less than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the largest value less than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the largest value less than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the largest value less than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the index of the element in the given array\n  which has the smallest value greater than or equal to the given element. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: positive[0], b: negative[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: negative[0], b: positive[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallBiggerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: positive[0], b: negative[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: negative[0], b: positive[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallerSmallerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: negative[0], b: positive[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallerSmallerSmallerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: negative[0], b: positive[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallerSmallerSmallerSmallerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: negative[0], b: positive[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallerSmallerSmallerSmallerSmallerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return { a: negative[0], b: positive[0] };\n  }\n  if (positive.length > 0) {\n    return { a: positive[0], b: null };\n  }\n  if (negative.length > 0) {\n    return { a: null, b: negative[0] };\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst smallSmallerSmallerSmallerSmallerSmallerSmallerBigIntegers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  const sumEven = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumEven === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumOdd(4) == false\n  isAdequateToSumOdd(6) == false\n  isAdequateToSumOdd(8) == true\n  */\nconst isAdequateToSumOdd = (n) => {\n  const sumOdd = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumOdd === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isAdequateToSumIntegers(4) == false\n  isAdequateToSumIntegers(6) == false\n  isAdequateToSumIntegers(8) == true\n  */\nconst isAdequateToSumIntegers = (n) => {\n  const sumIntegers = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumIntegers === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  isAdequateToSumIntegers(4) == false\n  isAdequateToSumIntegers(6) == false\n  isAdequateToSumIntegers(8) == true\n  */\nconst isAdequateToSumNegativeIntegers = (n) => {\n  const sumNegativeIntegers = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumNegativeIntegers === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumNegativeEven(4) == false\n  isAdequateToSumNegativeEven(6) == false\n  isAdequateToSumNegativeEven(8) == true\n  */\nconst isAdequateToSumNegativeEven = (n) => {\n  const sumNegativeEven = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumNegativeEven === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumNegativeOdd(4) == false\n  isAdequateToSumNegativeOdd(6) == false\n  isAdequateToSumNegativeOdd(8) == true\n  */\nconst isAdequateToSumNegativeOdd = (n) => {\n  const sumNegativeOdd = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumNegativeOdd === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isAdequateToSumIntegers(4) == false\n  isAdequateToSumIntegers(6) == false\n  isAdequateToSumIntegers(8) == true\n  */\nconst isAdequateToSumPositiveIntegers = (n) => {\n  const sumPositiveIntegers = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumPositiveIntegers === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumPositiveEven(4) == false\n  isAdequateToSumPositiveEven(6) == false\n  isAdequateToSumPositiveEven(8) == true\n  */\nconst isAdequateToSumPositiveEven = (n) => {\n  const sumPositiveEven = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumPositiveEven === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumPositiveOdd(4) == false\n  isAdequateToSumPositiveOdd(6) == false\n  isAdequateToSumPositiveOdd(8) == true\n  */\nconst isAdequateToSumPositiveOdd = (n) => {\n  const sumPositiveOdd = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumPositiveOdd === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  isAdequateToSumNegativeIntegers(4) == false\n  isAdequateToSumNegativeIntegers(6) == false\n  isAdequateToSumNegativeIntegers(8) == true\n  */\nconst isAdequateToSumNegativeIntegers = (n) => {\n  const sumNegativeIntegers = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumNegativeIntegers === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumNegativeEven(4) == false\n  isAdequateToSumNegativeEven(6) == false\n  isAdequateToSumNegativeEven(8) == true\n  */\nconst isAdequateToSumNegativeEven = (n) => {\n  const sumNegativeEven = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumNegativeEven === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumNegativeOdd(4) == false\n  isAdequateToSumNegativeOdd(6) == false\n  isAdequateToSumNegativeOdd(8) == true\n  */\nconst isAdequateToSumNegativeOdd = (n) => {\n  const sumNegativeOdd = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumNegativeOdd === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  isAdequateToSumPositiveIntegers(4) == false\n  isAdequateToSumPositiveIntegers(6) == false\n  isAdequateToSumPositiveIntegers(8) == true\n  */\nconst isAdequateToSumPositiveIntegers = (n) => {\n  const sumPositiveIntegers = n.toString().split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n  return sumPositiveIntegers === (4 * n + 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumPositiveEven(4) == false\n  isAdequateToSumPositiveEven(6) == false\n  isAdequateToSumPositiveEven(8) == true\n  */\nconst isAdequateTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    prefixes.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffix = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    suffixes.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstring('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstring = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefix = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (char === '') {\n      break;\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  return text.replace(/\\s+/g, (match) => {\n    if (match.match(/\\s+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  repairNonAlpha(\"Example\") == \"Example\"\n  repairNonAlpha(\"Example 1\") == \"Example_1\"\n  repairNonAlpha(\" Example 2\") == \"Example_2\"\n  repairNonAlpha(\" Example   3\") == \"Example_3\"\n  */\nconst repairNonAlpha = (text) => {\n  return text.replace(/[^a-zA-Z0-9]+/g, (match) => {\n    if (match.match(/[^a-zA-Z0-9]+/g)) {\n      return \"_\";\n    } else {\n      return \"_\" + match;\n    }\n  });\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name;\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^0-9]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] + 1;\n    } else if (i % 4 === 0) {\n      sum += lst[i] - 1;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will add 1 to the integer entry if the integer entry is \n  a multiple of 3 and will subtract 1 from the integer entry if the integer entry is a multiple of 4. The function will not change the entries \n  in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -26\n  */\nconst summarizeAddSubtract8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const word = arr[i];\n    const length = word.length;\n    if (length === 0) {\n      newArr.push(word);\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      const charAtIndex = word.charAt(j);\n      if (charAtIndex!== \"a\" && charAtIndex!== \"e\" && charAtIndex!== \"i\" && charAtIndex!== \"o\" && charAtIndex!== \"u\") {\n        newArr.push(word);\n        break;\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const word = arr[i];\n    const length = word.length;\n    if (length === 0) {\n      newArr.push(word);\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      const charAtIndex = word.charAt(j);\n      if (charAtIndex!== \"a\" && charAtIndex!== \"e\" && charAtIndex!== \"i\" && charAtIndex!== \"o\" && charAtIndex!== \"u\") {\n        newArr.push(word);\n        break;\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const word = arr[i];\n    const length = word.length;\n    if (length === 0) {\n      newArr.push(word);\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      const charAtIndex = word.charAt(j);\n      if (charAtIndex!== \"a\" && charAtIndex!== \"e\" && charAtIndex!== \"i\" && charAtIndex!== \"o\" && charAtIndex!== \"u\") {\n        newArr.push(word);\n        break;\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const word = arr[i];\n    const length = word.length;\n    if (length === 0) {\n      newArr.push(word);\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      const charAtIndex = word.charAt(j);\n      if (charAtIndex!== \"a\" && charAtIndex!== \"e\" && charAtIndex!== \"i\" && charAtIndex!== \"o\" && charAtIndex!== \"u\") {\n        newArr.push(word);\n        break;\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const word = arr[i];\n    const length = word.length;\n    if (length === 0) {\n      newArr.push(word);\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      const charAtIndex = word.charAt(j);\n      if (charAtIndex!== \"a\" && charAtIndex!== \"e\" && charAtIndex!== \"i\" && charAtIndex!== \"o\" && charAtIndex!== \"u\") {\n        newArr.push(word);\n        break;\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { bibleInPrisonTerm };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const word = arr[i];\n    const length = word.length;\n    if (length === 0) {\n      newArr.push(word);\n      continue;\n    }\n    for (let j = 0; j < length; j++) {\n      const charAtIndex = word.charAt(j);\n      if (charAtIndex!== \"a\" && charAtIndex!== \"e\" && charAtIndex!== \"i\" && charAtIndex!== \"o\" && charAtIndex!== \"u\") {\n        newArr.push(word);\n        break;\n      }\n    }\n  }\n  return newArr.join(\" \");", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a tags=javascript,fractions,algorithm |>\n<| c |>\nThanks for your answer. I think I understand how this works. But I still don't understand how you get `1/5` from `1/5`. How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| a tags=javascript,fractions,algorithm |>\n<code>\nfunction simplify(fraction) {\n  const [numerator, denominator] = fraction.split('/').map(Number);\n  const [numerator2, denominator2] = fraction.split('/').map(Number);\n  if (numerator === numerator2 && denominator === denominator2) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(simplify('1/5'));\nconsole.log(simplify('1/6'));\nconsole.log(simplify('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I think I understand how this works. But I still don't understand how you get `1/5` from `1/5`. How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(fraction) {\n  const [numerator, denominator] = fraction.split('/').map(Number);\n  const [numerator2, denominator2] = fraction.split('/').map(Number);\n  if (numerator === numerator2 && denominator === denominator2) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(simplify('1/5'));\nconsole.log(simplify('1/6'));\nconsole.log(simplify('7/10'));</code>\n<|/ a tags=javascript,fractions,algorithm |>\n<| c |>\nThanks for your answer. I think I understand how this works. But I still don't understand how you get `1/5` from `1/5`. How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction simplify(fraction) {\n  const [numerator, denominator] = fraction.split('/').map(Number);\n  const [numerator2, denominator2] = fraction.split('/').map(Number);\n  if (numerator === numerator2 && denominator === denominator2) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(simplify('1/5'));\nconsole.log(simplify('1/6'));\nconsole.log(simplify('7/10'));</code>\n<|/ a tags=javascript,fractions,algorithm |>\n<| c |>\nThanks for your answer. I think I understand how this works. But I still don't understand how you get `1/5` from `1/5`. How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| c |>\nI used the example you gave in your question. `1/5` is `1/5` because `1/5` is `1/5`. So `1/5` is `1/5` because `1/5` is `1/5`.\n<|/ c |>\n<| c |>\nI see. But how do you know that `1/5` is `1/5`? How do you know that `1/5` is `1/5`?\n<|/ c |>\n<| a tags=javascript,fractions,algorithm |>\n<code>\nfunction simplify(fraction) {\n  const [numerator, denominator] = fraction.split('/').map(Number);\n  const [numerator2, denominator2] = fraction.split('/').map(Number);\n  if (numerator === numerator2 && denominator === denominator2) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(simplify('1/5'));\nconsole.log(simplify('1/6'));\nconsole.log(simplify('7/10'));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I think I understand how this works. But I still don't understand how you get ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((sum, digit) => sum + +digit, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((v) => nums[v]);\n};\n\n// TESTS\n\nconst tests = [\n  ['holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]',\n   holyOrderByPoint([1, 11, -1, -11, -12])],\n  ['holyOrderByPoint([]) == []',\n   holyOrderByPoint([])],\n  ['holyOrderByPoint([-1, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-1, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderByPoint([-100, -10, -20, -30, -40, -5]) == [-5, -10, -20, -30, -40, -1]',\n   holyOrderByPoint([-100, -10, -20, -30, -40, -5])],\n  ['holyOrderBy", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  evenFilter([15, -73, 14, -15]) => 1 \n  evenFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst evenFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  sum([1, 2, 3, 4]) => 10\n  sum([1, -7, 3, -3]) => 0\n  */\nconst sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  product([1, 2, 3, 4]) => 24\n  product([1, -7, 3, -3]) => -27\n  */\nconst product = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  max([10, 5, 3, 2]) => 10\n  max([10, 5, 3, -2]) => 10\n  */\nconst max = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  min([10, 5, 3, 2]) => 2\n  min([10, 5, 3, -2]) => -2\n  */\nconst min = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array.\n  For example:\n  sum([10, 5, 3, 2]) => 15\n  sum([10, 5, 3, -2]) => -5\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the average of the elements in the array.\n  For example:\n  average([10, 5, 3, 2]) => 5\n  average([10, 5, 3, -2]) => -3\n  */\nconst average = (nums) => {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  average = sum / nums.length;\n  return average;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([10, 5, 3, 2]) => [10, 2]\n  minMax([10, 5, 3, -2]) => [-2, -10]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n};\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| c |>\n, please check my solution for more details.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.filter((x) => x % 3 === 0).length;\n}\n\nconsole.log(catchMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nThis solution does not work for all test cases. Please check my solution for more details.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction catchMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const planetOrbits = planets.map((planet2) => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const orbitsBetweenPlanets = orbits.map((orbits) => {\n    const planetsBetweenPlanets = orbits.map((orbit) => {\n      const planetsBetweenPlanets = orbits.map((orbit2) => {\n        const distance = planetOrbitDistance(planet, planet2);\n        return distance;\n      });\n      return planetsBetweenPlanets;\n    });\n    return planetsBetweenPlanets;\n  });\n  const planetsBetweenPlanets = orbitsBetweenPlanets.map((orbitsBetweenPlanets) => {\n    const planetsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n      return a - b;\n    });\n    return planetsBetweenPlanetsSorted;\n  });\n  const planetsBetweenPlanetsSorted = planetsBetweenPlanets.sort((a, b) => {\n    return a - b;\n  });\n  return planetsBetweenPlanetsSorted;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const planetOrbits = planets.map((planet2) => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const orbitsBetweenPlanets = orbits.map((orbits) => {\n    const planetsBetweenPlanets = orbits.map((orbit) => {\n      const planetsBetweenPlanets = orbits.map((orbit2) => {\n        const distance = planetOrbitDistance(planet, planet2);\n        return distance;\n      });\n      return planetsBetweenPlanets;\n    });\n    return planetsBetweenPlanets;\n  });\n  const planetsBetweenPlanets = orbitsBetweenPlanets.map((orbitsBetweenPlanets) => {\n    const planetsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n      return a - b;\n    });\n    return planetsBetweenPlanetsSorted;\n  });\n  const planetsBetweenPlanetsSorted = planetsBetweenPlanets.sort((a, b) => {\n    return a - b;\n  });\n  return planetsBetweenPlanetsSorted;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const planetOrbits = planets.map((planet2) => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const orbitsBetweenPlanets = orbits.map((orbits) => {\n    const planetsBetweenPlanets = orbits.map((orbit) => {\n      const planetsBetweenPlanets = orbits.map((orbit2) => {\n        const distance = planetOrbitDistance(planet, planet2);\n        return distance;\n      });\n      return planetsBetweenPlanets;\n    });\n    return planetsBetweenPlanets;\n  });\n  const planetsBetweenPlanets = orbitsBetweenPlanets.map((orbitsBetweenPlanets) => {\n    const planetsBetweenPlanetsSorted = orbitsBetweenPlanets.sort((a, b) => {\n      return a - b;\n    });\n    return planetsBetweenPlanetsSorted;\n  });\n  const planetsBetweenPlanetsSorted = planetsBetweenPlanets.sort((a, b) => {\n    return a - b;\n  });\n  return planetsBetweenPlanets", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let newWord = lst[i];\n    let newLength = newWord.length;\n    let newIndex = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (newLength > lst[j].length) {\n        newLength = lst[j].length;\n        newIndex = j;\n      }\n    }\n    newList.push(newWord.slice(0, newLength));\n    newList[newIndex] = newList[newIndex].concat(newWord.slice(newLength));\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let newWord = lst[i];\n    let newLength = newWord.length;\n    let newIndex = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (newLength > lst[j].length) {\n        newLength = lst[j].length;\n        newIndex = j;\n      }\n    }\n    newList.push(newWord.slice(0, newLength));\n    newList[newIndex] = newList[newIndex].concat(newWord.slice(newLength));\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let newWord = lst[i];\n    let newLength = newWord.length;\n    let newIndex = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (newLength > lst[j].length) {\n        newLength = lst[j].length;\n        newIndex = j;\n      }\n    }\n    newList.push(newWord.slice(0, newLength));\n    newList[newIndex] = newList[newIndex].concat(newWord.slice(newLength));\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let newWord = lst[i];\n    let newLength = newWord.length;\n    let newIndex = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (newLength > lst[j].length) {\n        newLength = lst[j].length;\n        newIndex = j;\n      }\n    }\n    newList.push(newWord.slice(0, newLength));\n    newList[newIndex] = newList[newIndex].concat(newWord.slice(newLength));\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let newWord = lst[i];\n    let newLength = newWord.length;\n    let newIndex = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (newLength > lst[j].length) {\n        newLength = lst[j].length;\n        newIndex = j;\n      }\n    }\n    newList.push(newWord.slice(0, newLength));\n    newList[newIndex] = newList[newIndex].concat(newWord.slice(newLength));\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n  '0'\n  >>> bowedStringedInstrumentFailure(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentFailure = (n) => {\n  const str = Array.from({ length: n }, (_, i) => i + 1).join(' ');\n  return str.replace(/^ /, '');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentFailure(0)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, val) => acc + val, 0);\n  const squareSum = lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n  return sum - squareSum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const product = lst.reduce((acc, val) => acc * val, 1);\n  const squareProduct = lst.reduce((acc, val) => acc * Math.pow(val, 2), 1);\n  return product - squareProduct;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, val) => acc + val, 0);\n  const squareSum = lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n  return sum - squareSum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const product = lst.reduce((acc, val) => acc * val, 1);\n  const squareProduct = lst.reduce((acc, val) => acc * Math.pow(val, 2), 1);\n  return product - squareProduct;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, val) => acc + val, 0);\n  const squareSum = lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n  return sum - squareSum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const product = lst.reduce((acc, val) => acc * val, 1);\n  const squareProduct = lst.reduce((acc, val) => acc * Math.pow(val, 2), 1);\n  return product - squareProduct;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, val) => acc + val, 0);\n  const squareSum = lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n  return sum - squareSum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const product = lst.reduce((acc, val) => acc * val, 1);\n  const squareProduct = lst.reduce((acc, val) => acc * Math.pow(val, 2), 1);\n  return product - squareProduct;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, val) => acc + val, 0);\n  const squareSum = lst.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n  return sum - squareSum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const product = lst.reduce((acc, val) => acc * val, 1);\n  const squareProduct = lst.reduce((acc, val) => acc * Math.pow(val, 2), 1);\n  return product - squareProduct;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return difference;\n};\n\nconst compareGameAndGuess = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess2 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess3 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess4 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess5 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess6 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess7 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess8 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess9 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess10 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - gameScore;\n  return gameScores.map((score, index) => {\n    if (score === guessesScores[index]) {\n      return 0;\n    } else {\n      return Math.abs(difference);\n    }\n  });\n};\n\nconst compareGameAndGuess11 = (game, guess) => {\n  const gameScores = game.sort((a, b) => b - a);\n  const guessesScores = guess.sort((a, b) => b - a);\n  const gameScore = gameScores.reduce((a, b) => a + b, 0);\n  const guessesScore = guessesScores.reduce((a, b) => a + b, 0);\n  const difference = guessesScore - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const firstWord = a.split('');\n  const secondWord = b.split('');\n  const firstWordLength = firstWord.length;\n  const secondWordLength = secondWord.length;\n  let isCycPattern = true;\n  for (let i = 0; i < firstWordLength; i++) {\n    if (firstWord[i]!== secondWord[i]) {\n      isCycPattern = false;\n      break;\n    }\n  }\n  for (let i = 0; i < secondWordLength; i++) {\n    if (firstWord[firstWordLength - 1 - i]!== secondWord[i]) {\n      isCycPattern = false;\n      break;\n    }\n  }\n  return isCycPattern;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  subStringCheck(\"aba\",\"ab\") => false\n  subStringCheck(\"efe\",\"efe\") => false\n  subStringCheck(\"him\",\"him\") => false\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  subStringCheck(\"efe\",\"efe\") => true\n  subStringCheck(\"him\",\"him\") => true\n  subStringCheck(\"aba\",\"aba\") => true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length\n  return [evenCount, oddCount]\n}\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenDigits = num.toString().split('')\n  const oddDigits = num.toString().split('').reverse().join('')\n  const evenCount = evenDigits.filter(x => x % 2 === 0).length\n  const oddCount = oddDigits.filter(x => x % 2 === 1).length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let numStr = number.toString();\n  let numLength = numStr.length;\n  let power;\n  let romanNum;\n\n  for (let i = 0; i < numLength; i += 1) {\n    power = numLength - 1 - i;\n    romanNum = numStr.charAt(i) * Math.pow(10, power);\n    roman += romanNum;\n  }\n\n  return roman;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restrictions: only 'i', 'x', and 'v' are valid\n\n  Examples:\n  >>> romanToInt('c') === 100\n  >>> romanToInt('xix') === 958\n  >>> romanToInt('vi') === 12\n  >>> romanToInt('vii') === 13\n  >>> romanToInt('ix') === 958\n  >>> romanToInt('l') === 37\n  >>> romanToInt('viii') === 13\n  >>> romanToInt('viiii') === 13\n  >>> romanToInt('viiix') === 13\n  >>> romanToInt('lxxxvi') === 958\n  >>> romanToInt('c') === 100\n  >>> romanToInt('') === 0\n  */\nconst romanToInt = (roman) => {\n  let int = 0;\n  let romanNum = roman.trim();\n\n  if (romanNum === 'i') {\n    int = I;\n  } else if (romanNum === 'x') {\n    int = X;\n  } else if (romanNum === 'v') {\n    int = V;\n  } else {\n    romanNum = romanNum.toUpperCase();\n\n    if (romanNum === 'I' || romanNum === 'X' || romanNum === 'V') {\n      int = romanNum.charCodeAt(0);\n    } else {\n      romanNum = romanNum.trim();\n\n      if (romanNum.length === 3) {\n        int = III;\n      } else if (romanNum.length === 4) {\n        int = IV;\n      } else if (romanNum.length === 5) {\n        int = VI;\n      } else if (romanNum.length === 6) {\n        int = VII;\n      } else if (romanNum.length === 7) {\n        int = IX;\n      } else if (romanNum.length === 8) {\n        int = XV;\n      } else if (romanNum.length === 9) {\n        int = XVI;\n      } else if (romanNum.length === 10) {\n        int = XVII;\n      } else if (romanNum.length === 11) {\n        int = XIX;\n      } else if (romanNum.length === 12) {\n        int = XXV;\n      } else if (romanNum.length === 13) {\n        int = XXVI;\n      } else if (romanNum.length === 14) {\n        int = XXVII;\n      } else if (romanNum.length === 15) {\n        int = XXIX;\n      } else if (romanNum.length === 16) {\n        int = XXXV;\n      } else if (romanNum.length === 17) {\n        int = XXXVI;\n      } else if (romanNum.length === 18) {\n        int = XXXVII;\n      } else if (romanNum.length === 19) {\n        int = XXXIX;\n      } else if (romanNum.length === 20) {\n        int = XXVIII;\n      } else if (romanNum.length === 21) {\n        int = XXIXI;\n      } else if (romanNum.length === 22) {\n        int = XXXVIII;\n      } else if (romanNum.length === 23) {\n        int = XXXIXI;\n      } else if (romanNum.length === 24) {\n        int = XXVIIII;\n      } else if (romanNum.length === 25) {\n        int = XXIXII;\n      } else if (romanNum.length === 26) {\n        int = XXXVIIII;\n      } else if (romanNum.length === 27) {\n        int = XXXIXII;\n      } else if (romanNum.length === 28) {\n        int = XXXVIIIIV;\n      } else if (romanNum.length === 29) {\n        int = XXXIXIII;\n      } else if (romanNum.length === 30) {\n        int = XXXIXIV;\n      } else if (romanNum.length === 31) {\n        int = XXVIIIII;\n      } else if (romanNum.length === 32) {\n        int = XXIIXII;\n      } else if (romanNum.length === 33) {\n        int = XXIIXX;\n      } else if (romanNum.length === 34) {\n        int = XXIIXXX;\n      } else if (romanNum.length === 35) {\n        int = XXIIXXV;\n      } else if (romanNum.length === 36) {\n        int = XXIIXXXV;\n      } else if (romanNum.length === 37) {\n        int = XXIIXXVI;\n      } else if (romanNum.length === 38) {\n        int = XXIIXXXVI;\n      } else if (romanNum.length === 39) {\n        int = XXIIXXVII;\n      } else if (romanNum.length === 40) {\n        int = XXIIXXXVII;\n      } else if (romanNum.length === 41) {\n        int = XXIIXXVIII;\n      } else if (romanNum.length === 42) {\n        int = XXIIXXXVIII;\n      } else if (romanNum.length === 43) {\n        int = XXIIXXVIIII;\n      } else if (romanNum.length === 44) {\n        int = XXIIXXXVIIII;\n      } else if (romanNum.length === 45) {\n        int = XXIIXXVIIIII;\n      } else if (romanNum.length === 46) {\n        int = XXIIXXXVIIIII;\n      } else if (romanNum.length === 47) {\n        int = XXIIXXVIIIIII;\n      } else if (romanNum.length === 48) {\n        int = XXIIXXXVIIIIII;\n      } else if (romanNum.length === 49) {\n        int = XXIIXXVIIIIIII;\n      } else if (romanNum.length === 50) {\n        int = XXIIXXXVIIIIIII;\n      } else if (romanNum.length === 51) {\n        int = XXIIXXVIIIIIIII;\n      } else if (romanNum.length === 52) {\n        int = XXIIXXXVIIIIIIII;\n      } else if (romanNum.length === 53) {\n        int = XXIIXXVIIIIIIIII;\n      } else if (romanNum.length === 54) {\n        int = XXIIXXXVIIIIIIII;\n      } else if (romanNum.length === 55) {\n        int = XXIIXXVIIIIIIIII;\n      } else if (romanNum.length === 56) {\n        int = XXIIXXXVIIIIIIII;\n      } else if (romanNum.length === 57) {\n        int = XXIIXXVIIIIIIIII;\n      } else if (romanNum.length === 58) {\n        int = XXIIXXXVIIIIIIIII;\n      } else if (romanNum.length === 59) {\n        int = XXIIXXVIIIIIIIIII;\n      } else if (romanNum.length === 60) {\n        int = XXIIXXXVIIIIIIIIII;\n      } else if (romanNum.length === 61) {\n        int = XXIIXXVIIIIIIIIIII;\n      } else if (romanNum.length === 62) {\n        int = XXIIXXXVIIIIIIIIII;\n      } else if (romanNum.length === 63) {\n        int = XXIIXXVIIIIIIIIIII;\n      } else if (romanNum.length === 64) {\n        int = XXIIXXXVIIIIIIIIII;\n      } else if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMin([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  receiveMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst receiveMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  receiveMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMaxUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  receiveMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst receiveMaxUnique = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of unique\n  characters. If multiple strings have minimum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  receiveMinUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveMinUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  receiveMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveMinUnique = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count < minCount) {\n      minCount = count;\n      minWord = words[i];\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words which contain all characters in\n  the given list. If multiple words have all characters, return all words which come\n  first in lexicographical order.\n\n  receiveAll([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveAll([\"name\", \"enam\", \"game\"]) === \"game\"\n  receiveAll([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveAll = (words) => {\n  let allCount = 0;\n  let allWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      allWords.push(words[i]);\n      allCount++;\n    }\n  }\n  return allWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words which contain all characters in\n  the given list. If multiple words have all characters, return all words which come\n  first in lexicographical order.\n\n  receiveAllUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveAllUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  receiveAllUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveAllUnique = (words) => {\n  let allCount = 0;\n  let allWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      allWords.push(words[i]);\n      allCount++;\n    }\n  }\n  return allWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words which contain all characters in\n  the given list. If multiple words have all characters, return all words which come\n  first in lexicographical order.\n\n  receiveAllUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveAllUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n  receiveAllUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveAllUnique = (words) => {\n  let allCount = 0;\n  let allWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === words[i].length) {\n      allWords.push(words[i]);\n      allCount++;\n    }\n  }\n  return allWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words which contain all characters in\n  the given list. If multiple words have all characters, return all words which come\n  first in lexicographical order.\n\n  receiveAllUnique([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveAllUnique([\"name\", \"enam\", \"game\"]) === \"game\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - remaining;\n  const feeden = need - carrots;\n  return [feeden, carrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - remaining;\n  const feeden = need - carrots;\n  return [feeden, carrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - remaining;\n  const feeden = need - carrots;\n  return [feeden, carrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - remaining;\n  const feeden = need - carrots;\n  return [feeden, carrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = number - remaining;\n  const feeden = need - carrots;\n  return [feeden, carrots];\n};\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharactersWithCase('xyzXYZ')\n  3\n  >>> considerClearcutCharactersWithCase('Jerry')\n  4\n  */\nconst considerClearcutCharactersWithCase = (string) => {\n  const characters = string.toLowerCase().split('');\n  return characters.length;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const result = [];\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const currentOperator = operatorList[i];\n    const currentOperand = operandList[i];\n\n    if (currentOperator === '+') {\n      result.push(currentOperand + currentOperand);\n    } else if (currentOperator === '-') {\n      result.push(currentOperand - currentOperand);\n    } else if (currentOperator === '*') {\n      result.push(currentOperand * currentOperand);\n    } else if (currentOperator === '/') {\n      result.push(currentOperand / currentOperand);\n    } else if (currentOperator === '**') {\n      result.push(Math.pow(currentOperand, currentOperand));\n    }\n  }\n\n  return result.reduce((a, b) => a + b);\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const result = [];\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const currentOperator = operatorList[i];\n    const currentOperand = operandList[i];\n\n    if (currentOperator === '+') {\n      result.push(currentOperand + currentOperand);\n    } else if (currentOperator === '-') {\n      result.push(currentOperand - currentOperand);\n    } else if (currentOperator === '*') {\n      result.push(currentOperand * currentOperand);\n    } else if (currentOperator === '/') {\n      result.push(currentOperand / currentOperand);\n    } else if (currentOperator === '**') {\n      result.push(Math.pow(currentOperand, currentOperand));\n    }\n  }\n\n  return result.reduce((a, b) => a + b);\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const result = [];\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const currentOperator = operatorList[i];\n    const currentOperand = operandList[i];\n\n    if (currentOperator === '+') {\n      result.push(currentOperand + currentOperand);\n    } else if (currentOperator === '-') {\n      result.push(currentOperand - currentOperand);\n    } else if (currentOperator === '*') {\n      result.push(currentOperand * currentOperand);\n    } else if (currentOperator === '/') {\n      result.push(currentOperand / currentOperand);\n    } else if (currentOperator === '**') {\n      result.push(Math.pow(currentOperand, currentOperand));\n    }\n  }\n\n  return result.reduce((a, b) => a + b);\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  const result = [];\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n\n  for (let i = 0; i < operatorLength; i++) {\n    const currentOperator = operatorList[i];\n    const currentOperand = operandList[i];\n\n    if (currentOperator === '+') {\n      result.push(currentOperand + currentOperand);\n    } else if (currentOperator === '-') {\n      result.push(currentOperand - currentOperand);\n    } else if (currentOperator === '*') {\n      result.push(currentOperand * currentOperand);\n    } else if (currentOperator === '/') {\n      result.push(currentOperand / currentOperand);\n    } else if (currentOperator === '**') {\n      result.push(Math.pow(currentOperand, currentOperand));\n    }\n  }\n\n  return result.reduce((a, b) => a + b);\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i).toUpperCase();\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Your task is to find and print all substrings of length 3 that \n  are palindromes.\n  Examples\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  palindrome(\"abba\") = \"abba\"\n  p", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (text === '') return null\n  const md5Hash = crypto.createHash('md5')\n  md5Hash.update(text)\n  return md5Hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha1 = (text) => {\n  if (text === '') return null\n  const sha1Hash = crypto.createHash('sha1')\n  sha1Hash.update(text)\n  return sha1Hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha256 = (text) => {\n  if (text === '') return null\n  const sha256Hash = crypto.createHash('sha256')\n  sha256Hash.update(text)\n  return sha256Hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToSha512 = (text) => {\n  if (text === '') return null\n  const sha512Hash = crypto.createHash('sha512')\n  sha512Hash.update(text)\n  return sha512Hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToRip('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToRip = (text) => {\n  if (text === '') return null\n  const ripemd160Hash = crypto.createHash('ripemd160')\n  ripemd160Hash.update(text)\n  return ripemd160Hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32 = (text) => {\n  if (text === '') return null\n  const crc32Hash = crypto.createHash('crc32')\n  crc32Hash.update(text)\n  return crc32Hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32c hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32c('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32c = (text) => {\n  if (text === '') return null\n  const crc32cHash = crypto.createHash('crc32c')\n  crc32cHash.update(text)\n  return crc32cHash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32b hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32b('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32b = (text) => {\n  if (text === '') return null\n  const crc32bHash = crypto.createHash('crc32b')\n  crc32bHash.update(text)\n  return crc32bHash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32u hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32u('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32u = (text) => {\n  if (text === '') return null\n  const crc32uHash = crypto.createHash('crc32u')\n  crc32uHash.update(text)\n  return crc32uHash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32d hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32d('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32d = (text) => {\n  if (text === '') return null\n  const crc32dHash = crypto.createHash('crc32d')\n  crc32dHash.update(text)\n  return crc32dHash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32c hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32c('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32c = (text) => {\n  if (text === '') return null\n  const crc32cHash = crypto.createHash('crc32c')\n  crc32cHash.update(text)\n  return crc32cHash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32b hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToCrc32b('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToCrc32b = (text) => {\n  if (text === '') return null\n  const crc32bHash = crypto.createHash('crc32b')\n  crc32bHash.update(text)\n  return crc32bHash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its crc32u hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentTo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const evenDigits = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      evenDigits.push(i);\n    }\n  }\n  return evenDigits;\n};\n\n/*\n  Given a positive integer n, return the sum of all its positive divisors.\n\n  For example:\n  renderSum(12) => [2, 3, 5, 7]\n  renderSum(17) => [3, 7, 11]\n  renderSum(19) => [3, 7, 11, 19]\n  renderSum(25) => [3, 7]\n  renderSum(33) => [3, 7]\n  renderSum(100) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(101) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n  renderSum(102) => [2, 3, 5, 7, 11, 13, 17, 19]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|') {\n      return 1;\n    }\n  });\n  return music_array2;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.|", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let pos = 0;\n  while (pos < string.length) {\n    if (string.substr(pos, substring.length) === substring) {\n      count++;\n      pos += substring.length;\n    } else {\n      pos++;\n    }\n  }\n  return count;\n};\n\n/**\n * Get the first element of an array\n * @param {Array} arr\n * @returns {*}\n */\nconst first = (arr) => {\n  return arr[0];\n};\n\n/**\n * Get the last element of an array\n * @param {Array} arr\n * @returns {*}\n */\nconst last = (arr) => {\n  return arr[arr.length - 1];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nth = (arr, n) => {\n  return arr[n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast2 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast3 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast4 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast5 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast6 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast7 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast8 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast9 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast10 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast11 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast12 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast13 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast14 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast15 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast16 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast17 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast18 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast19 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast20 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast21 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast22 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast23 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast24 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast25 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast26 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast27 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast28 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast29 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast30 = (arr, n) => {\n  return arr[arr.length - 1 - n];\n};\n\n/**\n * Get the nth element of an array\n * @param {Array} arr\n * @param {number} n\n * @returns {*}\n */\nconst nthLast3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return -1;\n    }\n    if (b === 'zero') {\n      return 1;\n    }\n    if (a === 'one') {\n      return -1;\n    }\n    if (b === 'one') {\n      return 1;\n    }\n    if (a === 'two') {\n      return -1;\n    }\n    if (b === 'two') {\n      return 1;\n    }\n    if (a === 'three') {\n      return -1;\n    }\n    if (b === 'three') {\n      return 1;\n    }\n    if (a === 'four') {\n      return -1;\n    }\n    if (b === 'four') {\n      return 1;\n    }\n    if (a === 'five') {\n      return -1;\n    }\n    if (b === 'five') {\n      return 1;\n    }\n    if (a ==='six') {\n      return -1;\n    }\n    if (b ==='six') {\n      return 1;\n    }\n    if (a ==='seven') {\n      return -1;\n    }\n    if (b ==='seven') {\n      return 1;\n    }\n    if (a === 'eight') {\n      return -1;\n    }\n    if (b === 'eight') {\n      return 1;\n    }\n    if (a === 'nine') {\n      return -1;\n    }\n    if (b === 'nine') {\n      return 1;\n    }\n  });\n  return sortedNumberArray.join(' ');\n};\n\n/**\n * Return the string with numbers sorted from smallest to largest\n * >>> sortNumbers('three one five')\n * 'one three five'\n */\nconst sortNumbersReverse = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return 1;\n    }\n    if (b === 'zero') {\n      return -1;\n    }\n    if (a === 'one') {\n      return 1;\n    }\n    if (b === 'one') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumberArray.join(' ');\n};\n\n/**\n * Return the string with numbers sorted from smallest to largest\n * >>> sortNumbers('three one five')\n * 'one three five'\n */\nconst sortNumbersReversed = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return 1;\n    }\n    if (b === 'zero') {\n      return -1;\n    }\n    if (a === 'one') {\n      return 1;\n    }\n    if (b === 'one') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumberArray.join(' ');\n};\n\n/**\n * Return the string with numbers sorted from smallest to largest\n * >>> sortNumbers('three one five')\n * 'one three five'\n */\nconst sortNumbersReversedString = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return 1;\n    }\n    if (b === 'zero') {\n      return -1;\n    }\n    if (a === 'one') {\n      return 1;\n    }\n    if (b === 'one') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumberArray.join(' ');\n};\n\n/**\n * Return the string with numbers sorted from smallest to largest\n * >>> sortNumbers('three one five')\n * 'one three five'\n */\nconst sortNumbersReversedStringReversed = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return 1;\n    }\n    if (b === 'zero') {\n      return -1;\n    }\n    if (a === 'one') {\n      return 1;\n    }\n    if (b === 'one') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseInt(integerPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.')\n  return parseFloat(decimalPart)\n}\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  return [smallest, largest];\n};\n\n/**\n * Given a chemical element (as a string), return its corresponding chemical symbol (as a string).\n * >>> getChemicalSymbolFromChemicalElement('C')\n  'C'\n */\nconst getChemicalSymbolFromChemicalElement = (element) => {\n  const chemicalElementToSymbol = {\n    'H': 'H',\n    'He': 'He',\n    'Li': 'Li',\n    'Be': 'Be',\n    'B': 'B',\n    'C': 'C',\n    'N': 'N',\n    'O': 'O',\n    'F': 'F',\n    'Ne': 'Ne',\n    'Na': 'Na',\n    'Mg': 'Mg',\n    'Al': 'Al',\n    'Si': 'Si',\n    'P': 'P',\n    'S': 'S',\n    'Cl': 'Cl',\n    'Ar': 'Ar',\n    'K': 'K',\n    'Ca': 'Ca',\n    'Sc': 'Sc',\n    'Ti': 'Ti',\n    'V': 'V',\n    'Cr': 'Cr',\n    'Mn': 'Mn',\n    'Fe': 'Fe',\n    'Co': 'Co',\n    'Ni': 'Ni',\n    'Cu': 'Cu',\n    'Zn': 'Zn',\n    'Ga': 'Ga',\n    'Ge': 'Ge',\n    'As': 'As',\n    'Se': 'Se',\n    'Br': 'Br',\n    'Kr': 'Kr',\n    'Rb': 'Rb',\n    'Sr': 'Sr',\n    'Y': 'Y',\n    'Zr': 'Zr',\n    'Nb': 'Nb',\n    'Mo': 'Mo',\n    'Tc': 'Tc',\n    'Ru': 'Ru',\n    'Rh': 'Rh',\n    'Pd': 'Pd',\n    'Ag': 'Ag',\n    'Cd': 'Cd',\n    'In': 'In',\n    'Sn': 'Sn',\n    'Sb': 'Sb',\n    'Te': 'Te',\n    'I': 'I',\n    'Xe': 'Xe',\n    'Cs': 'Cs',\n    'Ba': 'Ba',\n    'La': 'La',\n    'Ce': 'Ce',\n    'Pr': 'Pr',\n    'Nd': 'Nd',\n    'Pm': 'Pm',\n    'Sm': 'Sm',\n    'Eu': 'Eu',\n    'Gd': 'Gd',\n    'Tb': 'Tb',\n    'Dy': 'Dy',\n    'Ho': 'Ho',\n    'Er': 'Er',\n    'Tm': 'Tm',\n    'Yb': 'Yb',\n    'Lu': 'Lu',\n    'Hf': 'Hf',\n    'Ta': 'Ta',\n    'W': 'W',\n    'Re': 'Re',\n    'Os': 'Os',\n    'Ir': 'Ir',\n    'Pt': 'Pt',\n    'Au': 'Au',\n    'Hg': 'Hg',\n    'Tl': 'Tl',\n    'Pb': 'Pb',\n    'Bi': 'Bi',\n    'Po': 'Po',\n    'At': 'At',\n    'Rn': 'Rn',\n    'Fr': 'Fr',\n    'Ra': 'Ra',\n    'Ac': 'Ac',\n    'Th': 'Th',\n    'Pa': 'Pa',\n    'U': 'U',\n    'Np': 'Np',\n    'Pu': 'Pu',\n    'Am': 'Am',\n    'Cm': 'Cm',\n    'Bk': 'Bk',\n    'Cf': 'Cf',\n    'Es': 'Es',\n    'Fm': 'Fm',\n    'Md': 'Md',\n    'No': 'No',\n    'Lr': 'Lr',\n    'Rf': 'Rf',\n    'Db': 'Db',\n    'Sg': 'Sg',\n    'Bh': 'Bh',\n    'Hs': 'Hs',\n    'Mt': 'Mt',\n    'Ds': 'Ds',\n    'Rg': 'Rg',\n    'Cn': 'Cn',\n    'Uut': 'Uut',\n    'Uuq': 'Uuq',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n    'Uut': 'Uut',\n    'Uup': 'Uup',\n    'Uuh': 'Uuh',\n    'Uus': 'Uus',\n    'Uuo': 'Uuo',\n    'Uuj': 'Uuj',\n    'Uuk': 'Uuk',\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = (range === 0)? 0 : (range / max);\n  return numbers.map((num) => num * scale);\n};\n\n/**\n * Given a number and a unit, return the number in that unit\n * >>> unitToNumber('1m','m')\n  1\n */\nconst unitToNumber = (number, unit) => {\n  const numbers = number.split('.');\n  const unit = unit.trim();\n  const isPercent = unit === '%';\n  const isUnitless = unit === '' || unit === 'px' || unit ==='rem' || unit === 'vh' || unit === 'vw';\n  const isNumber =!isNaN(numbers[0]);\n  const isUnitlessNumber =!isNaN(numbers[1]);\n  const isUnitlessPercent =!isUnitless && isPercent;\n  const isUnitlessUnitless =!isUnitless &&!isUnitlessNumber &&!isUnitlessPercent;\n  const isUnitlessUnit = unit === '' || unit === 'px' || unit ==='rem' || unit === 'vh' || unit === 'vw';\n  const isUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessPercent;\n  const isUnitlessUnitlessNumber =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnit;\n  const isUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitless;\n  const isUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitless;\n  const isUnitlessUnitlessUnit = unit === '' || unit === 'px' || unit ==='rem' || unit === 'vh' || unit === 'vw';\n  const isUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitless;\n  const isUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessNumber =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnit = unit === '' || unit === 'px' || unit ==='rem' || unit === 'vh' || unit === 'vw';\n  const isUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessNumber =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnit = unit === '' || unit === 'px' || unit ==='rem' || unit === 'vh' || unit === 'vw';\n  const isUnitlessUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessNumber =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitless =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessNumber =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessNumber =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitless;\n  const isUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessUnitlessPercent =!isUnitless &&!isUnitlessUnit &&!isUnitlessUnitlessUnitless", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/* Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/* Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i)\n  }\n  return length\n}\n\n/* Return string with given length from given string\n  >>> strlen('abc', 2)\n  'ab'\n  >>> strlen('abc', 3)\n  'abc'\n  */\nconst strlenFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFrom('abc', 2)\n  'ab'\n  >>> strlenFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given length from given string\n  >>> strlenFromFrom('abc', 2)\n  'ab'\n  >>> strlenFromFrom('abc', 3)\n  'abc'\n  */\nconst strlenFromFromFrom = (string, length) => {\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += string[i]\n  }\n  return result\n}\n\n/* Return string with given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallDivisor(15)\n  3\n  */\nconst smallDivisor = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);\n    }\n  });\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const uniqueNumbers = [];\n  numbers.forEach((num) => {\n    if (uniqueNumbers.indexOf(num) === -1) {\n      uniqueNumbers.push(num);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value.\n  >>> impudentAscii('Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAscii = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('');\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zeros.\n  >>> impudentAscii('0Hello')\n  '686974207468652062756c6c277320657965'\n  */\nconst impudentAsciiNoLeadingZeros = (string) => {\n  return string.split('').map(char => char.charCodeAt(0)).join('').trim();\n};\n\n/* Given a string, return a new string with each letter replaced with its ASCII value but without leading zer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring in a given order.\n  >>> filterBySubstringOrder([], 'a', 0)\n  []\n  >>> filterBySubstringOrder(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc']\n  >>> filterBySubstringOrder(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['array']\n  */\nconst filterBySubstringOrder = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].startsWith(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filterByNotSubstringOrder([], 'a', 0)\n  []\n  >>> filterByNotSubstringOrder(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc', 'bcd', 'cde']\n  >>> filterByNotSubstringOrder(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotSubstringOrder = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].startsWith(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring in a given order.\n  >>> filterBySubstringOrderAndPrefix([], 'a', 0)\n  []\n  >>> filterBySubstringOrderAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc']\n  >>> filterBySubstringOrderAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['array']\n  */\nconst filterBySubstringOrderAndPrefix = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].startsWith(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filterByNotSubstringOrderAndPrefix([], 'a', 0)\n  []\n  >>> filterByNotSubstringOrderAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc', 'bcd', 'cde']\n  >>> filterByNotSubstringOrderAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotSubstringOrderAndPrefix = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].startsWith(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring in a given order.\n  >>> filterBySubstringOrderAndSuffix([], 'a', 0)\n  []\n  >>> filterBySubstringOrderAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc']\n  >>> filterBySubstringOrderAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['array']\n  */\nconst filterBySubstringOrderAndSuffix = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].endsWith(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filterByNotSubstringOrderAndSuffix([], 'a', 0)\n  []\n  >>> filterByNotSubstringOrderAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc', 'bcd', 'cde']\n  >>> filterByNotSubstringOrderAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByNotSubstringOrderAndSuffix = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].endsWith(substring)) {\n      continue;\n    }\n    filtered.push(strings[i]);\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring in a given order.\n  >>> filterBySubstringOrderAndPrefixAndSuffix([], 'a', 0)\n  []\n  >>> filterBySubstringOrderAndPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc']\n  >>> filterBySubstringOrderAndPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['array']\n  */\nconst filterBySubstringOrderAndPrefixAndSuffix = (strings, substring, order) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring) && strings[i].startsWith(substring) && strings[i].endsWith(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filterByNotSubstringOrderAndPrefixAndSuffix([], 'a', 0)\n  []", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, 6]\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 3, 9, 123, 1]\n  */\nconst catchNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> catchEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> catchEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst catchEvenOrOdd = (l) => {\n  return l.filter((n) => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or od", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint;\n  let maxCoefficient;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      maxCoefficient = xs[i];\n      zeroPoint = i;\n    }\n  }\n  if (maxCoefficient === 0) {\n    return zeroPoint;\n  }\n  return findZeroRec(maxCoefficient, xs, zeroPoint);\n}\n\n/*\n  findZeroRec finds zero point of polynomial with coefficients xs at point x.\n  It recursively calls itself until it finds a zero point.\n  It returns zero point if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeroRec([-6, 11, -6, 1])\n  1.0\n  >>> findZeroRec([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeroRec = (maxCoefficient, xs, zeroPoint) => {\n  if (maxCoefficient === 0) {\n    return zeroPoint;\n  }\n  if (xs.length === 1) {\n    if (xs[0] === 0) {\n      return zeroPoint;\n    }\n    return undefined;\n  }\n  const zeroPointRec = findZeroRec(maxCoefficient - xs[0], xs, zeroPoint + 1);\n  if (zeroPointRec!== undefined) {\n    return zeroPointRec;\n  }\n  return findZeroRec(maxCoefficient, xs, zeroPoint + 1);\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It returns undefined if polynomial is not zero.\n  >>> findZeros([-6, 11, -6, 1])\n  [-1.0, 1.0]\n  >>> findZeros([-6, 11, -6, 1])\n  undefined\n  */\nconst findZeros = (xs) => {\n  const zeroPoints = [];\n  for (let i = 0; i < xs.length; i += 1) {\n    const zeroPoint = findZero(xs);\n    if (zeroPoint!== undefined) {\n      zeroPoints.push(zeroPoint);\n    }\n  }\n  return zeroPoints;\n}\n\n/*\n  findZeros finds zero points of polynomial with coefficients xs at points x.\n  It returns an array of zero points if polynomial is zero.\n  It ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let third = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      third.push(l[i]);\n    } else {\n      third.push(l[i]);\n      third.push(l[i]);\n    }\n  }\n  return third;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let five = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      five.push(l[i]);\n    } else {\n      five.push(l[i]);\n      five.push(l[i]);\n      five.push(l[i]);\n      five.push(l[i]);\n    }\n  }\n  return five;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let seven = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      seven.push(l[i]);\n    } else {\n      seven.push(l[i]);\n      seven.push(l[i]);\n      seven.push(l[i]);\n      seven.push(l[i]);\n      seven.push(l[i]);\n      seven.push(l[i]);\n    }\n  }\n  return seven;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let nine = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      nine.push(l[i]);\n    } else {\n      nine.push(l[i]);\n      nine.push(l[i]);\n      nine.push(l[i]);\n      nine.push(l[i]);\n      nine.push(l[i]);\n      nine.push(l[i]);\n      nine.push(l[i]);\n      nine.push(l[i]);\n    }\n  }\n  return nine;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  let ten = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      ten.push(l[i]);\n    } else {\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n      ten.push(l[i]);\n    }\n  }\n  return ten;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eleven, while its values at the indicies that are divisible by eleven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortEleven = (l) => {\n  let eleven = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 11 === 0) {\n      eleven.push(l[i]);\n    } else {\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n      eleven.push(l[i]);\n    }\n  }\n  return eleven;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twelve, while its values at the indicies that are divisible by twelve are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwelve([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwelve([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwelve = (l) => {\n  let twelve = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 12 === 0) {\n      twelve.push(l[i]);\n    } else {\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n      twelve.push(l[i]);\n    }\n  }\n  return twelve;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirteen, while its values at the indicies that are divisible by thirteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirteen = (l) => {\n  let thirteen = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 13 === 0) {\n      thirteen.push(l[i]);\n    } else {\n      thirteen.push(l[i]);\n      thirteen.push(l[i]);\n      thirteen.push(l[i]);\n      thirteen.push(l[i]);\n      thirteen.push(l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "<|endoftext|>/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== i) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sorted elements in a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst sorted = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== i) {\n      a.push(l[i]);\n    }\n  }\n  a.sort();\n  return a;\n};\n\n/*Return unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== i) {\n      a.push(l[i]);\n    }\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) {\n      u.push(a[i]);\n    }\n  }\n  return u;\n};\n\n/*Return unique elements in a list with duplicates\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithDuplicates = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== i) {\n      a.push(l[i]);\n    }\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) {\n      u.push(a[i]);\n    }\n  }\n  return u;\n};\n\n/*Return unique elements in a list with duplicates and preserving order\n  >>> uniqueWithPreservingOrder([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithPreservingOrder = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== i) {\n      a.push(l[i]);\n    }\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) {\n      u.push(a[i]);\n    }\n  }\n  return u;\n};\n\n/*Return unique elements in a list with duplicates and preserving order\n  >>> uniqueWithPreservingOrder([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithPreservingOrderAndDuplicates = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== i) {\n      a.push(l[i]);\n    }\n  }\n  a.sort();\n  let u = [];\n  for (let i = 0; i < a.length; i++) {\n    if (u.indexOf(a[i]) === -1) {\n      u.push(a[i]);\n    }\n  }\n  return u;\n};\n\n/*Return unique elements in a list with duplicates and preserving order\n  >>> uniqueWithPreservingOrderAndDuplicates([5, 3, 5, 2, 3, 3, 9, 0, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapMin = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumGreaterThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumLessThan = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumLessThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -29\n  */\nconst soapSumGreaterThanOrEqual = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted in reverse order.\n  >>> sortOddReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddReverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddReverse = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < l.length && oddIndex < l.length) {\n    if (l[evenIndex] > l[oddIndex]) {\n      swap(l, evenIndex, oddIndex);\n    }\n    evenIndex++;\n    oddIndex++;\n  }\n  return l;\n};", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character and one character.\n  */\nconst encodeCyclic1c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and one character.\n  */\nconst encodeCyclic2c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and two characters.\n  */\nconst encodeCyclic3c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters and two characters.\n  */\nconst encodeCyclic4c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "<|endoftext|>/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  let a = 0;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = sum;\n  }\n  return sum;\n};\n\n/*\n  fibonacci returns n-th number that is a Fibonacci number.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  17711\n  >>> fibonacci(23)\n  28657\n  >>> fibonacci(24)\n  46368\n  >>> fibonacci(25)\n  75025\n  >>> fibonacci(26)\n  121393\n  >>> fibonacci(27)\n  196418\n  >>> fibonacci(28)\n  317811\n  >>> fibonacci(29)\n  514229\n  >>> fibonacci(30)\n  832040\n  >>> fibonacci(31)\n  1346269\n  >>> fibonacci(32)\n  2178309\n  >>> fibonacci(33)\n  3524578\n  >>> fibonacci(34)\n  5702887\n  >>> fibonacci(35)\n  9492560\n  >>> fibonacci(36)\n  15972747\n  >>> fibonacci(37)\n  25153521\n  >>> fibonacci(38)\n  40527395\n  >>> fibonacci(39)\n  63459863\n  >>> fibonacci(40)\n  102334155\n  >>> fibonacci(41)\n  165580141\n  >>> fibonacci(42)\n  267914296\n  >>> fibonacci(43)\n  433494437\n  >>> fibonacci(44)\n  701408733\n  >>> fibonacci(45)\n  1134903170\n  >>> fibonacci(46)\n  1836311903\n  >>> fibonacci(47)\n  2971215073\n  >>> fibonacci(48)\n  4807526976\n  >>> fibonacci(49)\n  7778742049\n  >>> fibonacci(50)\n  12586269025\n  >>> fibonacci(51)\n  20365011074\n  >>> fibonacci(52)\n  32951280099\n  >>> fibonacci(53)\n  49252879703\n  >>> fibonacci(54)\n  92467226896\n  >>> fibonacci(55)\n  160158062512\n  >>> fibonacci(56)\n  258056111920\n  >>> fibonacci(57)\n  405273956452\n  >>> fibonacci(58)\n  634598632813\n  >>> fibonacci(59)\n  1023341524863\n  >>> fibonacci(60)\n  1655801418589\n  >>> fibonacci(61)\n  2679142954363\n  >>> fibonacci(62)\n  4334944371682\n  >>> fibonacci(63)\n  7014087331728\n  >>> fibonacci(64)\n  11349031797521\n  >>> fibonacci(65)\n  18363119031008\n  >>> fibonacci(66)\n  29712150734585\n  >>> fibonacci(67)\n  48075269749008\n  >>> fibonacci(68)\n  77787420490615\n  >>> fibonacci(69)\n  125862690253248\n  >>> fibonacci(70)\n  203650110747874\n  >>> fibonacci(71)\n  329512800990875\n  >>> fibonacci(72)\n  492528797031008\n  >>> fibonacci(73)\n  924672268962463\n  >>> fibonacci(74)\n  160158062512000\n  >>> fibonacci(75)\n  258056111920364\n  >>> fibonacci(76)\n  405273956452144\n  >>> fibonacci(77)\n  634598632813751\n  >>> fibonacci(78)\n  1023341524863040\n  >>> fibonacci(79)\n  1655801418589680\n  >>> fibonacci(80)\n  2679142954363024\n  >>> fibonacci(81)\n  4334944371682128\n  >>> fibonacci(82)\n  7014087331728384\n  >>> fibonacci(83)\n  11349031797521328\n  >>> fibonacci(84)\n  18363119031008128\n  >>> fibonacci(85)\n  29712150734585648\n  >>> fibonacci(86)\n  48075269749008128\n  >>> fibonacci(87)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - mean;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - median;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - mode;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - median;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - mean;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - median;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - mode;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - median;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - mean;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailAbsoluteDeviationMedian = (numbers) => {\n  const median = getMedian(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - median;\n    return Math.abs(diff);\n  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / numbers.length;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst entailAbsoluteDeviationMode = (numbers) => {\n  const mode = getMode(numbers);\n  const deviation", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "<|endoftext|>/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(cars[i], cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incrListWithStep([1, 2, 3], 2)\n  [4, 6, 8]\n  >>> incrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStep = (l, step) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decrListWithStep([1, 2, 3], 2)\n  [3, 2, 1]\n  >>> decrListWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrListWithStep = (l, step) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2.\n  >>> incrListWithStepWithStep([1, 2, 3], 2, 2)\n  [4, 6, 8]\n  >>> incrListWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStepWithStep = (l, step, step2) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2.\n  >>> decrListWithStepWithStep([1, 2, 3], 2, 2)\n  [3, 2, 1]\n  >>> decrListWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrListWithStepWithStep = (l, step, step2) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStep([1, 2, 3], 2, 2, 2)\n  [4, 6, 8]\n  >>> incrListWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStepWithStepWithStep = (l, step, step2, step3) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2 with step of 2.\n  >>> decrListWithStepWithStepWithStep([1, 2, 3], 2, 2, 2)\n  [3, 2, 1]\n  >>> decrListWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrListWithStepWithStepWithStep = (l, step, step2, step3) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2)\n  [4, 6, 8]\n  >>> incrListWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> decrListWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2)\n  [3, 2, 1]\n  >>> decrListWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrListWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2, 2)\n  [4, 6, 8]\n  >>> incrListWithStepWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2, 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithStepWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4, step5) => {\n  let i = 0;\n  const newList = [];\n  while (i < l.length) {\n    newList.push(l[i++]);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> decrListWithStepWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2, 2)\n  [3, 2, 1]\n  >>> decrListWithStepWithStepWithStepWithStepWithStep([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2, 2, 2, 2)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decrListWithStepWithStepWithStepWithStepWithStep = (l, step, step2, step3, step4, step5) => {\n  let i = l.length - 1;\n  const newList = [];\n  while (i >= 0) {\n    newList.push(l[i--]);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2 with step of 2.\n  >>> incrListWithStepWithStepWithStepWithStepWithStepWithStep([1, 2, 3], 2, 2, 2, 2, 2, 2)\n  [4, 6, 8]\n  >>> incrListWithStepWithStepWithStep", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "<|endoftext|>/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 0) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> copulateUnionToOne([1, 3, 5, 0])\n  false\n  >>> copulateUnionToOne([1, 3, -2, 1])\n  false\n  >>> copulateUnionToOne([1, 2, 3, 7])\n  false\n  >>> copulateUnionToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToOne([1])\n  false\n  */\nconst copulateUnionToOne = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 1) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> copulateUnionToTwo([1, 3, 5, 0])\n  false\n  >>> copulateUnionToTwo([1, 3, -2, 1])\n  false\n  >>> copulateUnionToTwo([1, 2, 3, 7])\n  false\n  >>> copulateUnionToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToTwo([1])\n  false\n  */\nconst copulateUnionToTwo = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 2) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> copulateUnionToThree([1, 3, 5, 0])\n  false\n  >>> copulateUnionToThree([1, 3, -2, 1])\n  false\n  >>> copulateUnionToThree([1, 2, 3, 7])\n  false\n  >>> copulateUnionToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToThree([1])\n  false\n  */\nconst copulateUnionToThree = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 3) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> copulateUnionToFour([1, 3, 5, 0])\n  false\n  >>> copulateUnionToFour([1, 3, -2, 1])\n  false\n  >>> copulateUnionToFour([1, 2, 3, 7])\n  false\n  >>> copulateUnionToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToFour([1])\n  false\n  */\nconst copulateUnionToFour = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 4) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> copulateUnionToFive([1, 3, 5, 0])\n  false\n  >>> copulateUnionToFive([1, 3, -2, 1])\n  false\n  >>> copulateUnionToFive([1, 2, 3, 7])\n  false\n  >>> copulateUnionToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToFive([1])\n  false\n  */\nconst copulateUnionToFive = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 5) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> copulateUnionToSix([1, 3, 5, 0])\n  false\n  >>> copulateUnionToSix([1, 3, -2, 1])\n  false\n  >>> copulateUnionToSix([1, 2, 3, 7])\n  false\n  >>> copulateUnionToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToSix([1])\n  false\n  */\nconst copulateUnionToSix = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 6) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToSeven takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to seven, and false otherwise.\n  >>> copulateUnionToSeven([1, 3, 5, 0])\n  false\n  >>> copulateUnionToSeven([1, 3, -2, 1])\n  false\n  >>> copulateUnionToSeven([1, 2, 3, 7])\n  false\n  >>> copulateUnionToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToSeven([1])\n  false\n  */\nconst copulateUnionToSeven = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 7) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToEight takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to eight, and false otherwise.\n  >>> copulateUnionToEight([1, 3, 5, 0])\n  false\n  >>> copulateUnionToEight([1, 3, -2, 1])\n  false\n  >>> copulateUnionToEight([1, 2, 3, 7])\n  false\n  >>> copulateUnionToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToEight([1])\n  false\n  */\nconst copulateUnionToEight = (l) => {\n  let result\n  l.forEach((e) => {\n    if (e > 8) result = true\n  })\n  return result\n}\n\n/*\n  copulateUnionToNine takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to nine, and false otherwise.\n  >>> copulateUnionToNine([1, 3, 5, 0])\n  false\n  >>> copulateUnionToNine([1, 3, -2, 1])\n  false\n  >>> copulateUnionToNine([1, 2, 3, 7])\n  false\n  >>> copulateUnionToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToNine([1])\n  false\n  */\nconst copulateUnionToNine = (l) => {\n  let result\n  l.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> variety(8, 3)\n  '22'\n  >>> variety(8, 2)\n  '1000'\n  >>> variety(7, 2)\n  '111'\n  */\nconst variety = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> variety(8, 3)\n  '22'\n  >>> variety(8, 2)\n  '1000'\n  >>> variety(7, 2)\n  '111'\n  */\nconst varietyWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n  >>> varietyWithCommas(7, 2)\n  '111'\n  */\nconst varietyWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommasWithCommas = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? `0${str}` : str;\n};\n\n/*\n  Convert number to string with given base. \n  >>> varietyWithCommas(8, 3)\n  '22'\n  >>> varietyWithCommas(8, 2)\n  '1000'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangul", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// Problem #5\n/*\n  Write a function that takes in a string and returns the number of vowels contained in the string.\n  >>> vowels(\"hello\")\n  1\n  >>> vowels(\"hellooo\")\n  2\n  >>> vowels(\"helloooo\")\n  3\n  >>> vowels(\"helloooooo\")\n  4\n  >>> vowels(\"helloooooooo\")\n  5\n  >>> vowels(\"helloooooooooo\")\n  6\n  >>> vowels(\"helloooooooooooo\")\n  7\n  >>> vowels(\"helloooooooooooooo\")\n  8\n  >>> vowels(\"helloooooooooooooooo\")\n  9\n  >>> vowels(\"helloooooooooooooooooo\")\n  10\n  >>> vowels(\"helloooooooooooooooooooo\")\n  11\n  >>> vowels(\"helloooooooooooooooooooooo\")\n  12\n  >>> vowels(\"helloooooooooooooooooooooooo\")\n  13\n  >>> vowels(\"helloooooooooooooooooooooooooo\")\n  14\n  >>> vowels(\"helloooooooooooooooooooooooooooo\")\n  15\n  >>> vowels(\"helloooooooooooooooooooooooooooooo\")\n  16\n  >>> vowels(\"helloooooooooooooooooooooooooooooooo\")\n  17\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooo\")\n  18\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooo\")\n  19\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooo\")\n  20\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooo\")\n  21\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooo\")\n  22\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooo\")\n  23\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooo\")\n  24\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooo\")\n  25\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  26\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  27\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  28\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  29\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  30\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  31\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  32\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  33\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  34\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  35\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  36\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  37\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  38\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  39\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  40\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  41\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  42\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  43\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  44\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  45\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  46\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  47\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  48\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  49\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  50\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  51\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  52\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  53\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  54\n  >>> vowels(\"helloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\")\n  55\n  >>> vowels(\"hellooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % (p || 1);\n  return m === 0 && p!== 1? 1 : m;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = _curry2((n, xs) => {\n  return take(n < xs.length? xs.length - n : 0, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 &&!fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which satisfy the\n * supplied predicate function. It passes each value to the supplied predicate function, skipping\n * elements while the predicate function returns `true`. The predicate function is passed one\n * argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @deprecated since v0.16.0\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropRepeatsWith = _curry2((pred, xs) => {\n  const result = [];\n  let idx = -1;\n  let len = xs.length;\n  while (idx < len) {\n    const x = xs[idx];\n    if (pred(x, idx, xs)) {\n      result.push(x);\n      idx += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\n\n/**\n * Returns a new list containing only one copy of each element in the original list.\n * Equality is strict here, meaning reference equality for objects and non-coercing equality\n * for primitives.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.distinct([1, 1, 2, 1]); //=> [1, 2]\n *      R.distinct([1, '1', 1]); //=> [1, '1']\n *      R.distinct([{}, {}]);       //=> [{}]\n *      R.distinct([{foo:1}, {foo:2}]); //=> [{foo:1}]\n */\nconst distinct = _curry1(\n  uniqBy(always(true), identity)\n);\n\n/**\n * Returns a new list by pulling every item at the first level of nesting out, and putting\n * them in a new array.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.flatten, R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nconst flatten = _curry1((list, out) => {\n  const idx = 1;\n  const length = list.length;\n  const result = [];\n  while (idx < length) {\n    const value = list[idx];\n    const type = typeof value;\n    if (type === 'number' || type === 'boolean') {\n      result.push(value);\n    } else if (value && (type ==='string' || type === 'object')) {\n      if (idx < value.length) {\n        result.push(\n          value[idx],\n         ...flatten(value, out)\n        );\n      } else {\n        out.push(value);\n      }\n    }\n    idx += 1;\n  }\n  return out;\n});\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c,...) -> z) -> (b -> a -> c ->... -> z)\n * @param {Function} ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "<|endoftext|>/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  checkIfString is a function that takes string and returns boolean value if string is not empty.\n  >>> checkIfString('')\n  False\n  >>> checkIfString('abc')\n  True\n  >>> checkIfString(' ')\n  False\n  >>> checkIfString('  ')\n  False\n  >>> checkIfString('  abc')\n  True\n  >>> checkIfString('  abc  ')\n  True\n  >>> checkIfString('  abc  def')\n  True\n  >>> checkIfString('  abc  def  ')\n  True\n  >>> checkIfString('  abc  def  ghi')\n  True\n  >>> checkIfString('  abc  def  ghi  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h  i')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h  i  ')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h  i  j')\n  True\n  >>> checkIfString('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h  i  j  ')\n  True\n  >>> checkIfString('", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorways = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorways = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorways = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenDoorways = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenDoorways([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenDoorways([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst aboveDoorway = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*Multiply two numbers x and y\n  >>> lend(2, 3)\n  6\n  >>> lend(5, 7)\n  21\n  */\nconst mul = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> lend(2, 3)\n  2\n  >>> lend(5, 7)\n  3\n  */\nconst div = (x, y) => {\n  return x / y;\n};\n\n/*Get the remainder of x divided by y\n  >>> lend(2, 3)\n  1\n  >>> lend(5, 7)\n  2\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the sign of x\n  >>> sign(-5)\n  -1\n  >>> sign(5)\n  1\n  */\nconst sign = (x) => {\n  return x > 0? 1 : x < 0? -1 : 0;\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the sign of x\n  >>> sign(-5)\n  -1\n  >>> sign(5)\n  1\n  */\nconst sign = (x) => {\n  return x > 0? 1 : x < 0? -1 : 0;\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(5.5)\n  6\n  >>> ceil(5.6)\n  6\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> floor(5.5)\n  5\n  >>> floor(5.6)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCharsRev('abcd', 'dddddddabc')\n  true\n  >>> likeCharsRev('dddddddabc', 'abcd')\n  true\n  >>> likeCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> likeCharsRev('abcd', 'dddddddabce')\n  false\n  >>> likeCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  89\n  >>> fib(2)\n  89\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  89\n  >>> fib(13)\n  89\n  >>> fib(14)\n  89\n  >>> fib(15)\n  89\n  >>> fib(16)\n  89\n  >>> fib(17)\n  89\n  >>> fib(18)\n  89\n  >>> fib(19)\n  89\n  >>> fib(20)\n  89\n  >>> fib(21)\n  89\n  >>> fib(22)\n  89\n  >>> fib(23)\n  89\n  >>> fib(24)\n  89\n  >>> fib(25)\n  89\n  >>> fib(26)\n  89\n  >>> fib(27)\n  89\n  >>> fib(28)\n  89\n  >>> fib(29)\n  89\n  >>> fib(30)\n  89\n  >>> fib(31)\n  89\n  >>> fib(32)\n  89\n  >>> fib(33)\n  89\n  >>> fib(34)\n  89\n  >>> fib(35)\n  89\n  >>> fib(36)\n  89\n  >>> fib(37)\n  89\n  >>> fib(38)\n  89\n  >>> fib(39)\n  89\n  >>> fib(40)\n  89\n  >>> fib(41)\n  89\n  >>> fib(42)\n  89\n  >>> fib(43)\n  89\n  >>> fib(44)\n  89\n  >>> fib(45)\n  89\n  >>> fib(46)\n  89\n  >>> fib(47)\n  89\n  >>> fib(48)\n  89\n  >>> fib(49)\n  89\n  >>> fib(50)\n  89\n  >>> fib(51)\n  89\n  >>> fib(52)\n  89\n  >>> fib(53)\n  89\n  >>> fib(54)\n  89\n  >>> fib(55)\n  89\n  >>> fib(56)\n  89\n  >>> fib(57)\n  89\n  >>> fib(58)\n  89\n  >>> fib(59)\n  89\n  >>> fib(60)\n  89\n  >>> fib(61)\n  89\n  >>> fib(62)\n  89\n  >>> fib(63)\n  89\n  >>> fib(64)\n  89\n  >>> fib(65)\n  89\n  >>> fib(66)\n  89\n  >>> fib(67)\n  89\n  >>> fib(68)\n  89\n  >>> fib(69)\n  89\n  >>> fib(70)\n  89\n  >>> fib(71)\n  89\n  >>> fib(72)\n  89\n  >>> fib(73)\n  89\n  >>> fib(74)\n  89\n  >>> fib(75)\n  89\n  >>> fib(76)\n  89\n  >>> fib(77)\n  89\n  >>> fib(78)\n  89\n  >>> fib(79)\n  89\n  >>> fib(80)\n  89\n  >>> fib(81)\n  89\n  >>> fib(82)\n  89\n  >>> fib(83)\n  89\n  >>> fib(84)\n  89\n  >>> fib(85)\n  89\n  >>> fib(86)\n  89\n  >>> fib(87)\n  89\n  >>> fib(88)\n  89\n  >>> fib(89)\n  89\n  >>> fib(90)\n  89\n  >>> fib(91)\n  89\n  >>> fib(92)\n  89\n  >>> fib(93)\n  89\n  >>> fib(94)\n  89\n  >>> fib(95)\n  89\n  >>> fib(96)\n  89\n  >>> fib(97)\n  89\n  >>> fib(98)\n  89\n  >>> fib(99)\n  89\n  >>> fib(100)\n  89\n  >>> fib(101)\n  89\n  >>> fib(102)\n  89\n  >>> fib(103)\n  89\n  >>> fib(104)\n  89\n  >>> fib(105)\n  89\n  >>> fib(106)\n  89\n  >>> fib(107)\n  89\n  >>> fib(108)\n  89\n  >>> fib(109)\n  89\n  >>> fib(110)\n  89\n  >>> fib(111)\n  89\n  >>> fib(112)\n  89\n  >>> fib(113)\n  89\n  >>> fib(114)\n  89\n  >>> fib(115)\n  89\n  >>> fib(116)\n  89\n  >>> fib(117)\n  89\n  >>> fib(118)\n  89\n  >>> fib(119)\n  89\n  >>> fib(120)\n  89\n  >>> fib(121)\n  89\n  >>> fib(122)\n  89\n  >>> fib(123)\n  89\n  >>> fib(124)\n  89\n  >>> fib(125)\n  89\n  >>> fib(126)\n  89\n  >>> fib(127)\n  89\n  >>> fib(128)\n  89\n  >>> fib(129)\n  89\n  >>> fib(130)\n  89\n  >>> fib(131)\n  89\n  >>> fib(132)\n  89\n  >>> fib(133)\n  89\n  >>> fib(134)\n  89\n  >>> fib(135)\n  89\n  >>> fib(136)\n  89\n  >>> fib(137)\n  89\n  >>> fib(138)\n  89\n  >>> fib(139)\n  89\n  >>> fib(140)\n  89\n  >>> fib(141)\n  89\n  >>> fib(142)\n  89\n  >>> fib(143)\n  89\n  >>> fib(144)\n  89\n  >>> fib(145)\n  89\n  >>> fib(146)\n  89\n  >>> fib(147)\n  89\n  >>> fib(148)\n  89\n  >>> fib(149)\n  89\n  >>> fib(150)\n  89\n  >>> fib(15", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<[^<>]+>/g);\n  const closingBrackets = brackets.match(/<[^<>]+>/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * A function that checks if a string is valid XML.\n *\n * It checks if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).\n * It does not validate if the string is valid XML.\n *\n * It does not validate if the string is valid XML (according to our definition of valid XML).", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "<|endoftext|>/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  if (l == null) return false\n  if (l.length === 0) return true\n  if (l.length === 1) return l[0] >= l[1]\n  return flat(l.slice(0, l.length - 1)) && l[l.length - 1] >= l[l.length - 2]\n}\n\n/*\n  >>> isSorted([2, 1, 4, 3, 5])\n  true\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false\n  >>> isSorted([2, 1, 4, 3, 5])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "<|endoftext|>/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nc = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nc; i++) {\n    const l3 = [];\n    for (let j = 0; j < nc; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique fine elements for two lists.\n  >>> fine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> fine([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst fine = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nf = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nf; i++) {\n    const l3 = [];\n    for (let j = 0; j < nf; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nc = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nc; i++) {\n    const l3 = [];\n    for (let j = 0; j < nc; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nf = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nf; i++) {\n    const l3 = [];\n    for (let j = 0; j < nf; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nc = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nc; i++) {\n    const l3 = [];\n    for (let j = 0; j < nc; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nf = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nf; i++) {\n    const l3 = [];\n    for (let j = 0; j < nf; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nc = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nc; i++) {\n    const l3 = [];\n    for (let j = 0; j < nc; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nf = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nf; i++) {\n    const l3 = [];\n    for (let j = 0; j < nf; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nc = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nc; i++) {\n    const l3 = [];\n    for (let j = 0; j < nc; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2]\n\n  */\nconst unique = (l1, l2) => {\n  const n1 = l1.length;\n  const n2 = l2.length;\n  const nf = Math.max(Math.min(n1, n2), 1);\n  const result = [];\n  for (let i = 0; i < nf; i++) {\n    const l3 = [];\n    for (let j = 0; j < nf; j++) {\n      if (i === j) continue;\n      if (l1[i] === l2[j]) l3.push(l1[i]);\n    }\n    result.push(l3);\n  }\n  return result;\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n};\n\n/*\n  Find the least common multiple of a set of numbers.\n  >>> leastCommonMultiple([1,2,3,4])\n  24\n  >>> leastCommonMultiple([1,2,3,5])\n  6\n  >>> leastCommonMultiple([1,2,3,6])\n  24\n  >>> leastCommonMultiple([1,2,4,5])\n  6\n  >>> leastCommonMultiple([1,2,4,6])\n  24\n  >>> leastCommonMultiple([1,2,5,6])\n  6\n  >>> leastCommonMultiple([1,2,6,7])\n  6\n  >>> leastCommonMultiple([1,2,6,8])\n  24\n  >>> leastCommonMultiple([1,2,6,9])\n  6\n  >>> leastCommonMultiple([1,2,6,10])\n  24\n  >>> leastCommonMultiple([1,2,6,11])\n  6\n  >>> leastCommonMultiple([1,2,6,12])\n  24\n  >>> leastCommonMultiple([1,2,6,13])\n  6\n  >>> leastCommonMultiple([1,2,6,14])\n  24\n  >>> leastCommonMultiple([1,2,6,15])\n  6\n  >>> leastCommonMultiple([1,2,6,16])\n  24\n  >>> leastCommonMultiple([1,2,6,17])\n  6\n  >>> leastCommonMultiple([1,2,6,18])\n  24\n  >>> leastCommonMultiple([1,2,6,19])\n  6\n  >>> leastCommonMultiple([1,2,6,20])\n  24\n  >>> leastCommonMultiple([1,2,6,21])\n  6\n  >>> leastCommonMultiple([1,2,6,22])\n  24\n  >>> leastCommonMultiple([1,2,6,23])\n  6\n  >>> leastCommonMultiple([1,2,6,24])\n  24\n  >>> leastCommonMultiple([1,2,6,25])\n  6\n  >>> leastCommonMultiple([1,2,6,26])\n  24\n  >>> leastCommonMultiple([1,2,6,27])\n  6\n  >>> leastCommonMultiple([1,2,6,28])\n  24\n  >>> leastCommonMultiple([1,2,6,29])\n  6\n  >>> leastCommonMultiple([1,2,6,30])\n  24\n  >>> leastCommonMultiple([1,2,6,31])\n  6\n  >>> leastCommonMultiple([1,2,6,32])\n  24\n  >>> leastCommonMultiple([1,2,6,33])\n  6\n  >>> leastCommonMultiple([1,2,6,34])\n  24\n  >>> leastCommonMultiple([1,2,6,35])\n  6\n  >>> leastCommonMultiple([1,2,6,36])\n  24\n  >>> leastCommonMultiple([1,2,6,37])\n  6\n  >>> leastCommonMultiple([1,2,6,38])\n  24\n  >>> leastCommonMultiple([1,2,6,39])\n  6\n  >>> leastCommonMultiple([1,2,6,40])\n  24\n  >>> leastCommonMultiple([1,2,6,41])\n  6\n  >>> leastCommonMultiple([1,2,6,42])\n  24\n  >>> leastCommonMultiple([1,2,6,43])\n  6\n  >>> leastCommonMultiple([1,2,6,44])\n  24\n  >>> leastCommonMultiple([1,2,6,45])\n  6\n  >>> leastCommonMultiple([1,2,6,46])\n  24\n  >>> leastCommonMultiple([1,2,6,47])\n  6\n  >>> leastCommonMultiple([1,2,6,48])\n  24\n  >>> leastCommonMultiple([1,2,6,49])\n  6\n  >>> leastCommonMultiple([1,2,6,50])\n  24\n  >>> leastCommonMultiple([1,2,6,51])\n  6\n  >>> leastCommonMultiple([1,2,6,52])\n  24\n  >>> leastCommonMultiple([1,2,6,53])\n  6\n  >>> leastCommonMultiple([1,2,6,54])\n  24\n  >>> leastCommonMultiple([1,2,6,55])\n  6\n  >>> leastCommonMultiple([1,2,6,56])\n  24\n  >>> leastCommonMultiple([1,2,6,57])\n  6\n  >>> leastCommonMultiple([1,2,6,58])\n  24\n  >>> leastCommonMultiple([1,2,6,59])\n  6\n  >>> leastCommonMultiple([1,2,6,60])\n  24\n  >>> leastCommonMultiple([1,2,6,61])\n  6\n  >>> leastCommonMultiple([1,2,6,62])\n  24\n  >>> leastCommonMultiple([1,2,6,63])\n  6\n  >>> leastCommonMultiple([1,2,6,64])\n  24\n  >>> leastCommonMultiple([1,2,6,65])\n  6\n  >>> leastCommonMultiple([1,2,6,66])\n  24\n  >>> leastCommonMultiple([1,2,6,67])\n  6\n  >>> leastCommonMultiple([1,2,6,68])\n  24\n  >>> leastCommonMultiple([1,2,6,69])\n  6\n  >>> leastCommonMultiple([1,2,6,70])\n  24\n  >>> leastCommonMultiple([1,2,6,71])\n  6\n  >>> leastCommonMultiple([1,2,6,72])\n  24\n  >>> leastCommonMultiple([1,2,6,73])\n  6\n  >>> leastCommonMultiple([1,2,6,74])\n  24\n  >>> leastCommonMultiple([1,2,6,75])\n  6\n  >>> leastCommonMultiple([1,2,6,76])\n  24\n  >>> leastCommonMultiple([1,2,6,77])\n  6\n  >>> leastCommonMultiple([1,2,6,78])\n  24\n  >>> leastCommonMultiple([1,2,6,79])\n  6\n  >>> leastCommonMultiple([1,2,6,80])\n  24\n  >>> leastCommonMultiple([1,2,6,81])\n  6\n  >>> leastCommonMultiple([1,2,6,82])\n  24\n  >>> leastCommonMultiple([1,2,6,83])\n  6\n  >>> leastCommonMultiple([1,2,6,84])\n  24\n  >>> leastCommonMultiple([1,2,6,85])\n  6\n  >>> leastCommonMultiple([1,2,6,86])\n  24\n  >>> leastCommonMultiple([1,2,6,87])\n  6\n  >>> leastCommonMultiple([1,2,6,88])\n  24\n  >>> leastCommonMultiple([1,2,6,89])\n  6\n  >>> leastCommonMultiple([1,2,6,90])\n  24\n  >>> leastCommonMultiple([1,2,6,91])\n  6\n  >>> leastCommonMultiple([1,2,6,92])\n  24\n  >>> leastCommonMultiple([1,2,6,93])\n  6\n  >>> leastCommonMultiple([1,2,6,94])\n  24\n  >>> leastCommonMultiple([1,2,6,95])\n  6\n  >>> leastCommonMultiple([1,2,6,96])\n  24\n  >>> leastCommonMultiple([1,2,6,97])\n  6\n  >>> leastCommonMultiple([1,2,6,98])\n  24\n  >>> leastCommonMultiple([1,2,6,99])\n  6\n  >>> leastCommonMultiple([1,2,6,100])\n  24\n  >>> leastCommonMultiple([1,2,6,101])\n  6\n  >>> leastCommonMultiple([1,2,6,102])\n  24\n  >>> leastCommonMultiple([1,2,6,103])\n  6\n  >>> leastCommonMultiple([1,2,6,104])\n  24\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_level = 0;\n  let paren_group = 0;\n  let paren_group_level = 0;\n  let paren_group_group = 0;\n  let paren_group_group_level = 0;\n  let paren_group_group_group = 0;\n  let paren_group_group_group_level = 0;\n  let paren_group_group_group_group = 0;\n  let paren_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group = 0;\n  let paren_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "<|endoftext|>/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> getNthRoot(4, 2)\n  2\n  >>> getNthRoot(4, 3)\n  1\n  >>> getNthRoot(4, 4)\n  1\n  >>> getNthRoot(4, 5)\n  0\n  >>> getNthRoot(4, 6)\n  0\n  >>> getNthRoot(4, 7)\n  0\n  >>> getNthRoot(4, 8)\n  0\n  >>> getNthRoot(4, 9)\n  0\n  >>> getNthRoot(4, 10)\n  0\n  >>> getNthRoot(4, 11)\n  0\n  >>> getNthRoot(4, 12)\n  0\n  >>> getNthRoot(4, 13)\n  0\n  >>> getNthRoot(4, 14)\n  0\n  >>> getNthRoot(4, 15)\n  0\n  >>> getNthRoot(4, 16)\n  0\n  >>> getNthRoot(4, 17)\n  0\n  >>> getNthRoot(4, 18)\n  0\n  >>> getNthRoot(4, 19)\n  0\n  >>> getNthRoot(4, 20)\n  0\n  >>> getNthRoot(4, 21)\n  0\n  >>> getNthRoot(4, 22)\n  0\n  >>> getNthRoot(4, 23)\n  0\n  >>> getNthRoot(4, 24)\n  0\n  >>> getNthRoot(4, 25)\n  0\n  >>> getNthRoot(4, 26)\n  0\n  >>> getNthRoot(4, 27)\n  0\n  >>> getNthRoot(4, 28)\n  0\n  >>> getNthRoot(4, 29)\n  0\n  >>> getNthRoot(4, 30)\n  0\n  >>> getNthRoot(4, 31)\n  0\n  >>> getNthRoot(4, 32)\n  0\n  >>> getNthRoot(4, 33)\n  0\n  >>> getNthRoot(4, 34)\n  0\n  >>> getNthRoot(4, 35)\n  0\n  >>> getNthRoot(4, 36)\n  0\n  >>> getNthRoot(4, 37)\n  0\n  >>> getNthRoot(4, 38)\n  0\n  >>> getNthRoot(4, 39)\n  0\n  >>> getNthRoot(4, 40)\n  0\n  >>> getNthRoot(4, 41)\n  0\n  >>> getNthRoot(4, 42)\n  0\n  >>> getNthRoot(4, 43)\n  0\n  >>> getNthRoot(4, 44)\n  0\n  >>> getNthRoot(4, 45)\n  0\n  >>> getNthRoot(4, 46)\n  0\n  >>> getNthRoot(4, 47)\n  0\n  >>> getNthRoot(4, 48)\n  0\n  >>> getNthRoot(4, 49)\n  0\n  >>> getNthRoot(4, 50)\n  0\n  >>> getNthRoot(4, 51)\n  0\n  >>> getNthRoot(4, 52)\n  0\n  >>> getNthRoot(4, 53)\n  0\n  >>> getNthRoot(4, 54)\n  0\n  >>> getNthRoot(4, 55)\n  0\n  >>> getNthRoot(4, 56)\n  0\n  >>> getNthRoot(4, 57)\n  0\n  >>> getNthRoot(4, 58)\n  0\n  >>> getNthRoot(4, 59)\n  0\n  >>> getNthRoot(4, 60)\n  0\n  >>> getNthRoot(4, 61)\n  0\n  >>> getNthRoot(4, 62)\n  0\n  >>> getNthRoot(4, 63)\n  0\n  >>> getNthRoot(4, 64)\n  0\n  >>> getNthRoot(4, 65)\n  0\n  >>> getNthRoot(4, 66)\n  0\n  >>> getNthRoot(4, 67)\n  0\n  >>> getNthRoot(4, 68)\n  0\n  >>> getNthRoot(4, 69)\n  0\n  >>> getNthRoot(4, 70)\n  0\n  >>> getNthRoot(4, 71)\n  0\n  >>> getNthRoot(4, 72)\n  0\n  >>> getNthRoot(4, 73)\n  0\n  >>> getNthRoot(4, 74)\n  0\n  >>> getNthRoot(4, 75)\n  0\n  >>> getNthRoot(4, 76)\n  0\n  >>> getNthRoot(4, 77)\n  0\n  >>> getNthRoot(4, 78)\n  0\n  >>> getNthRoot(4, 79)\n  0\n  >>> getNthRoot(4, 80)\n  0\n  >>> getNthRoot(4, 81)\n  0\n  >>> getNthRoot(4, 82)\n  0\n  >>> getNthRoot(4, 83)\n  0\n  >>> getNthRoot(4, 84)\n  0\n  >>> getNthRoot(4, 85)\n  0\n  >>> getNthRoot(4, 86)\n  0\n  >>> getNthRoot(4, 87)\n  0\n  >>> getNthRoot(4, 88)\n  0\n  >>> getNthRoot(4, 89)\n  0\n  >>> getNthRoot(4, 90)\n  0\n  >>> getNthRoot(4, 91)\n  0\n  >>> getNthRoot(4, 92)\n  0\n  >>> getNthRoot(4, 93)\n  0\n  >>> getNthRoot(4, 94)\n  0\n  >>> getNthRoot(4, 95)\n  0\n  >>> getNthRoot(4, 96)\n  0\n  >>> getNthRoot(4, 97)\n  0\n  >>> getNthRoot(4, 98)\n  0\n  >>> getNthRoot(4, 99)\n  0\n  >>> getNthRoot(4, 100)\n  0\n  >>> getNthRoot(4, 101)\n  0\n  >>> getNthRoot(4, 102)\n  0\n  >>> getNthRoot(4, 103)\n  0\n  >>> getNthRoot(4, 104)\n  0\n  >>> getNthRoot(4, 105)\n  0\n  >>> getNthRoot(4, 106)\n  0\n  >>> getNthRoot(4, 107)\n  0\n  >>> getNthRoot(4, 108)\n  0\n  >>> getNthRoot(4, 109)\n  0\n  >>> getNthRoot(4, 110)\n  0\n  >>> getNthRoot(4, 111)\n  0\n  >>> getNthRoot(4, 112)\n  0\n  >>> getNthRoot(4, 113)\n  0\n  >>> getNthRoot(4, 114)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string of characters, return true if it contains any of the\n * characters in the given set.\n *\n * >>> hasAny('a', 'b', 'c')\n * true\n * >>> hasAny('a', 'b', 'd')\n * false\n */\nconst hasAny = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i])!== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAny('a', 'b', 'c')\n * true\n * >>> hasAny('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n * characters in the given set.\n *\n * >>> hasAll('a', 'b', 'c')\n * true\n * >>> hasAll('a', 'b', 'd')\n * false\n */\nconst hasAll = (str, set) => {\n  for (let i = 0; i < set.length; i++) {\n    if (str.indexOf(set[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string of characters, return true if it contains only the\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length;\n  if (n < 1) return [];\n  if (n === 1) return [xs[0]];\n  let d = xs[1];\n  for (let i = 2; i < n; i++) {\n    d *= xs[i];\n  }\n  return [xs[0] + d];\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst polynomialEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  >>> polynomialsEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialsEqual(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares20 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares21 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares22 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares23 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares24 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares25 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOfSquares26 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\nconst sumOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "<|endoftext|>/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > length\n  if (shift < 0) return str.reverse().slice(shift, str.length); // shift < 0\n  return str.reverse().slice(0, shift).reverse();\n};\n\n/*\n  Given a number x, return a string representing the number in base 10.\n  >>> toBase10(12)\n  \"12\"\n  >>> toBase10(15)\n  \"15\"\n  >>> toBase10(100)\n  \"100\"\n  >>> toBase10(1000)\n  \"1000\"\n  >>> toBase10(10000)\n  \"10000\"\n  >>> toBase10(100000)\n  \"100000\"\n  >>> toBase10(1000000)\n  \"1000000\"\n  >>> toBase10(10000000)\n  \"10000000\"\n  >>> toBase10(100000000)\n  \"100000000\"\n  >>> toBase10(1000000000)\n  \"1000000000\"\n  >>> toBase10(10000000000)\n  \"10000000000\"\n  >>> toBase10(100000000000)\n  \"100000000000\"\n  >>> toBase10(1000000000000)\n  \"1000000000000\"\n  >>> toBase10(10000000000000)\n  \"10000000000000\"\n  >>> toBase10(1000000000000000)\n  \"1000000000000000\"\n  >>> toBase10(10000000000000000)\n  \"10000000000000000\"\n  >>> toBase10(1000000000000000000)\n  \"1000000000000000000\"\n  >>> toBase10(10000000000000000000)\n  \"10000000000000000000\"\n  >>> toBase10(100000000000000000000)\n  \"100000000000000000000\"\n  >>> toBase10(1000000000000000000000)\n  \"1000000000000000000000\"\n  >>> toBase10(100000000000000000000000)\n  \"100000000000000000000000\"\n  >>> toBase10(1000000000000000000000000)\n  \"1000000000000000000000000\"\n  >>> toBase10(100000000000000000000000000)\n  \"100000000000000000000000000\"\n  >>> toBase10(1000000000000000000000000000)\n  \"1000000000000000000000000000\"\n  >>> toBase10(10000000000000000000000000000)\n  \"10000000000000000000000000000\"\n  >>> toBase10(100000000000000000000000000000)\n  \"100000000000000000000000000000\"\n  >>> toBase10(10000000000000000000000000000000)\n  \"10000000000000000000000000000000\"\n  >>> toBase10(100000000000000000000000000000000)\n  \"100000000000000000000000000000000\"\n  >>> toBase10(10000000000000000000000000000000001)\n  \"10000000000000000000000000000000001\"\n  >>> toBase10(10000000000000000000000000000000002)\n  \"10000000000000000000000000000000002\"\n  >>> toBase10(10000000000000000000000000000000003)\n  \"10000000000000000000000000000000003\"\n  >>> toBase10(10000000000000000000000000000000004)\n  \"10000000000000000000000000000000004\"\n  >>> toBase10(10000000000000000000000000000000005)\n  \"10000000000000000000000000000000005\"\n  >>> toBase10(10000000000000000000000000000000006)\n  \"10000000000000000000000000000000006\"\n  >>> toBase10(10000000000000000000000000000000007)\n  \"10000000000000000000000000000000007\"\n  >>> toBase10(10000000000000000000000000000000008)\n  \"10000000000000000000000000000000008\"\n  >>> toBase10(10000000000000000000000000000000009)\n  \"10000000000000000000000000000000009\"\n  >>> toBase10(1000000000000000000000000000000000A)\n  \"1000000000000000000000000000000000A\"\n  >>> toBase10(1000000000000000000000000000000000B)\n  \"1000000000000000000000000000000000B\"\n  >>> toBase10(1000000000000000000000000000000000C)\n  \"1000000000000000000000000000000000C\"\n  >>> toBase10(1000000000000000000000000000000000D)\n  \"1000000000000000000000000000000000D\"\n  >>> toBase10(1000000000000000000000000000000000E)\n  \"1000000000000000000000000000000000E\"\n  >>> toBase10(1000000000000000000000000000000000F)\n  \"1000000000000000000000000000000000F\"\n  >>> toBase10(10000000000000000000000000000000010)\n  \"10000000000000000000000000000000010\"\n  >>> toBase10(10000000000000000000000000000000011)\n  \"10000000000000000000000000000000011\"\n  >>> toBase10(10000000000000000000000000000000012)\n  \"10000000000000000000000000000000012\"\n  >>> toBase10(10000000000000000000000000000000013)\n  \"10000000000000000000000000000000013\"\n  >>> toBase10(10000000000000000000000000000000014)\n  \"10000000000000000000000000000000014\"\n  >>> toBase10(10000000000000000000000000000000015)\n  \"10000000000000000000000000000000015\"\n  >>> toBase10(10000000000000000000000000000000016)\n  \"10000000000000000000000000000000016\"\n  >>> toBase10(10000000000000000000000000000000017)\n  \"10000000000000000000000000000000017\"\n  >>> toBase10(10000000000000000000000000000000018)\n  \"10000000000000000000000000000000018\"\n  >>> toBase10(10000000000000000000000000000000019)\n  \"10000000000000000000000000000000019\"\n  >>> toBase10(1000000000000000000000000000000001A)\n  \"1000000000000000000000000000000001A\"\n  >>> toBase10(1000000000000000000000000000000001B)\n  \"1000000000000000000000000000000001B\"\n  >>> toBase10(1000000000000000000000000000000001C)\n  \"1000000000000000000000000000000001C\"\n  >>> toBase10(1000000000000000000000000000000001D)\n  \"1000000000000000000000000000000001D\"\n  >>> toBase10(1000000000000000000000000000000001E)\n  \"1000000000000000000000000000000001E\"\n  >>> toBase10(1000000000000000000000000000000001F)\n  \"1000000000000000000000000000000001F\"\n  >>> toBase10(10000000000000000000000000000000020)\n  \"10000000000000000000000000000000020\"\n  >>> toBase10(10000000000000000000000000000000021)\n  \"10000000000000000000000000000000021\"\n  >>> toBase10(10000000000000000000000000000000022)\n  \"10000000000000000000000000000000022\"\n  >>> toBase10(10000000000000000000000000000000023)\n  \"10000000000000000000000000000000023\"\n  >>> toBase10(10000000000000000000000000000000024)\n  \"10000000000000000000000000000000024\"\n  >>> toBase10(10000000000000000000000000000000025)\n  \"10000000000000000000000000000000025\"\n  >>> toBase10(10000000000000000000000000000000026)\n  \"10000000000000000000000000000000026\"\n  >>> toBase10(10000000000000000000000000000000027)\n  \"10000000000000000000000000000000027\"\n  >>> toBase10(10000000000000000000000000000000028)\n  \"10000000000000000000000000000000028\"\n  >>> toBase10(10000000000000000000000000000000029)\n  \"10000000000000000000000000000000029\"\n  >>> toBase10(1000000000000000000000000000000002A)\n  \"1000000000000000000000000000000002A\"\n  >>> toBase10(1000000000000000000000000000000002B)\n  \"1000000000000000000000000000000002B\"\n  >>> toBase10(1000000000000000000000000000000002C)\n  \"1000000000000000000000000000000002C\"\n  >>> toBase10(1000000000000000000000000000000002D)\n  \"1000000000000000000000000000000002D\"\n  >>> toBase10(1000000000000000000000000000000002E)\n  \"1000000000000000000000000000000002E\"\n  >>> toBase10(1000000000000000000000000000000002F)\n  \"1000000000000000000000000000000002F\"\n  >>> toBase10(10000000000000000000000000000000030)\n  \"10000000000000000000000000000000030", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower5 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower6 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower7 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    } else if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      finger", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else {\n      mangos++;\n    }\n  }\n  return mangos - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else {\n      mangos++;\n    }\n  }\n  return mangos - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else {\n      mangos++;\n    }\n  }\n  return mangos - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else {\n      mangos++;\n    }\n  }\n  return mangos - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else {\n      mangos++;\n    }\n  }\n  return mangos - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      apples++;\n    } else if (s[i] === \"o\") {\n      oranges++;\n    } else {\n      mangos++;\n    }\n  }\n  return mangos - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apple", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const evenValues = arr.filter((n) => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue = sortedEvenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { hustle };\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction findSmallestEven(arr) {\n  let smallestEven = arr[0];\n  let smallestEvenIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(findSmallestEven([4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(findSmallestEven([5, 6, 3, 7, 8, 4, 2, 3]));\nconsole.log(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[max]) {\n      freq++;\n    } else {\n      if (freq > 0) {\n        max = i;\n        freq = lst[i];\n      } else {\n        return -1;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers. Your task is to find the maximum sum of any contiguous subarray in the list.\n  Examples:\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -2\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, -5, -3, 1, 4, -5, 2]) = -5\n      maxSubArray([-10, 0, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given a string, return string with each letter capitalized.\n  Capitalization only happens if a letter is capitalized in original string.\n\n  Examples:\n  capitalize('hello') == 'Hello'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n  capitalize('helloWorld') == 'Hello World'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / (a1 * b1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / (a1 * c1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / (b1 * c1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum <= maxWeight;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== max) {\n      arr[i] = arr[i] - min;\n    }\n  }\n  return arr.length;\n};\n\n/*\n  Given an array arr of integers, find the maximum number in the array.\n\n  For example:\n  max([1, 2, 3]) == 3\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(item => lst2.indexOf(item) < 0)\n}\n\n/*\n  Write a function that accepts a string and returns the string with all the chars capitalized.\n\n  Examples\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('hi') ➞ 'Hi'\n  capitalize('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isElementaryWorldPower(x, n / 2);\n  return isElementaryWorldPower(x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return true\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexNum = num.replace(/[^0-9A-F]/g, \"\");\n  const hexNumArr = hexNum.split(\"\");\n  const hexNumArr2 = hexNumArr.map((hexNum) => {\n    if (hexNum === \"A\") {\n      return \"10\";\n    }\n    if (hexNum === \"B\") {\n      return \"11\";\n    }\n    if (hexNum === \"C\") {\n      return \"12\";\n    }\n    if (hexNum === \"D\") {\n      return \"13\";\n    }\n    if (hexNum === \"E\") {\n      return \"14\";\n    }\n    if (hexNum === \"F\") {\n      return \"15\";\n    }\n  });\n  const hexNumArr3 = hexNumArr2.map((hexNum) => {\n    if (hexNum === \"10\") {\n      return \"2\";\n    }\n    if (hexNum === \"11\") {\n      return \"3\";\n    }\n    if (hexNum === \"12\") {\n      return \"5\";\n    }\n    if (hexNum === \"13\") {\n      return \"7\";\n    }\n    if (hexNum === \"14\") {\n      return \"11\";\n    }\n    if (hexNum === \"15\") {\n      return \"13\";\n    }\n  });\n  const hexNumArr4 = hexNumArr3.map((hexNum) => {\n    if (hexNum === \"2\") {\n      return \"3\";\n    }\n    if (hexNum === \"3\") {\n      return \"5\";\n    }\n    if (hexNum === \"5\") {\n      return \"7\";\n    }\n    if (hexNum === \"7\") {\n      return \"11\";\n    }\n    if (hexNum === \"11\") {\n      return \"13\";\n    }\n    if (hexNum === \"13\") {\n      return \"17\";\n    }\n    if (hexNum === \"17\") {\n      return \"19\";\n    }\n    if (hexNum === \"19\") {\n      return \"23\";\n    }\n    if (hexNum === \"23\") {\n      return \"29\";\n    }\n    if (hexNum === \"29\") {\n      return \"31\";\n    }\n    if (hexNum === \"31\") {\n      return \"37\";\n    }\n    if (hexNum === \"37\") {\n      return \"41\";\n    }\n    if (hexNum === \"41\") {\n      return \"43\";\n    }\n    if (hexNum === \"43\") {\n      return \"47\";\n    }\n    if (hexNum === \"47\") {\n      return \"53\";\n    }\n    if (hexNum === \"53\") {\n      return \"59\";\n    }\n    if (hexNum === \"59\") {\n      return \"61\";\n    }\n    if (hexNum === \"61\") {\n      return \"67\";\n    }\n    if (hexNum === \"67\") {\n      return \"71\";\n    }\n    if (hexNum === \"71\") {\n      return \"73\";\n    }\n    if (hexNum === \"73\") {\n      return \"79\";\n    }\n    if (hexNum === \"79\") {\n      return \"83\";\n    }\n    if (hexNum === \"83\") {\n      return \"89\";\n    }\n    if (hexNum === \"89\") {\n      return \"97\";\n    }\n    if (hexNum === \"97\") {\n      return \"101\";\n    }\n    if (hexNum === \"101\") {\n      return \"103\";\n    }\n    if (hexNum === \"103\") {\n      return \"107\";\n    }\n    if (hexNum === \"107\") {\n      return \"109\";\n    }\n    if (hexNum === \"109\") {\n      return \"113\";\n    }\n    if (hexNum === \"113\") {\n      return \"117\";\n    }\n    if (hexNum === \"117\") {\n      return \"121\";\n    }\n    if (hexNum === \"121\") {\n      return \"123\";\n    }\n    if (hexNum === \"123\") {\n      return \"127\";\n    }\n    if (hexNum === \"127\") {\n      return \"131\";\n    }\n    if (hexNum === \"131\") {\n      return \"137\";\n    }\n    if (hexNum === \"137\") {\n      return \"139\";\n    }\n    if (hexNum === \"139\") {\n      return \"149\";\n    }\n    if (hexNum === \"149\") {\n      return \"151\";\n    }\n    if (hexNum === \"151\") {\n      return \"157\";\n    }\n    if (hexNum === \"157\") {\n      return \"163\";\n    }\n    if (hexNum === \"163\") {\n      return \"167\";\n    }\n    if (hexNum === \"167\") {\n      return \"173\";\n    }\n    if (hexNum === \"173\") {\n      return \"179\";\n    }\n    if (hexNum === \"179\") {\n      return \"181\";\n    }\n    if (hexNum === \"181\") {\n      return \"191\";\n    }\n    if (hexNum === \"191\") {\n      return \"193\";\n    }\n    if (hexNum === \"193\") {\n      return \"199\";\n    }\n    if (hexNum === \"199\") {\n      return \"211\";\n    }\n    if (hexNum === \"211\") {\n      return \"223\";\n    }\n    if (hexNum === \"223\") {\n      return \"227\";\n    }\n    if (hexNum === \"227\") {\n      return \"229\";\n    }\n    if (hexNum === \"229\") {\n      return \"233\";\n    }\n    if (hexNum === \"233\") {\n      return \"239\";\n    }\n    if (hexNum === \"239\") {\n      return \"241\";\n    }\n    if (hexNum === \"241\") {\n      return \"251\";\n    }\n    if (hexNum === \"251\") {\n      return \"257\";\n    }\n    if (hexNum === \"257\") {\n      return \"263\";\n    }\n    if (hexNum === \"263\") {\n      return \"269\";\n    }\n    if (hexNum === \"269\") {\n      return \"271\";\n    }\n    if (hexNum === \"271\") {\n      return \"277\";\n    }\n    if (hexNum === \"277\") {\n      return \"281\";\n    }\n    if (hexNum === \"281\") {\n      return \"283\";\n    }\n    if (hexNum === \"283\") {\n      return \"293\";\n    }\n    if (hexNum === \"293\") {\n      return \"307\";\n    }\n    if (hexNum === \"307\") {\n      return \"311\";\n    }\n    if (hexNum === \"311\") {\n      return \"313\";\n    }\n    if (hexNum === \"313\") {\n      return \"317\";\n    }\n    if (hexNum === \"317\") {\n      return \"321\";\n    }\n    if (hexNum === \"321\") {\n      return \"323\";\n    }\n    if (hexNum === \"323\") {\n      return \"327\";\n    }\n    if (hexNum === \"327\") {\n      return \"331\";\n    }\n    if (hexNum === \"331\") {\n      return \"337\";\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return `db${binary}db`;\n};\n\n/*\n  Write a function that converts a binary number to a decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = () => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = () => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = () => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = () => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = () => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal number. The binary number should\n  be represented as a string. Your function should return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = () => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary number. The decimal number should\n  be represented as a string. Your function should return the binary number.\n\n  Examples:\n  decimalToBinary(15) // returns \"1111\"\n  decimalToBinary(32) // returns \"100000\"\n  */\nconst decimalToBinary = () => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSum([])\n  (0, 0)\n  >>> kernelSum([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelSum = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelProduct([])\n  (0, 0)\n  >>> kernelProduct([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct([])\n  (0, 0)\n  >>> kernelSumAndProduct([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct2([])\n  (0, 0)\n  >>> kernelSumAndProduct2([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct2 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct3([])\n  (0, 0)\n  >>> kernelSumAndProduct3([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct4([])\n  (0, 0)\n  >>> kernelSumAndProduct4([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct4 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct5([])\n  (0, 0)\n  >>> kernelSumAndProduct5([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct6([])\n  (0, 0)\n  >>> kernelSumAndProduct6([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct6 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct7([])\n  (0, 0)\n  >>> kernelSumAndProduct7([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    const [sumOfThisNumber, productOfThisNumber] = sum + number, product * number;\n    return [sumOfThisNumber, productOfThisNumber];\n  }, [0, 0]);\n\n  return [sum, product];\n};\n\n/**\n * Given a list, return a tuple consisting of a sum and a product of all the integers in the list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelSumAndProduct8([])\n  (0, 0)\n  >>> kernelSumAndProduct8([1, 2, 3, 4])\n  (24, 120)\n  */\nconst kernelSumAndProduct8 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product] = numbers.reduce(([sum, product", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count === 3;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => true\n  isOnlyLetters(aba) => false\n  isOnlyLetters(abca) => false\n  isOnlyLetters(abcadef) => true\n  isOnlyLetters(abcadefg) => false\n  isOnlyLetters(abcadefgh) => false\n  isOnlyLetters(abcadefghijk) => false\n  isOnlyLetters(abcadefghijklm) => false\n  isOnlyLetters(abcadefghijklmn) => false\n  isOnlyLetters(abcadefghijklmnxyz) => false\n  isOnlyLetters(abcadefghijklmnxyzabc) => false\n  isOnlyLetters(abcadefghijklmnxyzabcde) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeef) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefgh) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghij) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijk) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijkl) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklm) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmn) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyz) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyza) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzab) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabc) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcd) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcde) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeef) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefgh) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghi) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghij) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijk) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijkl) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklm) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmn) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyz) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyza) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzab) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabc) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcd) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcde) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeef) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefgh) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghi) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghij) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijk) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijkl) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklm) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmn) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyz) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyza) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzab) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabc) => false\n  isOnlyLetters(abcadefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcdeefghijklmnxyzabcd) => false\n  isOnlyLetters(ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesDiff = gradesSum - gradesAvg;\n  const gradesDiffPercent = gradesDiff / gradesAvg * 100;\n  const gradesDiffPercentRounded = Math.round(gradesDiffPercent);\n  const gradesDiffPercentRoundedString = gradesDiffPercentRounded.toString();\n  const gradesDiffPercentRoundedStringArray = gradesDiffPercentRoundedString.split('.');\n  const gradesDiffPercentRoundedStringArrayLength = gradesDiffPercentRoundedStringArray.length;\n  const gradesDiffPercentRoundedStringArrayLastIndex = gradesDiffPercentRoundedStringArrayLength - 1;\n  const gradesDiffPercentRoundedStringArrayLast = gradesDiffPercentRoundedStringArray[gradesDiffPercentRoundedStringArrayLastIndex];\n  const gradesDiffPercentRoundedStringArrayLastRounded = Math.round(gradesDiffPercentRoundedStringArrayLast);\n  const gradesDiffPercentRoundedStringArrayLastRoundedString = gradesDiffPercentRoundedStringArrayLastRounded.toString();\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArray = gradesDiffPercentRoundedStringArrayLastRoundedString.split('.');\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLength = gradesDiffPercentRoundedStringArrayLastRoundedStringArray.length;\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastIndex = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLength - 1;\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLast = gradesDiffPercentRoundedStringArrayLastRoundedStringArray[gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastIndex];\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRounded = Math.round(gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLast);\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedString = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRounded.toString();\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray.split('.');\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLength = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray.length;\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastIndex = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLength - 1;\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLast = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray[gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastIndex];\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRounded = Math.round(gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLast);\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedString = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRounded.toString();\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray.split('.');\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLength = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray.length;\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastIndex = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLength - 1;\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLast = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLast[gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastIndex];\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRounded = Math.round(gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLast);\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedString = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRounded.toString();\n  const gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray = gradesDiffPercentRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArrayLastRoundedStringArray.split('.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'e' && string[i]!== 'i' && string[i]!== 'o' && string[i]!== 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  onlyLetters('Hello') == true\n  onlyLetters('abcdcba') == true\n  onlyLetters('kittens') == false\n  onlyLetters('orange') == false\n  */\nconst onlyLetters = (string) => {\n  let letters = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'b' || string[i] === 'c' || string[i] === 'd' || string[i] === 'e' || string[i] === 'f' || string[i] === 'g' || string[i] === 'h' || string[i] === 'i' || string[i] === 'j' || string[i] === 'k' || string[i] === 'l' || string[i] ==='m' || string[i] === 'n' || string[i] === 'o' || string[i] === 'p' || string[i] === 'q' || string[i] === 'r' || string[i] ==='s' || string[i] === 't' || string[i] === 'u' || string[i] === 'v' || string[i] === 'w' || string[i] === 'x' || string[i] === 'y' || string[i] === 'z') {\n      letters = true;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9 or false otherwise\n  Examples\n  onlyDigits('Hello') == true\n  onlyDigits('abcdcba') == true\n  onlyDigits('kittens') == false\n  onlyDigits('orange') == false\n  */\nconst onlyDigits = (string) => {\n  let digits = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0' || string[i] === '1' || string[i] === '2' || string[i] === '3' || string[i] === '4' || string[i] === '5' || string[i] === '6' || string[i] === '7' || string[i] === '8' || string[i] === '9') {\n      digits = true;\n      break;\n    }\n  }\n  return digits;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  onlyUppercase('Hello') == true\n  onlyUppercase('abcdcba') == true\n  onlyUppercase('kittens') == false\n  onlyUppercase('orange') == false\n  */\nconst onlyUppercase = (string) => {\n  let upperCase = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'A' || string[i] === 'B' || string[i] === 'C' || string[i] === 'D' || string[i] === 'E' || string[i] === 'F' || string[i] === 'G' || string[i] === 'H' || string[i] === 'I' || string[i] === 'J' || string[i] === 'K' || string[i] === 'L' || string[i] === 'M' || string[i] === 'N' || string[i] === 'O' || string[i] === 'P' || string[i] === 'Q' || string[i] === 'R' || string[i] === 'S' || string[i] === 'T' || string[i] === 'U' || string[i] === 'V' || string[i] === 'W' || string[i] === 'X' || string[i] === 'Y' || string[i] === 'Z') {\n      upperCase = true;\n      break;\n    }\n  }\n  return upperCase;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  onlyLowercase('Hello') == true\n  onlyLowercase('abcdcba') == true\n  onlyLowercase('kittens') == false\n  onlyLowercase('orange') == false\n  */\nconst onlyLowercase = (string) => {\n  let lowerCase = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'b' || string[i] === 'c' || string[i] === 'd' || string[i] === 'e' || string[i] === 'f' || string[i] === 'g' || string[i] === 'h' || string[i] === 'i' || string[i] === 'j' || string[i] === 'k' || string[i] === 'l' || string[i] ==='m' || string[i] === 'n' || string[i] === 'o' || string[i] === 'p' || string[i] === 'q' || string[i] === 'r' || string[i] ==='s' || string[i] === 't' || string[i] === 'u' || string[i] === 'v' || string[i] === 'w' || string[i] === 'x' || string[i] === 'y' || string[i] === 'z') {\n      lowerCase = true;\n      break;\n    }\n  }\n  return lowerCase;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols!, @, #, $, %, &, *, (, ), =, +, -, /, <, >,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;,,, /, |,?, :, ;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of digits in the given positive integer.\n  */\nconst digitCount = n => n.toString().length;\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount2 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount3 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount4 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount5 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount6 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount7 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount8 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount9 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount10 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount11 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount12 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount13 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount14 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount15 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount16 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount17 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount18 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount19 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount20 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount21 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount22 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount23 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount24 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount25 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount26 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount27 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount28 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount29 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount30 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount31 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount32 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount33 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount34 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount35 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount36 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount37 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount38 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end with 1.\n  */\nconst beginOneEndDigitCount39 = n => beginOneEnd(digitCount(n));\n\n/*\n  Return the number of digits in the given positive integer that start or end ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"15\".\n      For N = 147, the sum of digits will be 12 the output should be \"147\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst resolveDecimal = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  while (sum > 0) {\n    decimal += sum % 10;\n    sum = Math.floor(sum / 10);\n  }\n  return decimal;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"6\".\n      For N = 147, the sum of digits will be 12 the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHex = (N) => {\n  let sum = 0;\n  let hex = \"\";\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  while (sum > 0) {\n    hex += sum % 16;\n    sum = Math.floor(sum / 16);\n  }\n  return hex;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"7\".\n      For N = 147, the sum of digits will be 12 the output should be \"14\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst resolveOct = (N) => {\n  let sum = 0;\n  let oct = \"\";\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  while (sum > 0) {\n    oct += sum % 8;\n    sum = Math.floor(sum / 8);\n  }\n  return oct;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"10\".\n      For N = 147, the sum of digits will be 12 the output should be \"100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolveBinary = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"6\".\n      For N = 147, the sum of digits will be 12 the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst resolveDecimal = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  while (sum > 0) {\n    decimal += sum % 10;\n    sum = Math.floor(sum / 10);\n  }\n  return decimal;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"6\".\n      For N = 147, the sum of digits will be 12 the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHex = (N) => {\n  let sum = 0;\n  let hex = \"\";\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  while (sum > 0) {\n    hex += sum % 16;\n    sum = Math.floor(sum / 16);\n  }\n  return hex;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"7\".\n      For N = 147, the sum of digits will be 12 the output should be \"14\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst resolveOct = (N) => {\n  let sum = 0;\n  let oct = \"\";\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  while (sum > 0) {\n    oct += sum % 8;\n    sum = Math.floor(sum / 8);\n  }\n  return oct;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"10\".\n      For N = 147, the sum of digits will be 12 the output should be \"100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolveBinary = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  return evenIndexes\n}\n\n/*Given a non-empty list of integers lst. find the first element that is greater than or equal to the given number.\n\n\n  Examples:\n      first([4, 2, 6, 7]) ==> 4 \n  */\nconst first = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= number) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is less than or equal to the given number.\n\n\n  Examples:\n      last([4, 2, 6, 7]) ==> 6 \n  */\nconst last = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] <= number) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      first([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      last([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, 2, 6, 7]) ==> 4 \n  */\nconst firstDivisible = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      lastDivisible([4, 2, 6, 7]) ==> 6 \n  */\nconst lastDivisible = (lst) => {\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % number === 0) {\n      return lst[i]\n    }\n  }\n}\n\n/*Given a non-empty list of integers lst. find the first element that is divisible by the given number.\n\n\n  Examples:\n      firstDivisible([4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowRes = catchRow(row, x);\n    if (rowRes.length) res.push(rowRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  catchCol([], 1) == []\n  catchCol([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst catchCol = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const col = lst[i];\n    const colRes = catchCol(col, x);\n    if (colRes.length) res.push(colRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  catchDiag([], 1) == []\n  catchDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst catchDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const diag = lst[i];\n    const diagRes = catchDiag(diag, x);\n    if (diagRes.length) res.push(diagRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  catchDiag([], 1) == []\n  catchDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst catchDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const diag = lst[i];\n    const diagRes = catchDiag(diag, x);\n    if (diagRes.length) res.push(diagRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  catchDiag([], 1) == []\n  catchDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst catchDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const diag = lst[i];\n    const diagRes = catchDiag(diag, x);\n    if (diagRes.length) res.push(diagRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  catchDiag([], 1) == []\n  catchDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst catchDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const diag = lst[i];\n    const diagRes = catchDiag(diag, x);\n    if (diagRes.length) res.push(diagRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (3, 4), (3, 5)]\n  catchDiag([], 1) == []\n  catchDiag([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return b - a;\n    }\n    return a - b;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n  or sort it in ascending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDescAsc([]) => []\n  * sortArrayDescAsc([5]) => [5]\n  * sortArrayDescAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDescAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return b - a;\n    }\n    return a - b;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAscAsc([]) => []\n  * sortArrayAscAsc([5]) => [5]\n  * sortArrayAscAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDescAscAsc([]) => []\n  * sortArrayDescAscAsc([5]) => [5]\n  * sortArrayDescAscAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDescAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescAscAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return b - a;\n    }\n    return a - b;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAscAscAsc([]) => []\n  * sortArrayAscAscAsc([5]) => [5]\n  * sortArrayAscAscAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAscAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscAscAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDescAscAscAsc([]) => []\n  * sortArrayDescAscAscAsc([5]) => [5]\n  * sortArrayDescAscAscAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDescAscAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescAscAscAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a + b > 9) {\n      return b - a;\n    }\n    return a - b;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places clockwise. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'zxcvbnm'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places counterclockwise. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zxcvbnm') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places clockwise. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'zxcvbnm'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places counterclockwise. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zxcvbnm') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places clockwise. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'zxcvbnm'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places counterclockwise. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zxcvbnm') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places clockwise. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'zxcvbnm'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places counterclockwise. \n  For example:\n  rot13('nkr') returns 'hi'\n  rot13('zxcvbnm') returns 'asdfghjkl'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places clockwise. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'zxcvbnm'\n  rot13('gf') returns 'gf'\n  rot13('et') returns 'et'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolledMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rolledMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n      min = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolledSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 3, 4, 4]\n  */\nconst rolledSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum);\n      sum = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolledAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 4, 4]\n  */\nconst rolledAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum / count);\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolledStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.2909944487358063, 3, 4, 4]\n  */\nconst rolledStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(Math.sqrt(sum / count));\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolledVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.2909944487358063, 3, 4, 4]\n  */\nconst rolledVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum / count);\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolledMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 3, 4, 4]\n  */\nconst rolledMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum / count);\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolledMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1, 2, 3, 4, 4]\n  */\nconst rolledMode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    }\n    if (numbers[i] > min) {\n      min = numbers[i];\n      minCount = 1;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n      maxCount = 1;\n    }\n    if (numbers[i] === min) {\n      result.push(min);\n      min = numbers[i];\n      minCount = 1;\n    }\n  }\n  if (maxCount > minCount) {\n    result.push(max);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolledSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 3, 4, 4]\n  */\nconst rolledSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum);\n      sum = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolledAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 4, 4]\n  */\nconst rolledAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum / count);\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolledStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.2909944487358063, 3, 4, 4]\n  */\nconst rolledStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(Math.sqrt(sum / count));\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolledVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.2909944487358063, 3, 4, 4]\n  */\nconst rolledVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum / count);\n      sum = numbers[i];\n      count = 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolledMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 3, 4, 4]\n  */\nconst rolledMedian = (numbers) => {\n  const result = [];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  return lst[1];\n};\n\n/*\n  You are given a list of integers and a number k.\n  Write a function findKthLargest(list, k) that returns the kth largest element in the list.\n  Return null if there is no such element.\n  \n  findKthLargest([1, 2, 3, 4, 5], 2) == 3\n  findKthLargest([5, 1, 4, 3, 2], 2) == 3\n  findKthLargest([], 2) == null\n  findKthLargest([1, 1], 2) == null\n  findKthLargest([5, 1, 4, 3, 2], 3) == 4\n  findKthLargest([5, 1, 4, 3, 2], 4) == 4\n  findKthLargest([5, 1, 4, 3, 2], 5) == 5\n  findKthLargest([5, 1, 4, 3, 2], 6) == null\n  findKthLargest([5, 1, 4, 3, 2], 7) == null\n  findKthLargest([5, 1, 4, 3, 2], 8) == null\n  findKthLargest([5, 1, 4, 3, 2], 9) == null\n  findKthLargest([5, 1, 4, 3, 2], 10) == null\n  findKthLargest([5, 1, 4, 3, 2], 11) == null\n  findKthLargest([5, 1, 4, 3, 2], 12) == null\n  findKthLargest([5, 1, 4, 3, 2], 13) == null\n  findKthLargest([5, 1, 4, 3, 2], 14) == null\n  findKthLargest([5, 1, 4, 3, 2], 15) == null\n  findKthLargest([5, 1, 4, 3, 2], 16) == null\n  findKthLargest([5, 1, 4, 3, 2], 17) == null\n  findKthLargest([5, 1, 4, 3, 2], 18) == null\n  findKthLargest([5, 1, 4, 3, 2], 19) == null\n  findKthLargest([5, 1, 4, 3, 2], 20) == null\n  findKthLargest([5, 1, 4, 3, 2], 21) == null\n  findKthLargest([5, 1, 4, 3, 2], 22) == null\n  findKthLargest([5, 1, 4, 3, 2], 23) == null\n  findKthLargest([5, 1, 4, 3, 2], 24) == null\n  findKthLargest([5, 1, 4, 3, 2], 25) == null\n  findKthLargest([5, 1, 4, 3, 2], 26) == null\n  findKthLargest([5, 1, 4, 3, 2], 27) == null\n  findKthLargest([5, 1, 4, 3, 2], 28) == null\n  findKthLargest([5, 1, 4, 3, 2], 29) == null\n  findKthLargest([5, 1, 4, 3, 2], 30) == null\n  findKthLargest([5, 1, 4, 3, 2], 31) == null\n  findKthLargest([5, 1, 4, 3, 2], 32) == null\n  findKthLargest([5, 1, 4, 3, 2], 33) == null\n  findKthLargest([5, 1, 4, 3, 2], 34) == null\n  findKthLargest([5, 1, 4, 3, 2], 35) == null\n  findKthLargest([5, 1, 4, 3, 2], 36) == null\n  findKthLargest([5, 1, 4, 3, 2], 37) == null\n  findKthLargest([5, 1, 4, 3, 2], 38) == null\n  findKthLargest([5, 1, 4, 3, 2], 39) == null\n  findKthLargest([5, 1, 4, 3, 2], 40) == null\n  findKthLargest([5, 1, 4, 3, 2], 41) == null\n  findKthLargest([5, 1, 4, 3, 2], 42) == null\n  findKthLargest([5, 1, 4, 3, 2], 43) == null\n  findKthLargest([5, 1, 4, 3, 2], 44) == null\n  findKthLargest([5, 1, 4, 3, 2], 45) == null\n  findKthLargest([5, 1, 4, 3, 2], 46) == null\n  findKthLargest([5, 1, 4, 3, 2], 47) == null\n  findKthLargest([5, 1, 4, 3, 2], 48) == null\n  findKthLargest([5, 1, 4, 3, 2], 49) == null\n  findKthLargest([5, 1, 4, 3, 2], 50) == null\n  findKthLargest([5, 1, 4, 3, 2], 51) == null\n  findKthLargest([5, 1, 4, 3, 2], 52) == null\n  findKthLargest([5, 1, 4, 3, 2], 53) == null\n  findKthLargest([5, 1, 4, 3, 2], 54) == null\n  findKthLargest([5, 1, 4, 3, 2], 55) == null\n  findKthLargest([5, 1, 4, 3, 2], 56) == null\n  findKthLargest([5, 1, 4, 3, 2], 57) == null\n  findKthLargest([5, 1, 4, 3, 2], 58) == null\n  findKthLargest([5, 1, 4, 3, 2], 59) == null\n  findKthLargest([5, 1, 4, 3, 2], 60) == null\n  findKthLargest([5, 1, 4, 3, 2], 61) == null\n  findKthLargest([5, 1, 4, 3, 2], 62) == null\n  findKthLargest([5, 1, 4, 3, 2], 63) == null\n  findKthLargest([5, 1, 4, 3, 2], 64) == null\n  findKthLargest([5, 1, 4, 3, 2], 65) == null\n  findKthLargest([5, 1, 4, 3, 2], 66) == null\n  findKthLargest([5, 1, 4, 3, 2], 67) == null\n  findKthLargest([5, 1, 4, 3, 2], 68) == null\n  findKthLargest([5, 1, 4, 3, 2], 69) == null\n  findKthLargest([5, 1, 4, 3, 2], 70) == null\n  findKthLargest([5, 1, 4, 3, 2], 71) == null\n  findKthLargest([5, 1, 4, 3, 2], 72) == null\n  findKthLargest([5, 1, 4, 3, 2], 73) == null\n  findKthLargest([5, 1, 4, 3, 2], 74) == null\n  findKthLargest([5, 1, 4, 3, 2], 75) == null\n  findKthLargest([5, 1, 4, 3, 2], 76) == null\n  findKthLargest([5, 1, 4, 3, 2], 77) == null\n  findKthLargest([5, 1, 4, 3, 2], 78) == null\n  findKthLargest([5, 1, 4, 3, 2], 79) == null\n  findKthLargest([5, 1, 4, 3, 2], 80) == null\n  findKthLargest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are even, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allEven(7, 2, 5) ➞ true\n  allEven(7, -2, 5) ➞ false\n  allEven(7, -2, 3.5) ➞ false\n  allEven(3.6, -2.2, 2) ➞ false\n  */\nconst allEven = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x % 2 === 0 && y % 2 === 0 && z % 2 === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are odd, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allOdd(7, 2, 5) ➞ true\n  allOdd(7, -2, 5) ➞ false\n  allOdd(7, -2, 3.5) ➞ false\n  allOdd(3.6, -2.2, 2) ➞ false\n  */\nconst allOdd = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x % 2 === 1 && y % 2 === 1 && z % 2 === 1) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are positive, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allPositive(7, 2, 5) ➞ true\n  allPositive(7, -2, 5) ➞ false\n  allPositive(7, -2, 3.5) ➞ false\n  allPositive(3.6, -2.2, 2) ➞ false\n  */\nconst allPositive = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > 0 && y > 0 && z > 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are negative, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allNegative(7, 2, 5) ➞ true\n  allNegative(7, -2, 5) ➞ false\n  allNegative(7, -2, 3.5) ➞ false\n  allNegative(3.6, -2.2, 2) ➞ false\n  */\nconst allNegative = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < 0 && y < 0 && z < 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are positive, and all numbers are odd.\n  Returns false in any other cases.\n  Examples\n  allPositiveOdd(7, 2, 5) ➞ true\n  allPositiveOdd(7, -2, 5) ➞ false\n  allPositiveOdd(7, -2, 3.5) ➞ false\n  allPositiveOdd(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveOdd = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > 0 && y > 0 && z > 0) return true\n  if (x % 2 === 0 && y % 2 === 1) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are negative, and all numbers are odd.\n  Returns false in any other cases.\n  Examples\n  allNegativeOdd(7, 2, 5) ➞ true\n  allNegativeOdd(7, -2, 5) ➞ false\n  allNegativeOdd(7, -2, 3.5) ➞ false\n  allNegativeOdd(3.6, -2.2, 2) ➞ false\n  */\nconst allNegativeOdd = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < 0 && y < 0 && z < 0) return true\n  if (x % 2 === 1 && y % 2 === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are positive, and all numbers are even.\n  Returns false in any other cases.\n  Examples\n  allPositiveEven(7, 2, 5) ➞ true\n  allPositiveEven(7, -2, 5) ➞ false\n  allPositiveEven(7, -2, 3.5) ➞ false\n  allPositiveEven(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveEven = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > 0 && y > 0 && z > 0) return true\n  if (x % 2 === 0 && y % 2 === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are negative, and all numbers are even.\n  Returns false in any other cases.\n  Examples\n  allNegativeEven(7, 2, 5) ➞ true\n  allNegativeEven(7, -2, 5) ➞ false\n  allNegativeEven(7, -2, 3.5) ➞ false\n  allNegativeEven(3.6, -2.2, 2) ➞ false\n  */\nconst allNegativeEven = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < 0 && y < 0 && z < 0) return true\n  if (x % 2 === 1 && y % 2 === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are positive, and all numbers are odd.\n  Returns false in any other cases.\n  Examples\n  allPositiveOdd(7, 2, 5) ➞ true\n  allPositiveOdd(7, -2, 5) ➞ false\n  allPositiveOdd(7, -2, 3.5) ➞ false\n  allPositiveOdd(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveOdd = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > 0 && y > 0 && z > 0) return true\n  if (x % 2 === 0 && y % 2 === 1) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are negative, and all numbers are odd.\n  Returns false in any other cases.\n  Examples\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage[i];\n    const nextLetter = newMessage[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  if(isEmpty(dict)) return false;\n  for(let key in dict){\n    if(typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key] && dict[key].toUpperCase() === dict[key]){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerDownTo(5) => [2,3]\n  considerDownTo(11) => [2,3,5,7]\n  considerDownTo(0) => []\n  considerDownTo(20) => [2,3,5,7,11,13,17,19]\n  considerDownTo(1) => []\n  considerDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerDownTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum\n  of all positive integers in the array.\n  for example:\n  sumOfPositives([2,3,5,7]) => [2,5,7]\n  sumOfPositives([2,3,5,7,11,13,17]) => [2,5,7,11,13,17]\n  sumOfPositives([]) => []\n  sumOfPositives([2,3,5,7,11,13,17,19]) => [2,5,7,11,13,17,19]\n  sumOfPositives([2,3,5,7,11,13,17,19,21]) => [2,5,7,11,13,17,19,21]\n  */\nconst sumOfPositives = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum\n  of all negative integers in the array.\n  for example:\n  sumOfNegatives([2,3,5,7]) => [-2,-3,-5,-7]\n  sumOfNegatives([2,3,5,7,11,13,17]) => [-2,-3,-5,-7,-11,-13,-17]\n  sumOfNegatives([]) => []\n  sumOfNegatives([2,3,5,7,11,13,17,19]) => [-2,-3,-5,-7,-11,-13,-17,-19]\n  sumOfNegatives([2,3,5,7,11,13,17,19,21]) => [-2,-3,-5,-7,-11,-13,-17,-19,-21]\n  */\nconst sumOfNegatives = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of\n  all positive integers in the array.\n  for example:\n  productOfPositives([2,3,5,7]) => [2,5,7]\n  productOfPositives([2,3,5,7,11,13,17]) => [2,5,7,11,13,17]\n  productOfPositives([]) => []\n  productOfPositives([2,3,5,7,11,13,17,19]) => [2,5,7,11,13,17,19]\n  productOfPositives([2,3,5,7,11,13,17,19,21]) => [2,5,7,11,13,17,19,21]\n  */\nconst productOfPositives = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of\n  all negative integers in the array.\n  for example:\n  productOfNegatives([2,3,5,7]) => [-2,-3,-5,-7]\n  productOfNegatives([2,3,5,7,11,13,17]) => [-2,-3,-5,-7,-11,-13,-17]\n  productOfNegatives([]) => []\n  productOfNegatives([2,3,5,7,11,13,17,19]) => [-2,-3,-5,-7,-11,-13,-17,-19]\n  productOfNegatives([2,3,5,7,11,13,17,19,21]) => [-2,-3,-5,-7,-11,-13,-17,-19,-21]\n  */\nconst productOfNegatives = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of\n  all positive integers in the array.\n  for example:\n  productOfPositives([2,3,5,7]) => [2,5,7]\n  productOfPositives([2,3,5,7,11,13,17]) => [2,5,7,11,13,17]\n  productOfPositives([]) => []\n  productOfPositives([2,3,5,7,11,13,17,19]) => [2,5,7,11,13,17,19]\n  productOfPositives([2,3,5,7,11,13,17,19,21]) => [2,5,7,11,13,17,19,21]\n  */\nconst productOfPositivesAndNegatives = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      product *= arr[i];\n    }\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of\n  all negative integers in the array.\n  for example:\n  productOfNegatives([2,3,5,7]) => [-2,-3,-5,-7]\n  productOfNegatives([2,3,5,7,11,13,17]) => [-2,-3,-5,-7,-11,-13,-17]\n  productOfNegatives([]) => []\n  productOfNegatives([2,3,5,7,11,13,17,19]) => [-2,-3,-5,-7,-11,-13,-17,-19]\n  productOfNegatives([2,3,5,7,11,13,17,19,21]) => [-2,-3,-5,-7,-11,-13,-17,-19,-21]\n  */\nconst productOfNegativesAndPositives = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      product *= arr[i];\n    }\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of\n  all positive integers in the array.\n  for example:\n  productOfPositivesAndNegatives([2,3,5,7]) => [2,5,7]\n  productOfPositivesAndNegatives([2,3,5,7,11,13,17]) => [2,5,7,11,13,17]\n  productOfPositivesAndNegatives([]) => []\n  productOfPositivesAndNegatives([2,3,5,7,11,13,17,19]) => [2,5,7,11,13,17,19]\n  productOfPositivesAndNegatives([2,3,5,7,11,13,17,19,21]) => [2,5,7,11,13,17,19,21]\n  */\nconst product", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a / b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a + b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return -16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return -2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a - b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 164.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a * b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a + b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return -168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return -2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a - b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 164.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a * b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a + b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return -168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return -2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a - b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 164.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a * b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a + b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return -168.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return -2020.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a - b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 164.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (a > 0 && b > 0) {\n    return a * b\n  } else if (a < 0) {\n    return 0\n  } else if (b < 0) {\n    return 0\n  } else {\n    return 0\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  considerVowels('aBCdEf') returns 2\n  considerVowels('abcdefg') returns 0\n  considerVowels('dBBE') returns 0\n  */\nconst considerVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'A' || s.charAt(i) === 'E' || s.charAt(i) === 'I' || s.charAt(i) === 'O' || s.charAt(i) === 'U') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 3\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonants('aBCdEf') returns 3\n  considerConsonants('abcdefg') returns 0\n  considerConsonants('dBBE') returns 0\n  */\nconst considerConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  considerVowelsOdd('aBCdEf') returns 3\n  considerVowelsOdd('abcdefg') returns 0\n  considerVowelsOdd('dBBE') returns 0\n  */\nconst considerVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'A' || s.charAt(i) === 'E' || s.charAt(i) === 'I' || s.charAt(i) === 'O' || s.charAt(i) === 'U') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  considerConsonantsOdd('aBCdEf') returns 3\n  considerConsonantsOdd('abcdefg') returns 0\n  considerConsonantsOdd('dBBE') returns 0\n  */\nconst considerConsonantsOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  considerConsonantsEven('aBCdEf') returns 3\n  considerConsonantsEven('abcdefg') returns 0\n  considerConsonantsEven('dBBE') returns 0\n  */\nconst considerConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  considerVowelsEven('aBCdEf') returns 3\n  considerVowelsEven('abcdefg') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const number = parseFloat(value)\n  const integerPart = Math.floor(number)\n  const fractionalPart = number - integerPart\n  const integerPartIsNegative = integerPart < 0\n  const fractionalPartIsNegative = fractionalPart < 0\n  const closestIntegerPart = integerPartIsNegative\n   ? integerPart + 1\n    : integerPart\n  const closestFractionalPart = fractionalPartIsNegative\n   ? fractionalPart + 1\n    : fractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPart < 0\n  const closestFractionalPartIsNegative = closestFractionalPart < 0\n  const closestIntegerPartIsZero = closestIntegerPart === 0\n  const closestFractionalPartIsZero = closestFractionalPart === 0\n  const closestIntegerPartIsPositive = closestIntegerPart > 0\n  const closestFractionalPartIsPositive = closestFractionalPart > 0\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsPositive = closestIntegerPartIsPositive\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsPositive = closestFractionalPartIsPositive\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsZero = closestIntegerPartIsZero\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsZero = closestFractionalPartIsZero\n   ? closestFractionalPart + 1\n    : closestFractionalPart\n  const closestIntegerPartIsNegative = closestIntegerPartIsNegative\n   ? closestIntegerPart + 1\n    : closestIntegerPart\n  const closestFractionalPartIsNegative = closestFractionalPartIsNegative\n   ? closestFractional", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
