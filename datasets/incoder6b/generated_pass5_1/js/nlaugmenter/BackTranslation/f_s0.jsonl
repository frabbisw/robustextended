{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = [];\n  let current_group = [];\n  let open_brackets = 0;\n  let closed_brackets = 0;\n  let current_char;\n  let bracket_char;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;\n  let bracket_close;\n  let bracket_index;\n  let bracket_open;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromePrefixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  let longestPalindromePrefixReverseLength = 0;\n  let longestPalindromeSuffixReverseReverse = '';\n  let longestPalindromePrefixReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffix", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order.\n  \n  For example:\n  descendingNumbers([1, 4, 2, 3]) == [3, 2, 4, 1]\n  descendingNumbers([1, 4, 2, 3]) == [4, 3, 2, 1]\n  */\nconst descendingNumbers = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order.\n  \n  For example:\n  ascendingNumbers([1, 4, 2, 3]) == [1, 2, 3, 4]\n  ascendingNumbers([1, 4, 2, 3]) == [4, 1, 2, 3]\n  */\nconst ascendingNumbers = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and remove duplicates.\n  \n  For example:\n  ascendingAndRemoveDuplicates([1, 4, 2, 3]) == [1, 2, 3]\n  ascendingAndRemoveDuplicates([1, 4, 2, 3]) == [4, 2, 3]\n  */\nconst ascendingAndRemoveDuplicates = (arr) => {\n  return arr.sort((a, b) => a - b).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove duplicates.\n  \n  For example:\n  descendingAndRemoveDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  descendingAndRemoveDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in ascending order and remove all duplicates.\n  \n  For example:\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [1, 2, 3]\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 2, 3]\n  */\nconst ascendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => a - b).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [1, 2, 3]\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 2, 3]\n  */\nconst ascendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => a - b).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [1, 2, 3]\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 2, 3]\n  */\nconst ascendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => a - b).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [1, 2, 3]\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 2, 3]\n  */\nconst ascendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => a - b).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [1, 2, 3]\n  ascendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 2, 3]\n  */\nconst ascendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => a - b).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*\n  You get a set of numbers. Your task is to return an array of numbers in descending order and remove all duplicates.\n  \n  For example:\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [3, 2, 1]\n  descendingAndRemoveAllDuplicates([1, 4, 2, 3]) == [4, 3, 2]\n  */\nconst descendingAndRemoveAllDuplicates = (arr) => {\n  return arr.sort((a, b) => b - a).filter((v, i, a) => a.indexOf(v) === i);\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y) + 1;\n};\n\n/*\n  Write a function that takes a positive integer x and returns the largest odd integer that is in the range [x, y].\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = 13\n*/\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of digits in the binary representation of that integer.\n  Example:\n  binaryDigits(1) => 1\n  binaryDigits(5) => 2\n  binaryDigits(100) => 3\n  binaryDigits(1000) => 4\n  binaryDigits(100000000000000000000) => 10\n  binaryDigits(1000000000000000000000) => 11\n  binaryDigits(1000000000000000000000000) => 12\n  binaryDigits(10000000000000000000000000000) => 13\n  binaryDigits(10000000000000000000000000000000) => 14\n  binaryDigits(100000000000000000000000000000000) => 15\n  binaryDigits(1000000000000000000000000000000000) => 16\n  binaryDigits(1000000000000000000000000000000000000) => 17\n  binaryDigits(1000000000000000000000000000000000000000) => 18\n  binaryDigits(10000000000000000000000000000000000000000) => 19\n  binaryDigits(100000000000000000000000000000000000000000) => 20\n  binaryDigits(100000000000000000000000000000000000000000000) => 21\n  binaryDigits(100000000000000000000000000000000000000000000000) => 22\n  binaryDigits(1000000000000000000000000000000000000000000000000) => 23\n  binaryDigits(10000000000000000000000000000000000000000000000000) => 24\n  binaryDigits(10000000000000000000000000000000000000000000000000000) => 25\n  binaryDigits(10000000000000000000000000000000000000000000000000000000) => 26\n  binaryDigits(100000000000000000000000000000000000000000000000000000000) => 27\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000) => 28\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000) => 29\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000) => 30\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000) => 31\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000) => 32\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000) => 33\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000) => 34\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000) => 35\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000) => 36\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000) => 37\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000) => 38\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000) => 39\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000) => 40\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000) => 41\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000) => 42\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000) => 43\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 44\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 45\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 46\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 47\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 48\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 49\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 50\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 51\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 52\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 53\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 54\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 55\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 56\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 57\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 58\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 59\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 60\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 61\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 62\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 63\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 64\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 65\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 66\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 67\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 68\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 69\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 70\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 71\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 72\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 73\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 74\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 75\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 76\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 77\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 78\n  binaryDigits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 79\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 80\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 81\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 82\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 83\n  binaryDigits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 84\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 85\n  binaryDigits(100000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === 1) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      unique.push(x[i]);\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits2 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits3 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits4 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits5 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits6 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits7 = (x) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] === undefined) {\n      digits[x[i]] = 1;\n    } else {\n      digits[x[i]]++;\n    }\n  }\n  const unique = [];\n  for (let i = 0; i < x.length; i++) {\n    if (digits[x[i]] % 2 === 0) {\n      if (digits[x[i]] % 2!== 0) {\n        unique.push(x[i]);\n      }\n    }\n  }\n  return unique;\n};\n\n/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit and odd digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    const num = reversed[i];\n    result.push(\n      num > 9? `${num - 10}${names[num - 10]}` : names[num]\n    );\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array where each element is the sum of the original array except for the first and last elements.\n\n  For example:\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = []\n          -> return []\n    arr = [1, 2]\n          -> return [1, 2]\n    arr = [1, 2]\n          -> return [1, 2]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr = [1, 2, 3, 4, 5]\n          -> return [6, 10, 15]\n    arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function g, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function h, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function i, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 3, 9, 27, 81]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function j, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function k, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function l, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 9, 27, 81]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function m, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function n, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 9, 27, 81]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function o, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function p, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function q, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 3, 9, 27, 81]\n  */\nconst q = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function r, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  r(5) == [1, 3, 9, 27, 81]\n  */\nconst r = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverse = str\n     .split('')\n     .reverse()\n     .join('');\n    if (str === reverse) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a string, return a new string where all characters have been reverse ordered.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" is the reverse of \"abc\".\n\n  Example 2:\n\n      Input: \"aba\"\n      Output: \"baa\"\n      Explanation: \"baa\" is the reverse of \"aba\".\n\n  Example 3:\n\n      Input: \"abca\"\n      Output: \"caba\"\n      Explanation: \"caba\" is the reverse of \"abca\".\n\n  Note:\n      1. String consists of lowercase English letters only.\n      2. String length will be in the range [1, 1000].\n      3. String consists only of lowercase English letters only.\n*/\nconst reverseString = (str) => {\n  let reverse = '';\n  for (let i = 0; i < str.length; i++) {\n    reverse += str[i];\n  }\n  return reverse;\n};\n\nexport { reverseString };\n\n/*\n  Given a string, return a new string where all characters have been reverse ordered, except for the first and last characters.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" is the reverse of \"abc\".\n\n  Example 2:\n\n      Input: \"aba\"\n      Output: \"baa\"\n      Explanation: \"baa\" is the reverse of \"aba\".\n\n  Example 3:\n\n      Input: \"abca\"\n      Output: \"caba\"\n      Explanation: \"caba\" is the reverse of \"abca\".\n\n  Note:\n      1. String consists of lowercase English letters only.\n      2. String length will be in the range [1, 1000].\n      3. String consists only of lowercase English letters only.\n*/\nconst reverseStringExceptFirstAndLast = (str) => {\n  let reverse = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i === 0 || i === str.length - 1) {\n      reverse += str[i];\n    } else {\n      reverse += str[i].split('').reverse().join('');\n    }\n  }\n  return reverse;\n};\n\nexport { reverseStringExceptFirstAndLast };\n\n/*\n  Given a string, return a new string where all characters have been reverse ordered, except for the first and last characters, ignoring case.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" is the reverse of \"abc\".\n\n  Example 2:\n\n      Input: \"aba\"\n      Output: \"baa\"\n      Explanation: \"baa\" is the reverse of \"aba\".\n\n  Example 3:\n\n      Input: \"abca\"\n      Output: \"caba\"\n      Explanation: \"caba\" is the reverse of \"abca\".\n\n  Note:\n      1. String consists of lowercase English letters only.\n      2. String length will be in the range [1, 1000].\n      3. String consists only of lowercase English letters only.\n*/\nconst reverseStringExceptFirstAndLastIgnoreCase = (str) => {\n  let reverse = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i === 0 || i === str.length - 1) {\n      reverse += str[i];\n    } else {\n      reverse += str[i].toLowerCase().split('').reverse().join('');\n    }\n  }\n  return reverse;\n};\n\nexport { reverseStringExceptFirstAndLastIgnoreCase };\n\n/*\n  Given a string, return a new string where all characters have been reverse ordered, except for the first and last characters, ignoring case.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" is the reverse of \"abc\".\n\n  Example 2:\n\n      Input: \"aba\"\n      Output: \"baa\"\n      Explanation: \"baa\" is the reverse of \"aba\".\n\n  Example 3:\n\n      Input: \"abca\"\n      Output: \"caba\"\n      Explanation: \"caba\" is the reverse of \"abca\".\n\n  Note:\n      1. String consists of lowercase English letters only.\n      2. String length will be in the range [1, 1000].\n      3. String consists only of lowercase English letters only.\n*/\nconst reverseStringExceptFirstAndLastIgnoreCase = (str) => {\n  let reverse = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i === 0 || i === str.length - 1) {\n      reverse += str[i];\n    } else {\n      reverse += str[i].toLowerCase().split('').reverse().join('');\n    }\n  }\n  return reverse;\n};\n\nexport { reverseStringExceptFirstAndLastIgnoreCase };\n\n/*\n  Given a string, return a new string where all characters have been reverse ordered, except for the first and last characters, ignoring case.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" is the reverse of \"abc\".\n\n  Example 2:\n\n      Input: \"aba\"\n      Output: \"baa\"\n      Explanation: \"baa\" is the reverse of \"aba\".\n\n  Example 3:\n\n      Input: \"abca\"\n      Output: \"caba\"\n      Explanation: \"caba\" is the reverse of \"abca\".\n\n  Note:\n      1. String consists of lowercase English letters only.\n      2. String length will be in the range [1, 1000].\n      3. String consists only of lowercase English letters only.\n*/\nconst reverseStringExceptFirstAndLastIgnoreCase = (str) => {\n  let reverse = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i === 0 || i === str.length - 1) {\n      reverse += str[i];\n    } else {\n      reverse += str[i].toLowerCase().split('').reverse().join('');\n    }\n  }\n  return reverse;\n};\n\nexport { reverseStringExceptFirstAndLastIgnoreCase };\n\n/*\n  Given a string, return a new string where all characters have been reverse ordered, except for the first and last characters, ignoring case.\n\n  Example 1:\n\n      Input: \"abc\"\n      Output: \"cba\"\n      Explanation: \"cba\" is the reverse of \"abc\".\n\n  Example 2:\n\n      Input: \"aba\"\n      Output: \"baa\"\n      Explanation: \"baa\" is the reverse of \"aba\".\n\n  Example 3:\n\n      Input: \"abca\"\n      Output: \"caba\"\n      Explanation: \"caba\" is the reverse of \"abca\".\n\n  Note:\n      1. String consists of lowercase English letters ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and < 9. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsMoreThan9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and > 9. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsMoreThan9Zero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0 and < 9. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsLessThan9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0 && arr[i] < 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0 and > 9. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsLessThan9Zero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0 && arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits == 0 and < 9. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroLessThan9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0 && arr[i] < 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits == 0 and > 9. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroMoreThan9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0 && arr[i] > 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0 and == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0 and == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroZeroZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0 and < 9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let temp;\n  while (left < right) {\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of integers and returns true if it is possible\n  to sort it in non-decreasing order else return false.\n  \n  Explanation: \n  \n  If the given array is empty then return true.\n  If the given array has unique elements then return true.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let temp;\n  while (left < right) {\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of integers and returns true if it is possible\n  to sort it in non-decreasing order else return false.\n  \n  Explanation: \n  \n  If the given array is empty then return true.\n  If the given array has unique elements then return true.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let temp;\n  while (left < right) {\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of integers and returns true if it is possible\n  to sort it in non-decreasing order else return false.\n  \n  Explanation: \n  \n  If the given array is empty then return true.\n  If the given array has unique elements then return true.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let temp;\n  while (left < right) {\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of integers and returns true if it is possible\n  to sort it in non-decreasing order else return false.\n  \n  Explanation: \n  \n  If the given array is empty then return true.\n  If the given array has unique elements then return true.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let temp;\n  while (left < right) {\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of integers and returns true if it is possible\n  to sort it in non-decreasing order else return false.\n  \n  Explanation: \n  \n  If the given array is empty then return true.\n  If the given array has unique elements then return true.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let temp;\n  while (left < right) {\n    temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    left++;\n    right--;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of integers and returns true if it is possible\n  to sort it in non-decreasing order else return false.\n  \n  Explanation: \n  \n  If the given array is empty then return true.\n  If the given array has unique elements then return true.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XNOR on these inputs and return the result as a string.\n  >>> stringXnor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XNOR on these inputs and return the result as a string.\n  >>> stringXnor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XNOR on these inputs and return the result as a string.\n  >>> stringXnor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.\n  >>> stringNot('010', '110')\n  '001'\n  */\nconst stringNot = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XNOR on these inputs and return the result as a string.\n  >>> stringXnor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary OR on these inputs and return the result as a string.\n  >>> stringOr('010', '110')\n  '111'\n  */\nconst stringOr = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary AND on these inputs and return the result as a string.\n  >>> stringAnd('010', '110')\n  '011'\n  */\nconst stringAnd = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary NOT on these inputs and return the result as a string.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Write your code here\n}\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMin = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMax = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMinMax = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMaxMin = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMinMaxMin = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMaxMinMax = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMinMaxMax = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the smallest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMaxMinMaxMin = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  }\n  return histogram\n}\n\n/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest occurrence and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramMaxMinMaxMax = (test) => {\n  let histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let reversedString = s.split(\"\").reverse().join(\"\");\n  let result = reversedString.split(\"\").filter((char) => char === c).join(\"\");\n  return [result, s.split(\"\").filter((char) => char === c).length === 0];\n};\n\nconst checkPalindrome = (s, c) => {\n  let result = reverseDelete(s, c);\n  return result[1] === true;\n};\n\nconsole.log(checkPalindrome(\"abcde\", \"ae\"));\nconsole.log(checkPalindrome(\"abcdef\", \"b\"));\nconsole.log(checkPalindrome(\"abcdedcba\", \"ab\"));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,string,palindrome,arrays |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a tags=javascript,string,palindrome,arrays |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,string,palindrome,arrays |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a tags=javascript,string,palindrome,arrays |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a tags=javascript,string,palindrome,arrays |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a dscore=0 |>\n<code>\nfunction palindrome(str) {\n  let reverse = str.split('').reverse().join('');\n  return reverse === str;\n}\n\nconsole.log(palindrome('abcde'));\nconsole.log(palindrome('abcdef'));\nconsole.log(palindrome('abcdedcba'));\nconsole.log(palindrome('ab'));</code>\n<|/ a tags=javascript,string,palindrome,arrays |>\n<| a tags=javascript,string,palindrome,arrays |>\n<code>\nfunction palindrome(str) {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        oddCount++;\n      }\n    }\n    oddCountArr.push(`${oddCount} odd elements in the str${j} ${i} of the ${i}nput.`);\n  }\n  return oddCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of even elements in the string i of input,\" with all i's being replaced by the number of even digits in the i'th string of input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(`${evenCount} even elements in the str${j} ${i} of the ${i}nput.`);\n  }\n  return evenCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of digits in string i of input,\" with all i's being replaced by the number of digits in string i of input.\n\n  >>> digitCount(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digitCount(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digitCount = (lst) => {\n  let digitCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let digitCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      digitCount += lst[i][j].length;\n    }\n    digitCountArr.push(`${digitCount} digits in str${j} ${i} of the ${i}nput.`);\n  }\n  return digitCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of strings in which each string consists only of digits in string i of input,\" with all i's being replaced by the number of strings in which each string consists only of digits in string i of input.\n\n  >>> digitStringCount(['1234567'])\n  [\"the number of strings 4n the str4ng 4 of the 4nput.\"]\n  >>> digitStringCount(['3',\"11111111\"])\n  [\"the number of strings 1n the str1ng 1 of the 1nput.\",\n   \"the number of strings 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digitStringCount = (lst) => {\n  let digitStringCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let digitStringCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].length === digitCount(lst[i])[j]) {\n        digitStringCount++;\n      }\n    }\n    digitStringCountArr.push(`${digitStringCount} strings in str${j} ${i} of the ${i}nput.`);\n  }\n  return digitStringCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of strings in which each string consists only of digits in string i of input,\" with all i's being replaced by the number of strings in which each string consists only of digits in string i of input.\n\n  >>> digitStringCount2(['1234567'])\n  [\"the number of strings 4n the str4ng 4 of the 4nput.\"]\n  >>> digitStringCount2(['3',\"11111111\"])\n  [\"the number of strings 1n the str1ng 1 of the 1nput.\",\n   \"the number of strings 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digitStringCount2 = (lst) => {\n  let digitStringCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let digitStringCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].length === digitCount(lst[i])[j]) {\n        digitStringCount++;\n      }\n    }\n    digitStringCountArr.push(`${digitStringCount} strings in str${j} ${i} of the ${i}nput.`);\n  }\n  return digitStringCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of strings in which each string consists only of digits in string i of input,\" with all i's being replaced by the number of strings in which each string consists only of digits in string i of input.\n\n  >>> digitStringCount3(['1234567'])\n  [\"the number of strings 4n the str4ng 4 of the 4nput.\"]\n  >>> digitStringCount3(['3',\"11111111\"])\n  [\"the number of strings 1n the str1ng 1 of the 1nput.\",\n   \"the number of strings 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digitStringCount3 = (lst) => {\n  let digitStringCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let digitStringCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].length === digitCount(lst[i])[j]) {\n        digitStringCount++;\n      }\n    }\n    digitStringCountArr.push(`${digitStringCount} strings in str${j} ${i} of the ${i}nput.`);\n  }\n  return digitStringCountArr;\n};\n\n/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of strings in which each string consists only of digits in string i of input,\" with all i's being replaced by the number of strings in which each string consists only of digits in string i of input.\n\n  >>> digitStringCount4(['1234567'])\n  [\"the number of strings 4n the str4ng 4 of the 4nput.\"]\n  >>> digitStringCount4(['3',\"11111111\"])\n  [\"the number of strings 1n the str1ng 1 of the 1nput.\",\n   \"the number of strings 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digitStringCount4 = (lst) => {\n  let digitStringCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let digitStringCount = 0;\n    for (let j = 0; j < lst[i].length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, curr) => acc + curr, 0);\n    if (currentSum < min) {\n      min = currentSum;\n      minIndex = i;\n    }\n  }\n  return nums[minIndex];\n};\n\n/*\n  Given an array of integers, return a new array with all duplicate numbers removed.\n  Example\n  removeDuplicates([1, 1, 2, 3]) → [1, 2, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, 2, 3]) → [1, 3]\n  removeDuplicates([1, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, rowIndex) => {\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < row.length; i++) {\n      bucket[row[i]]++;\n    }\n    return bucket;\n  });\n\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    for (let j = 0; j < buckets[i].length; j++) {\n      if (buckets[i][j] > 0) {\n        count += buckets[i][j];\n        buckets[i][j] = 0;\n      }\n    }\n  }\n\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are given an array of integers representing a 2D grid of 0s and 1s.\n  Each 1 represents land, and each 0 represents water.\n  You want to know how many possible ways you can transform the grid into water\n  (represented by land) on a single land.\n\n  Example 1:\n      Input: [\n          [0,1,0,1],\n          [1,1,1,1],\n          [0,0,1,0]\n        ]\n      Output: 3\n  \n  Example 2:\n      Input: [\n          [1,0,1,0],\n          [0,1,0,1],\n          [1,1,1,1]\n        ]\n      Output: 4\n  \n  Example 3:\n      Input: [\n          [1,0,1,0],\n          [1,1,1,1],\n          [0,1,0,1]\n        ]\n      Output: 5\n  \n  Constraints:\n      * The input array size will be in the range [1, 100].\n      * The input array elements will be either 0 or 1.\n      * The output will fit in a 32-bit integer.\n*/\nconst maxWaterFill = (grid) => {\n  const map = new Map();\n  const result = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        map.set(grid[i][j], 1);\n      } else {\n        map.set(grid[i][j], map.get(grid[i][j]) + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < map.size; i++) {\n    const value = map.get(i);\n    if (value > 0) {\n      result.push(value);\n      map.delete(i);\n    }\n  }\n\n  return result.length;\n};\n\nexport { maxWaterFill };\n\n/*\n  You are given an array of integers representing a 2D grid of 0s and 1s.\n  Each 1 represents land, and each 0 represents water.\n  You want to know how many possible ways you can transform the grid into water\n  (represented by land) on a single land.\n\n  Example 1:\n      Input: [\n          [0,1,0,1],\n          [1,1,1,1],\n          [0,0,1,0]\n        ]\n      Output: 3\n  \n  Example 2:\n      Input: [\n          [1,0,1,0],\n          [0,1,0,1],\n          [1,1,1,1]\n        ]\n      Output: 4\n  \n  Example 3:\n      Input: [\n          [1,0,1,0],\n          [1,1,1,1],\n          [0,1,0,1]\n        ]\n      Output: 5\n  \n  Constraints:\n      * The input array size will be in the range [1, 100].\n      * The input array elements will be either 0 or 1.\n      * The output will fit in a 32-bit integer.\n*/\nconst maxWaterFill2 = (grid) => {\n  const map = new Map();\n  const result = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        map.set(grid[i][j], 1);\n      } else {\n        map.set(grid[i][j], map.get(grid[i][j]) + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < map.size; i++) {\n    const value = map.get(i);\n    if (value > 0) {\n      result.push(value);\n      map.delete(i);\n    }\n  }\n\n  return result.length;\n};\n\nexport { maxWaterFill2 };\n\n/*\n  You are given an array of integers representing a 2D grid of 0s and 1s.\n  Each 1 represents land, and each 0 represents water.\n  You want to know how many possible ways you can transform the grid into water\n  (represented by land) on a single land.\n\n  Example 1:\n      Input: [\n          [0,1,0,1],\n          [1,1,1,1],\n          [0,0,1,0]\n        ]\n      Output: 3\n  \n  Example 2:\n      Input: [\n          [1,0,1,0],\n          [0,1,0,1],\n          [1,1,1,1]\n        ]\n      Output: 4\n  \n  Example 3:\n      Input: [\n          [1,0,1,0],\n          [1,1,1,1],\n          [0,1,0,1]\n        ]\n      Output: 5\n  \n  Constraints:\n      * The input array size will be in the range [1, 100].\n      * The input array elements will be either 0 or 1.\n      * The output will fit in a 32-bit integer.\n*/\nconst maxWaterFill3 = (grid) => {\n  const map = new Map();\n  const result = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        map.set(grid[i][j], 1);\n      } else {\n        map.set(grid[i][j], map.get(grid[i][j]) + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < map.size; i++) {\n    const value = map.get(i);\n    if (value > 0) {\n      result.push(value);\n      map.delete(i);\n    }\n  }\n\n  return result.length;\n};\n\nexport { maxWaterFill3 };\n\n/*\n  You are given an array of integers representing a 2D grid of 0s and 1s.\n  Each 1 represents land, and each 0 represents water.\n  You want to know how many possible ways you can transform the grid into water\n  (represented by land) on a single land.\n\n  Example 1:\n      Input: [\n          [0,1,0,1],\n          [1,1,1,1],\n          [0,0,1,0]\n        ]\n      Output: 3\n  \n  Example 2:\n      Input: [\n          [1,0,1,0],\n          [0,1,0,1],\n          [1,1,1,1]\n        ]\n      Output: 4\n  \n  Example 3:\n      Input: [\n          [1,0,1,0],\n          [1,1,1,1],\n          [0,1,0,1]\n        ]\n      Output: 5\n  \n  Constraints:\n      * The input array size will be in the range [1, 100].\n      * The input array elements will be either 0 or 1.\n      * The output will fit in a 32-bit integer.\n*/\nconst maxWaterFill4 = (grid) => {\n  const map = new Map();\n  const result = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        map.set(grid[i][j], 1);\n      } else {\n        map.set(grid[i][j], map.get(grid[i][j]) + 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < map.size; i++) {\n    const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let oneCount = 0;\n  let decimalCount = 0;\n  let sortedArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decimalCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decimalCount) {\n      sortedArray.push(arr[i]);\n    }\n  }\n  return sortedArray;\n};\n\n// Test Cases\nconst testCases = [\n  [1, 5, 2, 3, 4],\n  [-2, -3, -4, -5, -6],\n  [1, 0, 2, 3, 4],\n  [0, 1, 2, 3, 4],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5],", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      arr.push(s.split(n));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArray = vowels.split(\"\");\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndexLengthMinusOne = 0;\n  let vowelsArrayIndexLengthMinusTwo = 0;\n  let vowelsArrayIndexLengthMinusThree = 0;\n  let vowelsArrayIndexLengthMinusFour = 0;\n  let vowelsArrayIndexLengthMinusFive = 0;\n  let vowelsArrayIndexLengthMinusSix = 0;\n  let vowelsArrayIndexLengthMinusSeven = 0;\n  let vowelsArrayIndexLengthMinusEight = 0;\n  let vowelsArrayIndexLengthMinusNine = 0;\n  let vowelsArrayIndexLengthMinusTen = 0;\n  let vowelsArrayIndexLengthMinusEleven = 0;\n  let vowelsArrayIndexLengthMinusTwelve = 0;\n  let vowelsArrayIndexLengthMinusThirteen = 0;\n  let vowelsArrayIndexLengthMinusFourteen = 0;\n  let vowelsArrayIndexLengthMinusFifteen = 0;\n  let vowelsArrayIndexLengthMinusSixteen = 0;\n  let vowelsArrayIndexLengthMinusSeventeen = 0;\n  let vowelsArrayIndexLengthMinusEighteen = 0;\n  let vowelsArrayIndexLengthMinusNineteen = 0;\n  let vowelsArrayIndexLengthMinusTwenty = 0;\n  let vowelsArrayIndexLengthMinusThirty = 0;\n  let vowelsArrayIndexLengthMinusForty = 0;\n  let vowelsArrayIndexLengthMinusFifty = 0;\n  let vowelsArrayIndexLengthMinusSixty = 0;\n  let vowelsArrayIndexLengthMinusSeventy = 0;\n  let vowelsArrayIndexLengthMinusEighty = 0;\n  let vowelsArrayIndexLengthMinusNinety = 0;\n  let vowelsArrayIndexLengthMinusOnehundred = 0;\n  let vowelsArrayIndexLengthMinusOnethousand = 0;\n  let vowelsArrayIndexLengthMinusOnemillion = 0;\n  let vowelsArrayIndexLengthMinusOnebillion = 0;\n  let vowelsArrayIndexLengthMinusOnetrillion = 0;\n  let vowelsArrayIndexLengthMinusOnequadrillion = 0;\n  let vowelsArrayIndexLengthMinusOnequintillion = 0;\n  let vowelsArrayIndexLengthMinusOnesextillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptillion = 0;\n  let vowelsArrayIndexLengthMinusOneoctillion = 0;\n  let vowelsArrayIndexLengthMinusOnenonillion = 0;\n  let vowelsArrayIndexLengthMinusOnedecillion = 0;\n  let vowelsArrayIndexLengthMinusOneundecillion = 0;\n  let vowelsArrayIndexLengthMinusOneduodecillion = 0;\n  let vowelsArrayIndexLengthMinusOnetredecillion = 0;\n  let vowelsArrayIndexLengthMinusOnequattuordecillion = 0;\n  let vowelsArrayIndexLengthMinusOnequindecillion = 0;\n  let vowelsArrayIndexLengthMinusOnesexdecillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptuordecillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptendecillion = 0;\n  let vowelsArrayIndexLengthMinusOneoctodecillion = 0;\n  let vowelsArrayIndexLengthMinusOnenovemdecillion = 0;\n  let vowelsArrayIndexLengthMinusOnevigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneunvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneduovigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnetrevigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnequattuorvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnequinvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnesexvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptuorvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptenvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneoctovigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnenovemvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneninevigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnedecillion = 0;\n  let vowelsArrayIndexLengthMinusOneundecillion = 0;\n  let vowelsArrayIndexLengthMinusOneduodecillion = 0;\n  let vowelsArrayIndexLengthMinusOnetredecillion = 0;\n  let vowelsArrayIndexLengthMinusOnequattuordecillion = 0;\n  let vowelsArrayIndexLengthMinusOnequindecillion = 0;\n  let vowelsArrayIndexLengthMinusOnesexdecillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptuordecillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptendecillion = 0;\n  let vowelsArrayIndexLengthMinusOneoctodecillion = 0;\n  let vowelsArrayIndexLengthMinusOnenovemdecillion = 0;\n  let vowelsArrayIndexLengthMinusOnevigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneunvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneduovigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnetrevigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnequattuorvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnequinvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnesexvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptuorvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneseptenvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneoctovigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnenovemvigintillion = 0;\n  let vowelsArrayIndexLengthMinusOneninevigintillion = 0;\n  let vowelsArrayIndexLengthMinusOnedecillion = 0;\n  let vowelsArrayIndexLengthMinusOneundecillion = 0;\n  let vowelsArrayIndexLengthMinusOneduodecillion = 0;\n  let vowelsArrayIndexLengthMinusOnetredecillion = 0;\n  let vowelsArrayIndexLengthMinusOnequattuordecillion = 0;\n  let vowelsArrayIndexLengthMinusOnequin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let openCount = 0;\n  let closeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openCount++;\n    } else if (lst[i] === ')') {\n      closeCount++;\n    }\n  }\n  return openCount === closeCount;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  let maxLength = 0;\n  let maxString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n\n    if (string.length > maxLength) {\n      maxLength = string.length;\n      maxString = string;\n    }\n  }\n\n  return maxString;\n};\n\n/* Returns the shortest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  let minLength = 0;\n  let minString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n\n    if (string.length < minLength) {\n      minLength = string.length;\n      minString = string;\n    }\n  }\n\n  return minString;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/* Returns the number of times the string appears in the list of strings. Returns zero if the input list is empty.\n  >>> count('a', 'a')\n\n  >>> count('a', 'ab')\n  1\n  >>> count('a', 'aba')\n  2\n  */\nconst count = (string, strings) => {\n  let count = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      count++;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const item = arr[i];\n    if (result.length < k) {\n      result.push(item);\n    } else if (item > result[result.length - 1]) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [3,2,1,0,3,6]\n      Output: 0\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst singleNumber = (arr) => {\n  let singleNumber = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item === arr[i - 1]) {\n      singleNumber = item;\n      break;\n    }\n  }\n  return singleNumber;\n};\n\nexport { singleNumber };\n\n/*\n  Given a non-empty array of integers, every element appears exactly twice, except for one. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [3,2,1,0,3,6]\n      Output: 0\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst singleNumber2 = (arr) => {\n  let singleNumber = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item === arr[i - 1]) {\n      singleNumber = item;\n      break;\n    }\n  }\n  return singleNumber;\n};\n\nexport { singleNumber2 };\n\n/*\n  Given a non-empty array of integers arr, return a new array containing all of the integers arranged such that they form the largest number, with the largest number appearing first.\n\n  Example 1:\n\n      Input: [3,2,1,0,5,6]\n      Output: [6,5,4,3,2,1]\n\n  Example 2:\n\n      Input: [3,0,5,6,2,1,4]\n      Output: [4,2,6,3,1,5,0]\n\n  Example 3:\n\n      Input: [3,6,9,0,5,6,2,1,4]\n      Output: [4,2,6,3,9,5,0,1,6]\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst largestNumbers = (arr) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item > max) {\n      max = item;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item === max) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nexport { largestNumbers };\n\n/*\n  Given a non-empty array of integers arr, return a new array containing all of the integers arranged such that they form the smallest number, with the smallest number appearing first.\n\n  Example 1:\n\n      Input: [3,2,1,0,5,6]\n      Output: [2,1,0,3,6,5,4]\n\n  Example 2:\n\n      Input: [3,0,5,6,2,1,4]\n      Output: [2,1,4,3,0,5,6]\n\n  Example 3:\n\n      Input: [3,6,9,0,5,6,2,1,4]\n      Output: [2,1,4,3,9,6,5,0,6]\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst smallestNumbers = (arr) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item < min) {\n      min = item;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item === min) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nexport { smallestNumbers };\n\n/*\n  Given a non-empty array of integers arr, return a new array containing all of the integers arranged such that they form the sum of some numbers, with the sum added up properly.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [2,3,4]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-3,0,5]\n\n  Example 3:\n\n      Input: [-10,-3,0,5,-10,-3,0,5]\n      Output: [-10,-3,0,8,-10,-3,0,12]\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst sum = (arr) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    sum += item;\n    result.push(sum);\n  }\n  return result;\n};\n\nexport { sum };\n\n/*\n  Given a non-empty array of integers arr, return a new array containing all of the integers arranged such that they form the product of some numbers, with the product multiplied properly.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,4,9]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-9,0,15,-10,-9,0,30]\n\n  Example 3:\n\n      Input: [-10,-3,0,5,-10,-3,0,5]\n      Output: [-10,-9,0,15,-10,-45,0,30]\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst product = (arr) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    product *= item;\n    result.push(product);\n  }\n  return result;\n};\n\nexport { product };\n\n/*\n  Given a non-empty array of integers arr, return a new array containing all of the integers arranged such that they form the largest product of some numbers.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,8,27]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-9,0,30,-10,-9,0,30]\n\n  Example 3:\n\n      Input: [-10,-3,0,5,-10,-3,0,5]\n      Output: [-10,-9,0,30,-10,-45,0,30]\n\n  Note:\n      Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n*/\nconst largestProduct = (arr) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item > max) {\n      max = item;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (item === max) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nexport { lar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all even elements in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 15\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==> 321\n  */\nconst solution15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsThreeDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFourDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFiveDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsSixDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsSevenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsEightDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNineDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of eleven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsElevenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of twelve digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwelveDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of thirteen digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsThirteenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array arr of integers, find the sum of the elements with a maximum of fourteen digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n      prev *= 2;\n    } else {\n      prev += 3;\n      current *= 2;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n      prev *= 2;\n    } else {\n      prev += 3;\n      current *= 2;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1], so the even numbers are only 5, and 16.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n      prev *= 2;\n    } else {\n      prev += 3;\n      current *= 2;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [5, 16, 8, 4, 2, 1], so the odd numbers are only 5, and 16.\n  */\nconst getOddCollatzDesc = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n      prev *= 2;\n    } else {\n      prev += 3;\n      current *= 2;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1], so the even numbers are only 5, and 16.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n      prev *= 2;\n    } else {\n      prev += 3;\n      current *= 2;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1], so the even numbers are only 5, and 16.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let result = [];\n  let prev = 1;\n  let current = 1;\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n      prev *= 2;\n    } else {\n      prev += 3;\n      current *= 2;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonthArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthArrayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const dateArrayArray = [dateArray[0], dateArray[1], dateArray[2]];\n  const daysInMonthArrayArray = [daysInMonth[0], daysInMonth[1], daysInMonth[2]];\n  const monthArrayArrayArray = [monthArray[0], monthArray[1], monthArray[2]];\n  const dateArrayArrayArray = [dateArrayArray[0], dateArrayArray[1], dateArrayArray[2]];\n  const daysInMonthArrayArray = [daysInMonthArray[0], daysInMonthArray[1], daysInMonthArray[2]];\n  const monthArrayArrayArray = [monthArrayArray[0], monthArrayArray[1], monthArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArray[0], dateArrayArrayArray[1], dateArrayArrayArray[2]];\n  const daysInMonthArrayArrayArray = [daysInMonthArrayArray[0], daysInMonthArrayArray[1], daysInMonthArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArray[0], monthArrayArrayArray[1], monthArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArray = [daysInMonthArrayArrayArray[0], daysInMonthArrayArrayArray[1], daysInMonthArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArray = [daysInMonthArrayArrayArray[0], daysInMonthArrayArrayArray[1], daysInMonthArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArrayArray = [daysInMonthArrayArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArray = [daysInMonthArrayArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArrayArray[1], daysInMonthArrayArrayArrayArrayArray[2]];\n  const monthArrayArrayArrayArray = [monthArrayArrayArrayArray[0], monthArrayArrayArrayArray[1], monthArrayArrayArrayArray[2]];\n  const dateArrayArrayArrayArray = [dateArrayArrayArrayArray[0], dateArrayArrayArrayArray[1], dateArrayArrayArrayArray[2]];\n  const daysInMonthArrayArrayArrayArrayArray = [daysInMonthArrayArrayArrayArrayArrayArray[0], daysInMonthArrayArrayArrayArrayArrayArray[1], daysInMonthArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const spaces = words.filter(w => w.trim().length > 0);\n  if (spaces.length === 0) {\n    return words;\n  }\n  const commas = words.filter(w => w.trim().length > 0).map(w => w.trim().replace(/,/g, ''));\n  if (commas.length === 0) {\n    return words;\n  }\n  const letters = commas.map(c => c.split('').map(l => l.toLowerCase()).reduce((a, b) => a + b, 0));\n  const oddLetters = letters.filter(l => l % 2 === 1);\n  return oddLetters;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const spaces = words.filter(w => w.trim().length > 0);\n  if (spaces.length === 0) {\n    return words;\n  }\n  const commas = words.filter(w => w.trim().length > 0).map(w => w.trim().replace(/,/g, ''));\n  if (commas.length === 0) {\n    return words;\n  }\n  const letters = commas.map(c => c.split('').map(l => l.toLowerCase()).reduce((a, b) => a + b, 0));\n  const oddLetters = letters.filter(l => l % 2 === 1);\n  return oddLetters;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const spaces = words.filter(w => w.trim().length > 0);\n  if (spaces.length === 0) {\n    return words;\n  }\n  const commas = words.filter(w => w.trim().length > 0).map(w => w.trim().replace(/,/g, ''));\n  if (commas.length === 0) {\n    return words;\n  }\n  const letters = commas.map(c => c.split('').map(l => l.toLowerCase()).reduce((a, b) => a + b, 0));\n  const oddLetters = letters.filter(l => l % 2 === 1);\n  return oddLetters;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const spaces = words.filter(w => w.trim().length > 0);\n  if (spaces.length === 0) {\n    return words;\n  }\n  const commas = words.filter(w => w.trim().length > 0).map(w => w.trim().replace(/,/g, ''));\n  if (commas.length === 0) {\n    return words;\n  }\n  const letters = commas.map(c => c.split('').map(l => l.toLowerCase()).reduce((a, b) => a + b, 0));\n  const oddLetters = letters.filter(l => l % 2 === 1);\n  return oddLetters;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const spaces = words.filter(w => w.trim().length > 0);\n  if (spaces.length === 0) {\n    return words;\n  }\n  const commas = words.filter(w => w.trim().length > 0).map(w => w.trim().replace(/,/g, ''));\n  if (commas.length === 0) {\n    return words;\n  }\n  const letters = commas.map(c => c.split('').map(l => l.toLowerCase()).reduce((a, b) => a + b, 0));\n  const oddLetters = letters.filter(l => l % 2 === 1);\n  return oddLetters;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return words;\n  }\n  const spaces = words.filter(w => w.trim().length > 0);\n  if (spaces.length === 0) {\n    return words;\n  }\n  const commas = words.filter(w => w.trim().length > 0).map(w => w.trim().replace(/,/g, ''));\n  if (commas.length === 0) {\n    return words;\n  }\n  const letters = commas.map(c => c.split('').map(l => l.toLowerCase()).reduce((a, b) => a + b, 0));\n  const oddLetters = letters.filter(l => l % 2 === 1);\n  return oddLetters;\n};\n\n/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n\n  if (interval1Start > interval1End) {\n    interval1 = [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    interval2 = [interval2Start, interval2End];\n  }\n\n  const [intersectionStart, intersectionEnd] = interval1.find(([start, end]) => {\n    return start < end;\n  });\n\n  if (intersectionStart === intersectionEnd) {\n    return \"NO\";\n  }\n\n  const intersectionLength = intersectionEnd - intersectionStart;\n\n  if (intersectionLength === 1) {\n    return \"NO\";\n  }\n\n  if (intersectionLength === 2) {\n    return \"YES\";\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > firstIntervalEnd) {\n    interval2 = [secondIntervalStart, firstIntervalEnd];\n  }\n\n  const [firstIntervalStart, firstIntervalEnd] = interval1;\n  const [secondIntervalStart, secondIntervalEnd] = interval2;\n\n  if (firstIntervalStart === secondIntervalStart) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalEnd === secondIntervalEnd) {\n    return \"YES\";\n  }\n\n  if (firstIntervalStart > secondIntervalStart) {\n    interval1 = [firstIntervalStart, secondIntervalStart];\n  }\n  if (secondIntervalStart > first", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns13 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns14 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns15 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += (arr[i] * Math.sign(arr[i]));\n  }\n  return result;\n};\n\n/*\n  You get an array of integers, and you must ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const path = new Array(N).fill(0);\n  let minPath = [];\n  let minPathLength = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n        M[j] = grid[i][j];\n        path[j] = i;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[j] === 0) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  if (a > b) {\n    return a\n  }\n  return b\n}\n\n/**\n * Returns the smallest common multiple of two integers a and b\n * >>> smallestCommonMultiple(7, 5)\n * 21\n */\nconst smallestCommonMultiple = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  if (a > b) {\n    return a\n  }\n  return b\n}\n\n/**\n * Returns the number of decimal places a number has\n * >>> decimalPlaces(0.2)\n  2\n  >>> decimalPlaces(0.8)\n  0\n  >>> decimalPlaces(1.2)\n  0\n  >>> decimalPlaces(1)\n  0\n  >>> decimalPlaces(10)\n  0\n  >>> decimalPlaces(100)\n  2\n  >>> decimalPlaces(1000)\n  3\n  >>> decimalPlaces(10000)\n  4\n  >>> decimalPlaces(100000)\n  5\n  >>> decimalPlaces(1000000)\n  6\n  >>> decimalPlaces(10000000)\n  7\n  >>> decimalPlaces(100000000)\n  8\n  >>> decimalPlaces(1000000000)\n  9\n  >>> decimalPlaces(10000000000)\n  10\n  >>> decimalPlaces(100000000000)\n  11\n  >>> decimalPlaces(1000000000000)\n  12\n  >>> decimalPlaces(10000000000000)\n  13\n  >>> decimalPlaces(100000000000000)\n  14\n  >>> decimalPlaces(1000000000000000)\n  15\n  >>> decimalPlaces(10000000000000000)\n  16\n  >>> decimalPlaces(100000000000000000)\n  17\n  >>> decimalPlaces(1000000000000000000)\n  18\n  >>> decimalPlaces(10000000000000000000)\n  19\n  >>> decimalPlaces(100000000000000000000)\n  20\n  >>> decimalPlaces(1000000000000000000000)\n  21\n  >>> decimalPlaces(10000000000000000000000)\n  22\n  >>> decimalPlaces(100000000000000000000000)\n  23\n  >>> decimalPlaces(1000000000000000000000000)\n  24\n  >>> decimalPlaces(10000000000000000000000000)\n  25\n  >>> decimalPlaces(100000000000000000000000000)\n  26\n  >>> decimalPlaces(1000000000000000000000000000)\n  27\n  >>> decimalPlaces(10000000000000000000000000000)\n  28\n  >>> decimalPlaces(100000000000000000000000000000)\n  29\n  >>> decimalPlaces(1000000000000000000000000000000)\n  30\n  >>> decimalPlaces(10000000000000000000000000000000)\n  31\n  >>> decimalPlaces(100000000000000000000000000000000)\n  32\n  >>> decimalPlaces(1000000000000000000000000000000000)\n  33\n  >>> decimalPlaces(10000000000000000000000000000000000)\n  34\n  >>> decimalPlaces(100000000000000000000000000000000000)\n  35\n  >>> decimalPlaces(1000000000000000000000000000000000000)\n  36\n  >>> decimalPlaces(10000000000000000000000000000000000000)\n  37\n  >>> decimalPlaces(100000000000000000000000000000000000000)\n  38\n  >>> decimalPlaces(1000000000000000000000000000000000000000)\n  39\n  >>> decimalPlaces(10000000000000000000000000000000000000000)\n  40\n  >>> decimalPlaces(100000000000000000000000000000000000000000)\n  41\n  >>> decimalPlaces(1000000000000000000000000000000000000000000)\n  42\n  >>> decimalPlaces(10000000000000000000000000000000000000000000)\n  43\n  >>> decimalPlaces(100000000000000000000000000000000000000000000)\n  44\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000)\n  45\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000)\n  46\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000)\n  47\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000)\n  48\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000)\n  49\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000)\n  50\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000)\n  51\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000)\n  52\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000)\n  53\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000)\n  54\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000)\n  55\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000)\n  56\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000)\n  57\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000)\n  58\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000)\n  59\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000)\n  60\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000)\n  61\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000)\n  62\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000)\n  63\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000)\n  64\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000)\n  65\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000)\n  66\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000)\n  67\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000)\n  68\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000)\n  69\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000000)\n  70\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000000)\n  71\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  72\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  73\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  74\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  75\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  76\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  77\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  78\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  79\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  80\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  81\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  82\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  83\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  84\n  >>> decimalPlaces(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  85\n  >>> decimalPlaces(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  86\n  >>> decimalPlaces(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  87", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  for (let i = 1; i <= n; i++) {\n    a = b;\n    b = c;\n    c = a + b;\n    arr.push(c);\n  }\n  return arr;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n  Example:\n  arr = [1, 2, 3, 4, 5]\n  sumArray(arr) = 15\n*/\nconst sumArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the product of the numbers in the array.\n  Example:\n  arr = [1, 2, 3, 4, 5]\n  productArray(arr) = 60\n*/\nconst productArray = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the average of the numbers in the array.\n  Example:\n  arr = [1, 2, 3, 4, 5]\n  averageArray(arr) = 2.5\n*/\nconst averageArray = (arr) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    product *= arr[i];\n  }\n  return product / sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the largest number in the array.\n  Example:\n  arr = [1, 2, 3, 4, 5]\n  largestArray(arr) = 5\n*/\nconst largestArray = (arr) => {\n  let largest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the smallest number in the array.\n  Example:\n  arr = [1, 2, 3, 4, 5]\n  smallestArray(arr) = 1 \n*/\nconst smallestArray = (arr) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  divisibleBy3Or5(arr) = 1, 2, 4, 6, 8, 10\n*/\nconst divisibleBy3Or5 = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5, and are less than 20.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  divisibleBy3Or5LessThan20(arr) = 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n*/\nconst divisibleBy3Or5LessThan20 = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0 && arr[i] < 20) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5, and are less than or equal to 20.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  divisibleBy3Or5LessThanOrEqualTo20(arr) = 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n*/\nconst divisibleBy3Or5LessThanOrEqualTo20 = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0 && arr[i] <= 20) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5, and are greater than 20.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  divisibleBy3Or5GreaterThan20(arr) = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n*/\nconst divisibleBy3Or5GreaterThan20 = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0 && arr[i] > 20) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5, and are greater than or equal to 20.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  divisibleBy3Or5GreaterThanOrEqualTo20(arr) = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n*/\nconst divisibleBy3Or5GreaterThanOrEqualTo20 = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0 && arr[i] >= 20) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5, and are less than or equal to 20.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  divisibleBy3Or5LessThanOrEqualTo20(arr) = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n*/\nconst divisibleBy3Or5LessThanOrEqualTo20 = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0 && arr[i] <= 20) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of all numbers in the array that are\n  divisible by 3 or 5, and are greater than 20.\n  Example:\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  divisibleBy3Or5GreaterThan20(arr) = 1, 2, 3, 4, 5, 6, 7, 8, 9, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddEvenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenOddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddEvenOddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst evenOddEvenOddEvenOddEvenOddDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n  }\n  return result;\n};\n\n/*GIf you return a positive integer n, you get the product of the even digits. If you return 0, all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst oddEvenOddEvenOddEvenOddEvenDigits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === '[') {\n      openingBrackets++;\n    } else if (bracket === ']') {\n      closingBrackets++;\n    }\n\n    if (openingBrackets === closingBrackets) {\n      stack.push(bracket);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested2('[[]]') ➞ true\n  isNested2('[]]]]]]][[[[[]') ➞ false\n  isNested2('[][]') ➞ false\n  isNested2('[]') ➞ false\n  isNested2('[[][]]') ➞ true\n  isNested2('[[]][[') ➞ true\n  */\nconst isNested2 = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === '[') {\n      openingBrackets++;\n    } else if (bracket === ']') {\n      closingBrackets++;\n    }\n\n    if (openingBrackets === closingBrackets) {\n      stack.push(bracket);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested3('[[]]') ➞ true\n  isNested3('[]]]]]]][[[[[]') ➞ false\n  isNested3('[][]') ➞ false\n  isNested3('[]') ➞ false\n  isNested3('[[][]]') ➞ true\n  isNested3('[[]][[') ➞ true\n  */\nconst isNested3 = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === '[') {\n      openingBrackets++;\n    } else if (bracket === ']') {\n      closingBrackets++;\n    }\n\n    if (openingBrackets === closingBrackets) {\n      stack.push(bracket);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested4('[[]]') ➞ true\n  isNested4('[]]]]]]][[[[[]') ➞ false\n  isNested4('[][]') ➞ false\n  isNested4('[]') ➞ false\n  isNested4('[[][]]') ➞ true\n  isNested4('[[]][[') ➞ true\n  */\nconst isNested4 = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === '[') {\n      openingBrackets++;\n    } else if (bracket === ']') {\n      closingBrackets++;\n    }\n\n    if (openingBrackets === closingBrackets) {\n      stack.push(bracket);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested5('[[]]') ➞ true\n  isNested5('[]]]]]]][[[[[]') ➞ false\n  isNested5('[][]') ➞ false\n  isNested5('[]') ➞ false\n  isNested5('[[][]]') ➞ true\n  isNested5('[[]][[') ➞ true\n  */\nconst isNested5 = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === '[') {\n      openingBrackets++;\n    } else if (bracket === ']') {\n      closingBrackets++;\n    }\n\n    if (openingBrackets === closingBrackets) {\n      stack.push(bracket);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested6('[[]]') ➞ true\n  isNested6('[]]]]]]][[[[[]') ➞ false\n  isNested6('[][]') ➞ false\n  isNested6('[]') ➞ false\n  isNested6('[[][]]') ➞ true\n  isNested6('[[]][[') ➞ true\n  */\nconst isNested6 = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === '[') {\n      openingBrackets++;\n    } else if (bracket === ']') {\n      closingBrackets++;\n    }\n\n    if (openingBrackets === closingBrackets) {\n      stack.push(bracket);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested7('[[]]') ➞ true\n  isNested7('[]]]]]]][[[[[]') ➞ false\n  isNested7('[][]') ➞ false\n  isNested7('[]') ➞ false\n  isNested7('[[][]]') ➞ true\n  isNested7('[[]][[') ➞ true\n  */\nconst isNested7 = (string) => {\n  const stack", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\' || lastChar === '!' || lastChar === '@' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === ';' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '|' || lastChar === '\\\\' || lastChar === ';' || lastChar === '<' || lastChar === '>' || lastChar === '?' || lastChar === '\"' || lastChar === '\\'' || lastChar === '`' || lastChar === '~' || lastChar === '.' || lastChar === '?' || lastChar === '!' || lastChar === '<' || lastChar === '>' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '+' || lastChar === '=' || lastCh", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*CReturns the smallest index of an element that is not smaller than or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverse = (arr) => {\n  let minIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeEqual = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is less than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeLessThan = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeGreaterThan = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetween = (arr, element, element2) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > element && arr[i] < element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is less than or equal to the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetweenReverse = (arr, element, element2) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > element && arr[i] < element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeLessThanEqual = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is greater than the given element or less than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeGreaterThanEqual = (arr, element) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= element) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than or equal to the given element or greater than the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetweenEqual = (arr, element, element2) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= element && arr[i] >= element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is less than or equal to the given element or greater than or equal to the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetweenEqualReverse = (arr, element, element2) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] <= element && arr[i] >= element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or greater than the given element or less than or equal to the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetweenLessThanEqual = (arr, element, element2) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= element && arr[i] < element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is greater than the given element or less than the given element or greater than the given element or less than or equal to the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetweenLessThanEqualReverse = (arr, element, element2) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] <= element && arr[i] > element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is equal to the given element or less than the given element or greater than the given element or less than or equal to the given element or greater than or equal to the given element. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeBetweenGreaterThanEqual = (arr, element, element2) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= element && arr[i] > element2) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*CReturns the index of the element in the given array that is greater than the given element or less than the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...negativeIntegers);\n  }\n  return Math.min(...positiveIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return Math.max(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...positiveIntegers);\n  }\n  return Math.min(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return Math.max(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...positiveIntegers);\n  }\n  return Math.min(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...positiveIntegers);\n  }\n  return Math.min(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return Math.max(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.max(...positiveIntegers);\n  }\n  return Math.min(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length > 0) {\n    return Math.min(...positiveIntegers);\n  }\n  return Math.max(...negativeIntegers);\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"-0\") return b\n  if (b === \"-0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumNegativeEven(4) == false\n  isEqualToSumNegativeEven(6) == false\n  isEqualToSumNegativeEven(8) == true\n  */\nconst isEqualToSumNegativeEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumNegativeOdd(4) == false\n  isEqualToSumNegativeOdd(6) == false\n  isEqualToSumNegativeOdd(8) == true\n  */\nconst isEqualToSumNegativeOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumPositiveEven(4) == false\n  isEqualToSumPositiveEven(6) == false\n  isEqualToSumPositiveEven(8) == true\n  */\nconst isEqualToSumPositiveEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumPositiveOdd(4) == false\n  isEqualToSumPositiveOdd(6) == false\n  isEqualToSumPositiveOdd(8) == true\n  */\nconst isEqualToSumPositiveOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumNegativeEven(4) == false\n  isEqualToSumNegativeEven(6) == false\n  isEqualToSumNegativeEven(8) == true\n  */\nconst isEqualToSumNegativeEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumNegativeOdd(4) == false\n  isEqualToSumNegativeOdd(6) == false\n  isEqualToSumNegativeOdd(8) == true\n  */\nconst isEqualToSumNegativeOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumPositiveEven(4) == false\n  isEqualToSumPositiveEven(6) == false\n  isEqualToSumPositiveEven(8) == true\n  */\nconst isEqualToSumPositiveEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumPositiveOdd(4) == false\n  isEqualToSumPositiveOdd(6) == false\n  isEqualToSumPositiveOdd(8) == true\n  */\nconst isEqualToSumPositiveOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumNegativeEven(4) == false\n  isEqualToSumNegativeEven(6) == false\n  isEqualToSumNegativeEven(8) == true\n  */\nconst isEqualToSumNegativeEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*E", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  A function that will receive a number as input and will return the sum\n  of the factorials of the numbers from 1 to that number. For example:\n  >>> factorialSum(10)\n  3628800\n*/\nconst factorialSum = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum = sum * i;\n  }\n  return sum;\n};\n\n/*\n  A function that will receive a number as input and will return the product\n  of the factorials of the numbers from 1 to that number. For example:\n  >>> factorialProduct(10)\n  3628800\n*/\nconst factorialProduct = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product = product * i;\n  }\n  return product;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors(10)\n  5\n*/\nconst divisors = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors2(10)\n  5\n*/\nconst divisors2 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors3(10)\n  5\n*/\nconst divisors3 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors4(10)\n  5\n*/\nconst divisors4 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors5(10)\n  5\n*/\nconst divisors5 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors6(10)\n  5\n*/\nconst divisors6 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors7(10)\n  5\n*/\nconst divisors7 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors8(10)\n  5\n*/\nconst divisors8 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors9(10)\n  5\n*/\nconst divisors9 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors10(10)\n  5\n*/\nconst divisors10 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors11(10)\n  5\n*/\nconst divisors11 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors12(10)\n  5\n*/\nconst divisors12 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors13(10)\n  5\n*/\nconst divisors13 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors14(10)\n  5\n*/\nconst divisors14 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors15(10)\n  5\n*/\nconst divisors15 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors16(10)\n  5\n*/\nconst divisors16 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of the number from 1 to that number. For example:\n  >>> divisors", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      suffixes.push(char);\n    }\n  }\n  return suffixes;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'ac', 'b', 'bc', 'abc', 'bc', 'c', 'abc', 'c', 'b']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toLowerCase()) {\n      substrings.push(char);\n    }\n  }\n  return substrings;\n};\n\n/* Returns a list of all substrings starting from the shortest ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Convert a string to camelCase\n  camelCase(\"example\") == \"example\"\n  camelCase(\"example 1\") == \"example1\"\n  camelCase(\"example 1 2\") == \"example1-2\"\n  camelCase(\"example 1 2 3\") == \"example1-23\" // no spaces allowed\n  camelCase(\"example 1 2 3 4\") == \"example1-23-4\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5\") == \"example1-23-4-5\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6\") == \"example1-23-4-5-6\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7\") == \"example1-23-4-5-6-7\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8\") == \"example1-23-4-5-6-7-8\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9\") == \"example1-23-4-5-6-7-9\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0\") == \"example1-23-4-5-6-7-8-9-0\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1\") == \"example1-23-4-5-6-7-8-9-0-1\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2\") == \"example1-23-4-5-6-7-8-9-0-1-2\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3\") == \"example1-23-4-5-6-7-8-9-0-1-2-3\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4-5\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\") == \"example1-23-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0-1-2-3-4-5-6-7-8-9-0\" // no spaces allowed\n  camelCase(\"example 1 2 3 4 5 6 7 8 9 0 1 2 3 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name;\n  let file_name = file_name.replace(/\\./g,'');\n  let file_name = file_name.replace(/^\\s+|\\s+$/g,'');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g,'');\n  let file_name = file_name.replace(/^[0-9]/g,'');\n  let file_name = file_name.replace(/[0-9]/g,'');\n  if(file_name.length <= 3){\n    return 'No';\n  }\n  if(file_name.indexOf('.') === -1){\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 0){\n    return 'No';\n  }\n  if(file_name.substring(0,1)!== file_name.substring(0,1)){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === 'a'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === 'A'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === 'z'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === 'Z'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '0'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '1'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '2'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '3'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '4'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '5'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '6'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '7'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '8'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '9'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '-'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '_'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '$'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '%'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '&'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '*'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '('){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === ')'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '/'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '<'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '>'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '{'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '}'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === ';'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === ':'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\"'){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '\\''){\n    return 'No';\n  }\n  if(file_name.substring(0,1) === '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples2 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples6 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples7 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countOfMultiples8 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n  while (index < sentence.length) {\n    let word = sentence[index];\n    if (primes.includes(word)) {\n      continue;\n    }\n    primes.push(word);\n    words.push(word);\n    index++;\n  }\n  return words.join(\" \");\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let index = 0;\n  let primes = [];\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return aSum - bSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in descending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in descending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in descending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in descending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in descending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const aSum = sumOfDigits(a)\n    const bSum = sumOfDigits(b)\n    return bSum - aSum\n  })\n  return numsSorted\n}\n\n/*\n  Write a function that sorts the specified list of integers in descending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (3, 6, 9, 12, 15).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (4, 8, 12, 16, 20).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (5, 10, 15, 20, 25).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (6, 12, 18, 24, 30).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (7, 14, 21, 28, 35).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (8, 18, 32, 40, 50).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (9, 12, 20, 28, 36).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (10, 18, 30, 40, 50).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (11, 24, 30, 40, 50).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (12, 30, 40, 50, 60).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10 === 0 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (13, 36, 50, 60, 70).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1 && nums[i] % 100 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array. With this solution, it is O(n^3) which is slower than the other solutions. But it could be faster if the array is very large.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array. With this solution, it is O(n^3) which is slower than the other solutions. But it could be faster if the array is very large.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array. With this solution, it is O(n^3) which is slower than the other solutions. But it could be faster if the array is very large.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array. With this solution, it is O(n^3) which is slower than the other solutions. But it could be faster if the array is very large.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array. With this solution, it is O(n^3) which is slower than the other solutions. But it could be faster if the array is very large.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| a |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm dscore=1 |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array. With this solution, it is O(n^3) which is slower than the other solutions. But it could be faster if the array is very large.\n<|/ c |>\n<| a |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=1 tags=arrays,javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nI like this solution, but I wonder how it compares to the other solutions posted so far.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const orbitsBetweenPlanets = planets\n   .filter((planet) => planet!== planet1 && planet!== planet2)\n   .map((planet) => orbitsBetweenPlanet(planet, planet1))\n   .concat(orbitsBetweenPlanet(planet1, planet2))\n   .concat(orbitsBetweenPlanet(planet2, planet1))\n   .sort((a, b) => a[0] - b[0]);\n  return orbitsBetweenPlanets.map((orbit) => orbit[1]).filter((orbit) => orbit);\n};\n\n// Tests\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nconst tests = [\n  [\"Jupiter\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\"],\n  [\"Mercury\", \"Venus\"],\n  [\"Mercury\", \"Earth\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"Jupiter\"],\n  [\"Mercury\", \"Saturn\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Mercury\", \"Neptune\"],\n  [\"Mercury\", \"Mars\"],\n  [\"Mercury\", \"J", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter(item => item.length % 2 === 0);\n  const newListSorted = newList.sort();\n  return newListSorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from n to infinity inclusive.\n  >>> stringSequenceReverse(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  const str = String(n);\n  const result = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join(' ');\n};\n\n/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequenceReverse(0)\n  '0 1 2 3 4 5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels found in the string.\n  \n  \n  example:\n\n  vowels(\"hello\") -> 1\n  vowels(\"helloooo\") -> 2\n  vowels(\"helloooooooo\") -> 3\n  vowels(\"helloooooooo\") -> 3\n  */\nconst vowels = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of consonants found in the string.\n  \n  \n  example:\n\n  consonants(\"hello\") -> 1\n  consonants(\"helloooo\") -> 2\n  consonants(\"helloooooooo\") -> 3\n  consonants(\"helloooooooo\") -> 3\n  */\nconst consonants = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"b\" || str[i] === \"c\" || str[i] === \"d\" || str[i] === \"f\" || str[i] === \"g\" || str[i] === \"h\" || str[i] === \"j\" || str[i] === \"k\" || str[i] === \"l\" || str[i] === \"m\" || str[i] === \"n\" || str[i] === \"p\" || str[i] === \"q\" || str[i] === \"r\" || str[i] === \"s\" || str[i] === \"t\" || str[i] === \"v\" || str[i] === \"w\" || str[i] === \"x\" || str[i] === \"z\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of letters found in the string.\n  \n  \n  example:\n\n  letters(\"hello\") -> 1\n  letters(\"helloooo\") -> 2\n  letters(\"helloooooooo\") -> 3\n  letters(\"helloooooooo\") -> 3\n  */\nconst letters = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of spaces found in the string.\n  \n  \n  example:\n\n  spaces(\"hello\") -> 1\n  spaces(\"helloooo\") -> 2\n  spaces(\"helloooooooo\") -> 3\n  spaces(\"helloooooooo\") -> 3\n  */\nconst spaces = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of digits found in the string.\n  \n  \n  example:\n\n  digits(\"hello\") -> 1\n  digits(\"helloooo\") -> 2\n  digits(\"helloooooooo\") -> 3\n  digits(\"helloooooooo\") -> 3\n  */\nconst digits = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"0\" && str[i] <= \"9\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of uppercase letters found in the string.\n  \n  \n  example:\n\n  upperCaseLetters(\"hello\") -> 1\n  upperCaseLetters(\"helloooo\") -> 2\n  upperCaseLetters(\"helloooooooo\") -> 3\n  upperCaseLetters(\"helloooooooo\") -> 3\n  */\nconst upperCaseLetters = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"A\" && str[i] <= \"Z\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of lowercase letters found in the string.\n  \n  \n  example:\n\n  lowerCaseLetters(\"hello\") -> 1\n  lowerCaseLetters(\"helloooo\") -> 2\n  lowerCaseLetters(\"helloooooooo\") -> 3\n  lowerCaseLetters(\"helloooooooo\") -> 3\n  */\nconst lowerCaseLetters = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of punctuation characters found in the string.\n  \n  \n  example:\n\n  punctuation(\"hello\") -> 1\n  punctuation(\"helloooo\") -> 2\n  punctuation(\"helloooooooo\") -> 3\n  punctuation(\"helloooooooo\") -> 3\n  */\nconst punctuation = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"!\" && str[i] <= \"?\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of words in the string.\n  \n  \n  example:\n\n  words(\"hello\") -> 1\n  words(\"helloooo\") -> 2\n  words(\"helloooooooo\") -> 3\n  words(\"helloooooooo\") -> 3\n  */\nconst words = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\" || str[i] >= \"A\" && str[i] <= \"Z\" || str[i] >= \"0\" && str[i] <= \"9\" || str[i] === \"-\" || str[i] === \"_\" || str[i] === \"/\" || str[i] === \"\\\\\" || str[i] === \"%\" || str[i] === \"&\" || str[i] === \"*\" || str[i] === \"(\" || str[i] === \")\" || str[i] === \"+\" || str[i] === \"-\" || str[i] === \"=\" || str[i] === \"{\" || str[i] === \"}\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of sentences in the string.\n  \n  \n  example:\n\n  sentences(\"hello\") -> 1\n  sentences(\"helloooo\") -> 2\n  sentences(\"helloooooooo\") -> 3\n  sentences(\"helloooooooo\") -> 3\n  */\nconst sentences = str => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\" || str[i] >= \"A\" && str[i] <= \"Z\" || str[i] >= \"0\" && str[i] <= \"9\" || str[i] === \"-\" || ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split(\".\")[1];\n    const extension_class = extension.split(\".\")[0];\n    const extension_strength = extension_name.length - extension_class.length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension_name;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i] === string) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Write a function that returns the number of times a given string occurs in a\n  given list of strings. If the string is not in the list, return -1.\n  Example:\n  countString('a', 'abcde', ['a', 'b', 'c', 'd']) returns 3\n  countString('a', 'abcde', ['a', 'b', 'd']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e']) returns -1\n  countString('a', 'abcde', ['a', 'b', 'c', 'd', 'e', 'e']) returns -1\n*/\nconst countString = (string, list, strings) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = aArr.length;\n  let m = bArr.length;\n  while (i < l && j < m) {\n    if (aArr[i] === bArr[j]) {\n      i++;\n      j++;\n    } else if (aArr[i] > bArr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return i === l && j === m;\n};\n\n/*You are given a string of lowercase letters. You need to return true if the string contains any uppercase letter\n  capitalCheck(\"Hello\") => true\n  capitalCheck(\"HelloWorld\") => false\n  capitalCheck(\"hello\") => false\n  capitalCheck(\"H\") => true\n  capitalCheck(\"h\") => false\n  capitalCheck(\"HelloWorld\") => false\n  capitalCheck(\"HelloWorldHi\") => false\n  capitalCheck(\"HelloWorldHiThere\") => true\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck(\"HelloWorldHiThere\") => false\n  capitalCheck", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const [even, odd] = num.toString().split('');\n  return [parseInt(even, 10), parseInt(odd, 10)];\n};\n\n/*G", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLLI'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return roman.join('')\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRomanString(19) == 'XIX'\n  >>> intToRomanString(152) == 'CLLI'\n  >>> intToRomanString(426) == 'CDXXVI'\n  */\nconst intToRomanString = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('number must be between 1 and 1000')\n  }\n  const roman = Array(number + 1).fill(0).map((_, i) => i).map(i => romanNumbers[i])\n  return ro", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length > max) {\n      max = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length === max) {\n      return word;\n    }\n  }\n  return \"\";\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"a\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string and returns the number of times\n  the character \"a\" appears in the string. Return 0 if \"a\" is not found.\n\n  countA(\"aaa\") === 1\n  countA(\"aa\") === 0\n  */\nconst countA = (str) => {\n  let count = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need;\n  const carrotsLeft = remaining - carrots;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need;\n  const carrotsLeft = remaining - carrots;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need;\n  const carrotsLeft = remaining - carrots;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need;\n  const carrotsLeft = remaining - carrots;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need;\n  const carrotsLeft = remaining - carrots;\n  return [carrots, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  let uniqueChars = 0;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      uniqueChars++;\n    }\n  }\n  return uniqueChars;\n};\n\n/**\n * Given a string, return a new string with all the letters reversed.\n * \n * Example:\n * \n * Given s = \"hello\", return \"olleh\".\n * \n * Note:\n * \n * If there are lots of duplicates in s, you should modify the solution so that it only modifies s and\n * returns the unique string s.\n * \n * Follow up:\n * \n * Could you do it in place?\n */\nconst reverseLetters = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    newString += s.charAt(i);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a string with the first letter of each word capitalized.\n * \n * Words are defined as any sequence of non-space characters followed by a space character.\n * \n * Return a string where the first character of each word is capitalized.\n * \n * If the given string doesn't have any words, return an empty string.\n * \n * Example 1:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 2:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 3:\n * \n * Input: \"a good   example\"\n * Output: \"A good example\"\n * \n * Example 4:\n * \n * Input: \"a good   example\"\n * Output: \"A good example\"\n * \n * Example 5:\n * \n * Input: \"thequickbrownfoxjumpsoverthelazydog\"\n * Output: \"TheQuickBrownFoxJumpsOverTheLazyDog\"\n * \n * \n * Note:\n * \n * Have the function returned a string, don't just print it out like in a normal converter.\n * \n * Follow up:\n * \n * Could you solve it in-place?\n */\nconst capitalizeWords = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a string where all the words come after each other,\n * but with a space between them.\n * \n * Words are defined as any sequence of non-space characters followed by a space character.\n * \n * Return a string where all words come after each other, but with a space between them.\n * \n * If the given string doesn't have any words, return an empty string.\n * \n * Example 1:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 2:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 3:\n * \n * Input: \"a good   example\"\n * Output: \"a good example\"\n * \n * Example 4:\n * \n * Input: \"a good   example\"\n * Output: \"a good example\"\n * \n * Example 5:\n * \n * Input: \"thequickbrownfoxjumpsoverthelazydog\"\n * Output: \"thequickbrownfox jumpsoverthelazydog\"\n * \n * \n * Note:\n * \n * Have the function returned a string, don't just print it out like in a normal converter.\n * \n * Follow up:\n * \n * Could you solve it in-place?\n */\nconst groupWords = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a string where all words come before each other,\n * but with a space between them.\n * \n * Words are defined as any sequence of non-space characters followed by a space character.\n * \n * Return a string where all words come before each other, but with a space between them.\n * \n * If the given string doesn't have any words, return an empty string.\n * \n * Example 1:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 2:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 3:\n * \n * Input: \"a good   example\"\n * Output: \"a good example\"\n * \n * Example 4:\n * \n * Input: \"a good   example\"\n * Output: \"a good example\"\n * \n * Example 5:\n * \n * Input: \"thequickbrownfoxjumpsoverthelazydog\"\n * Output: \"thequick brown fox jumps over thelazy dog\"\n * \n * \n * Note:\n * \n * Have the function returned a string, don't just print it out like in a normal converter.\n * \n * Follow up:\n * \n * Could you solve it in-place?\n */\nconst ungroupWords = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a string where all words come before each other,\n * but with a space between them.\n * \n * Words are defined as any sequence of non-space characters followed by a space character.\n * \n * Return a string where all words come before each other, but with a space between them.\n * \n * If the given string doesn't have any words, return an empty string.\n * \n * Example 1:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 2:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 3:\n * \n * Input: \"a good   example\"\n * Output: \"a good example\"\n * \n * Example 4:\n * \n * Input: \"a good   example\"\n * Output: \"a good example\"\n * \n * Example 5:\n * \n * Input: \"thequickbrownfoxjumpsoverthelazydog\"\n * Output: \"thequick brown fox jumps over thelazy dog\"\n * \n * \n * Note:\n * \n * Have the function returned a string, don't just print it out like in a normal converter.\n * \n * Follow up:\n * \n * Could you solve it in-place?\n */\nconst reverseWords = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a string where all words come before each other,\n * but with a space between them.\n * \n * Words are defined as any sequence of non-space characters followed by a space character.\n * \n * Return a string where all words come before each other, but with a space between them.\n * \n * If the given string doesn't have any words, return an empty string.\n * \n * Example 1:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 2:\n * \n * Input: \"Hello World\"\n * Output: \"Hello World\"\n * \n * Example 3:\n * \n * Input: \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] >= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (typeof text!=='string') return '';\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'c99e2b9d74e3ac9f77ede0f672abfde5'\n  */\nconst stringToSha1 = (text) => {\n  if (typeof text!=='string') return '';\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (typeof text!=='string') return '';\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (typeof text!=='string') return '';\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding ripemd160 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToRip('Hello world') == '8eb208f7e05d987c30c09e33a66a802fe9'\n  */\nconst stringToRip = (text) => {\n  if (typeof text!=='string') return '';\n  const ripemd160 = crypto.createHash('ripemd160');\n  ripemd160.update(text);\n  return ripemd160.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding whirlpool hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToWhirlpool('Hello world') == 'dab0f6a14a2b7d88f70b39f99aad9f5bd'\n  */\nconst stringToWhirlpool = (text) => {\n  if (typeof text!=='string') return '';\n  const whirlpool = crypto.createHash('whirlpool');\n  whirlpool.update(text);\n  return whirlpool.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding zlib hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToZlib('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToZlib = (text) => {\n  if (typeof text!=='string') return '';\n  const zlib = crypto.createHash('zlib');\n  zlib.update(text);\n  return zlib.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding crc32 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToCrc32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToCrc32 = (text) => {\n  if (typeof text!=='string') return '';\n  const crc32 = crypto.createHash('crc32');\n  crc32.update(text);\n  return crc32.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding crc32 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToCrc32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToCrc32 = (text) => {\n  if (typeof text!=='string') return '';\n  const crc32 = crypto.createHash('crc32');\n  crc32.update(text);\n  return crc32.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding crc32 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToCrc32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToCrc32 = (text) => {\n  if (typeof text!=='string') return '';\n  const crc32 = crypto.createHash('crc32');\n  crc32.update(text);\n  return crc32.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding crc32 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToCrc32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToCrc32 = (text) => {\n  if (typeof text!=='string') return '';\n  const crc32 = crypto.createHash('crc32');\n  crc32.update(text);\n  return crc32.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding crc32 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToCrc32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToCrc32 = (text) => {\n  if (typeof text!=='string') return '';\n  const crc32 = crypto.createHash('crc32');\n  crc32.update(text);\n  return crc32.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding crc32 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToCrc32('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Generate an array of all positive integers between a and b (inclusive).\n  \n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // Your code here\n  const music_array = music_string.split(' ');\n  const music_array2 = music_array.map(music_string => {\n    if (music_string === 'o') {\n      return 4;\n    } else if (music_string === 'o | ') { // '- half note, takes two beats\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array3 = music_array2.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array4 = music_array3.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array5 = music_array4.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array6 = music_array5.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array7 = music_array6.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array8 = music_array7.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array9 = music_array8.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array10 = music_array9.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array11 = music_array10.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array12 = music_array11.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array13 = music_array12.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array14 = music_array13.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array15 = music_array14.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array16 = music_array15.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array17 = music_array16.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array18 = music_array17.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array19 = music_array18.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array20 = music_array19.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array21 = music_array20.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array22 = music_array21.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array23 = music_array22.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array24 = music_array23.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array25 = music_array24.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array26 = music_array25.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array27 = music_array26.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array28 = music_array27.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array29 = music_array28.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array30 = music_array29.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array31 = music_array30.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array32 = music_array31.map(music_string => {\n    if (music_string === 1) {\n      return 4;\n    } else if (music_string === 2) {\n      return 2;\n    } else {\n      return 1;\n    }\n  });\n  const music_array33 = music_array32.map(music_string => {\n    if (music_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let pos = 0;\n  while (pos < string.length) {\n    const char = string.charAt(pos);\n    if (char === substring) {\n      count++;\n    }\n    pos++;\n  }\n  return count;\n};\n\n/* Given a string, return a new string with all instances of the substring removed.\n  >>> removeAll('abcabc', 'b')\n  'ac'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll('abcabc', 'b')\n  'c'\n  >>> removeAll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedArray = numberArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/**\n * Return the sum of all numbers in a given string\n * \n * Example input: \"one two three four five six seven eight nine\"\n * Example output: 55\n * \n * Input: String of numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of non-numeric characters\n * Output: String of non-numeric characters\n * \n * Input: Empty string\n * Output: 0\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric characters\n * Output: String of only non-numeric characters\n * \n * Input: String of only numbers\n * Output: Sum of all numbers in the string\n * \n * Input: String of only non-numeric ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n\n  if (decimalPart > 0) {\n    return integerPart;\n  }\n\n  return integerPart + 1;\n};\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nconst clamp = (value, min = 0, max = 1) => {\n  if (min > max) {\n    throw new RangeError('min must be lower than max');\n  }\n\n  return Math.min(Math.max(value, min), max);\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseFloatWithDecimal = (floatStr) => {\n  const float = parseFloat(floatStr);\n\n  if (Number.isNaN(float)) {\n    return '';\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseIntWithDecimal = (floatStr) => {\n  const float = parseInt(floatStr, 10);\n\n  if (Number.isNaN(float)) {\n    return '';\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseFloatWithDecimalSafe = (floatStr) => {\n  const float = parseFloat(floatStr);\n\n  if (Number.isNaN(float)) {\n    return '';\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseIntWithDecimalSafe = (floatStr) => {\n  const float = parseInt(floatStr, 10);\n\n  if (Number.isNaN(float)) {\n    return '';\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseFloatWithDecimalSafeOrZero = (floatStr) => {\n  const float = parseFloat(floatStr);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseIntWithDecimalSafeOrZero = (floatStr) => {\n  const float = parseInt(floatStr, 10);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseFloatWithDecimalSafeOrZeroOrNull = (floatStr) => {\n  const float = parseFloat(floatStr);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseIntWithDecimalSafeOrZeroOrNull = (floatStr) => {\n  const float = parseInt(floatStr, 10);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseFloatWithDecimalSafeOrZeroOrNullOrUndefined = (floatStr) => {\n  const float = parseFloat(floatStr);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseIntWithDecimalSafeOrZeroOrNullOrUndefined = (floatStr) => {\n  const float = parseInt(floatStr, 10);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseFloatWithDecimalSafeOrZeroOrNullOrUndefinedOrZero = (floatStr) => {\n  const float = parseFloat(floatStr);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, returns an empty string.\n * @param {string|number} floatStr The string containing a floating-point number\n * @returns {string} A decimal number. Returns '0' if the input string can not be converted to a decimal number.\n */\nconst parseIntWithDecimalSafeOrZeroOrNullOrUndefinedOrZero = (floatStr) => {\n  const float = parseInt(floatStr, 10);\n\n  if (Number.isNaN(float)) {\n    return 0;\n  }\n\n  return truncateNumber(float.toFixed(2));\n};\n\n/**\n * Converts a string representing a floating-point number to decimal value.\n * Returns a string containing a decimal number only if it is possible to represent the number as a valid decimal number. Otherwise, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  if (numbers.length < 2) return numbers;\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const secondNumber = sortedNumbers[1];\n  if (firstNumber === secondNumber) return [firstNumber, firstNumber];\n  if (firstNumber > secondNumber) return [secondNumber, firstNumber];\n  return [firstNumber, secondNumber];\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in reverse order.\n * >>> reverse([1, 2, 3])\n  [3, 2, 1]\n */\nconst reverse = (numbers) => {\n  return numbers.slice().reverse();\n};\n\n/**\n * Given an array of numbers, return a new array with the numbers in ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * range / max;\n  });\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return Number.isInteger(value);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDates(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterDates = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDateTimes(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterDateTimes([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterDateTimes = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDatetimes(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterTimes(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterTimes([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterTimes = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterDatetimetzs(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterDatetimetzs([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterDatetimetzs = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterTimetzs(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterTimetzs([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterTimetzs = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterTimestamps(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterTimestamps([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterTimestamps = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filterIntervals(['a', 3.14, 5])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  >>> filterIntervals([1, 2, 3, 'abc', {}, []])\n  [new Date(2018, 0, 1), new Date(2018, 0, 2), new Date(2018, 0, 3)]\n  */\nconst filterIntervals = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date;\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dates only\n  >>> filter", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') length++\n  }\n  return length\n}\n\n/* Returns the number of times the given string occurs in the given string\n  >>> strcount('abc', 'a')\n  1\n  >>> strcount('abc', 'b')\n  0\n  >>> strcount('abc', 'z')\n  0\n  */\nconst strcount = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) count++\n  }\n  return count\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'z')\n  -1\n  */\nconst strindex = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the last occurrence of the given string in the given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'z')\n  -1\n  */\nconst strrindex = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === substring) return i\n  }\n  return -1\n}\n\n/* Returns the index of the first occurrence of the given string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorValue = i;\n      if (maxDivisor < maxDivisorValue) {\n        maxDivisor = maxDivisorValue;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorValue = i;\n      if (minDivisor > minDivisorValue) {\n        minDivisor = minDivisorValue;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorValue = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  let factors = [];\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      while (n % divisor === 0) {\n        n /= divisor;\n      }\n    }\n    divisor++;\n  }\n  return factors;\n};\n\n/* Returns all prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (newArray.indexOf(numbers[i]) === -1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (strings) => {\n  const newArray = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (newArray.indexOf(strings[i]) === -1) {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n};\n\n/* Given an array of strings, return a new array with all duplicates removed.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\n/**\n  * Capitalizes the first letter of a string.\n  * @function capitalize\n  * @param {string} string - A string to capitalize.\n  * @returns {string} The capitalized string.\n  */\nconst capitalizeFirstLetter = string => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => `${acc}${str}`, '');\n};\n\n/* Split String into List of Strings\n  >>> split('a b c')\n  [ 'a b c' ]\n  */\nconst split = (str) => {\n  return str.split(' ');\n};\n\n/* Remove List of Strings from String\n  >>> remove(['a', 'b', 'c'], 'a')\n  'b c'\n  */\nconst remove = (strings, str) => {\n  return strings.filter((s) => s!== str);\n};\n\n/* Join List of Strings into a String\n  >>> join(['a', 'b', 'c'])\n  'abc'\n  */\nconst join = (strings) => {\n  return strings.join('');\n};\n\n/* Get String from List of Strings\n  >>> get([ 'a', 'b', 'c' ], 'b')\n  'c'\n  */\nconst get = (strings, str) => {\n  return strings.find((s) => s === str);\n};\n\n/* Get String from List of Strings\n  >>> get([ 'a', 'b', 'c' ], 'd')\n  ''\n  */\nconst getOrDefault = (strings, str) => {\n  return strings.find((s) => s === str) || '';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault2 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault3 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault4 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault5 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault6 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault7 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault8 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault9 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault10 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault11 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault12 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault13 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault14 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault15 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault16 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault17 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault18 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault19 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault20 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault21 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault22 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault23 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault24 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault25 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};\n\n/* Get String from List of Strings\n  >>> getOrDefault([ 'a', 'b', 'c' ], 'd')\n  'd'\n  */\nconst getOrDefault26 = (strings, str) => {\n  return strings.find((s) => s === str) || 'd';\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for strings ending with certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings containing certain substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n*/\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*\n  >>> getPositive([5, 3, -", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeroPoints = [];\n  let zeroPoint;\n  let zeroIndex;\n  let zeroCoefficient;\n  let zeroCoefficientIndex;\n  let zeroCoefficientValue;\n  let zeroCoefficientValueIndex;\n  let zeroCoefficientValueValue;\n  let zeroCoefficientValueValueIndex;\n  let zeroCoefficientValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zeroCoefficientValueValueValueIndex;\n  let zeroCoefficientValueValueValueValue;\n  let zero", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let thirdIndex = 0;\n  let thirdValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      thirdIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    thirdValue = newList[i];\n    newList[thirdIndex] = newList[thirdIndex - 1];\n    newList[thirdIndex - 1] = thirdValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let fifthIndex = 0;\n  let fifthValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      fifthIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    fifthValue = newList[i];\n    newList[fifthIndex] = newList[fifthIndex - 1];\n    newList[fifthIndex - 1] = fifthValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by seven, while its values for indices divisible by seven correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let seventhIndex = 0;\n  let seventhValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      seventhIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    seventhValue = newList[i];\n    newList[seventhIndex] = newList[seventhIndex - 1];\n    newList[seventhIndex - 1] = seventhValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by nine, while its values for indices divisible by nine correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let ninthIndex = 0;\n  let ninthValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      ninthIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    ninthValue = newList[i];\n    newList[ninthIndex] = newList[ninthIndex - 1];\n    newList[ninthIndex - 1] = ninthValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentyIndex = 0;\n  let twentyValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      twentyIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    twentyValue = newList[i];\n    newList[twentyIndex] = newList[twentyIndex - 1];\n    newList[twentyIndex - 1] = twentyValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentyIndex = 0;\n  let twentyValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      twentyIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    twentyValue = newList[i];\n    newList[twentyIndex] = newList[twentyIndex - 1];\n    newList[twentyIndex - 1] = twentyValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentyIndex = 0;\n  let twentyValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      twentyIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    twentyValue = newList[i];\n    newList[twentyIndex] = newList[twentyIndex - 1];\n    newList[twentyIndex - 1] = twentyValue;\n  }\n  return newList;\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by twenty, while its values for indices divisible by twenty correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentyIndex = 0;\n  let twentyValue = 0;\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      twentyIndex++;\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    twentyValue = newList[i];\n    new", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    const v = l[i]\n    if (u.hasOwnProperty(v)) {\n      continue\n    }\n    u[v] = true\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique20 = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Rreturns the sum of the elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Rreturns a list of all elements in the list that satisfy the predicate p.\n  >>> filterElements([1, 2, 3], (x) => x > 0)\n  [2, 3]\n  >>> filterElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0)\n  [5, 3, 9, 123]\n  */\nconst filterElements = (l, p) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (p(l[i])) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that do not satisfy the predicate p.\n  >>> filterElements([1, 2, 3], (x) => x < 0)\n  [1, 3]\n  >>> filterElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0)\n  [5, 2, -10, 3]\n  */\nconst filterElementsNot = (l, p) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!p(l[i])) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that satisfy the predicate p or are equal to the element x.\n  >>> filterElementsOr([1, 2, 3], (x) => x > 0)\n  [2, 3]\n  >>> filterElementsOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0)\n  [5, 3, 9, 123]\n  >>> filterElementsOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0, 5)\n  [5, 3, 9, 123]\n  */\nconst filterElementsOr = (l, p, x) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (p(l[i]) || l[i] === x) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that do not satisfy the predicate p or are equal to the element x.\n  >>> filterElementsAnd([1, 2, 3], (x) => x < 0)\n  [1, 3]\n  >>> filterElementsAnd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0)\n  [5, 2, -10, 3]\n  >>> filterElementsAnd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0, 5)\n  [5, 3, 9, 123]\n  */\nconst filterElementsAnd = (l, p, x) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (p(l[i]) && l[i]!== x) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that satisfy the predicate p or are equal to the element x or are equal to the element y.\n  >>> filterElementsOr([1, 2, 3], (x) => x > 0)\n  [2, 3]\n  >>> filterElementsOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0)\n  [5, 3, 9, 123]\n  >>> filterElementsOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0, 5)\n  [5, 3, 9, 123]\n  >>> filterElementsOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0, 5)\n  [5, 3, 9, 123]\n  */\nconst filterElementsOrOr = (l, p, x, y) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (p(l[i]) || l[i] === x || l[i] === y) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that do not satisfy the predicate p or are equal to the element x or are equal to the element y.\n  >>> filterElementsAnd([1, 2, 3], (x) => x < 0)\n  [1, 3]\n  >>> filterElementsAnd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0)\n  [5, 2, -10, 3]\n  >>> filterElementsAnd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0, 5)\n  [5, 3, 9, 123]\n  >>> filterElementsAnd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0, 5)\n  [5, 3, 9, 123]\n  */\nconst filterElementsAndOr = (l, p, x, y) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (p(l[i]) && l[i]!== x && l[i]!== y) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that satisfy the predicate p or are equal to the element x or are equal to the element y or are equal to the element z.\n  >>> filterElementsOrOr([1, 2, 3], (x) => x > 0)\n  [2, 3]\n  >>> filterElementsOrOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0)\n  [5, 3, 9, 123]\n  >>> filterElementsOrOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0, 5)\n  [5, 3, 9, 123]\n  >>> filterElementsOrOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x > 0, 5)\n  [5, 3, 9, 123]\n  */\nconst filterElementsOrOrOr = (l, p, x, y, z) => {\n  let filtered = [];\n  for (let i = 0; i < l.length; i++) {\n    if (p(l[i]) || l[i] === x || l[i] === y || l[i] === z) {\n      filtered.push(l[i]);\n    }\n  }\n  return filtered;\n};\n\n/*Rreturns a list of all elements in the list that do not satisfy the predicate p or are equal to the element x or are equal to the element y or are equal to the element z.\n  >>> filterElementsAndOr([1, 2, 3], (x) => x < 0)\n  [1, 3]\n  >>> filterElementsAndOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0)\n  [5, 2, -10, 3]\n  >>> filterElementsAndOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0, 5)\n  [5, 3, 9, 123]\n  >>> filterElementsAndOr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (x) => x < 0, 5)\n  [5, 3, 9, 123]\n  */\nconst filterElementsAndOrOr = (l, p, x, y, z) => {\n  let ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return n\n  }\n  if (n % 11 === 0) {\n    return 11\n  }\n  if (n % 13 === 0) {\n    return 13\n  }\n  return n\n}\n\n/*\n  >>> fizzBuzz(100)\n  11\n  >>> fizzBuzz(101)\n  11\n  >>> fizzBuzz(102)\n  11\n  >>> fizzBuzz(103)\n  13\n  >>> fizzBuzz(104)\n  13\n  >>> fizzBuzz(105)\n  13\n  >>> fizzBuzz(106)\n  13\n  >>> fizzBuzz(107)\n  13\n  >>> fizzBuzz(108)\n  13\n  >>> fizzBuzz(109)\n  13\n  >>> fizzBuzz(110)\n  13\n  >>> fizzBuzz(111)\n  13\n  >>> fizzBuzz(112)\n  13\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  13\n  >>> fizzBuzz(115)\n  13\n  >>> fizzBuzz(116)\n  13\n  >>> fizzBuzz(117)\n  13\n  >>> fizzBuzz(118)\n  13\n  >>> fizzBuzz(119)\n  13\n  >>> fizzBuzz(120)\n  13\n  >>> fizzBuzz(121)\n  13\n  >>> fizzBuzz(122)\n  13\n  >>> fizzBuzz(123)\n  13\n  >>> fizzBuzz(124)\n  13\n  >>> fizzBuzz(125)\n  13\n  >>> fizzBuzz(126)\n  13\n  >>> fizzBuzz(127)\n  13\n  >>> fizzBuzz(128)\n  13\n  >>> fizzBuzz(129)\n  13\n  >>> fizzBuzz(130)\n  13\n  >>> fizzBuzz(131)\n  13\n  >>> fizzBuzz(132)\n  13\n  >>> fizzBuzz(133)\n  13\n  >>> fizzBuzz(134)\n  13\n  >>> fizzBuzz(135)\n  13\n  >>> fizzBuzz(136)\n  13\n  >>> fizzBuzz(137)\n  13\n  >>> fizzBuzz(138)\n  13\n  >>> fizzBuzz(139)\n  13\n  >>> fizzBuzz(140)\n  13\n  >>> fizzBuzz(141)\n  13\n  >>> fizzBuzz(142)\n  13\n  >>> fizzBuzz(143)\n  13\n  >>> fizzBuzz(144)\n  13\n  >>> fizzBuzz(145)\n  13\n  >>> fizzBuzz(146)\n  13\n  >>> fizzBuzz(147)\n  13\n  >>> fizzBuzz(148)\n  13\n  >>> fizzBuzz(149)\n  13\n  >>> fizzBuzz(150)\n  13\n  >>> fizzBuzz(151)\n  13\n  >>> fizzBuzz(152)\n  13\n  >>> fizzBuzz(153)\n  13\n  >>> fizzBuzz(154)\n  13\n  >>> fizzBuzz(155)\n  13\n  >>> fizzBuzz(156)\n  13\n  >>> fizzBuzz(157)\n  13\n  >>> fizzBuzz(158)\n  13\n  >>> fizzBuzz(159)\n  13\n  >>> fizzBuzz(160)\n  13\n  >>> fizzBuzz(161)\n  13\n  >>> fizzBuzz(162)\n  13\n  >>> fizzBuzz(163)\n  13\n  >>> fizzBuzz(164)\n  13\n  >>> fizzBuzz(165)\n  13\n  >>> fizzBuzz(166)\n  13\n  >>> fizzBuzz(167)\n  13\n  >>> fizzBuzz(168)\n  13\n  >>> fizzBuzz(169)\n  13\n  >>> fizzBuzz(170)\n  13\n  >>> fizzBuzz(171)\n  13\n  >>> fizzBuzz(172)\n  13\n  >>> fizzBuzz(173)\n  13\n  >>> fizzBuzz(174)\n  13\n  >>> fizzBuzz(175)\n  13\n  >>> fizzBuzz(176)\n  13\n  >>> fizzBuzz(177)\n  13\n  >>> fizzBuzz(178)\n  13\n  >>> fizzBuzz(179)\n  13\n  >>> fizzBuzz(180)\n  13\n  >>> fizzBuzz(181)\n  13\n  >>> fizzBuzz(182)\n  13\n  >>> fizzBuzz(183)\n  13\n  >>> fizzBuzz(184)\n  13\n  >>> fizzBuzz(185)\n  13\n  >>> fizzBuzz(186)\n  13\n  >>> fizzBuzz(187)\n  13\n  >>> fizzBuzz(188)\n  13\n  >>> fizzBuzz(189)\n  13\n  >>> fizzBuzz(190)\n  13\n  >>> fizzBuzz(191)\n  13\n  >>> fizzBuzz(192)\n  13\n  >>> fizzBuzz(193)\n  13\n  >>> fizzBuzz(194)\n  13\n  >>> fizzBuzz(195)\n  13\n  >>> fizzBuzz(196)\n  13\n  >>> fizzBuzz(197)\n  13\n  >>> fizzBuzz(198)\n  13\n  >>> fizzBuzz(199)\n  13\n  >>> fizzBuzz(200)\n  13\n  >>> fizzBuzz(201)\n  13\n  >>> fizzBuzz(202)\n  13\n  >>> fizzBuzz(203)\n  13\n  >>> fizzBuzz(204)\n  13\n  >>> fizzBuzz(205)\n  13\n  >>> fizzBuzz(206)\n  13\n  >>> fizzBuzz(207)\n  13\n  >>> fizzBuzz(208)\n  13\n  >>> fizzBuzz(209)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return evenValues.concat(oddValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return oddValues.concat(evenValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return evenValues.concat(oddValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOddEven = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return evenValues.concat(oddValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOddOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return oddValues.concat(evenValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return evenValues.concat(oddValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return evenValues.concat(oddValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOddEvenOddOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return oddValues.concat(evenValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOddEvenOddEvenOdd = (l) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let evenValues = [];\n  let oddValues = [];\n  while (evenIndex < l.length) {\n    evenValues.push(l[evenIndex]);\n    evenIndex += 2;\n  }\n  while (oddIndex < l.length) {\n    oddValues.push(l[oddIndex]);\n    oddIndex += 2;\n  }\n  return evenValues.concat(oddValues);\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n  >>> sortEvenOddOdd(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 6) {\n    groups.push(s.slice(i, i + 6));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 7) {\n    groups.push(s.slice(i, i + 7));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of eight characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic8 function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 8) {\n    groups.push(s.slice(i, i + 8));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of nine characters.\n  */\nconst encodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic9 function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 9) {\n    groups.push(s.slice(i, i + 9));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of ten characters.\n  */\nconst encodeCyclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 10); i++) {\n    groups.push(s.slice(10 * i, Math.min((10 * i + 10), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 10)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 2;\n  }\n  if (n < 3) {\n    return 3;\n  }\n  if (n < 5) {\n    return 5;\n  }\n  if (n < 7) {\n    return 7;\n  }\n  if (n < 11) {\n    return 11;\n  }\n  if (n < 13) {\n    return 13;\n  }\n  if (n < 17) {\n    return 17;\n  }\n  if (n < 19) {\n    return 19;\n  }\n  if (n < 23) {\n    return 23;\n  }\n  if (n < 29) {\n    return 29;\n  }\n  if (n < 31) {\n    return 31;\n  }\n  if (n < 37) {\n    return 37;\n  }\n  if (n < 41) {\n    return 41;\n  }\n  if (n < 43) {\n    return 43;\n  }\n  if (n < 47) {\n    return 47;\n  }\n  if (n < 53) {\n    return 53;\n  }\n  if (n < 59) {\n    return 59;\n  }\n  if (n < 61) {\n    return 61;\n  }\n  if (n < 67) {\n    return 67;\n  }\n  if (n < 71) {\n    return 71;\n  }\n  if (n < 73) {\n    return 73;\n  }\n  if (n < 79) {\n    return 79;\n  }\n  if (n < 83) {\n    return 83;\n  }\n  if (n < 89) {\n    return 89;\n  }\n  if (n < 97) {\n    return 97;\n  }\n  if (n < 101) {\n    return 101;\n  }\n  if (n < 1031) {\n    return 1031;\n  }\n  if (n < 1063) {\n    return 1063;\n  }\n  if (n < 1097) {\n    return 1099;\n  }\n  if (n < 1121) {\n    return 1121;\n  }\n  if (n < 1143) {\n    return 1143;\n  }\n  if (n < 1183) {\n    return 1183;\n  }\n  if (n < 1229) {\n    return 1229;\n  }\n  if (n < 1249) {\n    return 1249;\n  }\n  if (n < 1277) {\n    return 1277;\n  }\n  if (n < 1301) {\n    return 1301;\n  }\n  if (n < 1343) {\n    return 1343;\n  }\n  if (n < 1369) {\n    return 1369;\n  }\n  if (n < 1401) {\n    return 1401;\n  }\n  if (n < 1439) {\n    return 1439;\n  }\n  if (n < 1469) {\n    return 1469;\n  }\n  if (n < 1501) {\n    return 1501;\n  }\n  if (n < 1529) {\n    return 1529;\n  }\n  if (n < 1549) {\n    return 1549;\n  }\n  if (n < 1579) {\n    return 1579;\n  }\n  if (n < 1601) {\n    return 1601;\n  }\n  if (n < 1631) {\n    return 1631;\n  }\n  if (n < 1663) {\n    return 1663;\n  }\n  if (n < 1697) {\n    return 1699;\n  }\n  if (n < 1721) {\n    return 1721;\n  }\n  if (n < 1743) {\n    return 1743;\n  }\n  if (n < 1769) {\n    return 1769;\n  }\n  if (n < 1799) {\n    return 1799;\n  }\n  if (n < 1821) {\n    return 1821;\n  }\n  if (n < 1843) {\n    return 1843;\n  }\n  if (n < 1869) {\n    return 1869;\n  }\n  if (n < 1899) {\n    return 1899;\n  }\n  if (n < 1921) {\n    return 1921;\n  }\n  if (n < 1943) {\n    return 1943;\n  }\n  if (n < 1969) {\n    return 1969;\n  }\n  if (n < 1999) {\n    return 1999;\n  }\n  if (n < 2021) {\n    return 2021;\n  }\n  if (n < 2043) {\n    return 2043;\n  }\n  if (n < 2069) {\n    return 2069;\n  }\n  if (n < 2099) {\n    return 2099;\n  }\n  if (n < 2121) {\n    return 2121;\n  }\n  if (n < 2139) {\n    return 2139;\n  }\n  if (n < 2171) {\n    return 2171;\n  }\n  if (n < 2191) {\n    return 2191;\n  }\n  if (n < 2213) {\n    return 2213;\n  }\n  if (n < 2233) {\n    return 2233;\n  }\n  if (n < 2263) {\n    return 2263;\n  }\n  if (n < 2287) {\n    return 2287;\n  }\n  if (n < 2301) {\n    return 2301;\n  }\n  if (n < 2333) {\n    return 2333;\n  }\n  if (n < 2363) {\n    return 2363;\n  }\n  if (n < 2393) {\n    return 2393;\n  }\n  if (n < 2413) {\n    return 2413;\n  }\n  if (n < 2433) {\n    return 2433;\n  }\n  if (n < 2463) {\n    return 2463;\n  }\n  if (n < 2487) {\n    return 2487;\n  }\n  if (n < 2501) {\n    return 2501;\n  }\n  if (n < 2521) {\n    return 2521;\n  }\n  if (n < 2543) {\n    return 2543;\n  }\n  if (n < 2563) {\n    return 2563;\n  }\n  if (n < 2583) {\n    return 2583;\n  }\n  if (n < 2613) {\n    return 2613;\n  }\n  if (n < 2633) {\n    return 2633;\n  }\n  if (n < 2653) {\n    return 2653;\n  }\n  if (n < 2673) {\n    return 2673;\n  }\n  if (n < 2693) {\n    return 2693;\n  }\n  if (n < 2713) {\n    return 2713;\n  }\n  if (n < 2733) {\n    return 2733;\n  }\n  if (n < 2753) {\n    return 2753;\n  }\n  if (n < 2773) {\n    return 2773;\n  }\n  if (n < 2793) {\n    return 2793;\n  }\n  if (n < 2813) {\n    return 2813;\n  }\n  if (n < 2833) {\n    return 2833;\n  }\n  if (n < 2855) {\n    return 2855;\n  }\n  if (n < 2875) {\n    return 2875;\n  }\n  if (n < 2895) {\n    return 2895;\n  }\n  if (n < 2915) {\n    return 2915;\n  }\n  if (n < 2935) {\n    return 2935;\n  }\n  if (n < 2965) {\n    return 2965;\n  }\n  if (n < 2985) {\n    return 2985;\n  }\n  if (n < 3005) {\n    return 3005;\n  }\n  if (n < 3025) {\n    return 3025;\n  }\n  if (n < 3045) {\n    return 3045;\n  }\n  if (n < 3065) {\n    return 3065;\n  }\n  if (n < 3085) {\n    return 3085;\n  }\n  if (n < 3105) {\n    return 3105;\n  }\n  if (n < 3125) {\n    return 3125;\n  }\n  if (n < 3135) {\n    return 3135;\n  }\n  if (n < 3157) {\n    return 3157;\n  }\n  if (n < 3179) {\n    return 3179;\n  }\n  if (n < 3201) {\n    return 3201;\n  }\n  if (n < 3221) {\n    return 3221;\n  }\n  if (n < 3243) {\n    return 3243;\n  }\n  if (n < 3263) {\n    return 3263;\n  }\n  if (n < 3285) {\n    return 3285;\n  }\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  }).reduce((sum, current) => {\n    return sum + current;\n  }) / numbers.length;\n};\n\n/**\n * Calculate the median absolute deviation of a list of numbers.\n * \n * Median absolute deviation is the median absolute difference between each element and a midpoint (median in this case): MAD = average | x - x _ median |\n * \n * For a given list of input numbers, calculate the median absolute deviation around the median value of this dataset. The median absolute deviation is the median absolute difference between each element and a midpoint (median in this case): MAD = average | x - x _ median |\n * \n * If the list of numbers is empty, the median absolute deviation is NaN\n * \n * If the list of numbers is one element long, the median absolute deviation is NaN\n * \n * If the list of numbers is two or more elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is more than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of numbers is less than two elements long, the median absolute deviation is NaN\n * \n * If the list of number", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 0;\n};\n\n/*\n  tripleSumToOne takes a list of integers as input. It returns true if there are three unique elements in the list that add up to one, and false otherwise.\n\n  >>> tripleSumToOne([1, 3, 5, 0])\n  false\n  >>> tripleSumToOne([1, 3, -2, 1])\n  true\n  >>> tripleSumToOne([1, 2, 3, 7])\n  false\n  >>> tripleSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToOne([1])\n  false\n  */\nconst tripleSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 1;\n};\n\n/*\n  tripleSumToTwo takes a list of integers as input. It returns true if there are three unique elements in the list that add up to two, and false otherwise.\n\n  >>> tripleSumToTwo([1, 3, 5, 0])\n  false\n  >>> tripleSumToTwo([1, 3, -2, 1])\n  true\n  >>> tripleSumToTwo([1, 2, 3, 7])\n  false\n  >>> tripleSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToTwo([1])\n  false\n  */\nconst tripleSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 2;\n};\n\n/*\n  tripleSumToThree takes a list of integers as input. It returns true if there are three unique elements in the list that add up to three, and false otherwise.\n\n  >>> tripleSumToThree([1, 3, 5, 0])\n  false\n  >>> tripleSumToThree([1, 3, -2, 1])\n  true\n  >>> tripleSumToThree([1, 2, 3, 7])\n  false\n  >>> tripleSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToThree([1])\n  false\n  */\nconst tripleSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 3;\n};\n\n/*\n  tripleSumToFour takes a list of integers as input. It returns true if there are three unique elements in the list that add up to four, and false otherwise.\n\n  >>> tripleSumToFour([1, 3, 5, 0])\n  false\n  >>> tripleSumToFour([1, 3, -2, 1])\n  true\n  >>> tripleSumToFour([1, 2, 3, 7])\n  false\n  >>> tripleSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToFour([1])\n  false\n  */\nconst tripleSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 4;\n};\n\n/*\n  tripleSumToFive takes a list of integers as input. It returns true if there are three unique elements in the list that add up to five, and false otherwise.\n\n  >>> tripleSumToFive([1, 3, 5, 0])\n  false\n  >>> tripleSumToFive([1, 3, -2, 1])\n  true\n  >>> tripleSumToFive([1, 2, 3, 7])\n  false\n  >>> tripleSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToFive([1])\n  false\n  */\nconst tripleSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 5;\n};\n\n/*\n  tripleSumToSix takes a list of integers as input. It returns true if there are three unique elements in the list that add up to six, and false otherwise.\n\n  >>> tripleSumToSix([1, 3, 5, 0])\n  false\n  >>> tripleSumToSix([1, 3, -2, 1])\n  true\n  >>> tripleSumToSix([1, 2, 3, 7])\n  false\n  >>> tripleSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToSix([1])\n  false\n  */\nconst tripleSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 6;\n};\n\n/*\n  tripleSumToSeven takes a list of integers as input. It returns true if there are three unique elements in the list that add up to seven, and false otherwise.\n\n  >>> tripleSumToSeven([1, 3, 5, 0])\n  false\n  >>> tripleSumToSeven([1, 3, -2, 1])\n  true\n  >>> tripleSumToSeven([1, 2, 3, 7])\n  false\n  >>> tripleSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToSeven([1])\n  false\n  */\nconst tripleSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 7;\n};\n\n/*\n  tripleSumToEight takes a list of integers as input. It returns true if there are three unique elements in the list that add up to eight, and false otherwise.\n\n  >>> tripleSumToEight([1, 3, 5, 0])\n  false\n  >>> tripleSumToEight([1, 3, -2, 1])\n  true\n  >>> tripleSumToEight([1, 2, 3, 7])\n  false\n  >>> tripleSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToEight([1])\n  false\n  */\nconst tripleSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 8;\n};\n\n/*\n  tripleSumToNine takes a list of integers as input. It returns true if there are three unique elements in the list that add up to nine, and false otherwise.\n\n  >>> tripleSumToNine([1, 3, 5, 0])\n  false\n  >>> tripleSumToNine([1, 3, -2, 1])\n  true\n  >>> tripleSumToNine([1, 2, 3, 7])\n  false\n  >>> tripleSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToNine([1])\n  false\n  */\nconst tripleSumToNine = (l) => {\n  let sum = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision2 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision3 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision4 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision5 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision6 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision7 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[j][i].speed) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x, i + 1) === i);\n  return pairs.every((x, i) => x === 0 && pairs.indexOf(x, i + 1) === i);\n};\n\n/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString();\n  let res = '';\n  while (str.length >= base) {\n    res = parseInt(str.substring(0, base), 10) + res;\n    str = str.substring(base);\n  }\n  return res + str;\n};\n\n/*\n  >>> changeBase('111', 2)\n  '1000'\n  >>> changeBase('111', 3)\n  '1001'\n  >>> changeBase('111', 4)\n  '10011'\n  >>> changeBase('111', 5)\n  '100111'\n  >>> changeBase('111', 6)\n  '1001111'\n  >>> changeBase('111', 7)\n  '10011111'\n  >>> changeBase('111', 8)\n  '100111111'\n  >>> changeBase('111', 9)\n  '1001111111'\n  >>> changeBase('111', 10)\n  '10011111111'\n  >>> changeBase('111', 11)\n  '100111111111'\n  >>> changeBase('111', 12)\n  '1001111111111'\n  >>> changeBase('111', 13)\n  '10011111111111'\n  >>> changeBase('111', 14)\n  '100111111111111'\n  >>> changeBase('111', 15)\n  '1001111111111111'\n  >>> changeBase('111', 16)\n  '10011111111111111'\n  >>> changeBase('111', 17)\n  '100111111111111111'\n  >>> changeBase('111', 18)\n  '100111111111111111'\n  >>> changeBase('111', 19)\n  '100111111111111111'\n  >>> changeBase('111', 20)\n  '100111111111111111'\n  >>> changeBase('111', 21)\n  '100111111111111111'\n  >>> changeBase('111', 22)\n  '100111111111111111'\n  >>> changeBase('111', 23)\n  '100111111111111111'\n  >>> changeBase('111', 24)\n  '100111111111111111'\n  >>> changeBase('111', 25)\n  '100111111111111111'\n  >>> changeBase('111', 26)\n  '100111111111111111'\n  >>> changeBase('111', 27)\n  '100111111111111111'\n  >>> changeBase('111', 28)\n  '100111111111111111'\n  >>> changeBase('111', 29)\n  '100111111111111111'\n  >>> changeBase('111', 30)\n  '100111111111111111'\n  >>> changeBase('111', 31)\n  '100111111111111111'\n  >>> changeBase('111', 32)\n  '100111111111111111'\n  >>> changeBase('111', 33)\n  '100111111111111111'\n  >>> changeBase('111', 34)\n  '100111111111111111'\n  >>> changeBase('111', 35)\n  '100111111111111111'\n  >>> changeBase('111', 36)\n  '100111111111111111'\n  >>> changeBase('111', 37)\n  '100111111111111111'\n  >>> changeBase('111', 38)\n  '100111111111111111'\n  >>> changeBase('111', 39)\n  '100111111111111111'\n  >>> changeBase('111', 40)\n  '100111111111111111'\n  >>> changeBase('111', 41)\n  '100111111111111111'\n  >>> changeBase('111', 42)\n  '100111111111111111'\n  >>> changeBase('111', 43)\n  '100111111111111111'\n  >>> changeBase('111', 44)\n  '100111111111111111'\n  >>> changeBase('111', 45)\n  '100111111111111111'\n  >>> changeBase('111', 46)\n  '100111111111111111'\n  >>> changeBase('111', 47)\n  '100111111111111111'\n  >>> changeBase('111', 48)\n  '100111111111111111'\n  >>> changeBase('111', 49)\n  '100111111111111111'\n  >>> changeBase('111', 50)\n  '100111111111111111'\n  >>> changeBase('111', 51)\n  '100111111111111111'\n  >>> changeBase('111', 52)\n  '100111111111111111'\n  >>> changeBase('111', 53)\n  '100111111111111111'\n  >>> changeBase('111', 54)\n  '100111111111111111'\n  >>> changeBase('111', 55)\n  '100111111111111111'\n  >>> changeBase('111', 56)\n  '100111111111111111'\n  >>> changeBase('111', 57)\n  '100111111111111111'\n  >>> changeBase('111', 58)\n  '100111111111111111'\n  >>> changeBase('111', 59)\n  '100111111111111111'\n  >>> changeBase('111', 60)\n  '100111111111111111'\n  >>> changeBase('111', 61)\n  '100111111111111111'\n  >>> changeBase('111', 62)\n  '100111111111111111'\n  >>> changeBase('111', 63)\n  '100111111111111111'\n  >>> changeBase('111', 64)\n  '100111111111111111'\n  >>> changeBase('111', 65)\n  '100111111111111111'\n  >>> changeBase('111', 66)\n  '100111111111111111'\n  >>> changeBase('111', 67)\n  '100111111111111111'\n  >>> changeBase('111', 68)\n  '100111111111111111'\n  >>> changeBase('111', 69)\n  '100111111111111111'\n  >>> changeBase('111', 70)\n  '100111111111111111'\n  >>> changeBase('111', 71)\n  '100111111111111111'\n  >>> changeBase('111', 72)\n  '100111111111111111'\n  >>> changeBase('111', 73)\n  '100111111111111111'\n  >>> changeBase('111', 74)\n  '100111111111111111'\n  >>> changeBase('111', 75)\n  '100111111111111111'\n  >>> changeBase('111', 76)\n  '100111111111111111'\n  >>> changeBase('111', 77)\n  '100111111111111111'\n  >>> changeBase('111', 78)\n  '100111111111111111'\n  >>> changeBase('111', 79)\n  '100111111111111111'\n  >>> changeBase('111', 80)\n  '100111111111111111'\n  >>> changeBase('111', 81)\n  '100111111111111111'\n  >>> changeBase('111', 82)\n  '100111111111111111'\n  >>> changeBase('111', 83)\n  '100111111111111111'\n  >>> changeBase('111', 84)\n  '100111111111111111'\n  >>> changeBase('111', 85)\n  '100111111111111111'\n  >>> changeBase('111', 86)\n  '100111111111111111'\n  >>> changeBase('111', 87)\n  '100111111111111111'\n  >>> changeBase('111', 88)\n  '100111111111111111'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h * (h + 1) * (h + 2)) / 6;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  9.375\n  >>> triangleArea(5, 5)\n  12\n  >>> triangleArea(5, 6)\n  18.5\n  >>> triangleArea(5, 7)\n  24\n  >>> triangleArea(5, 8)\n  29.125\n  >>> triangleArea(5, 9)\n  34.5625\n  >>> triangleArea(5, 10)\n  39.1875\n  >>> triangleArea(5, 11)\n  44.59375\n  >>> triangleArea(5, 12)\n  49.703125\n  >>> triangleArea(5, 13)\n  54.15625\n  >>> triangleArea(5, 14)\n  57.59375\n  >>> triangleArea(5, 15)\n  62.90625\n  >>> triangleArea(5, 16)\n  67.28125\n  >>> triangleArea(5, 17)\n  72.65625\n  >>> triangleArea(5, 18)\n  77.90625\n  >>> triangleArea(5, 19)\n  82.203125\n  >>> triangleArea(5, 20)\n  87.59375\n  >>> triangleArea(5, 21)\n  92.90625\n  >>> triangleArea(5, 22)\n  97.28125\n  >>> triangleArea(5, 23)\n  102.65625\n  >>> triangleArea(5, 24)\n  107.90625\n  >>> triangleArea(5, 25)\n  112.203125\n  >>> triangleArea(5, 26)\n  117.59375\n  >>> triangleArea(5, 27)\n  122.90625\n  >>> triangleArea(5, 28)\n  127.28125\n  >>> triangleArea(5, 29)\n  132.65625\n  >>> triangleArea(5, 30)\n  137.90625\n  >>> triangleArea(5, 31)\n  142.203125\n  >>> triangleArea(5, 32)\n  147.59375\n  >>> triangleArea(5, 33)\n  152.90625\n  >>> triangleArea(5, 34)\n  157.28125\n  >>> triangleArea(5, 35)\n  162.65625\n  >>> triangleArea(5, 36)\n  167.90625\n  >>> triangleArea(5, 37)\n  172.203125\n  >>> triangleArea(5, 38)\n  177.59375\n  >>> triangleArea(5, 39)\n  182.90625\n  >>> triangleArea(5, 40)\n  187.28125\n  >>> triangleArea(5, 41)\n  192.65625\n  >>> triangleArea(5, 42)\n  197.90625\n  >>> triangleArea(5, 43)\n  202.203125\n  >>> triangleArea(5, 44)\n  207.59375\n  >>> triangleArea(5, 45)\n  212.90625\n  >>> triangleArea(5, 46)\n  217.28125\n  >>> triangleArea(5, 47)\n  222.65625\n  >>> triangleArea(5, 48)\n  227.90625\n  >>> triangleArea(5, 49)\n  232.203125\n  >>> triangleArea(5, 50)\n  237.59375\n  >>> triangleArea(5, 51)\n  242.90625\n  >>> triangleArea(5, 52)\n  247.28125\n  >>> triangleArea(5, 53)\n  252.65625\n  >>> triangleArea(5, 54)\n  257.90625\n  >>> triangleArea(5, 55)\n  262.203125\n  >>> triangleArea(5, 56)\n  267.59375\n  >>> triangleArea(5, 57)\n  272.90625\n  >>> triangleArea(5, 58)\n  277.28125\n  >>> triangleArea(5, 59)\n  282.65625\n  >>> triangleArea(5, 60)\n  287.90625\n  >>> triangleArea(5, 61)\n  292.203125\n  >>> triangleArea(5, 62)\n  297.59375\n  >>> triangleArea(5, 63)\n  302.90625\n  >>> triangleArea(5, 64)\n  307.28125\n  >>> triangleArea(5, 65)\n  312.65625\n  >>> triangleArea(5, 66)\n  317.90625\n  >>> triangleArea(5, 67)\n  322.203125\n  >>> triangleArea(5, 68)\n  327.59375\n  >>> triangleArea(5, 69)\n  332.90625\n  >>> triangleArea(5, 70)\n  337.28125\n  >>> triangleArea(5, 71)\n  342.65625\n  >>> triangleArea(5, 72)\n  347.90625\n  >>> triangleArea(5, 73)\n  352.203125\n  >>> triangleArea(5, 74)\n  357.59375\n  >>> triangleArea(5, 75)\n  362.90625\n  >>> triangleArea(5, 76)\n  367.28125\n  >>> triangleArea(5, 77)\n  372.65625\n  >>> triangleArea(5, 78)\n  377.90625\n  >>> triangleArea(5, 79)\n  382.203125\n  >>> triangleArea(5, 80)\n  387.59375\n  >>> triangleArea(5, 81)\n  392.90625\n  >>> triangleArea(5, 82)\n  397.28125\n  >>> triangleArea(5, 83)\n  402.65625\n  >>> triangleArea(5, 84)\n  407.90625\n  >>> triangleArea(5, 85)\n  412.203125\n  >>> triangleArea(5, 86)\n  417.59375\n  >>> triangleArea(5, 87)\n  422.90625\n  >>> triangleArea(5, 88)\n  427.28125\n  >>> triangleArea(5, 89)\n  432.65625\n  >>> triangleArea(5, 90)\n  437.90625\n  >>> triangleArea(5, 91)\n  442.203125\n  >>> triangleArea(5, 92)\n  447.59375\n  >>> triangleArea(5, 93)\n  452.90625\n  >>> triangleArea(5, 94)\n  457.28125\n  >>> triangleArea(5, 95)\n  462.65625\n  >>> triangleArea(5, 96)\n  467.90625\n  >>> triangleArea(5, 97)\n  472.203125\n  >>> triangleArea(5, 98)\n  477.59375\n  >>> triangleArea(5, 99)\n  482.90625\n  >>> triangleArea(5, 100)\n  487.28125\n  >>> triangleArea(5, 101)\n  492.65625\n  >>> triangleArea(5, 102)\n  497.90625\n  >>> triangleArea(5, 103)\n  502.203125\n  >>> triangleArea(5, 104)\n  507.59375\n  >>> triangleArea(5, 105)\n  512.90625\n  >>> triangleArea(5, 106)\n  517.28125\n  >>> triangleArea(5, 107)\n  522.65625\n  >>> triangleArea(5, 108)\n  527.90625\n  >>> triangleArea(5, 109)\n  532.203125\n  >>> triangleArea(5, 110)\n  537.59375\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) return 0;\n  if (n === 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib (0) - > 0 fib (1) - > 1 fib (2) - > 1 fib (3) - > 2 fib (4) - > 3 fib (5) - > 5 fib (6) - > 8 fib (7) - > 13 fib (8) - > 21 fib (9) - > 34 fib (10) - > 55 fib (11) - > 89 fib (12) - > 144 fib (13) - > 233 fib (14) - > 377 fib (15) - > 610 fib (16) - > 987 fib (17) - > 1597 fib (18) - > 2584 fib (19) - > 4181 fib (20) - > 6765 fib (21) - > 10946 fib (22) - > 17711 fib (23) - > 28657 fib (24) - > 46368 fib (25) - > 75025 fib (26) - > 121393 fib (27) - > 196418 fib (28) - > 317811 fib (29) - > 514229 fib (30) - > 832040 fib (31) - > 1346269 fib (32) - > 2178309 fib (33) - > 3524578 fib (34) - > 5702887 fib (35) - > 10848591 fib (36) - > 19074591 fib (37) - > 31752181 fib (38) - > 51422919 fib (39) - > 83204019 fib (40) - > 134626919 fib (41) - > 217830919 fib (42) - > 352457819 fib (43) - > 570288719 fib (44) - > 1084859119 fib (45) - > 1907459119 fib (46) - > 3175218119 fib (47) - > 5142291919 fib (48) - > 8320401919 fib (49) - > 13462691919 fib (50) - > 21783091919 fib (51) - > 35245781919 fib (52) - > 57028871919 fib (53) - > 108485911919 fib (54) - > 190745911919 fib (55) - > 317521811919 fib (56) - > 514229191919 fib (57) - > 832040191919 fib (58) - > 1346269191919 fib (59) - > 2178309191919 fib (60) - > 3524578191919 fib (61) - > 5702887191919 fib (62) - > 10848591191919 fib (63) - > 19074591191919 fib (64) - > 31752181191919 fib (65) - > 51422919191919 fib (66) - > 83204019191919 fib (67) - > 134626919191919 fib (68) - > 217830919191919 fib (69) - > 352457819191919 fib (70) - > 570288719191919 fib (71) - > 1084859119191919 fib (72) - > 1907459119191919 fib (73) - > 3175218119191919 fib (74) - > 5142291919191919 fib (75) - > 8320401919191919 fib (76) - > 13462691919191919 fib (77) - > 21783091919191919 fib (78) - > 35245781919191919 fib (79) - > 57028871919191919 fib (80) - > 108485911919191919 fib (81) - > 190745911919191919 fib (82) - > 317521811919191919 fib (83) - > 514229191919191919 fib (84) - > 832040191919191919 fib (85) - > 1346269191919191919 fib (86) - > 2178309191919191919 fib (87) - > 3524578191919191919 fib (88) - > 5702887191919191919 fib (89) - > 10848591191919191919 fib (90) - > 19074591191919191919 fib (91) - > 31752181191919191919 fib (92) - > 51422919191919191919 fib (93) - > 83204019191919191919 fib (94) - > 134626919191919191919 fib (95) - > 217830919191919191919 fib (96) - > 352457819191919191919 fib (97) - > 570288719191919191919 fib (98) - > 1084859119191919191919 fib (99) - > 1907459119191919191919 fib (100) - > 3175218119191919191919 fib (101) - > 5142291919191919191919 fib (102) - > 8320401919191919191919 fib (103) - > 13462691919191919191919 fib (104) - > 21783091919191919191919 fib (105) - > 35245781919191919191919 fib (106) - > 57028871919191919191919 fib (107) - > 108485911919191919191919 fib (108) - > 190745911919191919191919 fib (109) - > 317521811919191919191919 fib (110) - > 514229191919191919191919 fib (111) - > 832040191919191919191919 fib (112) - > 1346269191919191919191919 fib (113) - > 2178309191919191919191919 fib (114) - > 3524578191919191919191919 fib (115) - > 5702887191919191919191919 fib (116) - > 10848591191919191919191919 fib (117) - > 19074591191919191919191919 fib (118) - > 31752181191919191919191919 fib (119) - > 51422919191919191919191919 fib (120) - > 83204019191919191919191919 fib (", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*RThe mode of a set of numbers, i.e. the value that appears most often.\n  >>> mode([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  3\n  >>> mode([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  2\n  >>> mode([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1\n  >>> mode([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1\n  >>> mode([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1\n  >>> mode([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1\n  */\nconst mode = (l) => {\n  const countMap = new Map();\n  for (let i = 0; i < l.length; i++) {\n    const count = countMap.get(l[i]) || 0;\n    countMap.set(l[i], count + 1);\n  }\n  const maxCount = Math.max(...countMap.values());\n  return Array.from(countMap)\n   .filter(([, count]) => count === maxCount)\n   .sort((a, b) => b[1] - a[1])\n   .reduce((a, b) => a[0] === b[0]? a[1] > b[1]? a : b : a);\n};\n\n/*RThe mean of a set of numbers, i.e. the average of all the numbers.\n  >>> mean([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  2.5\n  >>> mean([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  2.5\n  >>> mean([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  2.5\n  >>> mean([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  2.5\n  >>> mean([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  2.5\n  >>> mean([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  2.5\n  */\nconst mean = (l) => {\n  return sum(l) / l.length;\n};\n\n/*RThe median absolute deviation of a set of numbers, i.e. the median of the absolute deviations of the numbers.\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1.5\n  */\nconst medianAbsoluteDeviation = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*RThe median absolute deviation of a set of numbers, i.e. the median of the absolute deviations of the numbers.\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1.5\n  */\nconst medianAbsoluteDeviation = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*RThe median absolute deviation of a set of numbers, i.e. the median of the absolute deviations of the numbers.\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1.5\n  */\nconst medianAbsoluteDeviation = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*RThe median absolute deviation of a set of numbers, i.e. the median of the absolute deviations of the numbers.\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1.5\n  */\nconst medianAbsoluteDeviation = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*RThe median absolute deviation of a set of numbers, i.e. the median of the absolute deviations of the numbers.\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1.5\n  */\nconst medianAbsoluteDeviation = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*RThe median absolute deviation of a set of numbers, i.e. the median of the absolute deviations of the numbers.\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 3, 2, 1, 4])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1])\n  1.5\n  >>> medianAbsoluteDeviation([3, 1, 2, 4, 3, 3, 2, 1, 4, 3, 2, 1, 2, 1, 1, 1])\n  1.5\n  */\nconst medianAbsoluteDeviation = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Tests if the given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpace('aba')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp() arguments must be non-negative and less than or equal to p');\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return the greatest common divisor of 2 numbers.\n * See http://en.wikipedia.org/wiki/Euclidean_algorithm\n *\n * @param {number} n1 First number\n * @param {number} n2 Second number\n * @returns {number} Greatest common divisor\n */\nconst gcd = (n1, n2) => {\n  if (n1 === 0 || n2 === 0) {\n    return 0;\n  }\n  return n1 > n2? gcd(n1 - n2, n2) : gcd(n2, n1 - n2);\n};\n\n/**\n * Return the least common multiple of two numbers.\n * See http://en.wikipedia.org/wiki/Least_common_multiple\n *\n * @param {number} n1 First number\n * @param {number} n2 Second number\n * @returns {number} Least common multiple\n */\nconst lcm = (n1, n2) => {\n  return n1 * n2 / (gcd(n1, n2) * gcd(n2, n1));\n};\n\n/**\n * Return the least common multiple of a number and a number.\n * See http://en.wikipedia.org/wiki/Least_common_multiple\n *\n * @param {number} n The first number\n * @param {number} m The second number\n * @returns {number} Least common multiple\n */\nconst lcmn = (n, m) => {\n  return lcm(n % m, m);\n};\n\n/**\n * Return the number of leading zeroes in a number.\n *\n * @param {number} n The number\n * @returns {number} The number of leading zeroes\n */\nconst leadingZeroes = n => {\n  let i = n;\n  while (i!== 0) {\n    i >>>= 1;\n  }\n  return i;\n};\n\n/**\n * Return the number of trailing zeroes in a number.\n *\n * @param {number} n The number\n * @returns {number} The number of trailing zeroes\n */\nconst trailingZeroes = n => {\n  let i = n;\n  while (i!== 0) {\n    i >>>= 1;\n  }\n  return n;\n};\n\n/**\n * Return the number of decimal places in a number.\n *\n * @param {number} n The number\n * @returns {number} The number of decimal places\n */\nconst decimalPlaces = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return Math.max(\n    0,\n    match[1]? match[1].length : 0\n  );\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match[1].length : 0;\n};\n\n/**\n * Return the number of digits in n\n *\n * @param {number} n The number\n * @returns {number} The number of digits\n */\nconst digits = n => {\n  const match = n.toString().match(/(?:\\.(\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return match[1]? match", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insert a number ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -1) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -2) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -3) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -4) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -5 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -5) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -6 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -6) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -7 in the alphabet.\n  */\nconst encodeShiftminus = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + -7) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftminus = (s) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aaBAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuations = ['.', ',', '!', '?', ':', ';', '(', ')', '[', ']', '{', '}'];\n  return text.replace(/[.,!?:;(){}[\\]]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes strings and returns strings without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  const whitespace = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000'];\n  return text.replace(/[\\s\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes strings and returns strings without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  const nonAlphanumeric = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000'];\n  return text.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  removeNonAlphanumerics is a function that takes strings and returns strings without non-alphanumeric characters.\n  >>> removeNonAlphanumerics('')\n  ''\n  >>> removeNonAlphanumerics(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonAlphanumerics('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumerics('aaaaa')\n  ''\n  >>> removeNonAlphanumerics('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumerics('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumerics = (text) => {\n  const nonAlphanumerics = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000'];\n  return text.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  removeNonAlphanumericsOrWhitespace is a function that takes strings and returns strings without non-alphanumeric characters or whitespace.\n  >>> removeNonAlphanumericsOrWhitespace('')\n  ''\n  >>> removeNonAlphanumericsOrWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonAlphanumericsOrWhitespace('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumericsOrWhitespace('aaaaa')\n  ''\n  >>> removeNonAlphanumericsOrWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumericsOrWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumericsOrWhitespace = (text) => {\n  const nonAlphanumerics = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000'];\n  const whitespace = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000'];\n  return text.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  removeNonAlphanumericsOrWhitespace is a function that takes strings and returns strings without non-alphanumeric characters or whitespace.\n  >>> removeNonAlphanumericsOrWhitespace('')\n  ''\n  >>> removeNonAlphanumericsOrWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonAlphanumericsOrWhitespace('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumericsOrWhitespace('aaaaa')\n  ''\n  >>> removeNonAlphanumericsOrWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeNonAlphanumericsOrWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumericsOrWhitespaces = (text) => {\n  const nonAlphanumerics = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u2028', '\\u2029', '\\u202f', '\\u205f', '\\u3000'];\n  const whitespace = [' ', '\\n', '\\t', '\\r', '\\x0b', '\\x0c', '\\x19', '\\xa0', '\\u2000', '\\u200", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are equal to the t threshold.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than the t threshold.\n  >>> greaterThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than the t threshold.\n  >>> lessThanThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst lessThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than or equal to the t threshold.\n  >>> greaterThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than or equal to the t threshold.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than the t threshold or equal to it.\n  >>> greaterThanOrEqualOrThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualOrThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualOrThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than the t threshold or equal to it.\n  >>> lessThanOrEqualOrThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualOrThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualOrThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than the t threshold or equal to it.\n  >>> greaterThanOrEqualOrThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualOrThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualOrThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than the t threshold or equal to it.\n  >>> lessThanOrEqualOrThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualOrThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualOrThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than the t threshold.\n  >>> greaterThanThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than the t threshold.\n  >>> lessThanThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than or equal to the t threshold.\n  >>> greaterThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than or equal to the t threshold.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than or equal to the t threshold or equal to it.\n  >>> greaterThanOrEqualOrThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualOrThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualOrThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are less than the t threshold or equal to it.\n  >>> lessThanOrEqualOrThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualOrThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualOrThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t || l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are greater than the t threshold or equal to it.\n  >>> greaterThanOrEqualOrThreshold(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Raise x to the power of y\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  121\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Round x to the nearest integer\n  >>> round(2.5)\n  3\n  >>> round(3.5)\n  4\n  >>> round(4.5)\n  4\n  >>> round(5.5)\n  5\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Round x to the nearest multiple of y\n  >>> roundToMultiple(2.5, 3)\n  2.5\n  >>> roundToMultiple(3.5, 3)\n  3.5\n  >>> roundToMultiple(4.5, 3)\n  4.5\n  >>> roundToMultiple(5.5, 3)\n  5.5\n  */\nconst roundToMultiple = (x, y) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d\n  >>> roundToMultipleWithPrecision(2.5, 3, 2)\n  2.5\n  >>> roundToMultipleWithPrecision(3.5, 3, 2)\n  3.5\n  >>> roundToMultipleWithPrecision(4.5, 3, 2)\n  4.5\n  >>> roundToMultipleWithPrecision(5.5, 3, 2)\n  5.5\n  */\nconst roundToMultipleWithPrecision = (x, y, d) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s\n  >>> roundToMultipleWithPrecision(2.5, 3, 2, 2)\n  2.5\n  >>> roundToMultipleWithPrecision(3.5, 3, 2, 2)\n  3.5\n  >>> roundToMultipleWithPrecision(4.5, 3, 2, 2)\n  4.5\n  >>> roundToMultipleWithPrecision(5.5, 3, 2, 2)\n  5.5\n  */\nconst roundToMultipleWithPrecisionAndScale = (x, y, d, s) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s and round mode m\n  >>> roundToMultipleWithPrecisionAndScale(2.5, 3, 2, 2, 'floor')\n  2.5\n  >>> roundToMultipleWithPrecisionAndScale(3.5, 3, 2, 2, 'floor')\n  3.5\n  >>> roundToMultipleWithPrecisionAndScale(4.5, 3, 2, 2, 'floor')\n  4.5\n  >>> roundToMultipleWithPrecisionAndScale(5.5, 3, 2, 2, 'floor')\n  5.5\n  */\nconst roundToMultipleWithPrecisionAndScaleAndRoundMode = (x, y, d, s, m) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s and round mode m and precision\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundMode(2.5, 3, 2, 2, 'floor', 2)\n  2.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundMode(3.5, 3, 2, 2, 'floor', 2)\n  3.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundMode(4.5, 3, 2, 2, 'floor', 2)\n  4.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundMode(5.5, 3, 2, 2, 'floor', 2)\n  5.5\n  */\nconst roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecision = (x, y, d, s, m, p) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s and round mode m and precision and scale and round mode m\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecision(2.5, 3, 2, 2, 'floor', 2, 2)\n  2.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecision(3.5, 3, 2, 2, 'floor', 2, 2)\n  3.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecision(4.5, 3, 2, 2, 'floor', 2, 2)\n  4.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecision(5.5, 3, 2, 2, 'floor', 2, 2)\n  5.5\n  */\nconst roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundMode = (x, y, d, s, m, p, s, m) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s and round mode m and precision and scale and round mode m and precision and scale and round mode m\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(2.5, 3, 2, 2, 'floor', 2, 2, 2)\n  2.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(3.5, 3, 2, 2, 'floor', 2, 2, 2)\n  3.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(4.5, 3, 2, 2, 'floor', 2, 2, 2)\n  4.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(5.5, 3, 2, 2, 'floor', 2, 2, 2)\n  5.5\n  */\nconst roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision = (x, y, d, s, m, p, s, m, p) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s and round mode m and precision and scale and round mode m and precision and scale and round mode m and precision and scale and round mode m and precision and scale and round mode m and precision and scale and round mode m\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(2.5, 3, 2, 2, 'floor', 2, 2, 2, 2)\n  2.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(3.5, 3, 2, 2, 'floor', 2, 2, 2, 2)\n  3.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(4.5, 3, 2, 2, 'floor', 2, 2, 2, 2)\n  4.5\n  >>> roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision(5.5, 3, 2, 2, 'floor', 2, 2, 2, 2)\n  5.5\n  */\nconst roundToMultipleWithPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecisionAndScaleAndRoundModeAndPrecision = (x, y, d, s, m, p, s, m, p, s, m, p) => {\n  return Math.round(x * y) / y;\n};\n\n/*Round x to the nearest multiple of y with precision d and scale s and round mode m and precision and scale and round mode m and precision and scale and round mode ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(9)\n  23\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\")\n  const closingBrackets = brackets.split(\">\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n  if (openingBracketsCount === closingBracketsCount) {\n    return true\n  }\n  return false\n}\n\n/**\n * Takes a string and returns the string with each character capitalized.\n * \n * >>> capitalize(\"hello\")\n * \"Hello\"\n */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space.\n * \n * >>> capitalizeAndSeparate(\"hello\")\n * \"Hello World\"\n */\nconst capitalizeAndSeparate = (string) => {\n  return capitalize(string).replace(/ /g, \" \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparate(\"hello\")\n * \"Hello, World\"\n */\nconst capitalizeAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparate(string).replace(/,/g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparate(string).replace(/ /g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparateAndSeparate(string).replace(/,/g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparateAndSeparateAndSeparate(string).replace(/ /g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(string).replace(/,/g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World, World, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(string).replace(/ /g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World, World, World, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(string).replace(/,/g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World, World, World, World, World, World\"\n */\nconst capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate = (string) => {\n  return capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(string).replace(/ /g, \", \")\n}\n\n/**\n * Takes a string and returns the string with each character capitalized and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma and each word separated by a space and each word separated by a comma.\n * \n * >>> capitalizeAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparateAndSeparate(\"hello\")\n * \"Hello, World, World, World, World, World, World, World, World, World\"\n */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false\n    }\n    prev = l[i]\n  }\n  return true\n}\n\n/*\n  >>> isSubsetOf([1,2,3], [1,2,3])\n  true\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3,2])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactors = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst primeFactorsOf = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  return factors;\n};\n\n/*\n  >>> primeFactors(13195)\n  [3, 7, 13, 31, 31, 71, 73, 79, 73, 71, 73]\n  >>> primeFactors(486986)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const nested_parens = [];\n  let level = 0;\n  let current_paren = 0;\n  let current_char;\n  let paren_level = 0;\n  let paren_char;\n  let paren_nesting = 0;\n  let paren_nesting_level = 0;\n  let paren_nesting_char;\n  let paren_nesting_paren = 0;\n  let paren_nesting_paren_level = 0;\n  let paren_nesting_paren_char;\n  let paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_level = 0;\n  let paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_level = 0;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_char;\n  let paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_paren_nesting_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n\n  if (openingBrackets.length!== closingBrackets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Returns true if the given string is a valid function name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid function name.\n */\nconst isValidFunctionName = (str) => {\n  const validNames = [\n    'abs',\n    'acos',\n    'acosh',\n    'asin',\n    'asinh',\n    'atan',\n    'atan2',\n    'atanh',\n    'ceil',\n    'cos',\n    'cosh',\n    'exp',\n    'floor',\n    'log',\n   'max',\n   'min',\n    'pow',\n    'random',\n    'round',\n   'sin',\n   'sinh',\n   'sqrt',\n    'tan',\n    'tanh',\n    'trunc',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableName = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNames = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNamesArray = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNamesArray = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNamesArray = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNamesArray = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNamesArray = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableNamesArray = (str) => {\n  const validNames = [\n    'x',\n    'y',\n    'z',\n    'w',\n    'v',\n    'u',\n    't',\n   's',\n    'q',\n    'r',\n    'p',\n    'o',\n    'n',\n   'm',\n    'l',\n    'k',\n    'j',\n    'i',\n    'h',\n    'g',\n    'f',\n    'e',\n    'd',\n    'c',\n    'b',\n    'a',\n  ];\n\n  return validNames.indexOf(str) >= 0;\n};\n\n/**\n * Returns true if the given string is a valid variable name.\n *\n * @param {string} str - The string to check.\n * @returns {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (x", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence of numbers, starting with 0 and 1, that alternate between 1 and 2, and so on. The first two numbers in the sequence are 0 and 1, respectively. The sequence alternates between these two numbers. Write a function to efficiently calculate the nth element of the Fibonacci sequence.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  17711\n  >>> fibonacci(23)\n  28657\n  >>> fibonacci(24)\n  46368\n  >>> fibonacci(25)\n  75025\n  >>> fibonacci(26)\n  121393\n  >>> fibonacci(27)\n  196418\n  >>> fibonacci(28)\n  317811\n  >>> fibonacci(29)\n  514229\n  >>> fibonacci(30)\n  832040\n  >>> fibonacci(31)\n  1346269\n  >>> fibonacci(32)\n  2178309\n  >>> fibonacci(33)\n  3524578\n  >>> fibonacci(34)\n  5702887\n  >>> fibonacci(35)\n  9227465\n  >>> fibonacci(36)\n  14930352\n  >>> fibonacci(37)\n  24157817\n  >>> fibonacci(38)\n  39088169\n  >>> fibonacci(39)\n  63245986\n  >>> fibonacci(40)\n  102334155\n  >>> fibonacci(41)\n  165580141\n  >>> fibonacci(42)\n  267914296\n  >>> fibonacci(43)\n  433494437\n  >>> fibonacci(44)\n  701408733\n  >>> fibonacci(45)\n  1134903170\n  >>> fibonacci(46)\n  1836311903\n  >>> fibonacci(47)\n  2971215073\n  >>> fibonacci(48)\n  4807526976\n  >>> fibonacci(49)\n  7778742049\n  >>> fibonacci(50)\n  12586269025\n  >>> fibonacci(51)\n  20365011074\n  >>> fibonacci(52)\n  32951280099\n  >>> fibonacci(53)\n  53316291171\n  >>> fibonacci(54)\n  86267571272\n  >>> fibonacci(55)\n  13475013890\n  >>> fibonacci(56)\n  217830980296\n  >>> fibonacci(57)\n  352457812539\n  >>> fibonacci(58)\n  570288729664\n  >>> fibonacci(59)\n  9227465675369\n  >>> fibonacci(60)\n  1493035356421\n  >>> fibonacci(61)\n  2415781749804\n  >>> fibonacci(62)\n  3908816957486\n  >>> fibonacci(63)\n  6324598612229\n  >>> fibonacci(64)\n  10233415495896\n  >>> fibonacci(65)\n  16558014089919\n  >>> fibonacci(66)\n  26791429690697\n  >>> fibonacci(67)\n  43349443977539\n  >>> fibonacci(68)\n  70140873341835\n  >>> fibonacci(69)\n  113490317998957\n  >>> fibonacci(70)\n  183631190310066\n  >>> fibonacci(71)\n  29712150731726\n  >>> fibonacci(72)\n  48075269766535\n  >>> fibonacci(73)\n  77787420496012\n  >>> fibonacci(74)\n  125862690259029\n  >>> fibonacci(75)\n  203650110742798\n  >>> fibonacci(76)\n  32951280099087\n  >>> fibonacci(77)\n  53316291171013\n  >>> fibonacci(78)\n  86267571272577\n  >>> fibonacci(79)\n  134750138900827\n  >>> fibonacci(80)\n  217830980296555\n  >>> fibonacci(81)\n  352457812539329\n  >>> fibonacci(82)\n  570288729664418\n  >>> fibonacci(83)\n  922746567536979\n  >>> fibonacci(84)\n  14930353564", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = \"aeiou\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const str = x.toString();\n  const len = str.length;\n  const displacement = len - shift;\n  const result = str.substr(0, displacement) + str.substr(displacement, len);\n  return result;\n};\n\n/*\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  >>> padLeft('abc', 6, '0')\n  \"00abc\"\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 64;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 96;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the lower letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 65;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 97;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 98;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 66;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 98;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerUpperLowerUpperUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 100;\n    } else {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenNodes = arr.filter((n) => n % 2 === 0);\n  if (evenNodes.length === 0) {\n    return [];\n  }\n  const smallestEven = evenNodes.sort((a, b) => a - b)[0];\n  const index = evenNodes.indexOf(smallestEven);\n  return [smallestEven, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) {\n    return [];\n  }\n  const smallestOdd = oddNodes.sort((a, b) => a - b)[0];\n  const index = oddNodes.indexOf(smallestOdd);\n  return [smallestOdd, index];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) {\n    return [];\n  }\n  const smallestOdd = oddNodes.sort((a, b) => a - b)[0];\n  const index = oddNodes.indexOf(smallestOdd);\n  return [smallestOdd, index];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) {\n    return [];\n  }\n  const smallestOdd = oddNodes.sort((a, b) => a - b)[0];\n  const index = oddNodes.indexOf(smallestOdd);\n  return [smallestOdd, index];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) {\n    return [];\n  }\n  const smallestOdd = oddNodes.sort((a, b) => a - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > 0? freq : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the smallest integer number, which is less than zero and has a frequency less than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return freq > 0? freq : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are less than the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are less than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are greater than the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are evenly divisible by the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are evenly divisible by 2 or 3. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 || lst[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are evenly divisible by 3 or 5. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 5 === 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are evenly divisible by 5 or 7. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0 || lst[i] % 7 === 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are evenly divisible by 7 or 11. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0 || lst[i] % 11 === 0) {\n      count++;\n    }\n  }\n  return count > 0? count : -1;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the number of positive integers in the list that are evenly divisible by 11 or 13. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let count = 0;\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for strings that do not contain a specific substring\n  >>> filterByNotSubstring([], 'a')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/**\n * Given a sorted array of integers, find the median of the array.\n * \n * Examples:\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([2, 7, 1, 3, 5]) == 3\n * median([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  if (d + c > b) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  if (d + c > b) {\n    return -1\n  }\n  if (e + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  if (a + b > c) {\n    return -1\n  }\n  if (a + c > b) {\n    return -1\n  }\n  if (b + c > a) {\n    return -1\n  }\n  if (d + c > b) {\n    return -1\n  }\n  if (e + c > a) {\n    return -1\n  }\n  if (f + c > a) {\n    return -1\n  }\n  return Math.sqrt(a * b * c)\n}\n\n/*\n  Given the length of the two sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the two sides form a valid triangle. Otherwise, return -1 Two sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g) => {\n  if (a + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      max--;\n    } else if (arr[mid] === arr[min]) {\n      min++;\n    } else {\n      arr[mid] = arr[min];\n      min++;\n      max--;\n    }\n  }\n  return arr[min];\n};\n\n/*\n  Given a string, return a new string where all duplicate characters have been removed.\n\n  For example:\n  removeDuplicates('codewars') == 'codewar'\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('abba') == ''\n  removeDuplicates('ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort((a, b) => b.length - a.length);\n  const arr2 = lst2.sort((a, b) => b.length - a.length);\n  return arr1.filter((_, i) => arr2.indexOf(_) < i).concat(arr2.filter((_, i) => arr1.indexOf(_) < i));\n};\n\n/*\n  Write a function that accepts a string and returns the number of occurrences of the character 'a' in that string. You may assume that the string has only lowercase letters.\n\n  Examples\n  countA('abcabc') ➞ 3\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA('abcaaa') ➞ 2\n  countA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n      if (a % i === 0) {\n        isPrime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower9 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower10 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*\n  Write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return true\n  if (a % 5 === 0) return true\n  if (a % 7 === 0) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a prime number. Note: You can assume that the input is always valid.\n  Examples:\n  isPrime(2) ==> true\n  isPrime(3) ==> true\n  isPrime(4) ==> false\n  isPrime(6) ==> true\n  isPrime(7) ==> false\n  isPrime(11) ==> true\n  isPrime(12) ==> false\n  isPrime(13) ==> false\n  isPrime(14) ==> false\n  isPrime(15) ==> false\n  isPrime(16) ==> false\n  isPrime(17) ==> false\n  isPrime(18) ==> false\n  isPrime(19) ==> false\n  isPrime(20) ==> false\n  isPrime(21) ==> false\n  isPrime(22) ==> false\n  isPrime(23) ==> false\n  isPrime(24) ==> false\n  isPrime(25) ==> false\n  isPrime(26) ==> false\n  isPrime(27) ==> false\n  isPrime(28) ==> false\n  isPrime(29) ==> false\n  isPrime(30) ==> false\n  isPrime(31) ==> false\n  isPrime(32) ==> false\n  isPrime(33) ==> false\n  isPrime(34) ==> false\n  isPrime(35) ==> false\n  isPrime(36) ==> false\n  isPrime(37) ==> false\n  isPrime(38) ==> false\n  isPrime(39) ==> false\n  isPrime(40) ==> false\n  isPrime(41) ==> false\n  isPrime(42) ==> false\n  isPrime(43) ==> false\n  isPrime(44) ==> false\n  isPrime(45) ==> false\n  isPrime(46) ==> false\n  isPrime(47) ==> false\n  isPrime(48) ==> false\n  isPrime(49) ==> false\n  isPrime(50) ==> false\n  isPrime(51) ==> false\n  isPrime(52) ==> false\n  isPrime(53) ==> false\n  isPrime(54) ==> false\n  isPrime(55) ==> false\n  isPrime(56) ==> false\n  isPrime(57) ==> false\n  isPrime(58) ==> false\n  isPrime(59) ==> false\n  isPrime(60) ==> false\n  isPrime(61) ==> false\n  isPrime(62) ==> false\n  isPrime(63) ==> false\n  isPrime(64) ==> false\n  isPrime(65) ==> false\n  isPrime(66) ==> false\n  isPrime(67) ==> false\n  isPrime(68) ==> false\n  isPrime(69) ==> false\n  isPrime(70) ==> false\n  isPrime(71) ==> false\n  isPrime(72) ==> false\n  isPrime(73) ==> false\n  isPrime(74) ==> false\n  isPrime(75) ==> false\n  isPrime(76) ==> false\n  isPrime(77) ==> false\n  isPrime(78) ==> false\n  isPrime(79) ==> false\n  isPrime(80) ==> false\n  isPrime(81) ==> false\n  isPrime(82) ==> false\n  isPrime(83) ==> false\n  isPrime(84) ==> false\n  isPrime(85) ==> false\n  isPrime(86) ==> false\n  isPrime(87) ==> false\n  isPrime(88) ==> false\n  isPrime(89) ==> false\n  isPrime(90) ==> false\n  isPrime(91) ==> false\n  isPrime(92) ==> false\n  isPrime(93) ==> false\n  isPrime(94) ==> false\n  isPrime(95) ==> false\n  isPrime(96) ==> false\n  isPrime(97) ==> false\n  isPrime(98) ==> false\n  isPrime(99) ==> false\n  isPrime(100) ==> false\n  isPrime(101) ==> false\n  isPrime(102) ==> false\n  isPrime(103) ==> false\n  isPrime(104) ==> false\n  isPrime(105) ==> false\n  isPrime(106) ==> false\n  isPrime(107) ==> false\n  isPrime(108) ==> false\n  isPrime(109) ==> false\n  isPrime(110) ==> false\n  isPrime(111) ==> false\n  isPrime(112) ==> false\n  isPrime(113) ==> false\n  isPrime(114) ==> false\n  isPrime(115) ==> false\n  isPrime(116) ==> false\n  isPrime(117) ==> false\n  isPrime(118) ==> false\n  isPrime(119) ==> false\n  isPrime(120) ==> false\n  isPrime(121) ==> false\n  isPrime(122) ==> false\n  isPrime(123) ==> false\n  isPrime(124) ==> false\n  isPrime(125) ==> false\n  isPrime(126) ==> false\n  isPrime(127) ==> false\n  isPrime(128) ==> false\n  isPrime(129) ==> false\n  isPrime(130) ==> false\n  isPrime(131) ==> false\n  isPrime(132) ==> false\n  isPrime(133) ==> false\n  isPrime(134) ==> false\n  isPrime(135) ==> false\n  isPrime(136) ==> false\n  isPrime(137) ==> false\n  isPrime(138) ==> false\n  isPrime(139) ==> false\n  isPrime(140) ==> false\n  isPrime(141) ==> false\n  isPrime(142) ==> false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split('');\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayCopy = hexNumArray.slice();\n  let hexNumArrayCopyLength = hexNumArrayCopy.length;\n  let hexNumArrayCopy2 = hexNumArrayCopy.slice();\n  let hexNumArrayCopy2Length = hexNumArrayCopy2.length;\n  let hexNumArrayCopy3 = hexNumArrayCopy2.slice();\n  let hexNumArrayCopy3Length = hexNumArrayCopy3.length;\n  let hexNumArrayCopy4 = hexNumArrayCopy3.slice();\n  let hexNumArrayCopy4Length = hexNumArrayCopy4.length;\n  let hexNumArrayCopy5 = hexNumArrayCopy4.slice();\n  let hexNumArrayCopy5Length = hexNumArrayCopy5.length;\n  let hexNumArrayCopy6 = hexNumArrayCopy5.slice();\n  let hexNumArrayCopy6Length = hexNumArrayCopy6.length;\n  let hexNumArrayCopy7 = hexNumArrayCopy6.slice();\n  let hexNumArrayCopy7Length = hexNumArrayCopy7.length;\n  let hexNumArrayCopy8 = hexNumArrayCopy7.slice();\n  let hexNumArrayCopy8Length = hexNumArrayCopy8.length;\n  let hexNumArrayCopy9 = hexNumArrayCopy8.slice();\n  let hexNumArrayCopy9Length = hexNumArrayCopy9.length;\n  let hexNumArrayCopy10 = hexNumArrayCopy9.slice();\n  let hexNumArrayCopy10Length = hexNumArrayCopy10.length;\n  let hexNumArrayCopy11 = hexNumArrayCopy10.slice();\n  let hexNumArrayCopy11Length = hexNumArrayCopy11.length;\n  let hexNumArrayCopy12 = hexNumArrayCopy11.slice();\n  let hexNumArrayCopy12Length = hexNumArrayCopy12.length;\n  let hexNumArrayCopy13 = hexNumArrayCopy12.slice();\n  let hexNumArrayCopy13Length = hexNumArrayCopy13.length;\n  let hexNumArrayCopy14 = hexNumArrayCopy13.slice();\n  let hexNumArrayCopy14Length = hexNumArrayCopy14.length;\n  let hexNumArrayCopy15 = hexNumArrayCopy14.slice();\n  let hexNumArrayCopy15Length = hexNumArrayCopy15.length;\n  let hexNumArrayCopy16 = hexNumArrayCopy15.slice();\n  let hexNumArrayCopy16Length = hexNumArrayCopy16.length;\n  let hexNumArrayCopy17 = hexNumArrayCopy16.slice();\n  let hexNumArrayCopy17Length = hexNumArrayCopy17.length;\n  let hexNumArrayCopy18 = hexNumArrayCopy17.slice();\n  let hexNumArrayCopy18Length = hexNumArrayCopy18.length;\n  let hexNumArrayCopy19 = hexNumArrayCopy18.slice();\n  let hexNumArrayCopy19Length = hexNumArrayCopy19.length;\n  let hexNumArrayCopy20 = hexNumArrayCopy19.slice();\n  let hexNumArrayCopy20Length = hexNumArrayCopy20.length;\n  let hexNumArrayCopy21 = hexNumArrayCopy20.slice();\n  let hexNumArrayCopy21Length = hexNumArrayCopy21.length;\n  let hexNumArrayCopy22 = hexNumArrayCopy21.slice();\n  let hexNumArrayCopy22Length = hexNumArrayCopy22.length;\n  let hexNumArrayCopy23 = hexNumArrayCopy22.slice();\n  let hexNumArrayCopy23Length = hexNumArrayCopy23.length;\n  let hexNumArrayCopy24 = hexNumArrayCopy23.slice();\n  let hexNumArrayCopy24Length = hexNumArrayCopy24.length;\n  let hexNumArrayCopy25 = hexNumArrayCopy24.slice();\n  let hexNumArrayCopy25Length = hexNumArrayCopy25.length;\n  let hexNumArrayCopy26 = hexNumArrayCopy25.slice();\n  let hexNumArrayCopy26Length = hexNumArrayCopy26.length;\n  let hexNumArrayCopy27 = hexNumArrayCopy26.slice();\n  let hexNumArrayCopy27Length = hexNumArrayCopy27.length;\n  let hexNumArrayCopy28 = hexNumArrayCopy27.slice();\n  let hexNumArrayCopy28Length = hexNumArrayCopy28.length;\n  let hexNumArrayCopy29 = hexNumArrayCopy28.slice();\n  let hexNumArrayCopy29Length = hexNumArrayCopy29.length;\n  let hexNumArrayCopy30 = hexNumArrayCopy29.slice();\n  let hexNumArrayCopy30Length = hexNumArrayCopy30.length;\n  let hexNumArrayCopy31 = hexNumArrayCopy30.slice();\n  let hexNumArrayCopy31Length = hexNumArrayCopy31.length;\n  let hexNumArrayCopy32 = hexNumArrayCopy31.slice();\n  let hexNumArrayCopy32Length = hexNumArrayCopy32.length;\n  let hexNumArrayCopy33 = hexNumArrayCopy32.slice();\n  let hexNumArrayCopy33Length = hexNumArrayCopy33.length;\n  let hexNumArrayCopy34 = hexNumArrayCopy33.slice();\n  let hexNumArrayCopy34Length = hexNumArrayCopy34.length;\n  let hexNumArrayCopy35 = hexNumArrayCopy34.slice();\n  let hexNumArrayCopy35Length = hexNumArrayCopy35.length;\n  let hexNumArrayCopy36 = hexNumArrayCopy35.slice();\n  let hexNumArrayCopy36Length = hexNumArrayCopy36.length;\n  let hexNumArrayCopy37 = hexNumArrayCopy36.slice();\n  let hexNumArrayCopy37Length = hexNumArrayCopy37.length;\n  let hexNumArrayCopy38 = hexNumArrayCopy37.slice();\n  let hexNumArrayCopy38Length = hexNumArrayCopy38.length;\n  let hexNumArrayCopy39 = hexNumArrayCopy38.slice();\n  let hexNumArrayCopy39Length = hexNumArrayCopy39.length;\n  let hexNumArrayCopy40 = hexNumArrayCopy39.slice();\n  let hexNumArrayCopy40Length = hexNumArrayCopy40.length;\n  let hexNumArrayCopy41 = hexNumArrayCopy40.slice();\n  let hexNumArrayCopy41Length = hexNumArrayCopy41.length;\n  let hexNumArrayCopy42 = hexNumArrayCopy41.slice();\n  let hexNumArrayCopy42Length = hexNumArrayCopy42.length;\n  let hexNumArrayCopy43 = hexNumArrayCopy42.slice();\n  let hexNumArrayCopy43Length = hexNumArrayCopy43.length;\n  let hexNumArrayCopy44 = hexNumArrayCopy43.slice();\n  let hexNumArrayCopy44", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  let decimalStringLengthWithoutDb = decimalStringLength - 2;\n\n  for (let i = 0; i < decimalStringLengthWithoutDb; i++) {\n    decimalString += decimal.toString(2);\n  }\n\n  for (let i = decimalStringLengthWithoutDb; i < decimalStringLength; i++) {\n    binary += '0';\n  }\n\n  for (let i = decimalStringLength; i >= 0; i--) {\n    binary += decimalString.charAt(i);\n  }\n\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to a decimal number. The binary number is\n  given as a string. The function should return the decimal number as a string.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"11111\") // returns 32\n  binaryToDecimal(\"111111\") // returns 255\n  binaryToDecimal(\"11111111\") // returns 4294967295\n  binaryToDecimal(\"111111111\") // returns 2147483647\n  binaryToDecimal(\"1111111111\") // returns 2147483646\n  binaryToDecimal(\"11111111111\") // returns 2147483645\n  binaryToDecimal(\"111111111111\") // returns 2147483644\n  binaryToDecimal(\"1111111111111\") // returns 2147483643\n  binaryToDecimal(\"11111111111111\") // returns 2147483642\n  binaryToDecimal(\"111111111111111\") // returns 2147483641\n  binaryToDecimal(\"1111111111111110\") // returns 2147483640\n  binaryToDecimal(\"11111111111111110\") // returns 2147483639\n  binaryToDecimal(\"111111111111111101\") // returns 2147483638\n  binaryToDecimal(\"1111111111111111010\") // returns 2147483637\n  binaryToDecimal(\"11111111111111110101\") // returns 2147483636\n  binaryToDecimal(\"111111111111111101010\") // returns 2147483635\n  binaryToDecimal(\"1111111111111111010100\") // returns 2147483634\n  binaryToDecimal(\"11111111111111110101000\") // returns 2147483633\n  binaryToDecimal(\"111111111111111101010000\") // returns 2147483632\n  binaryToDecimal(\"1111111111111111010100000\") // returns 2147483631\n  binaryToDecimal(\"11111111111111110101000000\") // returns 2147483630\n  binaryToDecimal(\"111111111111111101010000000\") // returns 2147483629\n  binaryToDecimal(\"1111111111111111010100000000\") // returns 2147483628\n  binaryToDecimal(\"11111111111111110101000000000\") // returns 2147483627\n  binaryToDecimal(\"111111111111111101010000000000\") // returns 2147483626\n  binaryToDecimal(\"1111111111111111010100000000000\") // returns 2147483625\n  binaryToDecimal(\"11111111111111110101000000000000\") // returns 2147483624\n  binaryToDecimal(\"111111111111111101010000000000000\") // returns 2147483623\n  binaryToDecimal(\"1111111111111111010100000000000000\") // returns 2147483622\n  binaryToDecimal(\"11111111111111110101000000000000000\") // returns 2147483621\n  binaryToDecimal(\"111111111111111101010000000000000000\") // returns 2147483620\n  binaryToDecimal(\"1111111111111111010100000000000000000\") // returns 2147483619\n  binaryToDecimal(\"11111111111111110101000000000000000000\") // returns 2147483618\n  binaryToDecimal(\"111111111111111101010000000000000000000\") // returns 2147483617\n  binaryToDecimal(\"1111111111111111010100000000000000000000\") // returns 2147483616\n  binaryToDecimal(\"11111111111111110101000000000000000000000\") // returns 2147483615\n  binaryToDecimal(\"111111111111111101010000000000000000000000\") // returns 2147483614\n  binaryToDecimal(\"1111111111111111010100000000000000000000000\") // returns 2147483613\n  binaryToDecimal(\"11111111111111110101000000000000000000000000\") // returns 2147483612\n  binaryToDecimal(\"111111111111111101010000000000000000000000000\") // returns 2147483611\n  binaryToDecimal(\"1111111111111111010100000000000000000000000000\") // returns 2147483610\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000\") // returns 2147483609\n  binaryToDecimal(\"111111111111111101010000000000000000000000000000\") // returns 2147483608\n  binaryToDecimal(\"1111111111111111010100000000000000000000000000000\") // returns 2147483607\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000\") // returns 2147483606\n  binaryToDecimal(\"111111111111111101010000000000000000000000000000000\") // returns 2147483605\n  binaryToDecimal(\"1111111111111111010100000000000000000000000000000000\") // returns 2147483604\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483603\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483602\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483601\n  binaryToDecimal(\"1111111111111111010100000000000000000000000000000000\") // returns 2147483600\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483598\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483597\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483596\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483595\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483594\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483593\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483592\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483591\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483590\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483590\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483590\n  binaryToDecimal(\"11111111111111110101000000000000000000000000000000000\") // returns 2147483590\n  binaryToDecimal(\"1111111111111111010100", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/**\n * Given a string, return a new string with each character replaced by the number of times it appears in the original string.\n  >>> countChars('abcabc')\n  '3abcabc'\n  >>> countChars('aab')\n  '2ab'\n  >>> countChars('ab')\n  '2ab'\n  >>> countChars('')\n  '0'\n  >>> countChars('a')\n  '1'\n  >>> countChars('aba')\n  '2aba'\n  >>> countChars('abba')\n  '3abba'\n  >>> countChars('abcab')\n  '3abcabc'\n  >>> countChars('abcabcbb')\n  '3abcabcbbb'\n  >>> countChars('abcabcbbbcc')\n  '3abcabcbbbccc'\n  >>> countChars('abcabcbbbcccdd')\n  '3abcabcbbbcccdd'\n  >>> countChars('abcabcbbbcccdddeee')\n  '3abcabcbbbcccdddeeee'\n  >>> countChars('abcabcbbbcccdddeeeeffff')\n  '3abcabcbbbcccdddeeeefffff'\n  >>> countChars('abcabcbbbcccdddeeeefffffgh')\n  '3abcabcbbbcccdddeeeefffffghh'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbbcccdddeeeefffffghhhiiii'\n  >>> countChars('abcabcbbbcccdddeeeefffffghhhiiii')\n  '3abcabcbbb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3;\n};\n\n/*\n  Write a function that checks whether a string is palindrome or not.\n  A palindrome is a string that reads the same backward as forward.\n  For example:\n  isPalindrome(\"abba\") => true\n  isPalindrome(\"aba\") => false\n  isPalindrome(\"abbaaba\") => true\n  isPalindrome(\"abba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"abbaaba\") => false\n  isPalindrome(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 100).toArray();\n  const gradesSum = gradesArray.reduce((acc, val) => acc + val, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesSumOfSquares = gradesArray.map(grade => grade * grade);\n  const gradesSumOfSquaresSum = gradesSumOfSquares.reduce((acc, val) => acc + val, 0);\n  const gradesSumOfSquaresAverage = gradesSumOfSquaresSum / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquares = gradesSumOfSquares.map(grade => grade * grade);\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquares / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresAverage / gradesArray.length;\n  const grades", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '.') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write is a function that takes a string and returns true if the string contains only letters a-z or A-Z\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == true\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*GIf you use a positive integer N, return the sum of its digits in binary form.\n  \n  Example\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove the elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDups = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are duplicates..\n\n\n  Examples:\n      removeDups([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeDupsEvenOddEvenOddEvenOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in descending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!l!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  const rows = lst.map(row => row.filter(e => e === x));\n  const columns = rows.map(row => row.length);\n  rows.forEach(row => {\n    row.sort((a, b) => b - a);\n    row.sort((a, b) => b - a);\n    res.push(row.map(() => 0));\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getColumn([], 1) == []\n  getColumn([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getColumn = (lst, x) => {\n  const res = [];\n  const rows = lst.map(row => row.filter(e => e === x));\n  const columns = rows.map(row => row.length);\n  columns.forEach(column => {\n    column.sort((a, b) => a - b);\n    column.sort((a, b) => a - b);\n    res.push(column.map(() => 0));\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getMatrix = (lst, x) => {\n  const res = [];\n  const rows = lst.map(row => row.filter(e => e === x));\n  const columns = rows.map(row => row.length);\n  columns.forEach(column => {\n    column.sort((a, b) => a - b);\n    column.sort((a, b) => a - b);\n    res.push(column.map(() => 0));\n  });\n  rows.forEach(row => {\n    row.sort((a, b) => b - a);\n    row.sort((a, b) => b - a);\n    res.push(row.map(() => 0));\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the column by columns in descending order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getMatrixTranspose = (lst, x) => {\n  const res = [];\n  const rows = lst.map(row => row.filter(e => e === x));\n  const columns = rows.map(row => row.length);\n  columns.forEach(column => {\n    column.sort((a, b) => a - b);\n    column.sort((a, b) => a - b);\n    res.push(column.map(() => 0));\n  });\n  rows.forEach(row => {\n    row.sort((a, b) => b - a);\n    row.sort((a, b) => b - a);\n    res.push(row.map(() => 0));\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getMatrixTranspose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getMatrixTranspose([], 1) == []\n  getMatrixTranspose([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getMatrixTransposeTranspose = (lst, x) => {\n  const res = [];\n  const rows = lst.map(row => row.filter(e => e === x));\n  const columns = rows.map(row => row.length);\n  columns.forEach(column => {\n    column.sort((a, b) => a - b);\n    column.sort((a, b) => a - b);\n    res.push(column.map(() => 0));\n  });\n  rows.forEach(row => {\n    row.sort((a, b) => b - a);\n    row.sort((a, b) => b - a);\n    res.push(row.map(() => 0));\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getMatrixTransposeTranspose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  getMatrixTransposeTranspose([], 1) == []\n  getMatrixTransposeTranspose([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getMatrixTransposeTransposeTranspose = (lst, x) => {\n  const res = [];\n  const rows = lst.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the reverse of the original array. Note: * Do not change the given array.\n\n  Examples:\n  * reverseArray([]) => []\n  * reverseArray([5]) => [5]\n  * reverseArray([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst reverseArray = (array) => {\n  const reversedArray = array.slice();\n  reversedArray.reverse();\n  return reversedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArray([]) => []\n  * sortedArray([5]) => [5]\n  * sortedArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortedArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArray = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in descending order. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayDesc([]) => []\n  * sortedArrayDesc([5]) => [5]\n  * sortedArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortedArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in ascending order if the sum (first index value, last index value) is odd, or sorted it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayEvenSum([]) => []\n  * sortedArrayEvenSum([5]) => [5]\n  * sortedArrayEvenSum([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortedArrayEvenSum([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayEvenSum = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in descending order if the sum (first index value, last index value) is odd, or sorted it in ascending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayOddSum([]) => []\n  * sortedArrayOddSum([5]) => [5]\n  * sortedArrayOddSum([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortedArrayOddSum([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayOddSum = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in descending order if the sum (first index value, last index value) is odd, or sorted it in ascending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayEvenSumDesc([]) => []\n  * sortedArrayEvenSumDesc([5]) => [5]\n  * sortedArrayEvenSumDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortedArrayEvenSumDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayEvenSumDesc = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in ascending order if the sum (first index value, last index value) is odd, or sorted it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayOddSumEven([]) => []\n  * sortedArrayOddSumEven([5]) => [5]\n  * sortedArrayOddSumEven([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortedArrayOddSumEven([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayOddSumEven = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in descending order if the sum (first index value, last index value) is odd, or sorted it in ascending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayOddSumOdd([]) => []\n  * sortedArrayOddSumOdd([5]) => [5]\n  * sortedArrayOddSumOdd([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortedArrayOddSumOdd([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayOddSumOdd = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a new array that is the sorted version of the original array in descending order if the sum (first index value, last index value) is odd, or sorted it in ascending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortedArrayEvenSumEvenDesc([]) => []\n  * sortedArrayEvenSumEvenDesc([5]) => [5]\n  * sortedArrayEvenSumEvenDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortedArrayEvenSumEvenDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortedArrayEvenSumEvenDesc = (array) => {\n  const sortedArray = array.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      currentMax = max;\n      currentIndex = i;\n    }\n    if (numbers[i] > currentMax) {\n      currentMax = numbers[i];\n      currentIndex = i;\n    }\n  }\n  result.push(currentMax);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  result.push(max);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating minimum elements found up to a certain moment in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let currentMin = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      currentMin = min;\n      currentIndex = i;\n    }\n    if (numbers[i] < currentMin) {\n      currentMin = numbers[i];\n      currentIndex = i;\n    }\n  }\n  result.push(currentMin);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  result.push(min);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating median elements found up to a certain moment in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  const middle = Math.floor(numbers.length / 2);\n  let currentMedian = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < numbers[middle]) {\n      currentMedian = numbers[i];\n      currentIndex = i;\n    }\n    if (numbers[i] > numbers[middle]) {\n      currentMedian = numbers[middle];\n      currentIndex = middle;\n    }\n  }\n  result.push(currentMedian);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] < numbers[middle]) {\n      currentMedian = numbers[i];\n    }\n  }\n  result.push(currentMedian);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating mode elements found up to a certain moment in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  const modes = [];\n  let currentMode = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === currentMode) {\n      modes.push(currentMode);\n      currentIndex = i;\n    }\n    if (numbers[i] > currentMode) {\n      currentMode = numbers[i];\n      currentIndex = i;\n    }\n  }\n  modes.push(currentMode);\n  result.push(modes);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] === currentMode) {\n      modes.push(numbers[i]);\n    }\n  }\n  result.push(modes);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating sum elements found up to a certain moment in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n      currentSum = sum;\n      currentIndex = i;\n    }\n    if (numbers[i] > currentSum) {\n      currentSum = numbers[i];\n      currentIndex = i;\n    }\n  }\n  result.push(currentSum);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > sum) {\n      sum = numbers[i];\n    }\n  }\n  result.push(sum);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating variance elements found up to a certain moment in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let variance = 0;\n  let currentVariance = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > variance) {\n      variance = numbers[i];\n      currentVariance = variance;\n      currentIndex = i;\n    }\n    if (numbers[i] > currentVariance) {\n      currentVariance = numbers[i];\n      currentIndex = i;\n    }\n  }\n  result.push(currentVariance);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > variance) {\n      variance = numbers[i];\n    }\n  }\n  result.push(variance);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating standard deviation elements found up to a certain moment in the sequence.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  const result = [];\n  let standardDeviation = 0;\n  let currentStandardDeviation = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > standardDeviation) {\n      standardDeviation = numbers[i];\n      currentStandardDeviation = standardDeviation;\n      currentIndex = i;\n    }\n    if (numbers[i] > currentStandardDeviation) {\n      currentStandardDeviation = numbers[i];\n      currentIndex = i;\n    }\n  }\n  result.push(currentStandardDeviation);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > standardDeviation) {\n      standardDeviation = numbers[i];\n    }\n  }\n  result.push(standardDeviation);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating variance elements found up to a certain moment in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let variance = 0;\n  let currentVariance = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > variance) {\n      variance = numbers[i];\n      currentVariance = variance;\n      currentIndex = i;\n    }\n    if (numbers[i] > currentVariance) {\n      currentVariance = numbers[i];\n      currentIndex = i;\n    }\n  }\n  result.push(currentVariance);\n  for (let i = currentIndex; i < numbers.length; i++) {\n    if (numbers[i] > variance) {\n      variance = numbers[i];\n    }\n  }\n  result.push(variance);\n  return result;\n};\n\n/* Generate from a given list of integers a list of rotating standard deviation elements found up to a certain moment in the sequence.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4, 3]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  const result = [];\n  let standardDeviation = 0;\n  let currentStandardDeviation = 0;\n  let currentIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > standardDeviation) {\n      standardDeviation = numbers[i];\n      currentStandardDeviation = standardDeviation;\n      currentIndex = i;\n    }\n    if (numbers[i] > currentStandardDeviation) {\n      currentStandardDeviation = numbers[i];\n      current", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n*/\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\nconst nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n// nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\" && S[i + 1] === \"a\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x === y || x === z || y === z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x === y && x === z && y === z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ false\n  */\nconst someInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x === y || x === z || y === z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ true\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  if (isInteger(x) && isInteger(y) && isInteger(z)) {\n    return x!== x && x!== y && x!== z;\n  }\n  return false;\n};\n\n/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charCodeAt(0) - 97;\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized. Examples:\n  >>> capitalize('test')\n  'Test'\n  >>> capitalize('This is a message')\n  'This Is A Message'\n  */\nconst capitalize = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowels('test')\n  'Test'\n  >>> capitalizeAndVowels('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowels = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLetters('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLetters('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLetters = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLettersAndNumbers('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLettersAndNumbers('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLettersAndNumbers = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuation('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuation('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLettersAndNumbersAndPunctuation = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpace('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpace('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpace = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLetters('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLetters('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLetters = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLettersAndNumbers('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLettersAndNumbers('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLettersAndNumbers = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (letter ==='') {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.substring(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message and returns the message with the first letter of each word capitalized and each vowel replaced with the letter that appears 2 places in front of that vowel in the English alphabet. Examples:\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLettersAndNumbersAndPunctuation('test')\n  'Test'\n  >>> capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLettersAndNumbersAndPunctuation('This is a message')\n  'This Is A Message'\n  */\nconst capitalizeAndVowelsAndLettersAndNumbersAndPunctuationAndSpaceAndLettersAndNumbersAndPunctuation = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowards", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply15 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply16 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      upperCount += 1;\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string, returns the first character that appears\n  more than half of the times in the given string.\n  \n  For example:\n  firstChar('abBcCd') returns 'b'\n  firstChar('abBcCdEf') returns 'b'\n  firstChar('abBcCdEfGh') returns 'b'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYz') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZ') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZa') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxYzZaA') returns 'B'\n  firstChar('abBcCdEfGhIjKlMnOpQrStUvWxY", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [intValue, decimalValue] = value.split('.')\n  const [intValuePart, decimalValuePart] = intValue.split('.')\n  const [intValuePart2, decimalValuePart2] = intValuePart.split('.')\n  const [intValuePart3, decimalValuePart3] = intValuePart2.split('.')\n  const [intValuePart4, decimalValuePart4] = intValuePart3.split('.')\n  const [intValuePart5, decimalValuePart5] = intValuePart4.split('.')\n  const [intValuePart6, decimalValuePart6] = intValuePart5.split('.')\n  const [intValuePart7, decimalValuePart7] = intValuePart6.split('.')\n  const [intValuePart8, decimalValuePart8] = intValuePart7.split('.')\n  const [intValuePart9, decimalValuePart9] = intValuePart8.split('.')\n  const [intValuePart10, decimalValuePart10] = intValuePart9.split('.')\n  const [intValuePart11, decimalValuePart11] = intValuePart10.split('.')\n  const [intValuePart12, decimalValuePart12] = intValuePart11.split('.')\n  const [intValuePart13, decimalValuePart13] = intValuePart12.split('.')\n  const [intValuePart14, decimalValuePart14] = intValuePart13.split('.')\n  const [intValuePart15, decimalValuePart15] = intValuePart14.split('.')\n  const [intValuePart16, decimalValuePart16] = intValuePart15.split('.')\n  const [intValuePart17, decimalValuePart17] = intValuePart16.split('.')\n  const [intValuePart18, decimalValuePart18] = intValuePart17.split('.')\n  const [intValuePart19, decimalValuePart19] = intValuePart18.split('.')\n  const [intValuePart20, decimalValuePart20] = intValuePart19.split('.')\n  const [intValuePart21, decimalValuePart21] = intValuePart20.split('.')\n  const [intValuePart22, decimalValuePart22] = intValuePart21.split('.')\n  const [intValuePart23, decimalValuePart23] = intValuePart22.split('.')\n  const [intValuePart24, decimalValuePart24] = intValuePart23.split('.')\n  const [intValuePart25, decimalValuePart25] = intValuePart24.split('.')\n  const [intValuePart26, decimalValuePart26] = intValuePart25.split('.')\n  const [intValuePart27, decimalValuePart27] = intValuePart26.split('.')\n  const [intValuePart28, decimalValuePart28] = intValuePart27.split('.')\n  const [intValuePart29, decimalValuePart29] = intValuePart28.split('.')\n  const [intValuePart30, decimalValuePart30] = intValuePart29.split('.')\n  const [intValuePart31, decimalValuePart31] = intValuePart30.split('.')\n  const [intValuePart32, decimalValuePart32] = intValuePart31.split('.')\n  const [intValuePart33, decimalValuePart33] = intValuePart32.split('.')\n  const [intValuePart34, decimalValuePart34] = intValuePart33.split('.')\n  const [intValuePart35, decimalValuePart35] = intValuePart34.split('.')\n  const [intValuePart36, decimalValuePart36] = intValuePart35.split('.')\n  const [intValuePart37, decimalValuePart37] = intValuePart36.split('.')\n  const [intValuePart38, decimalValuePart38] = intValuePart37.split('.')\n  const [intValuePart39, decimalValuePart39] = intValuePart38.split('.')\n  const [intValuePart40, decimalValuePart40] = intValuePart39.split('.')\n  const [intValuePart41, decimalValuePart41] = intValuePart40.split('.')\n  const [intValuePart42, decimalValuePart42] = intValuePart41.split('.')\n  const [intValuePart43, decimalValuePart43] = intValuePart42.split('.')\n  const [intValuePart44, decimalValuePart44] = intValuePart43.split('.')\n  const [intValuePart45, decimalValuePart45] = intValuePart44.split('.')\n  const [intValuePart46, decimalValuePart46] = intValuePart45.split('.')\n  const [intValuePart47, decimalValuePart47] = intValuePart46.split('.')\n  const [intValuePart48, decimalValuePart48] = intValuePart47.split('.')\n  const [intValuePart49, decimalValuePart49] = intValuePart48.split('.')\n  const [intValuePart50, decimalValuePart50] = intValuePart49.split('.')\n  const [intValuePart51, decimalValuePart51] = intValuePart50.split('.')\n  const [intValuePart52, decimalValuePart52] = intValuePart51.split('.')\n  const [intValuePart53, decimalValuePart53] = intValuePart52.split('.')\n  const [intValuePart54, decimalValuePart54] = intValuePart53.split('.')\n  const [intValuePart55, decimalValuePart55] = intValuePart54.split('.')\n  const [intValuePart56, decimalValuePart56] = intValuePart55.split('.')\n  const [intValuePart57, decimalValuePart57] = intValuePart56.split('.')\n  const [intValuePart58, decimalValuePart58] = intValuePart57.split('.')\n  const [intValuePart59, decimalValuePart59] = intValuePart58.split('.')\n  const [intValuePart60, decimalValuePart60] = intValuePart59.split('.')\n  const [intValuePart61, decimalValuePart61] = intValuePart60.split('.')\n  const [intValuePart62, decimalValuePart62] = intValuePart61.split('.')\n  const [intValuePart63, decimalValuePart63] = intValuePart62.split('.')\n  const [intValuePart64, decimalValuePart64] = intValuePart63.split('.')\n  const [intValuePart65, decimalValuePart65] = intValuePart64.split('.')\n  const [intValuePart66, decimalValuePart66] = intValuePart65.split('.')\n  const [intValuePart67, decimalValuePart67] = intValuePart66.split('.')\n  const [intValuePart68, decimalValuePart68] = intValuePart67.split('.')\n  const [intValuePart69, decimalValuePart69] = intValuePart68.split('.')\n  const [intValuePart70, decimalValuePart70] = intValuePart69.split('.')\n  const [intValuePart71, decimalValuePart71] = intValuePart70.split('.')\n  const [intValuePart72, decimalValuePart72] = intValuePart71.split('.')\n  const [intValuePart73, decimalValuePart73] = intValuePart72.split('.')\n  const [intValuePart74, decimalValuePart74] = intValuePart73.split('.')\n  const [intValuePart75, decimalValuePart75] = intValuePart74.split('.')\n  const [intValuePart76, decimalValuePart76] = intValuePart75.split('.')\n  const [intValuePart77, decimalValuePart77] = intValuePart76.split('.')\n  const [intValuePart78, decimalValuePart78] = intValuePart77.split('.')\n  const [intValuePart79, decimalValuePart79] = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
