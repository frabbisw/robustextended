{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const firstDifference = firstNumber - lastNumber;\n  const secondDifference = lastNumber - firstNumber;\n  const firstThreshold = firstDifference < threshold? firstDifference : threshold;\n  const secondThreshold = secondDifference < threshold? secondDifference : threshold;\n  return firstThreshold <= secondThreshold;\n};\n\n/**\n * Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n * Returns false if all numbers are the same.\n * Returns true if all numbers are different.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two numbers are closer to each other than gives threshold.\n * Returns true if any two number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(.*?\\)/g);\n  return paren_groups.map(paren_group => paren_group.replace(/\\(|\\)/g, ''));\n};\n\n/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroup", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  postfix = postfix.split('').reverse().join('');\n  while (palindrome!= postfix) {\n    palindrome = palindrome.split('').reverse().join('');\n    postfix = postfix.split('').reverse().join('');\n  }\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  postfix = postfix.split('').reverse().join('');\n  while (palindrome!= postfix) {\n    palindrome = palindrome.split('').reverse().join('');\n    postfix = postfix.split('').reverse().join('');\n  }\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  postfix = postfix.split('').reverse().join('');\n  while (palindrome!= postfix) {\n    palindrome = palindrome.split('').reverse().join('');\n    postfix = postfix.split('').reverse().join('');\n  }\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  postfix = postfix.split('').reverse().join('');\n  while (palindrome!= postfix) {\n    palindrome = palindrome.split('').reverse().join('');\n    postfix = postfix.split('').reverse().join('');\n  }\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  postfix = postfix.split('').reverse().join('');\n  while (palindrome!= postfix) {\n    palindrome = palindrome.split('').reverse().join('');\n    postfix = postfix.split('').reverse().join('');\n  }\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse().join('');\n  }\n  postfix = postfix.split('').reverse().join('');\n  while (palindrome!= postfix) {\n    palindrome = palindrome.split('').reverse().join('');\n    postfix = postfix.split('').reverse().join('');\n  }\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string;\n  let postfix = string.split('').reverse().join('');\n  while (isPalindrome(postfix)) {\n    postfix = postfix.split('').reverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const bin = String(avg).padStart(Math.ceil(Math.log2(avg + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the sum of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  sum(1, 5) => \"0b11\"\n  sum(7, 5) => -1\n  sum(10, 20) => \"0b1111\"\n  sum(20, 33) => \"0b11010\"\n  */\nconst sum = (n, m) => {\n  if (n < m) return -1;\n  const sum = n + m;\n  const bin = String(sum).padStart(Math.ceil(Math.log2(sum + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the product of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  prod(1, 5) => \"0b11\"\n  prod(7, 5) => -1\n  prod(10, 20) => \"0b1111\"\n  prod(20, 33) => \"0b11010\"\n  */\nconst prod = (n, m) => {\n  if (n < m) return -1;\n  const prod = n * m;\n  const bin = String(prod).padStart(Math.ceil(Math.log2(prod + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the difference of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  diff(1, 5) => \"0b11\"\n  diff(7, 5) => -1\n  diff(10, 20) => \"0b1111\"\n  diff(20, 33) => \"0b11010\"\n  */\nconst diff = (n, m) => {\n  if (n < m) return -1;\n  const diff = n - m;\n  const bin = String(diff).padStart(Math.ceil(Math.log2(diff + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the quotient of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  quo(1, 5) => \"0b11\"\n  quo(7, 5) => -1\n  quo(10, 20) => \"0b1111\"\n  quo(20, 33) => \"0b11010\"\n  */\nconst quo = (n, m) => {\n  if (n < m) return -1;\n  const quo = n / m;\n  const bin = String(quo).padStart(Math.ceil(Math.log2(quo + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the remainder of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  rem(7, 5) => -1\n  rem(10, 20) => \"0b1111\"\n  rem(20, 33) => \"0b11010\"\n  */\nconst rem = (n, m) => {\n  if (n < m) return -1;\n  const rem = n % m;\n  const bin = String(rem).padStart(Math.ceil(Math.log2(rem + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the absolute value of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  if (n < m) return -1;\n  const abs = Math.abs(n);\n  const bin = String(abs).padStart(Math.ceil(Math.log2(abs + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the largest of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  max(7, 5) => -1\n  max(10, 20) => \"0b1111\"\n  max(20, 33) => \"0b11010\"\n  */\nconst max = (n, m) => {\n  if (n < m) return -1;\n  const max = Math.max(...[n, m]);\n  const bin = String(max).padStart(Math.ceil(Math.log2(max + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the smallest of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  min(7, 5) => -1\n  min(10, 20) => \"0b1111\"\n  min(20, 33) => \"0b11010\"\n  */\nconst min = (n, m) => {\n  if (n < m) return -1;\n  const min = Math.min(...[n, m]);\n  const bin = String(min).padStart(Math.ceil(Math.log2(min + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the sum of squares of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  sumSq(1, 5) => \"0b11\"\n  sumSq(7, 5) => -1\n  sumSq(10, 20) => \"0b1111\"\n  sumSq(20, 33) => \"0b11010\"\n  */\nconst sumSq = (n, m) => {\n  if (n < m) return -1;\n  const sumSq = n + m * n;\n  const bin = String(sumSq).padStart(Math.ceil(Math.log2(sumSq + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the sum of cubes of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  sumCube(1, 5) => \"0b11\"\n  sumCube(7, 5) => -1\n  sumCube(10, 20) => \"0b1111\"\n  sumCube(20, 33) => \"0b11010\"\n  */\nconst sumCube = (n, m) => {\n  if (n < m) return -1;\n  const sumCube = n * n * n + m * m * m + n * m * n + m * n * m;\n  const bin = String(sumCube).padStart(Math.ceil(Math.log2(sumCube + 1)), '0');\n  return bin;\n};\n\n/*Write a function that takes two positive integers n and m and returns the product of the integers from n through m. Round the answer to the nearer integers and converts that to binary. If n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOdd = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOdd = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit and even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEven = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddEven = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        if (item % 2 === 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit and even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEvenOdd = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOdd = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2 === 0) {\n            result.push(item);\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit and even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEvenEven = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2 === 0) {\n            result.push(item);\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOdd = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2 === 0) {\n              result.push(item);\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit and even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEvenOddEven = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2 === 0) {\n              if (item % 2!== 0) {\n                result.push(item);\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOdd = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2!== 0) {\n              if (item % 2 === 0) {\n                if (item % 2!== 0) {\n                  result.push(item);\n                }\n              }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if(arr.length === 0) return [];\n  if(arr.length === 1) return [\"One\"];\n  \n  let sortedArr = arr.sort((a,b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  \n  for(let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    let name = byNumber[num];\n    result.push(name);\n  }\n  \n  return result;\n}\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  if(arr.length === 0) return [];\n  if(arr.length === 1) return [\"One\"];\n  \n  let sortedArr = arr.sort((a,b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  \n  for(let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    let name = byNumber2[num];\n    result.push(name);\n  }\n  \n  return result;\n}\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  if(arr.length === 0) return [];\n  if(arr.length === 1) return [\"One\"];\n  \n  let sortedArr = arr.sort((a,b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  \n  for(let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    let name = byNumber3[num];\n    result.push(name);\n  }\n  \n  return result;\n}\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  if(arr.length === 0) return [];\n  if(arr.length === 1) return [\"One\"];\n  \n  let sortedArr = arr.sort((a,b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  \n  for(let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    let name = byNumber4[num];\n    result.push(name);\n  }\n  \n  return result;\n}\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  if(arr.length === 0) return [];\n  if(arr.length === 1) return [\"One\"];\n  \n  let sortedArr = arr.sort((a,b) => a - b);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  \n  for(let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    let name = byNumber5[num];\n    result.push(name);\n  }\n  \n  return result;\n}\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions g that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 10, 30, 15]\n  */\nconst g = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions h that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 3 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 10, 30, 15]\n  */\nconst h = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions i that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 5 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 3, 10, 30, 15]\n  */\nconst i = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions j that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 7 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 10, 30, 15]\n  */\nconst j = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions k that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 11 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 10, 30, 15]\n  */\nconst k = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions l that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 13 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 10, 30, 15]\n  */\nconst l = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions m that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 17 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 10, 30, 15]\n  */\nconst m = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions n that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 19 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 10, 30, 15]\n  */\nconst n = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions o that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 23 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 10, 30, 15]\n  */\nconst o = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions p that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 29 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 10, 30, 15]\n  */\nconst p = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions q that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 31 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 3, 10, 30, 15]\n  */\nconst q = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]);\n  }\n  return factorials;\n};\n\n/* Implements the functions r that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is divisible by 37 and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  r(5) == [1, 3, 10, 30, 15]\n  */\nconst r = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i * factorials[i - 1]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n\n    if (evenPalindrome && oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(n - i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed from the product of two 3-digit numbers.\n\n  Example 1:\n\n      Input: 121\n      Output: [1211, 1213, 1221, 1223, 2112, 2133, 2131, 2311, 2313, 23111, 23131, 31211, 31213, 31221, 31231, 32111, 32131, 321113, 321311, 32211, 32231, 312211, 312231, 321211, 321213, 322112, 322211, 322213, 322312, 322313, 323111, 323131, 323112, 323133, 323113, 3231313, 323211, 323213, 322212, 322213, 322312, 322313, 323112]\n      Explanation:\n      1211 x 1213 = 12111, 12131, 12113, 121313, 121311, 121321, 121323, 12211, 12213, 122133, 122131, 12231, 122313, 1223111, 1223131, 1223113, 12231313, 123211, 123213, 1232111, 1232131, 1232113, 12321313, 1232211, 1232231, 12322133, 12322131, 12322313, 12323111, 12323131, 12323133, 12323113, 123231313, 12323211, 12323213, 12322211, 12322213, 12322312, 12322313, 12323112, 123231312, 12323211, 12323213, 12322212, 12322213, 12322312, 12322313, 12323112\n\n  Example 2:\n\n      Input: 120\n      Output: [1201, 1203, 12011, 12013, 120211, 120213, 120231, 1202313, 1203111, 1203131, 1203133, 1203113, 12031313, 1203211, 1203213, 12032211, 12032231, 120322133, 120322131, 120322313, 120323111, 120323131, 120323133, 120323113, 1203231313, 120323211, 120323213, 120322211, 120322213, 120322312, 120322313, 120323112, 1203231312, 120323211, 120323213, 120322212, 120322213, 120322312, 120322313, 120323112]\n      Explanation:\n      1201 x 1203 = 120111, 120113, 1201113, 1201111, 1201113, 120121, 120123, 1201211, 1201213, 1201221, 1201231, 12012313, 120131, 120133, 1201311, 1201313, 12013111, 12013131, 12013113, 120131313, 120141, 120143, 1201411, 1201413, 12014111, 12014131, 12014113, 120141313, 120151, 120153, 1201511, 1201513, 12015111, 12015131, 12015113, 120151313, 1201611, 1201613, 12016111, 12016131, 12016113, 120161313, 120171, 120173, 1201711, 1201713, 12017111, 12017131, 12017113, 120171313, 120181, 120183, 1201811, 1201813, 12018111, 12018131, 12018113, 120181313, 120191, 120193, 1201911, 1201913, 12019111, 12019131, 12019113, 120191313, 120201, 120203, 1202011, 1202013, 12020111, 12020131, 12020213, 12020231, 12020231, 12020213, 120202313, 12020311, 120203131, 120203133, 120203113, 1202031313, 120203211, 120203213, 120203221, 120203223, 120203223, 120203213, 120203212, 120203221, 120203223, 120203213, 120203212, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 120203221, 120203223, 120203213, 120203212, 120203213, 120203213, 12020", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) count++;\n  }\n  return count;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are less than or equal to n.\n  >>> sumDigits([-1, 11, -11], 3) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2], 3) == [1, 1, 2]\n  */\nconst sumDigits = (arr, n) => {\n  let sum = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sumOfDigits += arr[i].toString().charAt(j) - '0';\n    }\n    if (sumOfDigits <= n) sum.push(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  Takes an array of integers and returns an array of integers whose sums of digits are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  let flag = false;\n  while (left < right) {\n    if (arr[left] > arr[right]) {\n      count++;\n      left++;\n    } else {\n      count--;\n      right--;\n    }\n    if (count === 0) {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  let flag = false;\n  while (left < right) {\n    if (arr[left] > arr[right]) {\n      count++;\n      left++;\n    } else {\n      count--;\n      right--;\n    }\n    if (count === 0) {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-increasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-increasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-increasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  let flag = false;\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      count++;\n      left++;\n    } else {\n      count--;\n      right--;\n    }\n    if (count === 0) {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-increasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-increasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-increasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length;\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  let flag = false;\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      count++;\n      left++;\n    } else {\n      count--;\n      right--;\n    }\n    if (count === 0) {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n * Converts array to string\n * @param {Array} arr - Array to be converted\n * @returns {string} - String representation of array\n */\nconst arrayToString = arr => {\n  return arr.join('');\n};\n\n/**\n * Converts string to an array\n * @param {string} str - String to be converted\n * @returns {Array} - Array representation of string\n */\nconst stringToArray = str => {\n  return str.split('');\n};\n\n/**\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  lst1.sort();\n  lst2.sort();\n  let evenNumbers = [];\n  let oddNumbers = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNumbers.push(lst1[i]);\n    } else {\n      oddNumbers.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNumbers.push(lst2[i]);\n    } else {\n      oddNumbers.push(lst2[i]);\n    }\n  }\n  let evenNumbersLength = evenNumbers.length;\n  let oddNumbersLength = oddNumbers.length;\n  if (evenNumbersLength === oddNumbersLength) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problems, you will implements a function that takes two list of numbers, and determines whether it is possible to perform a sum of two numbers in lst1 with all the elements of lst2 to made lst1 a list of only even numbers. There is no limit on the number of sums performed.\n If it is possible to perform a sum of two numbers in lst1 with all the elements of lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  sum([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sum([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst sum = (lst1, lst2) => {\n  lst1.sort();\n  lst2.sort();\n  let evenNumbers = [];\n  let oddNumbers = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNumbers.push(lst1[i]);\n    } else {\n      oddNumbers.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNumbers.push(lst2[i]);\n    } else {\n      oddNumbers.push(lst2[i]);\n    }\n  }\n  let evenNumbersLength = evenNumbers.length;\n  let oddNumbersLength = oddNumbers.length;\n  if (evenNumbersLength === oddNumbersLength) {\n    let sum = 0;\n    for (let i = 0; i < evenNumbers.length; i++) {\n      sum += evenNumbers[i];\n    }\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problems, you will implements a function that takes two list of numbers, and determines whether it is possible to perform a subtraction of two numbers in lst1 with all the elements of lst2 to made lst1 a list of only even numbers. There is no limit on the number of subtractions performed.\n If it is possible to perform a subtraction of two numbers in lst1 with all the elements of lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  difference([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  difference([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst difference = (lst1, lst2) => {\n  lst1.sort();\n  lst2.sort();\n  let evenNumbers = [];\n  let oddNumbers = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNumbers.push(lst1[i]);\n    } else {\n      oddNumbers.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNumbers.push(lst2[i]);\n    } else {\n      oddNumbers.push(lst2[i]);\n    }\n  }\n  let evenNumbersLength = evenNumbers.length;\n  let oddNumbersLength = oddNumbers.length;\n  if (evenNumbersLength === oddNumbersLength) {\n    let difference = 0;\n    for (let i = 0; i < evenNumbers.length; i++) {\n      difference += evenNumbers[i] - oddNumbers[i];\n    }\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problems, you will implements a function that takes two list of numbers, and determines whether it is possible to perform a multiplication of two numbers in lst1 with all the elements of lst2 to made lst1 a list of only even numbers. There is no limit on the number of multiplications performed.\n If it is possible to perform a multiplication of two numbers in lst1 with all the elements of lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  product([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  product([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst product = (lst1, lst2) => {\n  lst1.sort();\n  lst2.sort();\n  let evenNumbers = [];\n  let oddNumbers = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNumbers.push(lst1[i]);\n    } else {\n      oddNumbers.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNumbers.push(lst2[i]);\n    } else {\n      oddNumbers.push(lst2[i]);\n    }\n  }\n  let evenNumbersLength = evenNumbers.length;\n  let oddNumbersLength = oddNumbers.length;\n  if (evenNumbersLength === oddNumbersLength) {\n    let product = 1;\n    for (let i = 0; i < evenNumbers.length; i++) {\n      product *= evenNumbers[i];\n    }\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problems, you will implements a function that takes two list of numbers, and determines whether it is possible to perform a division of two numbers in lst1 with all the elements of lst2 to made lst1 a list of only even numbers. There is no limit on the number of divisions performed.\n If it is possible to perform a division of two numbers in lst1 with all the elements of lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  quotient([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  quotient([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst quotient = (lst1, lst2) => {\n  lst1.sort();\n  lst2.sort();\n  let evenNumbers = [];\n  let oddNumbers = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNumbers.push(lst1[i]);\n    } else {\n      oddNumbers.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNumbers.push(lst2[i]);\n    } else {\n      oddNumbers.push(lst2[i]);\n    }\n  }\n  let evenNumbersLength = evenNumbers.length;\n  let oddNumbersLength = oddNumbers.length;\n  if (evenNumbersLength === oddNumbersLength) {\n    let quotient = 0;\n    for (let i = 0; i < evenNumbers.length; i++) {\n      quotient += evenNumbers[i] / oddNumbers[i];\n    }\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problems, you will implements a function that takes two list of numbers, and determines whether it is possible to perform a division of two numbers in lst1 with all the elements of lst2 to made lst1 a list of only odd numbers. There is no limit on the number of divisions performed.\n If it is possible to perform a division of two numbers in lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the first k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"b\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstK = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the last k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"bc\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeLastK = (s, k) => {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the first k characters and the last k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"bcc\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the last k characters and the first k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"acb\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the first k characters and the last k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"abcc\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the first k characters and the first k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"acb\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the last k characters and the last k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"abcc\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the first k characters and the first k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"acb\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the last k characters and the last k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"abcc\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*Task We were given a string s and a number k. We should return a new string that is the concatenation of all characters in s except the first k characters and the first k characters. You should return a string and you should not use any extra spaces.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\"\n  For s = \"abcabc\", k = 1  the result should be \"acb\"\n  For s = \"abcabc\", k = 0  the result should be \"\"\n*/\nconst removeFirstAndLastK = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i!== k) {\n      result += s[i];\n    }\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 1) {\n        oddArr.push(str.length);\n      }\n    }\n  }\n  return oddArr;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  const evenArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 0) {\n        evenArr.push(str.length);\n      }\n    }\n  }\n  return evenArr;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even and odd elements in the string i of the input.\" where all the i's should is replacing by the number of even and odd digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 1) {\n        evenArr.push(str.length);\n      } else {\n        oddArr.push(str.length);\n      }\n    }\n  }\n  return evenArr.concat(oddArr);\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even and odd elements in the string i of the input.\" where all the i's should is replacing by the number of even and odd digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 1) {\n        evenArr.push(str.length);\n      } else {\n        oddArr.push(str.length);\n      }\n    }\n  }\n  return evenArr.concat(oddArr);\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even and odd elements in the string i of the input.\" where all the i's should is replacing by the number of even and odd digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 1) {\n        evenArr.push(str.length);\n      } else {\n        oddArr.push(str.length);\n      }\n    }\n  }\n  return evenArr.concat(oddArr);\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even and odd elements in the string i of the input.\" where all the i's should is replacing by the number of even and odd digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 1) {\n        evenArr.push(str.length);\n      } else {\n        oddArr.push(str.length);\n      }\n    }\n  }\n  return evenArr.concat(oddArr);\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even and odd elements in the string i of the input.\" where all the i's should is replacing by the number of even and odd digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) % 2 === 1) {\n        evenArr.push(str.length);\n      } else {\n        oddArr.push(str.length);\n      }\n    }\n  }\n  return evenArr.concat(oddArr);\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < minSum) {\n          minSum = sum;\n          minSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return minSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum > maxSum) {\n          maxSum = sum;\n          maxSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return maxSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < minSum) {\n          minSum = sum;\n          minSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return minSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum > maxSum) {\n          maxSum = sum;\n          maxSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return maxSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < minSum) {\n          minSum = sum;\n          minSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return minSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum > maxSum) {\n          maxSum = sum;\n          maxSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return maxSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < minSum) {\n          minSum = sum;\n          minSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return minSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum > maxSum) {\n          maxSum = sum;\n          maxSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return maxSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < minSum) {\n          minSum = sum;\n          minSubArray = nums.slice(i, j + 1);\n        }\n      }\n    }\n  }\n  return minSubArray.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const buckets = new Array(rows).fill(0).map(() => new Array(capacity).fill(0));\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                buckets[i][j] = 1;\n            } else {\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    let count = 0;\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (buckets[i][j] === 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n};\n\nconst maxFillTest = (grid, capacity) => {\n    const actual = maxFill(grid, capacity);\n    const expected = 6;\n    \n    console.log('Max fill test result', actual, 'Expected', expected);\n    \n    return actual === expected;\n};\n\nconst test1 = () => {\n    console.log('maxFillTest', maxFillTest([\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1]\n    ], 1));\n};\n\ntest1();</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I think your solution is better than mine. However I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added a detailed explanation on my answer. Hope it helps.\n<|/ c |>\n<| a tags=javascript,algorithm |>\nI solved it by myself. I used a for loop to count the number of the buckets that is full. After that I used another for loop to count the number of the buckets that is empty. Finally I subtracted the empty buckets from the full buckets to get the number of empty buckets.\n\n<code>\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const buckets = new Array(rows).fill(0).map(() => new Array(capacity).fill(0));\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                buckets[i][j] = 1;\n            } else {\n                buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    let count = 0;\n    \n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (buckets[i][j] === 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count - buckets.reduce((acc, cur) => acc + cur.length, 0);\n};\n\nconst maxFillTest = (grid, capacity) => {\n    const actual = maxFill(grid, capacity);\n    const expected = 6;\n    \n    console.log('Max fill test result', actual, 'Expected', expected);\n    \n    return actual === expected;\n};\n\nconst test1 = () => {\n    console.log('maxFillTest', maxFillTest([\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1]\n    ], 1));\n};\n\ntest1();</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count - empty;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count - empty;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count - empty;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count - empty;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count - empty;\n}\n</code>\n<|/ a tags=javascript,algorithm dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count - empty;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n  let count = 0;\n  let empty = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        empty++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return a - b;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, cur) => acc + (cur? 1 : 0), 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.charAt(i) ==='') {\n      i++;\n      continue;\n    }\n    if (s.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowelsArr = [];\n  let vowelsArr2 = [];\n  let vowelsArr3 = [];\n  let vowelsArr4 = [];\n  let vowelsArr5 = [];\n  let vowelsArr6 = [];\n  let vowelsArr7 = [];\n  let vowelsArr8 = [];\n  let vowelsArr9 = [];\n  let vowelsArr10 = [];\n  let vowelsArr11 = [];\n  let vowelsArr12 = [];\n  let vowelsArr13 = [];\n  let vowelsArr14 = [];\n  let vowelsArr15 = [];\n  let vowelsArr16 = [];\n  let vowelsArr17 = [];\n  let vowelsArr18 = [];\n  let vowelsArr19 = [];\n  let vowelsArr20 = [];\n  let vowelsArr21 = [];\n  let vowelsArr22 = [];\n  let vowelsArr23 = [];\n  let vowelsArr24 = [];\n  let vowelsArr25 = [];\n  let vowelsArr26 = [];\n  let vowelsArr27 = [];\n  let vowelsArr28 = [];\n  let vowelsArr29 = [];\n  let vowelsArr30 = [];\n  let vowelsArr31 = [];\n  let vowelsArr32 = [];\n  let vowelsArr33 = [];\n  let vowelsArr34 = [];\n  let vowelsArr35 = [];\n  let vowelsArr36 = [];\n  let vowelsArr37 = [];\n  let vowelsArr38 = [];\n  let vowelsArr39 = [];\n  let vowelsArr40 = [];\n  let vowelsArf41 = [];\n  let vowelsArf42 = [];\n  let vowelsArf43 = [];\n  let vowelsArr44 = [];\n  let vowelsArr45 = [];\n  let vowelsArr46 = [];\n  let vowelsArr47 = [];\n  let vowelsArr48 = [];\n  let vowelsArr49 = [];\n  let vowelsArr50 = [];\n  let vowelsArr51 = [];\n  let vowelsArr52 = [];\n  let vowelsArr53 = [];\n  let vowelsArr54 = [];\n  let vowelsArr55 = [];\n  let vowelsArr56 = [];\n  let vowelsArr57 = [];\n  let vowelsArr58 = [];\n  let vowelsArr59 = [];\n  let vowelsArr60 = [];\n  let vowelsArr61 = [];\n  let vowelsArr62 = [];\n  let vowelsArr63 = [];\n  let vowelsArr64 = [];\n  let vowelsArr65 = [];\n  let vowelsArr66 = [];\n  let vowelsArr67 = [];\n  let vowelsArr68 = [];\n  let vowelsArr69 = [];\n  let vowelsArr70 = [];\n  let vowelsArr71 = [];\n  let vowelsArr72 = [];\n  let vowelsArr73 = [];\n  let vowelsArr74 = [];\n  let vowelsArr75 = [];\n  let vowelsArr76 = [];\n  let vowelsArr77 = [];\n  let vowelsArr78 = [];\n  let vowelsArr79 = [];\n  let vowelsArr80 = [];\n  let vowelsArr81 = [];\n  let vowelsArr82 = [];\n  let vowelsArr83 = [];\n  let vowelsArr84 = [];\n  let vowelsArr85 = [];\n  let vowelsArr86 = [];\n  let vowelsArr87 = [];\n  let vowelsArr88 = [];\n  let vowelsArr89 = [];\n  let vowelsArr90 = [];\n  let vowelsArr91 = [];\n  let vowelsArr92 = [];\n  let vowelsArr93 = [];\n  let vowelsArr94 = [];\n  let vowelsArr95 = [];\n  let vowelsArr96 = [];\n  let vowelsArr97 = [];\n  let vowelsArr98 = [];\n  let vowelsArr99 = [];\n  let vowelsArr100 = [];\n  let vowelsArr101 = [];\n  let vowelsArr102 = [];\n  let vowelsArr103 = [];\n  let vowelsArr104 = [];\n  let vowelsArr105 = [];\n  let vowelsArr106 = [];\n  let vowelsArr107 = [];\n  let vowelsArr108 = [];\n  let vowelsArr109 = [];\n  let vowelsArr110 = [];\n  let vowelsArr111 = [];\n  let vowelsArr112 = [];\n  let vowelsArr113 = [];\n  let vowelsArr114 = [];\n  let vowelsArr115 = [];\n  let vowelsArr116 = [];\n  let vowelsArr117 = [];\n  let vowelsArr118 = [];\n  let vowelsArr119 = [];\n  let vowelsArr120 = [];\n  let vowelsArr121 = [];\n  let vowelsArr122 = [];\n  let vowelsArr123 = [];\n  let vowelsArr124 = [];\n  let vowelsArr125 = [];\n  let vowelsArr126 = [];\n  let vowelsArr127 = [];\n  let vowelsArr128 = [];\n  let vowelsArr129 = [];\n  let vowelsArr130 = [];\n  let vowelsArr131 = [];\n  let vowelsArr132 = [];\n  let vowelsArr133 = [];\n  let vowelsArr134 = [];\n  let vowelsArr135 = [];\n  let vowelsArr136 = [];\n  let vowelsArr137 = [];\n  let vowelsArr138 = [];\n  let vowelsArr139 = [];\n  let vowelsArr140 = [];\n  let vowelsArr141 = [];\n  let vowelsArr142 = [];\n  let vowelsArr143 = [];\n  let vowelsArr144 = [];\n  let vowelsArr145 = [];\n  let vowelsArr146 = [];\n  let vowelsArr147 = [];\n  let vowelsArr148 = [];\n  let vowelsArr149 = [];\n  let vowelsArr150 = [];\n  let vowelsArr151 = [];\n  let vowelsArr152 = [];\n  let vowelsArr153 = [];\n  let vowelsArr154 = [];\n  let vowelsArr155 = [];\n  let vowelsArr156 = [];\n  let vowelsArr157 = [];\n  let vowelsArr158 = [];\n  let vowelsArr159 = [];\n  let vowelsArr160 = [];\n  let vowelsArr161 = [];\n  let vowelsArr162 = [];\n  let vowelsArr163 = [];\n  let vowelsArr164 = [];\n  let vowelsArr165 = [];\n  let vowelsArr166 = [];\n  let vowelsArr167 = [];\n  let vowelsArr168 = [];\n  let vowelsArr169 = [];\n  let vowelsArr170 = [];\n  let vowelsArr171 = [];\n  let vowelsArr172 = [];\n  let vowelsArr173 = [];\n  let vowelsArr174 = [];\n  let vowelsArr175 = [];\n  let vowelsArr176 = [];\n  let vowelsArr177 = [];\n  let vowelsArr178 = [];\n  let vowelsArr179 = [];\n  let vowelsArr180 = [];\n  let vowelsArr181 = [];\n  let vowelsArr182 = [];\n  let vowelsArr183 = [];\n  let vowelsArr184 = [];\n  let vowelsArr185 = [];\n  let vowelsArr186 = [];\n  let vowelsArr187 = [];\n  let vowelsArr188 = [];\n  let vowelsArr189 = [];\n  let vowelsArr19", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  lst.forEach((item) => {\n    if (item === '(') {\n      stack.push(item);\n    } else if (item === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== item) {\n        return 'No';\n      }\n    }\n  });\n  return stack.length === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab' + 'ba' = 'aba'.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countSubstrings(['ab', 'ba'], 2) == 'Yes'\n  countSubstrings(['ab', 'ba'], 3) == 'No'\n  */\nconst countSubstrings = (lst, n) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst[i] === lst[i + j]) {\n        count++;\n      }\n    }\n  }\n  return count === 0;\n};\n\n/* You was given a string S and an integer N. Your job is to find out how many times the string S can be written as a sum of two substrings A and B of length N. For example, the string 'ab' can be written as 'a' + 'b' + 'a' = 'ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n// Takes a string and returns the string with the first letter capitalized.\n// If the string doesn't start with a letter, returns the string unchanged.\n// If the string starts with a number, capitalizes the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first letter.\n// If the string starts with a number, capitalizes all letters after the first letter.\n// If the string starts with a letter, capitalizes all letters after the first let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  const len = arr.length;\n  const max = Math.max(...arr);\n  for (let i = 0; i < k; i++) {\n    const index = arr.indexOf(max);\n    result.push(arr[index]);\n    arr.splice(index, 1);\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\nexport { binarySearch };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch2 = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\nexport { binarySearch2 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch3 = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\nexport { binarySearch3 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch4 = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\nexport { binarySearch4 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch5 = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] > target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\nexport { binarySearch5 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch6 = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\nexport { binarySearch6 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: nums = [1, 3, 5, 7], target = 6\n      Output: 4\n\n  Example 2:\n\n      Input: nums = [1, 3, 5, 7], target = 2\n      Output: -1\n\n  Example 3:\n\n      Input: nums = [1, 3, 2], target = 3\n      Output: -1\n\n  Note:\n      You may assume that all input has valid answer.\n */\nconst binarySearch7 = (nums, target) => {\n  let low = 0;\n  let high = nums.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] < target) {\n      low = m", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd-numbered elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd-numbered elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd-numbered elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 9\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements2 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements3 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements4 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements5 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements6 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements7 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements8 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements9 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] + 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sumElements10 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers arr and an integers k, return the sum of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n      list.push(currentNum);\n    } else {\n      currentNum = currentNum * 3 + 1;\n      list.push(currentNum);\n    }\n  }\n  return list;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n      list.push(currentNum);\n    } else {\n      currentNum = currentNum * 3 + 1;\n      list.push(currentNum);\n    }\n  }\n  return list;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n      list.push(currentNum);\n    } else {\n      currentNum = currentNum * 3 + 1;\n      list.push(currentNum);\n    }\n  }\n  return list;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n      list.push(currentNum);\n    } else {\n      currentNum = currentNum * 3 + 1;\n      list.push(currentNum);\n    }\n  }\n  return list;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n      list.push(currentNum);\n    } else {\n      currentNum = currentNum * 3 + 1;\n      list.push(currentNum);\n    }\n  }\n  return list;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let currentNum = n;\n  while (currentNum > 1) {\n    if (currentNum % 2 === 0) {\n      currentNum = currentNum / 2;\n      list.push(currentNum);\n    } else {\n      currentNum = currentNum * 3 + 1;\n      list.push(currentNum);\n    }\n  }\n  return list;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 2) {\n    return false;\n  }\n  if (dateArray[0] > 12 || dateArray[0] < 1) {\n    return false;\n  }\n  if (dateArray[1] > 12 || dateArray[1] < 1) {\n    return false;\n  }\n  if (dateArray[2] > 31 || dateArray[2] < 1) {\n    return false;\n  }\n  return true;\n};\n\n/*You had to write a functions which returns the number of days in a given month.\n\n  For example: \n  daysInMonth(4,11) => 31\n\n  daysInMonth(5,11) => 30\n\n  daysInMonth(6,11) => 29\n\n  daysInMonth(7,11) => 31\n\n  daysInMonth(8,11) => 31\n\n  daysInMonth(9,11) => 30\n\n  daysInMonth(10,11) => 31\n\n  daysInMonth(11,11) => 30\n  */\nconst daysInMonth = (month, year) => {\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    return 31;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    return 30;\n  }\n  if (month === 2 && year % 4 === 0) {\n    return 29;\n  }\n  return 28;\n};\n\n/*You had to write a functions which returns the number of days in a given year.\n\n  For example: \n  daysInYear(2020) => 365\n\n  daysInYear(2021) => 366\n\n  daysInYear(2022) => 367\n\n  daysInYear(2023) => 368\n\n  daysInYear(2024) => 369\n\n  daysInYear(2025) => 370\n\n  daysInYear(2026) => 371\n\n  daysInYear(2027) => 372\n\n  daysInYear(2028) => 373\n\n  daysInYear(2029) => 374\n\n  daysInYear(2030) => 375\n\n  daysInYear(2031) => 376\n\n  daysInYear(2032) => 377\n\n  daysInYear(2033) => 378\n\n  daysInYear(2034) => 379\n\n  daysInYear(2035) => 380\n\n  daysInYear(2036) => 381\n\n  daysInYear(2037) => 382\n\n  daysInYear(2038) => 383\n\n  daysInYear(2039) => 384\n\n  daysInYear(2040) => 385\n\n  daysInYear(2041) => 386\n\n  daysInYear(2042) => 387\n\n  daysInYear(2043) => 388\n\n  daysInYear(2044) => 389\n\n  daysInYear(2045) => 390\n\n  daysInYear(2046) => 391\n\n  daysInYear(2047) => 392\n\n  daysInYear(2048) => 393\n\n  daysInYear(2049) => 394\n\n  daysInYear(2050) => 395\n\n  daysInYear(2051) => 396\n\n  daysInYear(2052) => 397\n\n  daysInYear(2053) => 398\n\n  daysInYear(2054) => 399\n\n  daysInYear(2055) => 400\n\n  daysInYear(2056) => 401\n\n  daysInYear(2057) => 402\n\n  daysInYear(2058) => 403\n\n  daysInYear(2059) => 404\n\n  daysInYear(2060) => 405\n\n  daysInYear(2061) => 406\n\n  daysInYear(2062) => 407\n\n  daysInYear(2063) => 408\n\n  daysInYear(2064) => 409\n\n  daysInYear(2065) => 410\n\n  daysInYear(2066) => 411\n\n  daysInYear(2067) => 412\n\n  daysInYear(2068) => 413\n\n  daysInYear(2069) => 414\n\n  daysInYear(2070) => 415\n\n  daysInYear(2071) => 416\n\n  daysInYear(2072) => 417\n\n  daysInYear(2073) => 418\n\n  daysInYear(2074) => 419\n\n  daysInYear(2075) => 420\n\n  daysInYear(2076) => 421\n\n  daysInYear(2077) => 422\n\n  daysInYear(2078) => 423\n\n  daysInYear(2079) => 424\n\n  daysInYear(2080) => 425\n\n  daysInYear(2081) => 426\n\n  daysInYear(2082) => 427\n\n  daysInYear(2083) => 428\n\n  daysInYear(2084) => 429\n\n  daysInYear(2085) => 430\n\n  daysInYear(2086) => 431\n\n  daysInYear(2087) => 432\n\n  daysInYear(2088) => 433\n\n  daysInYear(2089) => 434\n\n  daysInYear(2090) => 435\n\n  daysInYear(2091) => 436\n\n  daysInYear(2092) => 437\n\n  daysInYear(2093) => 438\n\n  daysInYear(2094) => 439\n\n  daysInYear(2095) => 440\n\n  daysInYear(2096) => 441\n\n  daysInYear(2097) => 442\n\n  daysInYear(2098) => 443\n\n  daysInYear(2099) => 444\n\n  daysInYear(2100) => 445\n\n  daysInYear(2101) => 446\n\n  daysInYear(2102) => 447\n\n  daysInYear(2103) => 448\n\n  daysInYear(2104) => 449\n\n  daysInYear(2105) => 450\n\n  daysInYear(2106) => 451\n\n  daysInYear(2107) => 452\n\n  daysInYear(2108) => 453\n\n  daysInYear(2109) => 454\n\n  daysInYear(2110) => 455\n\n  daysInYear(2111) => 456\n\n  daysInYear(2112) => 457\n\n  daysInYear(2113) => 458\n\n  daysInYear(2114) => 459\n\n  daysInYear(2115) => 460\n\n  daysInYear(2116) => 461\n\n  daysInYear(2117) => 462\n\n  daysInYear(2118) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.toLowerCase().charCodeAt());\n};\n\n/**\n * Takes a string and returns a list of lower-case letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  letterOrder(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d!\"]\n  letterOrder(\"abcdef\") == 3\n  */\nconst letterOrder = (txt) => {\n  const letters = txt.trim().split(\"\");\n  return letters.sort((a, b) => a.toLowerCase().charCodeAt() - b.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAndDesc([5]) ➞ true\n  isSortedAndDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAndDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAndDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAndDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAndDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAndDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAndDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAndDesc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in descends order and ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAndAsc([5]) ➞ true\n  isSortedAndAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAndAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAndAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAndAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAndAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAndAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAndAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAndAsc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAndDescAndAsc([5]) ➞ true\n  isSortedAndDescAndAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAndDescAndAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAndDescAndAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAndDescAndAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAndDescAndAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAndDescAndAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAndDescAndAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAndDescAndAsc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in descends order and ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAndAscAndDesc([5]) ➞ true\n  isSortedAndAscAndDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAndAscAndDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAndAscAndDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAndAscAndDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAndAscAndDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAndAscAndDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAndAscAndDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAndAscAndDesc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAndDescAndAsc([5]) ➞ true\n  isSortedAndDescAndAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAndDescAndAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAndDescAndAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedAndDescAndAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAndDescAndAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAndDescAndAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAndDescAndAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAndDescAndAsc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Gives a list of numbers, return whether or not they was sorted in descends order and ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedAndAscAndDesc([5]) ➞ true\n  isSortedAndAscAndDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedAndA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    return [start1, end1];\n  }\n  if (start2 < start1) {\n    return [start2, end2];\n  }\n  if (end1 > end2) {\n    return [start2, end2];\n  }\n  if (end2 > end1) {\n    return [start1, end1];\n  }\n  return [];\n};\n\n/*You was given two integers x and y, where x is less than or equal to y.\n  Your task is to determine whether x is divisible by y or not.\n  Example, x = 10, y = 5\n  x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by y or x is divisible by y if x is divisible by ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array with only positive numbers. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> positives([1, 2, 2, -4]) == [1, 2, -4]\n  >>> positives([0, 1]) == [0, 1]\n  >>> positives([]) == null\n  */\nconst positives = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only negative numbers. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> negatives([1, 2, 2, -4]) == [-4, -2, -1]\n  >>> negatives([0, 1]) == [0, -1]\n  >>> negatives([]) == null\n  */\nconst negatives = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 3. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy3([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy3([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy3([]) == null\n  */\nconst divisibleBy3 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 5.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy5([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy5([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy5([]) == null\n  */\nconst divisibleBy5 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 5 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 7.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy7([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy7([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy7([]) == null\n  */\nconst divisibleBy7 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 7 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 11.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy11([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy11([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy11([]) == null\n  */\nconst divisibleBy11 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 11 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 13.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy13([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy13([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy13([]) == null\n  */\nconst divisibleBy13 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 13 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 17.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy17([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy17([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy17([]) == null\n  */\nconst divisibleBy17 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 17 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 19.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy19([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy19([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy19([]) == null\n  */\nconst divisibleBy19 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 19 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 25.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy25([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy25([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy25([]) == null\n  */\nconst divisibleBy25 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 25 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 29.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy29([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy29([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy29([]) == null\n  */\nconst divisibleBy29 = (arr) => {\n  if (arr.length === 0) return null\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 29 === 0) newArr.push(arr[i])\n  }\n  return newArr\n}\n\n/*\n  You was given an array of integers and you need to return an array with only numbers that are divisible by 33.  Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> divisibleBy33([1, 2, 2, -4]) == [1, 2, -4]\n  >>> divisibleBy33([0, 1, 0]) == [0, -1, 0]\n  >>> divisibleBy33([]) == null\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const result = []\n  const visited = new Array(N * N).fill(false)\n  const queue = new Array(N * N).fill().map(() => -1)\n  const visitedMap = new Array(N * N).fill(false)\n  const queueMap = new Array(N * N).fill().map(() => -1)\n  let minPathLength = 0\n  let minPathIndex = 0\n  let minPathValue = 0\n  let minPathIndex = -1\n  let minPathValue = -1\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] === 0) {\n        queue.push([i, j])\n        visitedMap[i] = true\n        queueMap[j] = i\n      }\n    }\n  }\n\n  while (queue.length > 0) {\n    const currentCell = queue.shift()\n    const currentCellIndex = queueMap[currentCell]\n    const currentCellValue = grid[currentCellIndex]\n    const currentCellNeighbors = grid[currentCellIndex - 1].concat(grid[currentCellIndex + 1]).concat(grid[currentCellIndex - 2]).concat(grid[currentCellIndex + 2])\n    const currentCellNeighborsIndex = currentCellNeighbors.findIndex(n => visitedMap[n])\n    const currentCellNeighborsValue = currentCellNeighbors.map(n => grid[n]).reduce((a, b) => a + b)\n    const currentCellNeighborsValueSum = currentCellNeighborsValue.reduce((a, b) => a + b)\n\n    if (currentCellValue === minPathValue || currentCellValue === minPathValue + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum + currentCellNeighborsValue) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValue) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValue) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum) {\n      minPathLength++\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n      minPathIndex = currentCellIndex\n      minPathValue = currentCellValue\n    }\n\n    if (currentCellValue === minPathValue + currentCellNeighborsValueSum + currentCellNeighborsValue + currentCellNeighborsValueSum + currentCellNeighbors", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple of a and b\n * is returned, otherwise the result is a\n * \n * If b is greater than 0, the least common multiple ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return arr;\n  if (n % 2 === 0) arr.push(3);\n  else arr.push(1);\n  arr.push(n / 2);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n};\n\nconsole.log(tri(8));</code>\n\nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci sequence up to 8. \nThe above code will print all the numbers in the tribonacci ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 2;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 3;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 4;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 5;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 6;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 7;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 8;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 9.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 9;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 10.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumEven10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 10;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 2.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOdd2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 2;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 3.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOdd3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 3;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 4.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOdd4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 4;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 5.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const openingBracketsIndex = [];\n  const closingBracketsIndex = [];\n  const openingBracketsArray = [];\n  const closingBracketsArray = [];\n  let openingBracketsIndexCount = 0;\n  let closingBracketsIndexCount = 0;\n  let openingBracketsArrayCount = 0;\n  let closingBracketsArrayCount = 0;\n  let openingBracketsCountInString = 0;\n  let closingBracketsCountInString = 0;\n  let openingBracketsCountInStringArray = 0;\n  let closingBracketsCountInStringArray = 0;\n  let openingBracketsCountInStringArrayCount = 0;\n  let closingBracketsCountInStringArrayCount = 0;\n  let openingBracketsCountInStringArrayIndex = 0;\n  let closingBracketsCountInStringArrayIndex = 0;\n  let openingBracketsCountInStringArrayIndexCount = 0;\n  let closingBracketsCountInStringArrayIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndex = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let closingBracketsCountInStringArrayIndexCountIndex = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBracketsCountInStringArrayIndexCountIndexCount = 0;\n  let openingBracketsCountInStringArrayIndexCountIndexCountIndex = 0;\n  let closingBrackets", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt[txt.length - 1];\n  const isLastCharALetter =!words.some((word) => word.includes(lastChar));\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character of a gives string is a vowel and false otherwise. Notes: \"vowels\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsAVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowel(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowel(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowel = (txt) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const lastChar = txt[txt.length - 1];\n  const isLastCharAVowel = vowels.includes(lastChar);\n  return isLastCharAVowel;\n};\n\n/* Create a function that returns true if the last character of a gives string is a consonant and false otherwise. Notes: \"consonants\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsAConsonant(\"apple pie\") ➞ false\n  checkIfLastCharIsAConsonant(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConsonant(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConsonant(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConsonant = (txt) => {\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  const lastChar = txt[txt.length - 1];\n  const isLastCharAConsonant = consonants.includes(lastChar);\n  return isLastCharAConsonant;\n};\n\n/* Create a function that returns true if the last character of a gives string is a digit and false otherwise. Notes: \"digits\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsADigit(\"apple pie\") ➞ false\n  checkIfLastCharIsADigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsADigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsADigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  const digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n  const lastChar = txt[txt.length - 1];\n  const isLastCharADigit = digits.includes(lastChar);\n  return isLastCharADigit;\n};\n\n/* Create a function that returns true if the last character of a gives string is a special character and false otherwise. Notes: \"specialChars\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsASpecialChar(\"apple pie\") ➞ false\n  checkIfLastCharIsASpecialChar(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpecialChar(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpecialChar(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpecialChar = (txt) => {\n  const specialChars = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"_\", \"+\", \"=\", \"-\", \":\", \";\", \"<\", \">\", \"?\", \"[\", \"]\", \"{\", \"}\", \"\\\\\", \"|\", \"~\"];\n  const lastChar = txt[txt.length - 1];\n  const isLastCharASpecialChar = specialChars.includes(lastChar);\n  return isLastCharASpecialChar;\n};\n\n/* Create a function that returns true if the last character of a gives string is a punctuation mark and false otherwise. Notes: \"punctuation\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsAPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsAPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsAPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsAPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsAPunctuation = (txt) => {\n  const punctuation = [\".\", \",\", \":\", \";\", \"!\", \"?\"];\n  const lastChar = txt[txt.length - 1];\n  const isLastCharAPunctuation = punctuation.includes(lastChar);\n  return isLastCharAPunctuation;\n};\n\n/* Create a function that returns true if the last character of a gives string is a word and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsAWord(\"apple pie\") ➞ false\n  checkIfLastCharIsAWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsAWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsAWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWord = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt[txt.length - 1];\n  const isLastCharAWord = words.some((word) => word.includes(lastChar));\n  return isLastCharAWord;\n};\n\n/* Create a function that returns true if the last character of a gives string is a word and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfLastCharIsAWord(\"apple pie\") ➞ false\n  checkIfLastCharIsAWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsAWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsAWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWord = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt[txt.length - 1];\n  const isLastCharAWord = words.some((word) => word.includes(lastChar));\n  return isLastCharAWord;\n};\n\n/* Create a function that returns true if the last ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns an array of all numbers from 1 to n which are not divisible by any number between 1 and n. For example, the following array would be returned: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  \n  Examples:\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  notDividedByAnyNumber(10) = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 5)\n  sumOfPositiveIntegers([]) == (null, null)\n  sumOfPositiveIntegers([0]) == (null, null)\n  */\nconst sumOfPositiveIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  sumOfNegativeIntegers([]) == (null, null)\n  sumOfNegativeIntegers([0]) == (null, null)\n  */\nconst sumOfNegativeIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return [null, sum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 2)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 2)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 2)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 2)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 2)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(5) == false\n  isEqualToSumOdd(7) == false\n  isEqualToSumOdd(9) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-5) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-9) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -5;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-5) == false\n  isEqualToSumOdd(-7) == false\n  isEqualToSumOdd(-9) == true\n  */\nconst isEqualToSumOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -5;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 6;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(10) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 6;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == false\n  isEqualToSumEven(-10) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -6;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == false\n  isEqualToSumOdd(-10) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -6;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(11) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 7;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(7) == false\n  isEqualToSumOdd(9) == false\n  isEqualToSumOdd(11) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 7;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-9) == false\n  isEqualToSumEven(-11) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -7;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-7) == false\n  isEqualToSumOdd(-9) == false\n  isEqualToSumOdd(-11) == true\n  */\nconst isEqual", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the factorial of a number\n  given as a parameter. The function will receive an integer as input\n  and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Write a function that will calculate the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentPrefix) {\n      prefixes.push(currentPrefix);\n    } else {\n      currentPrefix = string[i];\n      prefixes.push(currentPrefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = string[i];\n      suffixes.push(currentSuffix);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_{2,}/g, '_');\n};\n\n/*\n  Gives a string text, replacing all comma with period, and if a string had more than 2 consecutive comma, then replacing all consecutive comma with - fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example.1\"\n  fixCommas(\" Example 2\") == \"Example.2\"\n  fixCommas(\" Example   3\") == \"Example.3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, '.');\n};\n\n/*\n  Gives a string text, replacing all dash with underscore, and if a string had more than 2 consecutive dash, then replacing all consecutive dash with - fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"Example_2\"\n  fixDashes(\" Example   3\") == \"Example_3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, '__').replace(/_{2,}/g, '_');\n};\n\n/*\n  Gives a string text, replacing all dot with comma, and if a string had more than 2 consecutive dot, then replacing all consecutive dot with - fixDots(\"Example\") == \"Example\"\n  fixDots(\"Example 1\") == \"Example,1\"\n  fixDots(\" Example 2\") == \"Example,2\"\n  fixDots(\" Example   3\") == \"Example,3\"\n  */\nconst fixDots = (text) => {\n  return text.replace(/\\./g, ',');\n};\n\n/*\n  Gives a string text, replacing all comma with period, and if a string had more than 2 consecutive comma, then replacing all consecutive comma with - fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example.1\"\n  fixCommas(\" Example 2\") == \"Example.2\"\n  fixCommas(\" Example   3\") == \"Example.3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, '.');\n};\n\n/*\n  Gives a string text, replacing all dash with underscore, and if a string had more than 2 consecutive dash, then replacing all consecutive dash with - fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"Example_2\"\n  fixDashes(\" Example   3\") == \"Example_3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, '__').replace(/_{2,}/g, '_');\n};\n\n/*\n  Gives a string text, replacing all dot with comma, and if a string had more than 2 consecutive dot, then replacing all consecutive dot with - fixDots(\"Example\") == \"Example\"\n  fixDots(\"Example 1\") == \"Example,1\"\n  fixDots(\" Example 2\") == \"Example,2\"\n  fixDots(\" Example   3\") == \"Example,3\"\n  */\nconst fixDots = (text) => {\n  return text.replace(/\\./g, ',');\n};\n\n/*\n  Gives a string text, replacing all comma with period, and if a string had more than 2 consecutive comma, then replacing all consecutive comma with - fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example.1\"\n  fixCommas(\" Example 2\") == \"Example.2\"\n  fixCommas(\" Example   3\") == \"Example.3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, '.');\n};\n\n/*\n  Gives a string text, replacing all dash with underscore, and if a string had more than 2 consecutive dash, then replacing all consecutive dash with - fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"Example_2\"\n  fixDashes(\" Example   3\") == \"Example_3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, '__').replace(/_{2,}/g, '_');\n};\n\n/*\n  Gives a string text, replacing all dot with comma, and if a string had more than 2 consecutive dot, then replacing all consecutive dot with - fixDots(\"Example\") == \"Example\"\n  fixDots(\"Example 1\") == \"Example,1\"\n  fixDots(\" Example 2\") == \"Example,2\"\n  fixDots(\" Example   3\") == \"Example,3\"\n  */\nconst fixDots = (text) => {\n  return text.replace(/\\./g, ',');\n};\n\n/*\n  Gives a string text, replacing all comma with period, and if a string had more than 2 consecutive comma, then replacing all consecutive comma with - fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example.1\"\n  fixCommas(\" Example 2\") == \"Example.2\"\n  fixCommas(\" Example   3\") == \"Example.3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, '.');\n};\n\n/*\n  Gives a string text, replacing all dash with underscore, and if a string had more than 2 consecutive dash, then replacing all consecutive dash with - fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"Example_2\"\n  fixDashes(\" Example   3\") == \"Example_3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, '__').replace(/_{2,}/g, '_');\n};\n\n/*\n  Gives a string text, replacing all dot with comma, and if a string had more than 2 consecutive dot, then replacing all consecutive dot with - fixDots(\"Example\") == \"Example\"\n  fixDots(\"Example 1\") == \"Example,1\"\n  fixDots(\" Example 2\") == \"Example,2\"\n  fixDots(\" Example   3\") == \"Example,3\"\n  */\nconst fixDots = (text) => {\n  return text.replace(/\\./g, ',');\n};\n\n/*\n  Gives a string text, replacing all comma with period, and if a string had more than 2 consecutive comma, then replacing all consecutive comma with - fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example.1\"\n  fixCommas(\" Example 2\") == \"Example.2\"\n  fixCommas(\" Example   3\") == \"Example.3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, '.');\n};\n\n/*\n  Gives a string text, replacing all dash with underscore, and if a string had more than 2 consecutive dash, then replacing all consecutive dash with - fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"Example_2\"\n  fixDashes(\" Example   3\") == \"Example_3\"\n  */\nconst fixD", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name;\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, file_name.indexOf(\".\"));\n  let file_name = file_name.substring(0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      sum += Math.pow(entry, 2);\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      sum += Math.pow(entry, 3);\n    } else {\n      sum += entry;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      sum += entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      sum += entry;\n    } else {\n      sum += entry;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the products of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst product = (lst) => {\n  let product = 1;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      product *= entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      product *= entry;\n    } else {\n      product *= entry;\n    }\n  });\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the products of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productOfSums = (lst) => {\n  let product = 1;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      product *= entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      product *= entry;\n    } else {\n      product *= entry;\n    }\n  });\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the products of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productOfProducts = (lst) => {\n  let product = 1;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      product *= entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      product *= entry;\n    } else {\n      product *= entry;\n    }\n  });\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the products of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productOfSumsOfProducts = (lst) => {\n  let product = 1;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      product *= entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      product *= entry;\n    } else {\n      product *= entry;\n    }\n  });\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the products of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productOfSumsOfProductsOfSums = (lst) => {\n  let product = 1;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      product *= entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      product *= entry;\n    } else {\n      product *= entry;\n    }\n  });\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the products of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productOfSumsOfProductsOfSumsOfProducts = (lst) => {\n  let product = 1;\n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      product *= entry;\n    } else if (entry % 3!== 0 && entry % 4 === 0) {\n      product *= entry;\n    } else {\n      product *= entry;\n    }\n  });\n  return product;\n};\n\n/*\n  This functions will ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = arr.map((word) => {\n    const newWord = word.toLowerCase();\n    return newWord;\n  });\n  const primeArr = newArr.filter((word) => {\n    const prime = checkPrime(word);\n    return prime === true;\n  });\n  return primeArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given two strings and you have to return true if they are equal and false if they are different.\n\n  Example 1:\n      Input: s1 = \"ab\", s2 = \"ab\"\n      Output: true\n\n  Example 2:\n      Input: s1 = \"ab\", s2 = \"ac\"\n      Output: false\n\n  Example 3:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 4:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: true\n\n  Example 5:\n      Input: s1 = \"ab\", s2 = \"ab\"\n      Output: true\n\n  Example 6:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 7:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 8:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 9:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 10:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 11:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 12:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 13:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 14:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 15:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 16:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 17:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 18:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 19:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 20:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 21:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 22:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 23:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 24:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 25:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 26:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 27:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 28:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 29:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 30:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 31:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 32:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 33:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 34:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 35:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 36:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 37:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 38:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 39:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 40:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 41:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 42:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 43:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 44:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 45:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 46:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 47:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 48:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 49:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 50:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 51:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 52:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 53:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 54:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 55:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 56:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 57:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 58:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 59:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 60:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 61:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 62:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 63:\n      Input: s1 = \"ab\", s2 = \"aba\"\n      Output: false\n\n  Example 64:\n      Input: s1 = \"ab\", ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num1, num2] = n.split(\"/\").map(Number);\n  if (numer === 0 && denom === 0) {\n    return true;\n  }\n  if (numer === 0) {\n    return num2 === 0;\n  }\n  if (num2 === 0) {\n    return num1 === 0;\n  }\n  return numer === num2;\n};\n\n/*Your tasks is to implement a function that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    return acc + digits.reduce((acc, digit) => acc + +digit, 0);\n  }, 0);\n  return nums.sort((a, b) => {\n    return sums - orderByDigits(a.toString()) - orderByDigits(b.toString());\n  });\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n are positive integers. \n  >>> getPositives(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositives(0)\n  []\n  */\nconst getPositives = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that returns an array of all positive integers less than or equal to n, where n and n ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns the sum of all even numbers in the array.\n  For example:\n  evenSum([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 18\n  */\nconst evenSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns the sum of all odd numbers in the array.\n  For example:\n  oddSum([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 10\n  */\nconst oddSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array.\n  For example:\n  product([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst product = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 3.\n  For example:\n  productDivisibleBy3([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy3 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 5.\n  For example:\n  productDivisibleBy5([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy5 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 7.\n  For example:\n  productDivisibleBy7([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy7 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 9.\n  For example:\n  productDivisibleBy9([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy9 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 9 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 11.\n  For example:\n  productDivisibleBy11([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy11 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 13.\n  For example:\n  productDivisibleBy13([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy13 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 13 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 15.\n  For example:\n  productDivisibleBy15([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy15 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 15 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 17.\n  For example:\n  productDivisibleBy17([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy17 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 17 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 19.\n  For example:\n  productDivisibleBy19([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy19 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 19 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 21.\n  For example:\n  productDivisibleBy21([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy21 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 21 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 23.\n  For example:\n  productDivisibleBy23([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy23 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 23 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 25.\n  For example:\n  productDivisibleBy25([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy25 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 25 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns the product of all numbers in the array that were divisible by 27.\n  For example:\n  productDivisibleBy27([4, 6, 8, 10, 12, 14, 16, 18, 20]) => 240000\n  */\nconst productDivisibleBy27 = (nums) => {\n  let product = 1;\n  for (let i = 0; i < num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));\n\n/*\n  You was given an integer array a of length n. Your task is to find the number of triplets (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      (1, 3, 7): 1 + 3 + 7 = 13\n      (1, 3, 13): 1 + 3 + 13 = 21\n      (1, 7, 13): 1 + 7 + 13 = 23\n      (1, 13, 21): 1 + 13 + 21 = 25\n      (13, 21, 25): 13 + 21 + 25 = 29\n      */\nconst getMaxTriples = (a) => {\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples([1, 3, 7, 13, 21]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `getMaxTriples([1, 3, 7, 13, 21])`\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add `a[k]` condition in the `if` statement.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add `a[k]` condition in the `if` statement.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction findMaxTriples(arr) {\n  let max = 0;\n  let maxTriplets = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          let triplet = arr[i] + arr[j] + arr[k];\n          if (triplet > max) {\n            max = triplet;\n            maxTriplets = [arr[i], arr[j], arr[k]];\n          }\n        }\n      }\n    }\n  }\n  return maxTriplets;\n}\n\nconsole.log(findMaxTriples([1, 3, 7, 13, 21]));</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction findMaxTriples(arr) {\n  let max = 0;\n  let maxTriplets = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          let triplet = arr[i] + arr[j] + arr[k];\n          if (triplet > max) {\n            max = triplet;\n            maxTriplets = [arr[i], arr[j], arr[k]];\n          }\n        }\n      }\n    }\n  }\n  return maxTriplets;\n}\n\nconsole.log(findMaxTriples([1, 3, 7, 13, 21]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(arr) {\n  let max = 0;\n  let maxTriplets = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          let triplet = arr[i] + arr[j] + arr[k];\n          if (triplet > max) {\n            max = triplet;\n            maxTriplets = [arr[i], arr[j], arr[k]];\n          }\n        }\n      }\n    }\n  }\n  return maxTriplets;\n}\n\nconsole.log(findMaxTriples([1, 3, 7, 13, 21]));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction findMaxTriples(arr) {\n  let max = 0;\n  let maxTriplets = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          let triplet = arr[i] + arr[j] + arr[k];\n          if (triplet > max) {\n            max = triplet;\n            maxTriplets = [arr[i], arr[j], arr[k]];\n          }\n        }\n      }\n    }\n  }\n  return maxTriplets;\n}\n\nconsole.log(findMaxTriples([1, 3, 7, 13, 21]));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(arr) {\n  let max = 0;\n  let maxTriplets = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          let triplet = arr[i] + arr[j] + arr[k];\n          if (triplet > max) {\n            max = triplet;\n            maxTriplets = [arr[i], arr[j], arr[k]];\n          }\n        }\n      }\n    }\n  }\n  return maxTriplets;\n}\n\nconsole.log(findMaxTriples([1, 3, 7, 13, 21]));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction findMaxTriples(arr) {\n  let max = 0;\n  let maxTriplets = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n          let triplet = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let planet1Sun = sun(planet1);\n  let planet2Sun = sun(planet2);\n  let planet1OrbitSun = orbit(planet1, planet1Sun);\n  let planet2OrbitSun = orbit(planet2, planet2Sun);\n  let planet1OrbitSunOrbit = orbit(planet1, planet1Sun, planet1OrbitSun);\n  let planet2OrbitSunOrbit = orbit(planet2, planet2Sun, planet2OrbitSun);\n  let planet1OrbitSunOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit);\n  let planet2OrbitSunOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit);\n  let planet1OrbitSunOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit);\n  let planet2OrbitSunOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit, planet2OrbitSunOrbitOrbit);\n  let planet1OrbitSunOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit, planet1OrbitSunOrbitOrbitOrbit);\n  let planet2OrbitSunOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit, planet2OrbitSunOrbitOrbit, planet2OrbitSunOrbitOrbitOrbit);\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit, planet1OrbitSunOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbit);\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit, planet2OrbitSunOrbitOrbit, planet2OrbitSunOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit);\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit, planet1OrbitSunOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbitOrbit);\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit, planet2OrbitSunOrbitOrbit, planet2OrbitSunOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit);\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit, planet1OrbitSunOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbitOrbit);\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit, planet2OrbitSunOrbitOrbit, planet2OrbitSunOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit);\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit, planet1OrbitSunOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbit, planet1OrbitSunOrbitOrbitOrbitOrbitOrbit);\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet2OrbitSun, planet2OrbitSunOrbit, planet2OrbitSunOrbitOrbit, planet2OrbitSunOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit, planet2OrbitSunOrbitOrbitOrbitOrbit);\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet1OrbitSun, planet1OrbitSunOrbit, planet1OrbitSunOrbitOrbit, planet1OrbitSunOrbitOrbitOrbit, planet1OrbitSun", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst.filter((item) => {\n    return item.length % 2 === 0;\n  });\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a string as a parameter, counting the number of vowels in that string. The function should return a number that represents the number of vowels in the string. The string may contain only lowercase letters and uppercase letters. You may assume that the string will always contain at least one vowel.\n  For example:\n  assert count_vowels(\"aaa\") => 1\n  assert count_vowels(\"aba\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"abA\") => 2\n  assert count_vowels(\"ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZero = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOne = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwo = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThree = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFour = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFive = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSix = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSeven = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEight = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndNine = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTen = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEleven = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwelve = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThirteen = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFourteen = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFifteen = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSixteen = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 1? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a string and returns the number of characters in the string that are uppercase letters.\n  \n  \n  example:\n\n  countUpperCase(\"Hello World!\") -> 5\n  countUpperCase(\"Hello World!!!\") -> 6\n  countUpperCase(\"Hello World!!!!!\") -> 7\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"Hello World!!!!!!!\") -> 8\n  countUpperCase(\"", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split(\".\")[1];\n    const extension_strength = extension.split(\".\")[2];\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension_name;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split(\".\")[1];\n    const extension_strength = extension.split(\".\")[2];\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension_name;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split(\".\")[1];\n    const extension_strength = extension.split(\".\")[2];\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension_name;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split(\".\")[1];\n    const extension_strength = extension.split(\".\")[2];\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension_name;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split(\".\")[1];\n    const extension_strength = extension.split(\".\")[2];\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension_name;\n    }\n  }\n  return class_name + \".\" + stron", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aArrRotation = aArr.map((_, i) => aArr[(i + a.length) % a.length]);\n  const bArrRotation = bArr.map((_, i) => bArr[(i + b.length) % b.length]);\n  const aArrRotationSubstrings = aArrRotation.filter(\n    (_, i) => b.includes(_)\n  );\n  const bArrRotationSubstrings = bArrRotation.filter(\n    (_, i) => a.includes(_)\n  );\n  return aArrRotationSubstrings.length === bArrRotationSubstrings.length;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aArrRotation = aArr.map((_, i) => aArr[(i + a.length) % a.length]);\n  const bArrRotation = bArr.map((_, i) => bArr[(i + b.length) % b.length]);\n  const aArrRotationSubstrings = aArrRotation.filter(\n    (_, i) => b.includes(_)\n  );\n  const bArrRotationSubstrings = bArrRotation.filter(\n    (_, i) => a.includes(_)\n  );\n  return aArrRotationSubstrings.length === bArrRotationSubstrings.length;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aArrRotation = aArr.map((_, i) => aArr[(i + a.length) % a.length]);\n  const bArrRotation = bArr.map((_, i) => bArr[(i + b.length) % b.length]);\n  const aArrRotationSubstrings = aArrRotation.filter(\n    (_, i) => b.includes(_)\n  );\n  const bArrRotationSubstrings = bArrRotation.filter(\n    (_, i) => a.includes(_)\n  );\n  return aArrRotationSubstrings.length === bArrRotationSubstrings.length;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aArrRotation = aArr.map((_, i) => aArr[(i + a.length) % a.length]);\n  const bArrRotation = bArr.map((_, i) => bArr[(i + b.length) % b.length]);\n  const aArrRotationSubstrings = aArrRotation.filter(\n    (_, i) => b.includes(_)\n  );\n  const bArrRotationSubstrings = bArrRotation.filter(\n    (_, i) => a.includes(_)\n  );\n  return aArrRotationSubstrings.length === bArrRotationSubstrings.length;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aArrRotation = aArr.map((_, i) => aArr[(i + a.length) % a.length]);\n  const bArrRotation = bArr.map((_, i) => bArr[(i + b.length) % b.length]);\n  const aArrRotationSubstrings = aArrRotation.filter(\n    (_, i) => b.includes(_)\n  );\n  const bArrRotationSubstrings = bArrRotation.filter(\n    (_, i) => a.includes(_)\n  );\n  return aArrRotationSubstrings.length === bArrRotationSubstrings.length;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  const aArrRotation = aArr.map((_, i) => aArr[(i + a.length) % a.length]);\n  const bArrRotation = bArr.map((_, i) => bArr[(i + b.length) % b.length]);\n  const aArrRotationSubstrings = aArrRotation.filter(\n    (_, i) => b.includes(_)\n  );\n  const bArrRotationSubstrings = bArrRotation.filter(\n    (_, i) => a.includes(_)\n  );\n  return aArrRotationSubstrings.length === bArrRotationSubstrings.length;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return true if the number is divisible by 3.\n\n   Example:\n      isDivisibleBy3(-12) ==> false\n      isDivisibleBy3(12) ==> true\n  */\nconst isDivisibleBy3 = (num) => {\n  return num % 3 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 5.\n\n   Example:\n      isDivisibleBy5(-12) ==> false\n      isDivisibleBy5(12) ==> true\n  */\nconst isDivisibleBy5 = (num) => {\n  return num % 5 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 7.\n\n   Example:\n      isDivisibleBy7(-12) ==> false\n      isDivisibleBy7(12) ==> true\n  */\nconst isDivisibleBy7 = (num) => {\n  return num % 7 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 11.\n\n   Example:\n      isDivisibleBy11(-12) ==> false\n      isDivisibleBy11(12) ==> true\n  */\nconst isDivisibleBy11 = (num) => {\n  return num % 11 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 13.\n\n   Example:\n      isDivisibleBy13(-12) ==> false\n      isDivisibleBy13(12) ==> true\n  */\nconst isDivisibleBy13 = (num) => {\n  return num % 13 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 17.\n\n   Example:\n      isDivisibleBy17(-12) ==> false\n      isDivisibleBy17(12) ==> true\n  */\nconst isDivisibleBy17 = (num) => {\n  return num % 17 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 19.\n\n   Example:\n      isDivisibleBy19(-12) ==> false\n      isDivisibleBy19(12) ==> true\n  */\nconst isDivisibleBy19 = (num) => {\n  return num % 19 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 23.\n\n   Example:\n      isDivisibleBy23(-12) ==> false\n      isDivisibleBy23(12) ==> true\n  */\nconst isDivisibleBy23 = (num) => {\n  return num % 23 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 29.\n\n   Example:\n      isDivisibleBy29(-12) ==> false\n      isDivisibleBy29(12) ==> true\n  */\nconst isDivisibleBy29 = (num) => {\n  return num % 29 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 31.\n\n   Example:\n      isDivisibleBy31(-12) ==> false\n      isDivisibleBy31(12) ==> true\n  */\nconst isDivisibleBy31 = (num) => {\n  return num % 31 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 37.\n\n   Example:\n      isDivisibleBy37(-12) ==> false\n      isDivisibleBy37(12) ==> true\n  */\nconst isDivisibleBy37 = (num) => {\n  return num % 37 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 43.\n\n   Example:\n      isDivisibleBy43(-12) ==> false\n      isDivisibleBy43(12) ==> true\n  */\nconst isDivisibleBy43 = (num) => {\n  return num % 43 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 51.\n\n   Example:\n      isDivisibleBy51(-12) ==> false\n      isDivisibleBy51(12) ==> true\n  */\nconst isDivisibleBy51 = (num) => {\n  return num % 51 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 59.\n\n   Example:\n      isDivisibleBy59(-12) ==> false\n      isDivisibleBy59(12) ==> true\n  */\nconst isDivisibleBy59 = (num) => {\n  return num % 59 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 61.\n\n   Example:\n      isDivisibleBy61(-12) ==> false\n      isDivisibleBy61(12) ==> true\n  */\nconst isDivisibleBy61 = (num) => {\n  return num % 61 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 67.\n\n   Example:\n      isDivisibleBy67(-12) ==> false\n      isDivisibleBy67(12) ==> true\n  */\nconst isDivisibleBy67 = (num) => {\n  return num % 67 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 73.\n\n   Example:\n      isDivisibleBy73(-12) ==> false\n      isDivisibleBy73(12) ==> true\n  */\nconst isDivisibleBy73 = (num) => {\n  return num % 73 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 79.\n\n   Example:\n      isDivisibleBy79(-12) ==> false\n      isDivisibleBy79(12) ==> true\n  */\nconst isDivisibleBy79 = (num) => {\n  return num % 79 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 83.\n\n   Example:\n      isDivisibleBy83(-12) ==> false\n      isDivisibleBy83(12) ==> true\n  */\nconst isDivisibleBy83 = (num) => {\n  return num % 83 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 89.\n\n   Example:\n      isDivisibleBy89(-12) ==> false\n      isDivisibleBy89(12) ==> true\n  */\nconst isDivisibleBy89 = (num) => {\n  return num % 89 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 97.\n\n   Example:\n      isDivisibleBy97(-12) ==> false\n      isDivisibleBy97(12) ==> true\n  */\nconst isDivisibleBy97 = (num) => {\n  return num % 97 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 103.\n\n   Example:\n      isDivisibleBy103(-12) ==> false\n      isDivisibleBy103(12) ==> true\n  */\nconst isDivisibleBy103 = (num) => {\n  return num % 103 === 0;\n};\n\n/*Given an integer. return true if the number is divisible by 109.\n\n   Example:\n      isDivisibleBy109", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixed = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixed = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixed = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedUpper = (number) => {\n  let roman = '';\n  let num = 0;\n  while (number > 0) {\n    num = number % 10;\n    roman = romans[num] + roman;\n    number = Math.floor(number / 10);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given a point and a line segment (defined by two points), returns the point on the line segment closest to the point. Return null if the point is on the line segment itself.\n  Example:\n  closestPointOnLineSegment(\n    Point(1, 2),\n    Point(2, 3)\n  ) == Point(2, 3)\n  closestPointOnLineSegment(\n    Point(1, 2),\n    Point(2, 3)\n  ) == null\n  */\nconst closestPointOnLineSegment = (point, lineSegment) => {\n  const { x, y } = point;\n  const { x1, y1, x2, y2 } = lineSegment;\n  const xDiff = x2 - x1;\n  const yDiff = y2 - y1;\n  const distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  if (distance === 0) {\n    return null;\n  }\n  const x = xDiff / distance;\n  const y = yDiff / distance;\n  if (x === 0 && y === 0) {\n    return null;\n  }\n  return { x, y };\n};\n\n/*\n Given a point and a line segment (defined by two points), returns the point on the line segment closest to the point on the line segment closest to the point. Return null if the point is on the line segment itself.\n  Example:\n  closestPointOnLineSegmentOnLine(\n    Point(1, 2),\n    Point(2, 3),\n    Point(3, 4)\n  ) == Point(2, 3)\n  closestPointOnLineSegmentOnLine(\n    Point(1, 2),\n    Point(2, 3),\n    Point(3, 4)\n  ) == null\n  */\nconst closestPointOnLineSegmentOnLine = (point, lineSegment, lineSegmentOnLine) => {\n  const { x, y } = point;\n  const { x1, y1, x2, y2 } = lineSegment;\n  const { x1, y1, x2, y2 } = lineSegmentOnLine;\n  const xDiff = x2 - x1;\n  const yDiff = y2 - y1;\n  const distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  if (distance === 0) {\n    return null;\n  }\n  const x = xDiff / distance;\n  const y = yDiff / distance;\n  if (x === 0 && y === 0) {\n    return null;\n  }\n  const xDiffOnLine = x2 - x1;\n  const yDiffOnLine = y2 - y1;\n  const distanceOnLine = Math.sqrt(xDiffOnLine * xDiffOnLine + yDiffOnLine * yDiffOnLine);\n  if (distanceOnLine === 0) {\n    return null;\n  }\n  const xOnLine = xDiffOnLine / distanceOnLine;\n  const yOnLine = yDiffOnLine / distanceOnLine;\n  const xDiffOnLineOnLine = xDiffOnLine - xDiffOnLineOnLine;\n  const yDiffOnLineOnLine = yDiffOnLine - yDiffOnLineOnLine;\n  const distanceOnLineOnLine = Math.sqrt(xDiffOnLineOnLine * xDiffOnLineOnLine + yDiffOnLineOnLine * yDiffOnLineOnLine);\n  if (distanceOnLineOnLine === 0) {\n    return null;\n  }\n  const xOnLineOnLine = xDiffOnLineOnLine / distanceOnLineOnLine;\n  const yOnLineOnLine = yDiffOnLineOnLine / distanceOnLineOnLine;\n  const xDiffOnLineOnLineOnLine = xDiffOnLineOnLine - xDiffOnLineOnLineOnLine;\n  const yDiffOnLineOnLineOnLine = yDiffOnLineOnLine - yDiffOnLineOnLineOnLine;\n  const distanceOnLineOnLineOnLine = Math.sqrt(xDiffOnLineOnLineOnLine * xDiffOnLineOnLineOnLine + yDiffOnLineOnLineOnLine * yDiffOnLineOnLineOnLine);\n  if (distanceOnLineOnLineOnLine === 0) {\n    return null;\n  }\n  const xOnLineOnLineOnLine = xDiffOnLineOnLineOnLine / distanceOnLineOnLineOnLine;\n  const yOnLineOnLineOnLine = yDiffOnLineOnLineOnLine / distanceOnLineOnLineOnLine;\n  const xDiffOnLineOnLineOnLineOnLine = xDiffOnLineOnLineOnLine - xDiffOnLineOnLineOnLineOnLine;\n  const yDiffOnLineOnLineOnLineOnLine = yDiffOnLineOnLineOnLine - yDiffOnLineOnLineOnLineOnLine;\n  const distanceOnLineOnLineOnLineOnLine = Math.sqrt(xDiffOnLineOnLineOnLineOnLine * xDiffOnLineOnLineOnLineOnLine + yDiffOnLineOnLineOnLineOnLine * yDiffOnLineOnLineOnLineOnLine);\n  if (distanceOnLineOnLineOnLineOnLine === 0) {\n    return null;\n  }\n  const xOnLineOnLineOnLineOnLine = xDiffOnLineOnLineOnLineOnLine / distanceOnLineOnLineOnLineOnLine;\n  const yOnLineOnLineOnLineOnLine = yDiffOnLineOnLineOnLineOnLine / distanceOnLineOnLineOnLineOnLine;\n  const xDiffOnLineOnLineOnLineOnLineOnLine = xDiffOnLineOnLineOnLineOnLine - xDiffOnLineOnLineOnLineOnLineOnLine;\n  const yDiffOnLineOnLineOnLineOnLineOnLine = yDiffOnLineOnLineOnLineOnLine - yDiffOnLineOnLineOnLineOnLineOnLine;\n  const distanceOnLineOnLineOnLineOnLineOnLine = Math.sqrt(xDiffOnLineOnLineOnLineOnLineOnLine * xDiffOnLineOnLineOnLineOnLine + yDiffOnLineOnLineOnLineOnLine * yDiffOnLineOnLineOnLineOnLine);\n  if (distanceOnLineOnLineOnLineOnLineOnLine === 0) {\n    return null;\n  }\n  const xOnLineOnLineOnLineOnLineOnLine = xDiffOnLineOnLineOnLineOnLine / distanceOnLineOnLineOnLineOnLineOnLineOnLine;\n  const yOnLineOnLineOnLineOnLineOnLine = yDiffOnLineOnLineOnLineOnLine / distanceOnLineOnLineOnLineOnLineOnLineOnLine;\n  const xDiffOnLineOnLineOnLineOnLineOnLineOnLine = xDiffOnLineOnLineOnLineOnLine - xDiffOnLineOnLineOnLineOnLineOnLineOnLine;\n  const yDiffOnLineOnLineOnLineOnLineOnLineOnLine = yDiffOnLineOnLineOnLineOnLine - yDiffOnLineOnLineOnLineOnLineOnLineOnLine;\n  const distanceOnLineOnLineOnLineOnLineOnLineOnLine = Math.sqrt(xDiffOnLineOnLineOnLineOnLineOnLine * xDiffOnLineOnLineOnLineOnLineOnLine + yDiffOnLineOnLineOnLineOnLine * yDiffOnLineOnLineOnLineOnLineOnLine);\n  if (distanceOnLineOnLineOnLineOnLineOnLineOnLine === 0) {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChar(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a string and returns a string with all the characters of the string in alphabetical order. sortAlpha(\"hello\") === \"hello\" sortAlpha(\"cba\") === \"abc\" sortAlpha(\"abca\") === \"abc\" sortAlpha(\"abcc\") === \"abc\" sortAlpha(\"abcaa\") === \"abca\" sortAlpha(\"abcaaa\") === \"abcaaa\" sortAlpha(\"abcaaaa\") === \"abcaaaa\" sortAlpha(\"abcaaaaa\") === \"abcaaaaa\" sortAlpha(\"abcaaaaaa\") === \"abcaaaaaa\" sortAlpha(\"abcaaaaaaa\") === \"abcaaaaaaa\" sortAlpha(\"abcaaaaaaaa\") === \"abcaaaaaaaa\" sortAlpha(\"abcaaaaaaaab\") === \"abcaaaaaaaab\" sortAlpha(\"abcaaaaaaaaba\") === \"abcaaaaaaaaba\" sortAlpha(\"abcaaaaaaaabaa\") === \"abcaaaaaaaabaa\" sortAlpha(\"abcaaaaaaaabaaa\") === \"abcaaaaaaaabaaa\" sortAlpha(\"abcaaaaaaaabaaaa\") === \"abcaaaaaaaabaaaa\" sortAlpha(\"abcaaaaaaaabaaaaa\") === \"abcaaaaaaaabaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaa\") === \"abcaaaaaaaabaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaa\") === \"abcaaaaaaaabaaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaab\") === \"abcaaaaaaaabaaaaaaab\" sortAlpha(\"abcaaaaaaaabaaaaaaaba\") === \"abcaaaaaaaabaaaaaaaba\" sortAlpha(\"abcaaaaaaaabaaaaaaabaa\") === \"abcaaaaaaaabaaaaaaabaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaa\") === \"abcaaaaaaaabaaaaaaabaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaa\") === \"abcaaaaaaaabaaaaaaabaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaab\") === \"abcaaaaaaaabaaaaaaabaaaaaaab\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaaba\") === \"abcaaaaaaaabaaaaaaabaaaaaaaba\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaab\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaab\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaaba\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaaba\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaab\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaab\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaaba\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaaba\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaa\" sortAlpha(\"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaaaaa\") === \"abcaaaaaaaabaaaaaaabaaaaaaabaaaaaaabaaaa", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  const carrotEaten = number - need\n  const carrotLeftToEat = need - remaining\n  return [carrotEaten, carrotLeftToEat]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  const carrotEaten = number - need\n  const carrotLeftToEat = need - remaining\n  return [carrotEaten, carrotLeftToEat]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  const carrotEaten = number - need\n  const carrotLeftToEat = need - remaining\n  return [carrotEaten, carrotLeftToEat]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  const carrotEaten = number - need\n  const carrotLeftToEat = need - remaining\n  return [carrotEaten, carrotLeftToEat]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  const carrotEaten = number - need\n  const carrotLeftToEat = need - remaining\n  return [carrotEaten, carrotLeftToEat]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/**\n * Given a string, returns how many times the string occurs in the given string.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If it occurs less than once, returns 0.\n * If it occurs more than once, returns how many times the string occurs in the given string.\n * If ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length - 1;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length - 1;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length - 1;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length - 1;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length - 1;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length - 1;\n\n  while (operatorIndex < operatorLength && operandIndex < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n  }\n\n  return result;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newStr += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newStr += s.charAt(i).toUpperCase();\n    } else {\n      newStr += s.charAt(i);\n    }\n  }\n  return newStr;\n};\n\n/*You was given a string s and a number k. Your task is to find and print the first k characters of string s in reverse order.\n  Examples\n  reverse(\"1234\", 2) = \"4321\"\n  reverse(\"ab\", 2) = \"ba\"\n  reverse(\"#a@C\", 2) = \"#A@c\"\n  reverse(\"1234\", 0) = \"1234\"\n  reverse(\"ab\", 0) = \"ab\"\n  reverse(\"#a@C\", 0) = \"#a@C\"\n  reverse(\"1234\", -1) = \"4321\"\n  reverse(\"ab\", -1) = \"ba\"\n  reverse(\"#a@C\", -1) = \"#A@c\"\n  reverse(\"1234\", -2) = \"4321\"\n  reverse(\"ab\", -2) = \"ba\"\n  reverse(\"#a@C\", -2) = \"#A@c\"\n  reverse(\"1234\", -3) = \"4321\"\n  reverse(\"ab\", -3) = \"ba\"\n  reverse(\"#a@C\", -3) = \"#A@c\"\n  reverse(\"1234\", -4) = \"4321\"\n  reverse(\"ab\", -4) = \"ba\"\n  reverse(\"#a@C\", -4) = \"#A@c\"\n  reverse(\"1234\", -5) = \"4321\"\n  reverse(\"ab\", -5) = \"ba\"\n  reverse(\"#a@C\", -5) = \"#A@c\"\n  reverse(\"1234\", -6) = \"4321\"\n  reverse(\"ab\", -6) = \"ba\"\n  reverse(\"#a@C\", -6) = \"#A@c\"\n  reverse(\"1234\", -7) = \"4321\"\n  reverse(\"ab\", -7) = \"ba\"\n  reverse(\"#a@C\", -7) = \"#A@c\"\n  reverse(\"1234\", -8) = \"4321\"\n  reverse(\"ab\", -8) = \"ba\"\n  reverse(\"#a@C\", -8) = \"#A@c\"\n  reverse(\"1234\", -9) = \"4321\"\n  reverse(\"ab\", -9) = \"ba\"\n  reverse(\"#a@C\", -9) = \"#A@c\"\n  reverse(\"1234\", -10) = \"4321\"\n  reverse(\"ab\", -10) = \"ba\"\n  reverse(\"#a@C\", -10) = \"#A@c\"\n  reverse(\"1234\", -11) = \"4321\"\n  reverse(\"ab\", -11) = \"ba\"\n  reverse(\"#a@C\", -11) = \"#A@c\"\n  reverse(\"1234\", -12) = \"4321\"\n  reverse(\"ab\", -12) = \"ba\"\n  reverse(\"#a@C\", -12) = \"#A@c\"\n  reverse(\"1234\", -13) = \"4321\"\n  reverse(\"ab\", -13) = \"ba\"\n  reverse(\"#a@C\", -13) = \"#A@c\"\n  reverse(\"1234\", -14) = \"4321\"\n  reverse(\"ab\", -14) = \"ba\"\n  reverse(\"#a@C\", -14) = \"#A@c\"\n  reverse(\"1234\", -15) = \"4321\"\n  reverse(\"ab\", -15) = \"ba\"\n  reverse(\"#a@C\", -15) = \"#A@c\"\n  reverse(\"1234\", -16) = \"4321\"\n  reverse(\"ab\", -16) = \"ba\"\n  reverse(\"#a@C\", -16) = \"#A@c\"\n  reverse(\"1234\", -17) = \"4321\"\n  reverse(\"ab\", -17) = \"ba\"\n  reverse(\"#a@C\", -17) = \"#A@c\"\n  reverse(\"1234\", -18) = \"4321\"\n  reverse(\"ab\", -18) = \"ba\"\n  reverse(\"#a@C\", -18) = \"#A@c\"\n  reverse(\"1234\", -19) = \"4321\"\n  reverse(\"ab\", -19) = \"ba\"\n  reverse(\"#a@C\", -19) = \"#A@c\"\n  reverse(\"1234\", -20) = \"4321\"\n  reverse(\"ab\", -20) = \"ba\"\n  reverse(\"#a@C\", -20) = \"#A@c\"\n  reverse(\"1234\", -21) = \"4321\"\n  reverse(\"ab\", -21) = \"ba\"\n  reverse(\"#a@C\", -21) = \"#A@c\"\n  reverse(\"1234\", -22) = \"4321\"\n  reverse(\"ab\", -22) = \"ba\"\n  reverse(\"#a@C\", -22) = \"#A@c\"\n  reverse(\"1234\", -23) = \"4321\"\n  reverse(\"ab\", -23) = \"ba\"\n  reverse(\"#a@C\", -23) = \"#A@c\"\n  reverse(\"1234\", -24) = \"4321\"\n  reverse(\"ab\", -24) = \"ba\"\n  reverse(\"#a@C\", -24) = \"#A@c\"\n  reverse(\"1234\", -25) = \"4321\"\n  reverse(\"ab\", -25) = \"ba\"\n  reverse(\"#a@C\", -25) = \"#A@c\"\n  reverse(\"1234\", -26) = \"4321\"\n  reverse(\"ab\", -26) = \"ba\"\n  reverse(\"#a@C\", -26) = \"#A@c\"\n  reverse(\"1234\", -27) = \"4321\"\n  reverse(\"ab\", -27) = \"ba\"\n  reverse(\"#a@C\", -27) = \"#A@c\"\n  reverse(\"1234\", -28) = \"4321\"\n  reverse(\"ab\", -28) = \"ba\"\n  reverse(\"#a@C\", -28) = \"#A@c\"\n  reverse(\"1234\", -29) = \"4321\"\n  reverse(\"ab\", -29) = \"ba\"\n  reverse(\"#a@C\", -29) = \"#A@c\"\n  reverse(\"1234\", -30) = \"4321\"\n  reverse(\"ab\", -30) = \"ba\"\n  reverse(\"#a@C\", -30) = \"#A@c\"\n  reverse(\"1234\", -31) = \"4321\"\n  reverse(\"ab\", -31) = \"ba\"\n  reverse(\"#a@C\", -31) = \"#A@c\"\n  reverse(\"1234\", -32) = \"4321\"\n  reverse(\"ab\", -32) = \"ba\"\n  reverse(\"#a@C\", -32) = \"#A@c\"\n  reverse(\"1234\", -33) = \"4321\"\n  reverse(\"ab\", -33) = \"ba\"\n  reverse(\"#a@C\", -33) = \"#A@c\"\n  reverse(\"1234\", -34) = \"4321\"\n  reverse(\"ab\", -34) = \"ba\"\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the odd digits between a\n and b, in ascends order.\n\n  For example:\n  generateOdds(2, 8) => [1, 3, 5, 7, 9]\n  generateOdds(8, 2) => [1, 3, 5, 7, 9]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSum(2, 8) => [3, 6, 10]\n  generateSum(8, 2) => [3, 6, 10]\n  generateSum(10, 14) => []\n  */\nconst generateSum = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in descending order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in descending order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n  }\n  result.sort(function (a, b) {\n    return b - a;\n  });\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of all digits between a\n and b, in ascends order.\n\n  For example:\n  generateSumDesc(2, 8) => [10, 8, 6]\n  generateSumDesc(8, 2) => [10, 8, 6]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i + 0);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array2 = [];\n  let current_note = 0;\n  let current_beat = 0;\n  let current_beat2 = 0;\n  let current_note2 = 0;\n  let current_note3 = 0;\n  let current_note4 = 0;\n  let current_note5 = 0;\n  let current_note6 = 0;\n  let current_note7 = 0;\n  let current_note8 = 0;\n  let current_note9 = 0;\n  let current_note10 = 0;\n  let current_note11 = 0;\n  let current_note12 = 0;\n  let current_note13 = 0;\n  let current_note14 = 0;\n  let current_note15 = 0;\n  let current_note16 = 0;\n  let current_note17 = 0;\n  let current_note18 = 0;\n  let current_note19 = 0;\n  let current_note20 = 0;\n  let current_note21 = 0;\n  let current_note22 = 0;\n  let current_note23 = 0;\n  let current_note24 = 0;\n  let current_note25 = 0;\n  let current_note26 = 0;\n  let current_note27 = 0;\n  let current_note28 = 0;\n  let current_note29 = 0;\n  let current_note30 = 0;\n  let current_note31 = 0;\n  let current_note32 = 0;\n  let current_note33 = 0;\n  let current_note34 = 0;\n  let current_note35 = 0;\n  let current_note36 = 0;\n  let current_note37 = 0;\n  let current_note38 = 0;\n  let current_note39 = 0;\n  let current_note40 = 0;\n  let current_note41 = 0;\n  let current_note42 = 0;\n  let current_note43 = 0;\n  let current_note44 = 0;\n  let current_note45 = 0;\n  let current_note46 = 0;\n  let current_note47 = 0;\n  let current_note48 = 0;\n  let current_note49 = 0;\n  let current_note50 = 0;\n  let current_note51 = 0;\n  let current_note52 = 0;\n  let current_note53 = 0;\n  let current_note54 = 0;\n  let current_note55 = 0;\n  let current_note56 = 0;\n  let current_note57 = 0;\n  let current_note58 = 0;\n  let current_note59 = 0;\n  let current_note60 = 0;\n  let current_note61 = 0;\n  let current_note62 = 0;\n  let current_note63 = 0;\n  let current_note64 = 0;\n  let current_note65 = 0;\n  let current_note66 = 0;\n  let current_note67 = 0;\n  let current_note68 = 0;\n  let current_note69 = 0;\n  let current_note70 = 0;\n  let current_note71 = 0;\n  let current_note72 = 0;\n  let current_note73 = 0;\n  let current_note74 = 0;\n  let current_note75 = 0;\n  let current_note76 = 0;\n  let current_note77 = 0;\n  let current_note78 = 0;\n  let current_note79 = 0;\n  let current_note80 = 0;\n  let current_note81 = 0;\n  let current_note82 = 0;\n  let current_note83 = 0;\n  let current_note84 = 0;\n  let current_note85 = 0;\n  let current_note86 = 0;\n  let current_note87 = 0;\n  let current_note88 = 0;\n  let current_note89 = 0;\n  let current_note90 = 0;\n  let current_note91 = 0;\n  let current_note92 = 0;\n  let current_note93 = 0;\n  let current_note94 = 0;\n  let current_note95 = 0;\n  let current_note96 = 0;\n  let current_note97 = 0;\n  let current_note98 = 0;\n  let current_note99 = 0;\n  let current_note100 = 0;\n  let current_note101 = 0;\n  let current_note102 = 0;\n  let current_note103 = 0;\n  let current_note104 = 0;\n  let current_note105 = 0;\n  let current_note106 = 0;\n  let current_note107 = 0;\n  let current_note108 = 0;\n  let current_note109 = 0;\n  let current_note110 = 0;\n  let current_note111 = 0;\n  let current_note112 = 0;\n  let current_note113 = 0;\n  let current_note114 = 0;\n  let current_note115 = 0;\n  let current_note116 = 0;\n  let current_note117 = 0;\n  let current_note118 = 0;\n  let current_note119 = 0;\n  let current_note120 = 0;\n  let current_note121 = 0;\n  let current_note122 = 0;\n  let current_note123 = 0;\n  let current_note124 = 0;\n  let current_note125 = 0;\n  let current_note126 = 0;\n  let current_note127 = 0;\n  let current_note128 = 0;\n  let current_note129 = 0;\n  let current_note130 = 0;\n  let current_note131 = 0;\n  let current_note132 = 0;\n  let current_note133 = 0;\n  let current_note134 = 0;\n  let current_note135 = 0;\n  let current_note136 = 0;\n  let current_note137 = 0;\n  let current_note138 = 0;\n  let current_note139 = 0;\n  let current_note140 = 0;\n  let current_note141 = 0;\n  let current_note142 = 0;\n  let current_note143 = 0;\n  let current_note144 = 0;\n  let current_note145 = 0;\n  let current_note146 = 0;\n  let current_note147 = 0;\n  let current_note148 = 0;\n  let current_note149 = 0;\n  let current_note150 = 0;\n  let current_note151 = 0;\n  let current_note152 = 0;\n  let current_note153 = 0;\n  let current_note154 = 0;\n  let current_note155 = 0;\n  let current_note156 = 0;\n  let current_note157 = 0;\n  let current_note158 = 0;\n  let current_note159 = 0;\n  let current_note160 = 0;\n  let current_note161 = 0;\n  let current_note162 = 0;\n  let current_note163 = 0;\n  let current_note164 = 0;\n  let current_note165 = 0;\n  let current_note166 = 0;\n  let current_note167 = 0;\n  let current_note168 = 0;\n  let current_note169 = 0;\n  let current_note170 = 0;\n  let current_note171 = 0;\n  let current_note172 = 0;\n  let current_note173 = 0;\n  let current_note174 = 0;\n  let current_note175 = 0;\n  let current_note176 = 0;\n  let current_note177 = 0;\n  let current_note178 = 0;\n  let current_note179 = 0;\n  let current_note180 = 0;\n  let current_note181 = 0;\n  let current_note182 = 0;\n  let current_note183 = 0;\n  let current_note184 = 0;\n  let current_note185 = 0;\n  let current_note186 = 0;\n  let current_note187 = 0;\n  let current_note188 = 0;\n  let current_note189 = 0;\n  let current_note190 = 0;\n  let current_note191 = 0;\n  let current_note192 = 0;\n  let current_note193 = 0;\n  let current_note194 = 0;\n  let current_note195 = 0;\n  let current_note196 = 0;\n  let current_note197 = 0;\n  let current_note198 = 0;\n  let current_note199 = 0;\n  let current_note200 = 0;\n  let current_note201 = 0;\n  let current_note202 = 0;\n  let current_note203 = 0;\n  let current_note204 = 0;\n  let current_note205 = 0;\n  let current_note206 = 0;\n  let current_note207 = 0;\n  let current_note208 = 0;\n  let current_note209 = 0;\n  let current_note210 = 0;\n  let current_note211 = 0;\n  let current_note212 = 0;\n  let current_note213 = 0;\n  let current_note214 = 0;\n  let current_note215 = 0;\n  let current_note216 = 0;\n  let current_note217 = 0;\n  let current_note218 = 0;\n  let current_note219 = 0;\n  let current_note220 = 0;\n  let current_note221 = 0;\n  let current_note222 = 0;\n  let current_note223 = 0;\n  let current_note224 = 0;\n  let current_note225 = 0;\n  let current_note226 = 0;\n  let current_note227 = 0;\n  let current_note228 = 0;\n  let current_note229 = 0;\n  let current_note230 = 0;\n  let current_note231 = 0;\n  let current_note232 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many time", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumberArray = numberArray.sort((a, b) => a - b)\n  return sortedNumberArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetterArray = letterArray.sort((a, b) => a - b)\n  return sortedLetterArray.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('.') // return decimal parts joined by '.'\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n    return parseFloat(decimalPart)\n  })\n  decimalParts = decimalParts.map((decimalPart) => {\n    return Math.trunc(decimalPart)\n  })\n  return decimalParts.join('') // return decimal parts joined by ''\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberInt = (number) => {\n  let decimalParts = number.toString().split('.')\n  decimalParts = decimalParts.map((decimalPart) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const smallest = Math.min(...numbers);\n  const largest = Math.max(...numbers);\n  const index = numbers.indexOf(smallest);\n  return [numbers[index], numbers[(index + 1) % numbers.length]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Converts RGB color to HSV color\n * @param {number} r Red color value\n * @param {number} g Green color value\n * @param {number} b Blue color value\n * @return {object} Object with h, s, v properties\n */\nconst rgbToHsv = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let v;\n  if (max === 0) {\n    h = 0;\n    s = 0;\n    v = 0;\n  } else {\n    h = ((r - min) / d) * 360;\n    s = ((g - min) / d) * 100;\n    v = (b - min) / d * 100;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\n/**\n * Converts HSV color to RGB color\n * @param {number} h Hue color value\n * @param {number} s Saturation color value\n * @param {number} v Value color value\n * @return {object} Object with r, g, b properties\n */\nconst hsvToRgb = (h, s, v) => {\n  const r = v * (1 - Math.abs(h % 2 - 1));\n  const g = v * (1 - Math.abs(h % 2 - 1));\n  const b = v * (1 - Math.abs(h % 2 - 1));\n  return { r: r + r, g: g + g, b: b + b };\n};\n\n/**\n * Converts RGB color to HSV color\n * @param {number} r Red color value\n * @param {number} g Green color value\n * @param {number} b Blue color value\n * @return {object} Object with h, s, v properties\n */\nconst rgbToHsv = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let v;\n  if (max === 0) {\n    h = 0;\n    s = 0;\n    v = 0;\n  } else {\n    h = ((r - min) / d) * 360;\n    s = ((g - min) / d) * 100;\n    v = (b - min) / d * 100;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\n/**\n * Converts HSV color to RGB color\n * @param {number} h Hue color value\n * @param {number} s Saturation color value\n * @param {number} v Value color value\n * @return {object} Object with r, g, b properties\n */\nconst hsvToRgb = (h, s, v) => {\n  const r = v * (1 - Math.abs(h % 2 - 1));\n  const g = v * (1 - Math.abs(h % 2 - 1));\n  const b = v * (1 - Math.abs(h % 2 - 1));\n  return { r: r + r, g: g + g, b: b + b };\n};\n\n/**\n * Converts RGB color to HSV color\n * @param {number} r Red color value\n * @param {number} g Green color value\n * @param {number} b Blue color value\n * @return {object} Object with h, s, v properties\n */\nconst rgbToHsv = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let v;\n  if (max === 0) {\n    h = 0;\n    s = 0;\n    v = 0;\n  } else {\n    h = ((r - min) / d) * 360;\n    s = ((g - min) / d) * 100;\n    v = (b - min) / d * 100;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\n/**\n * Converts HSV color to RGB color\n * @param {number} h Hue color value\n * @param {number} s Saturation color value\n * @param {number} v Value color value\n * @return {object} Object with r, g, b properties\n */\nconst hsvToRgb = (h, s, v) => {\n  const r = v * (1 - Math.abs(h % 2 - 1));\n  const g = v * (1 - Math.abs(h % 2 - 1));\n  const b = v * (1 - Math.abs(h % 2 - 1));\n  return { r: r + r, g: g + g, b: b + b };\n};\n\n/**\n * Converts RGB color to HSV color\n * @param {number} r Red color value\n * @param {number} g Green color value\n * @param {number} b Blue color value\n * @return {object} Object with h, s, v properties\n */\nconst rgbToHsv = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let v;\n  if (max === 0) {\n    h = 0;\n    s = 0;\n    v = 0;\n  } else {\n    h = ((r - min) / d) * 360;\n    s = ((g - min) / d) * 100;\n    v = (b - min) / d * 100;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\n/**\n * Converts HSV color to RGB color\n * @param {number} h Hue color value\n * @param {number} s Saturation color value\n * @param {number} v Value color value\n * @return {object} Object with r, g, b properties\n */\nconst hsvToRgb = (h, s, v) => {\n  const r = v * (1 - Math.abs(h % 2 - 1));\n  const g = v * (1 - Math.abs(h % 2 - 1));\n  const b = v * (1 - Math.abs(h % 2 - 1));\n  return { r: r + r, g: g + g, b: b + b };\n};\n\n/**\n * Converts RGB color to HSV color\n * @param {number} r Red color value\n * @param {number} g Green color value\n * @param {number} b Blue color value\n * @return {object} Object with h, s, v properties\n */\nconst rgbToHsv = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let v;\n  if (max === 0) {\n    h = 0;\n    s = 0;\n    v = 0;\n  } else {\n    h = ((r - min) / d) * 360;\n    s = ((g - min) / d) * 100;\n    v = (b - min) / d * 100;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\n/**\n * Converts HSV color to RGB color\n * @param {number} h Hue color value\n * @param {number} s Saturation color value\n * @param {number} v Value color value\n * @return {object} Object with r, g, b properties\n */\nconst hsvToRgb = (h, s, v) => {\n  const r = v * (1 - Math.abs(h % 2 - 1));\n  const g = v * (1 - Math.abs(h % 2 - 1));\n  const b = v * (1 - Math.abs(h % 2 - 1));\n  return { r: r + r, g: g + g, b: b + b };\n};\n\n/**\n * Converts RGB color to HSV color\n * @param {number} r Red color value\n * @param {number} g Green color value\n * @param {number} b Blue color value\n * @return {object} Object with h, s, v properties\n */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && Number.isInteger(value);\n  });\n};\n\n/**\n * Filter gives list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && Number.isFinite(value);\n  });\n};\n\n/**\n * Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filter gives list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None, 3.14, 5])\n  [None, 3.14]\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  [None, 1, 2, 'abc', {}, []]\n  */\nconst filterNone = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n * Filter gives list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/**\n * Returns true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'bc')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) === index;\n};\n\n/**\n * Returns true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'bc')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.length - prefix.length;\n  return index >= 0 && string.indexOf(prefix, index) === index;\n};\n\n/**\n * Returns true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'bc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, start, end) => {\n  return string.indexOf(substring, start)!== -1 && string.indexOf(substring, end)!== -1;\n};\n\n/**\n * Returns true if given string contains given substring in given range\n * >>> containsRange('abc', 'ab', 0, 2)\n  true\n  >>> containsRange('abc', 'ab', 0, 3)\n  false\n  */\nconst containsRange = (string, substring, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* For a number n, find the smallest number that divide n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      factorsMap.set(i, factorsMap.get(i) + 1);\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  const factorsMap = new Map();\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsMap.set(i, factorsMap.get(i) || 0);\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a gives string, removes spaces.\n  >>> removeSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/ /g, '');\n};\n\n/* For a gives string, removes punctuation.\n  >>> removePunctuation('Hello World!')\n  'HelloWorld'\n  */\nconst removePunctuation = (string) => {\n  return string.replace(/[!,.?]/g, '');\n};\n\n/* For a gives string, removes numbers.\n  >>> removeNumbers('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeNumbers = (string) => {\n  return string.replace(/[0-9]/g, '');\n};\n\n/* For a gives string, removes special characters.\n  >>> removeSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpecialChars = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* For a gives string, removes spaces and punctuation.\n  >>> removeSpacesAndPunctuation('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuation = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and numbers.\n  >>> removeSpacesAndNumbers('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbers = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and special characters.\n  >>> removeSpacesAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndNumbersAndPunctuation('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndPunctuation = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 456 789')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbersAndSpecialChars = (string) => {\n  return string.replace(/ +/g,'').trim();\n};\n\n/* For a gives string, removes spaces and punctuation, numbers, and special characters.\n  >>> removeSpacesAndNumbersAndSpecialChars('Hello World! 123 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra')\n  'abracadabra'\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, count) => {\n  if (count === undefined) {\n    return str.split(substr).join(\"\");\n  }\n  return str.split(substr).slice(0, count).join(substr);\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abracadabra', 2)\n  'abra'\n  >>> remove('a', 'abracadabra', 3)\n  'abracadabra'\n  */\nconst remove = (str, substr, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that end with a gives suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter(n => n % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter(n => n % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter(n => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy35 = (l) => {\n  return l.filter(n => n % 35 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 41.\n  >>> getDivisibleBy41([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy41([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy41 = (l) => {\n  return l.filter(n => n % 41 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 45.\n  >>> getDivisibleBy45([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy45([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy45 = (l) => {\n  return l.filter(n => n % 45 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 49.\n  >>> getDivisibleBy49([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getDivisibleBy49([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 123, 1]\n  */\nconst getDivisibleBy49 = (l) => {\n  return l.filter(n => n % 49 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 51.\n  >>> getDivisibleBy51([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n const x0 = xs[0];\n const x1 = xs[1];\n const x2 = xs[2];\n const x3 = xs[3];\n const x4 = xs[4];\n const x5 = xs[5];\n const x6 = xs[6];\n const x7 = xs[7];\n const x8 = xs[8];\n const x9 = xs[9];\n const x10 = xs[10];\n const x11 = xs[11];\n const x12 = xs[12];\n const x13 = xs[13];\n const x14 = xs[14];\n const x15 = xs[15];\n const x16 = xs[16];\n const x17 = xs[17];\n const x18 = xs[18];\n const x19 = xs[19];\n const x20 = xs[20];\n const x21 = xs[21];\n const x22 = xs[22];\n const x23 = xs[23];\n const x24 = xs[24];\n const x25 = xs[25];\n const x26 = xs[26];\n const x27 = xs[27];\n const x28 = xs[28];\n const x29 = xs[29];\n const x30 = xs[30];\n const x31 = xs[31];\n const x32 = xs[32];\n const x33 = xs[33];\n const x34 = xs[34];\n const x35 = xs[35];\n const x36 = xs[36];\n const x37 = xs[37];\n const x38 = xs[38];\n const x39 = xs[39];\n const x40 = xs[40];\n const x41 = xs[41];\n const x42 = xs[42];\n const x43 = xs[43];\n const x44 = xs[44];\n const x45 = xs[45];\n const x46 = xs[46];\n const x47 = xs[47];\n const x48 = xs[48];\n const x49 = xs[49];\n const x50 = xs[50];\n const x51 = xs[51];\n const x52 = xs[52];\n const x53 = xs[53];\n const x54 = xs[54];\n const x55 = xs[55];\n const x56 = xs[56];\n const x57 = xs[57];\n const x58 = xs[58];\n const x59 = xs[59];\n const x60 = xs[60];\n const x61 = xs[61];\n const x62 = xs[62];\n const x63 = xs[63];\n const x64 = xs[64];\n const x65 = xs[65];\n const x66 = xs[66];\n const x67 = xs[67];\n const x68 = xs[68];\n const x69 = xs[69];\n const x70 = xs[70];\n const x71 = xs[71];\n const x72 = xs[72];\n const x73 = xs[73];\n const x74 = xs[74];\n const x75 = xs[75];\n const x76 = xs[76];\n const x77 = xs[77];\n const x78 = xs[78];\n const x79 = xs[79];\n const x80 = xs[80];\n const x81 = xs[81];\n const x82 = xs[82];\n const x83 = xs[83];\n const x84 = xs[84];\n const x85 = xs[85];\n const x86 = xs[86];\n const x87 = xs[87];\n const x88 = xs[88];\n const x89 = xs[89];\n const x90 = xs[90];\n const x91 = xs[91];\n const x92 = xs[92];\n const x93 = xs[93];\n const x94 = xs[94];\n const x95 = xs[95];\n const x96 = xs[96];\n const x97 = xs[97];\n const x98 = xs[98];\n const x99 = xs[99];\n const x100 = xs[100];\n const x101 = xs[101];\n const x102 = xs[102];\n const x103 = xs[103];\n const x104 = xs[104];\n const x105 = xs[105];\n const x106 = xs[106];\n const x107 = xs[107];\n const x108 = xs[108];\n const x109 = xs[109];\n const x110 = xs[110];\n const x111 = xs[111];\n const x112 = xs[112];\n const x113 = xs[113];\n const x114 = xs[114];\n const x115 = xs[115];\n const x116 = xs[116];\n const x117 = xs[117];\n const x118 = xs[118];\n const x119 = xs[119];\n const x120 = xs[120];\n const x121 = xs[121];\n const x122 = xs[122];\n const x123 = xs[123];\n const x124 = xs[124];\n const x125 = xs[125];\n const x126 = xs[126];\n const x127 = xs[127];\n const x128 = xs[128];\n const x129 = xs[129];\n const x130 = xs[130];\n const x131 = xs[131];\n const x132 = xs[132];\n const x133 = xs[133];\n const x134 = xs[134];\n const x135 = xs[135];\n const x136 = xs[136];\n const x137 = xs[137];\n const x138 = xs[138];\n const x139 = xs[139];\n const x140 = xs[140];\n const x141 = xs[141];\n const x142 = xs[142];\n const x143 = xs[143];\n const ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let thirdIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      thirdIndexes.push(i);\n    }\n  }\n  thirdIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < thirdIndexes.length; i++) {\n    newList.push(l[thirdIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by five, while its value at the indicies that was divisible by five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let fiveIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 5 === 0) {\n      fiveIndexes.push(i);\n    }\n  }\n  fiveIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < fiveIndexes.length; i++) {\n    newList.push(l[fiveIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by seven, while its value at the indicies that was divisible by seven was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let sevenIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 7 === 0) {\n      sevenIndexes.push(i);\n    }\n  }\n  sevenIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < sevenIndexes.length; i++) {\n    newList.push(l[sevenIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by nine, while its value at the indicies that was divisible by nine was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let nineIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 9 === 0) {\n      nineIndexes.push(i);\n    }\n  }\n  nineIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < nineIndexes.length; i++) {\n    newList.push(l[nineIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by ten, while its value at the indicies that was divisible by ten was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  let tenIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 10 === 0) {\n      tenIndexes.push(i);\n    }\n  }\n  tenIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < tenIndexes.length; i++) {\n    newList.push(l[tenIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentyIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 20 === 0) {\n      twentyIndexes.push(i);\n    }\n  }\n  twentyIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < twentyIndexes.length; i++) {\n    newList.push(l[twentyIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty five, while its value at the indicies that was divisible by twenty five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwentyFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyFive = (l) => {\n  let twentyFiveIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 25 === 0) {\n      twentyFiveIndexes.push(i);\n    }\n  }\n  twentyFiveIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < twentyFiveIndexes.length; i++) {\n    newList.push(l[twentyFiveIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty nine, while its value at the indicies that was divisible by twenty nine was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwentyNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyNine = (l) => {\n  let twentyNineIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 29 === 0) {\n      twentyNineIndexes.push(i);\n    }\n  }\n  twentyNineIndexes.sort((a, b) => l[b] - l[a]);\n  let newList = [];\n  for (let i = 0; i < twentyNineIndexes.length; i++) {\n    newList.push(l[twentyNineIndexes[i]]);\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty ten, while its value at the indicies that was divisible by twenty ten was equal to the value of the corresponding indicies of l, but sort.\n  >>> sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of elements in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return median of elements in the list.\n  >>> medianElement([1, 2, 3])\n  2\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst medianElement = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] % 2!== 0) {\n    return l[mid + 1];\n  }\n  return l[mid];\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountValue = l[i];\n    }\n  }\n  modes.push(maxCountValue);\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountValue = l[i];\n    }\n  }\n  modes.push(maxCountValue);\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountValue = l[i];\n    }\n  }\n  modes.push(maxCountValue);\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountValue = l[i];\n    }\n  }\n  modes.push(maxCountValue);\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountValue = l[i];\n    }\n  }\n  modes.push(maxCountValue);\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n      maxCountValue = l[i];\n    }\n  }\n  modes.push(maxCountValue);\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return 0;\n};\n\n/*Return the number of time the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEven = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOdd = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOddEven = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i);\n    } else {\n      oddIndexes.push(i);\n    }\n  }\n  return evenIndexes.sort((a, b) => l[a] - l[b]).concat(oddIndexes.sort((a, b) => l[a] - l[b]));\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOddEvenOdd = (l) => {\n  let evenIndexes = [];\n  let oddIndexes = [];\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 1) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of two character. */ const encodeCyclic2 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 2) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 1) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of one character. */ const encodeCyclic1 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 1) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic1 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 1) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of zero character. */ const encodeCyclic0 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 0) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic0 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 0) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of three character. */ const encodeCyclic3 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of two character. */ const encodeCyclic2 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 2) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 2) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of one character. */ const encodeCyclic1 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 1) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic1 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 1) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of zero character. */ const encodeCyclic0 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 0) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic0 = (s) => {\n let groups = [], groups2 = [];\n for (let i = 0; i < s.length; i += 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 0) groups2.push(group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns encoding string by cycling groups of three character. */ const encodeCyclic3 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }\n  return b;\n};\n\n/*\n  primeSum returning n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n    if (c % 2 === 0) return c;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val - meanOfNumbers);\n  }, 0);\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = mean(numbers);\n  return numbers.reduce((acc, val) => {\n    return acc + Math.abs(val", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === carsRace[i][j + 1]) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; sim", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 121]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5\n  >>> halfList([1, 2, 3])\n  [1, 2, 1.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 121]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 0.5\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1.5]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 121]\n  */\nconst halfDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 0.5);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 10\n  >>> tenList([1, 2, 3])\n  [1, 2, 10]\n  >>> tenList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 120]\n  */\nconst tenList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 10);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 10\n  >>> tenDivList([1, 2, 3])\n  [1, 2, 10]\n  >>> tenDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 120]\n  */\nconst tenDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 10);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 100\n  >>> hundredList([1, 2, 3])\n  [1, 2, 100]\n  >>> hundredList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 1200]\n  */\nconst hundredList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 100);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 100\n  >>> hundredDivList([1, 2, 3])\n  [1, 2, 100]\n  >>> hundredDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 1200]\n  */\nconst hundredDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 100);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 1000\n  >>> thousandList([1, 2, 3])\n  [1, 2, 1000]\n  >>> thousandList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 12000]\n  */\nconst thousandList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 1000);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 1000\n  >>> thousandDivList([1, 2, 3])\n  [1, 2, 1000]\n  >>> thousandDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 12000]\n  */\nconst thousandDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 1000);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 10000\n  >>> tenThousandList([1, 2, 3])\n  [1, 2, 10000]\n  >>> tenThousandList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 120000]\n  */\nconst tenThousandList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 10000);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 10000\n  >>> tenThousandDivList([1, 2, 3])\n  [1, 2, 10000]\n  >>> tenThousandDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 120000]\n  */\nconst tenThousandDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 10000);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 100000\n  >>> hundredThousandList([1, 2, 3])\n  [1, 2, 100000]\n  >>> hundredThousandList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 1200000]\n  */\nconst hundredThousandList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 100000);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 100000\n  >>> hundredThousandDivList([1, 2, 3])\n  [1, 2, 100000]\n  >>> hundredThousandDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 1200000]\n  */\nconst hundredThousandDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 100000);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 1000000\n  >>> thousandThousandList([1, 2, 3])\n  [1, 2, 1000000]\n  >>> thousandThousandList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 12000000]\n  */\nconst thousandThousandList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 1000000);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 1000000\n  >>> thousandThousandDivList([1, 2, 3])\n  [1, 2, 1000000]\n  >>> thousandThousandDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 12000000]\n  */\nconst thousandThousandDivList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const str = x.toString();\n  const digits = str.length - str.replace(/[^0-9]/g, '').length;\n  const numDigits = digits;\n  const newBase = base;\n  const newStr = '';\n  let power;\n  let digit;\n  let i;\n\n  if (numDigits === 0) {\n    return str;\n  }\n\n  if (numDigits > base) {\n    digit = numDigits - base;\n    power = 1;\n    for (i = digit; i >= 1; i--) {\n      newStr += digits[power];\n      power *= base;\n    }\n    newStr += digits[power];\n    return newStr;\n  }\n\n  digit = numDigits - base;\n  power = 1;\n  for (i = digit; i >= 0; i--) {\n    newStr += digits[power];\n    power *= base;\n  }\n  return newStr;\n};\n\n/*\n Convert number to string with given radix\n radix is number system of output string (e.g. 10, 16, 2)\n return string representations after the conversion.\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  >>> toRadixString(8, 10)\n  '8'\n  >>> toRadixString(8, 16)\n  '10'\n  >>> toRadixString(8, 2)\n  '1000'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib4Number = 0;\n  for (let i = 1; i <= n; i++) {\n    fib4Number = fib4Number + i;\n  }\n  return fib4Number;\n};\n\n/*The Fibbonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibbonacci(0) -> 0 fibbonacci(1) -> 1 fibbonacci(2) -> 1 fibbonacci(3) -> 1 fibbonacci(4) -> 2 fibbonacci(5) -> 1 fibbonacci(6) -> 3 fibbonacci(7) -> 1 fibbonacci(8) -> 5 fibbonacci(9) -> 1 fibbonacci(10) -> 9 fibbonacci(11) -> 1 fibbonacci(12) -> 13 fibbonacci(13) -> 1 fibbonacci(14) -> 17 fibbonacci(15) -> 1 fibbonacci(16) -> 19 fibbonacci(17) -> 1 fibbonacci(18) -> 23 fibbonacci(19) -> 1 fibbonacci(20) -> 29 fibbonacci(21) -> 1 fibbonacci(22) -> 31 fibbonacci(23) -> 1 fibbonacci(24) -> 37 fibbonacci(25) -> 1 fibbonacci(26) -> 41 fibbonacci(27) -> 1 fibbonacci(28) -> 43 fibbonacci(29) -> 1 fibbonacci(30) -> 47 fibbonacci(31) -> 1 fibbonacci(32) -> 53 fibbonacci(33) -> 1 fibbonacci(34) -> 59 fibbonacci(35) -> 1 fibbonacci(36) -> 61 fibbonacci(37) -> 1 fibbonacci(38) -> 67 fibbonacci(39) -> 1 fibbonacci(40) -> 73 fibbonacci(41)-> 1 fibbonacci(42) -> 79 fibbonacci(43) -> 1 fibbonacci(44) -> 81 fibbonacci(45) -> 1 fibbonacci(46) -> 87 fibbonacci(47) -> 1 fibbonacci(48) -> 93 fibbonacci(49) -> 1 fibbonacci(50) -> 99 fibbonacci(51) -> 1 fibbonacci(52) -> 101 fibbonacci(53) -> 1 fibbonacci(54) -> 103 fibbonacci(55) -> 1 fibbonacci(56) -> 107 fibbonacci(57) -> 1 fibbonacci(58) -> 113 fibbonacci(59) -> 1 fibbonacci(60) -> 119 fibbonacci(61) -> 1 fibbonacci(62) -> 121 fibbonacci(63) -> 1 fibbonacci(64) -> 127 fibbonacci(65) -> 1 fibbonacci(66) -> 131 fibbonacci(67) -> 1 fibbonacci(68) -> 137 fibbonacci(69) -> 1 fibbonacci(70) -> 143 fibbonacci(71) -> 1 fibbonacci(72) -> 149 fibbonacci(73) -> 1 fibbonacci(74) -> 151 fibbonacci(75) -> 1 fibbonacci(76) -> 157 fibbonacci(77) -> 1 fibbonacci(78) -> 163 fibbonacci(79) -> 1 fibbonacci(80) -> 169 fibbonacci(81) -> 1 fibbonacci(82) -> 171 fibbonacci(83) -> 1 fibbonacci(84) -> 177 fibbonacci(85) -> 1 fibbonacci(86) -> 183 fibbonacci(87) -> 1 fibbonacci(88) -> 189 fibbonacci(89) -> 1 fibbonacci(90) -> 191 fibbonacci(91) -> 1 fibbonacci(92) -> 193 fibbonacci(93) -> 1 fibbonacci(94) -> 197 fibbonacci(95) -> 1 fibbonacci(96) -> 203 fibbonacci(97) -> 1 fibbonacci(98) -> 209 fibbonacci(99) -> 1 fibbonacci(100) -> 211 fibbonacci(101) -> 1 fibbonacci(102) -> 217 fibbonacci(103) -> 1 fibbonacci(104) -> 223 fibbonacci(105) -> 1 fibbonacci(106) -> 229 fibbonacci(107) -> 1 fibbonacci(108) -> 233 fibbonacci(109) -> 1 fibbonacci(110) -> 239 fibbonacci(111) -> 1 fibbonacci(112) -> 241 fibbonacci(113) -> 1 fibbonacci(114) -> 247 fibbonacci(115) -> 1 fibbonacci(116) -> 251 fibbonacci(117) -> 1 fibbonacci(118) -> 257 fibbonacci(119) -> 1 fibbonacci(120) -> 263 fibbonacci(121) -> 1 fibbonacci(122) -> 269 fibbonacci(123) -> 1 fibbonacci(124) -> 271 fibbonacci(125) -> 1 fibbonacci(126) -> 277 fibbonacci(127) -> 1 fibbonacci(128) -> 283 fibbonacci(129) -> 1 fibbonacci(130) -> 289 fibbonacci(131) -> 1 fibbonacci(132) -> 291 fibbonacci(133) -> 1 fibbonacci(134) -> 297 fibbonacci(135) -> 1 fibbonacci(136) -> 303 fibbonacci(137) -> 1 fibbonacci(138) -> 309 fibbonacci(139) -> 1 fibbonacci(140) -> 311 fibbonacci(141) -> 1 fibbonacci(142) -> 317 fibbonacci(143) -> 1 fibbonacci(144) -> 323 fibbonacci(145) -> 1 fibbonacci(146) -> 329 fibbonacci(147) -> 1 fibbonacci(148) -> 331 fibbonacci(149) -> 1 fibbonacci(150) -> 337 fibbonacci(151) -> 1 fibbonacci(152) -> 343 fibbonacci(153) -> 1 fibbonacci(154) -> 349 fibbonacci(155) -> 1 fibbonacci(156) -> 351 fibbonacci(157) -> 1 fibbonacci(158) -> 357", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  return sorted[len / 2 - 1];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    const count = counts[value]? counts[value] + 1 : 1;\n    counts[value] = count;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return maxCountIndex === -1? undefined : maxCountIndex === 0? undefined : maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return text === reversedText && text.split(' ').length === reversedText.split(' ').length;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpa", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let result = 1;\n  while (n > p) {\n    result *= p;\n    n -= p;\n  }\n  return result % p;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (i!== 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = _curry2((n, xs) => {\n  return take(n < xs.length? xs.length - n : 0, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @deprecated since v0.16.0\n * @example\n *\n *      R.dropRepeatsWith(R.eqBy(Math.abs), {x: 1, y: 2, z: 3, a: 4, b: 2, c: 1}); //=> [{x: 1}, {y: 2}, {z: 3}, {a: 4}, {b: 2}]\n *      R.dropRepeatsWith(R.eqBy(Math.abs), ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']);\n *      // => ['16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2']\n * @symb R.dropRepeatsWith(f, {x: 1, y: 2, z: 3, a: 4, b: 2, c: 1}); //=> [{x: 1}, {y: 2}, {z: 3}, {a: 4}, {b: 2}]\n * @symb R.dropRepeatsWith(f, {x: 1, y: 2, z: 3, a: 4, b: 2, c: 1}, 'x'); //=> [{y: 2}, {z: 3}, {a: 4}, {b: 2}]\n */\nvar dropRepeatsWith = _curry2((fn, xs, ys) => {\n  return dropLastWhile(fn, takeWhile(_equals(y), xs));\n});\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      const strEq = R.eqBy(String);\n *      R.distinctUntilChanged(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.distinctUntilChanged(strEq)([{}, {}]);       //=> [{}]\n *      R.distinctUntilChanged(strEq)([{foo: 1}, {foo: 2})]; //=> [{foo: 1}, {foo: 2}]\n */\nvar distinctUntilChanged = _curry2(function distinctUntilChanged(pred, list) {\n  var output = [];\n  var idx = 0;\n  var len = list.length;\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_equals(item, pred, item)) {\n      output[idx] = item;\n    }\n    idx += 1;\n  }\n  return output;\n});\n\n/**\n * Returns a new copy of the array with the element at the\n * provided index replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string and returns string without consonant.\n  >>> removeConsonants('a')\n  'a'\n  >>> removeConsonants('ab')\n  'b'\n  >>> removeConsonants('abc')\n  'c'\n  >>> removeConsonants('zbc')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange2 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange3([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange3([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange3 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange4([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange4([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange4 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange5([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange5([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange5 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange6([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange6([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange6 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange7([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange7([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange7 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange8([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange8([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange8 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange9([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange9([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange9 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange10([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange10([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange10 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange11([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange11([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange11 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange12([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange12([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange12 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange13([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange13([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange13 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange14([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange14([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange14 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange15([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange15([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange15 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange16([2, 3, 4, 5], 2, 4)\n  true\n  >>> inRange16([2, 3, 4, 5], 2, 5)\n  false\n  */\nconst inRange16 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) {\n      return false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Raise a number to a power\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  125\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Get the modulus of a number\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of a number\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the positive value of a number\n  >>> positive(-3)\n  -3\n  >>> positive(3)\n  3\n  */\nconst positive = (x) => {\n  return Math.max(x);\n};\n\n/*Get the negative value of a number\n  >>> negative(-3)\n  3\n  >>> negative(3)\n  -3\n  */\nconst negative = (x) => {\n  return Math.min(x);\n};\n\n/*Get the square root of a number\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of a number\n  >>> cubeRoot(-3)\n  3\n  >>> cubeRoot(3)\n  1\n  */\nconst cubeRoot = (x) => {\n  return Math.pow(x, 1 / 3);\n};\n\n/*Get the factorial of a number\n  >>> factorial(-3)\n  6\n  >>> factorial(3)\n  6\n  */\nconst factorial = (x) => {\n  return x * factorial(x - 1);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of a number\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of a number\n  >>> ceil(-3)\n  3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the round of a number\n  >>> round(-3)\n  -3\n  >>> round(3)\n  3\n  */\nconst round = (x) => {\n  return Math.round", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */\nconst fibonacci = (n) => {\n  if (n <= 0) return [];\n  if (n === 1) return [1];\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibonacci([10, 20, 30])\n  [10, 20, 30]\n  */", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\").length - 1;\n  const closingBrackets = brackets.split(\"<\").length - 1;\n  return openingBrackets === closingBrackets;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = 0\n  let curr = l[0]\n  for (let i = 1; i < l.length; i++) {\n    const val = l[i]\n    if (val > prev) {\n      return false\n    }\n    if (val < curr) {\n      return true\n    }\n    prev = curr\n    curr = val\n  }\n  return true\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(4, 6)\n  1\n  >>> numberOfDivisors(4, 7)\n  2\n  >>> numberOfDivisors(4, 8)\n  1\n  >>> numberOfDivisors(4, 9)\n  1\n  >>> numberOfDivisors(4, 10)\n  0\n  >>> numberOfDivisors(4, 11)\n  1\n  >>> numberOfDivisors(4, 12)\n  1\n  >>> numberOfDivisors(4, 13)\n  1\n  >>> numberOfDivisors(4, 14)\n  1\n  >>> numberOfDivisors(4, 15)\n  1\n  >>> numberOfDivisors(4, 16)\n  1\n  >>> numberOfDivisors(4, 17)\n  1\n  >>> numberOfDivisors(4, 18)\n  1\n  >>> numberOfDivisors(4, 19)\n  1\n  >>> numberOfDivisors(4, 20)\n  1\n  >>> numberOfDivisors(4, 21)\n  1\n  >>> numberOfDivisors(4, 22)\n  1\n  >>> numberOfDivisors(4, 23)\n  1\n  >>> numberOfDivisors(4, 24)\n  1\n  >>> numberOfDivisors(4, 25)\n  1\n  >>> numberOfDivisors(4, 26)\n  1\n  >>> numberOfDivisors(4, 27)\n  1\n  >>> numberOfDivisors(4, 28)\n  1\n  >>> numberOfDivisors(4, 29)\n  1\n  >>> numberOfDivisors(4, 30)\n  1\n  >>> numberOfDivisors(4, 31)\n  1\n  >>> numberOfDivisors(4, 32)\n  1\n  >>> numberOfDivisors(4, 33)\n  1\n  >>> numberOfDivisors(4, 34)\n  1\n  >>> numberOfDivisors(4, 35)\n  1\n  >>> numberOfDivisors(4, 36)\n  1\n  >>> numberOfDivisors(4, 37)\n  1\n  >>> numberOfDivisors(4, 38)\n  1\n  >>> numberOfDivisors(4, 39)\n  1\n  >>> numberOfDivisors(4, 40)\n  1\n  >>> numberOfDivisors(4, 41)\n  1\n  >>> numberOfDivisors(4, 42)\n  1\n  >>> numberOfDivisors(4, 43)\n  1\n  >>> numberOfDivisors(4, 44)\n  1\n  >>> numberOfDivisors(4, 45)\n  1\n  >>> numberOfDivisors(4, 46)\n  1\n  >>> numberOfDivisors(4, 47)\n  1\n  >>> numberOfDivisors(4, 48)\n  1\n  >>> numberOfDivisors(4, 49)\n  1\n  >>> numberOfDivisors(4, 50)\n  1\n  >>> numberOfDivisors(4, 51)\n  1\n  >>> numberOfDivisors(4, 52)\n  1\n  >>> numberOfDivisors(4, 53)\n  1\n  >>> numberOfDivisors(4, 54)\n  1\n  >>> numberOfDivisors(4, 55)\n  1\n  >>> numberOfDivisors(4, 56)\n  1\n  >>> numberOfDivisors(4, 57)\n  1\n  >>> numberOfDivisors(4, 58)\n  1\n  >>> numberOfDivisors(4, 59)\n  1\n  >>> numberOfDivisors(4, 60)\n  1\n  >>> numberOfDivisors(4, 61)\n  1\n  >>> numberOfDivisors(4, 62)\n  1\n  >>> numberOfDivisors(4, 63)\n  1\n  >>> numberOfDivisors(4, 64)\n  1\n  >>> numberOfDivisors(4, 65)\n  1\n  >>> numberOfDivisors(4, 66)\n  1\n  >>> numberOfDivisors(4, 67)\n  1\n  >>> numberOfDivisors(4, 68)\n  1\n  >>> numberOfDivisors(4, 69)\n  1\n  >>> numberOfDivisors(4, 70)\n  1\n  >>> numberOfDivisors(4, 71)\n  1\n  >>> numberOfDivisors(4, 72)\n  1\n  >>> numberOfDivisors(4, 73)\n  1\n  >>> numberOfDivisors(4, 74)\n  1\n  >>> numberOfDivisors(4, 75)\n  1\n  >>> numberOfDivisors(4, 76)\n  1\n  >>> numberOfDivisors(4, 77)\n  1\n  >>> numberOfDivisors(4, 78)\n  1\n  >>> numberOfDivisors(4, 79)\n  1\n  >>> numberOfDivisors(4, 80)\n  1\n  >>> numberOfDivisors(4, 81)\n  1\n  >>> numberOfDivisors(4, 82)\n  1\n  >>> numberOfDivisors(4, 83)\n  1\n  >>> numberOfDivisors(4, 84)\n  1\n  >>> numberOfDivisors(4, 85)\n  1\n  >>> numberOfDivisors(4, 86)\n  1\n  >>> numberOfDivisors(4, 87)\n  1\n  >>> numberOfDivisors(4, 88)\n  1\n  >>> numberOfDivisors(4, 89)\n  1\n  >>> numberOfDivisors(4, 90)\n  1\n  >>> numberOfDivisors(4, 91)\n  1\n  >>> numberOfDivisors(4, 92)\n  1\n  >>> numberOfDivisors(4, 93)\n  1\n  >>> numberOfDivisors(4, 94)\n  1\n  >>> numberOfDivisors(4, 95)\n  1\n  >>> numberOfDivisors(4, 96)\n  1\n  >>> numberOfDivisors(4, 97)\n  1\n  >>> numberOfDivisors(4, 98)\n  1\n  >>> numberOfDivisors(4, 99)\n  1\n  >>> numberOfDivisors(4, 100)\n  1\n  >>> numberOfDivisors(4, 101)\n  1\n  >>> numberOfDivisors(4, 102)\n  1\n  >>> numberOfDivisors(4, 103)\n  1\n  >>> numberOfDivisors(4, 104)\n  1\n  >>> numberOfDivisors(4, 105)\n  1\n  >>> numberOfDivisors(4, 106)\n  1\n  >>> numberOfDivisors(4, 107)\n  1\n  >>> numberOfDivisors(4, 108)\n  1\n  >>> numberOfDivisors(4, 109)\n  1\n  >>> numberOfDivisors(4, 110)\n  1\n  >>> numberOfDivisors(4, 111)\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.trim().split(' ');\n  const paren_array_length = paren_array.length;\n  const max_level = Math.max(...paren_array.map(level => level.length));\n  const max_level_length = max_level;\n  const max_level_array = paren_array.map(level => level.trim().split(''));\n  const max_level_array_length = max_level_array.length;\n  const max_level_array_max_length = Math.max(...max_level_array);\n  const max_level_array_max_length_length = max_level_array_max_length;\n  const max_level_array_max_length_length_length = max_level_array_max_length_length;\n  const max_level_array_max_length_length_length_length_length = max_level_array_max_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length;\n  const max_level_array_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\[/g);\n  const closingBrackets = brackets.match(/\\]/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"{\" and \"}\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"{\")\n  false\n  >>> correctBracketing(\"{}\")\n  true\n  >>> correctBracketing(\"{{}}\")\n  true\n  >>> correctBracketing(\"{}}\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\{/g);\n  const closingBrackets = brackets.match(/\\}/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\[/g);\n  const closingBrackets = brackets.match(/\\]/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"{\" and \"}\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"{\")\n  false\n  >>> correctBracketing(\"{}\")\n  true\n  >>> correctBracketing(\"{{}}\")\n  true\n  >>> correctBracketing(\"{}}\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\{/g);\n  const closingBrackets = brackets.match(/\\}/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\[/g);\n  const closingBrackets = brackets.match(/\\]/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"{\" and \"}\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"{\")\n  false\n  >>> correctBracketing(\"{}\")\n  true\n  >>> correctBracketing(\"{{}}\")\n  true\n  >>> correctBracketing(\"{}}\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\{/g);\n  const closingBrackets = brackets.match(/\\}/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};\n\n/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [...derivative(xs.slice(0, -1))].concat(xs.slice(-1));\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(2) == 1 fibonacci(3) == 2 fibonacci(4) == 3 fibonacci(5) == 5 fibonacci(6) == 8 fibonacci(7) == 13 fibonacci(8) == 21 fibonacci(9) == 34 fibonacci(10) == 55 fibonacci(11) == 89 fibonacci(12) == 144 fibonacci(13) == 233 fibonacci(14) == 377 fibonacci(15) == 610 fibonacci(16) == 987 fibonacci(17) == 1597 fibonacci(18) == 2584 fibonacci(19) == 4181 fibonacci(20) == 6765 fibonacci(21) == 10946 fibonacci(22) == 17711 fibonacci(23) == 28657 fibonacci(24) == 46368 fibonacci(25) == 75025 fibonacci(26) == 121393 fibonacci(27) == 196418 fibonacci(28) == 317811 fibonacci(29) == 514229 fibonacci(30) == 832040 fibonacci(31) == 1346269 fibonacci(32) == 2178309 fibonacci(33) == 3524578 fibonacci(34) == 5702887 fibonacci(35) == 9227465 fibonacci(36) == 14930352 fibonacci(37) == 24157817 fibonacci(38) == 39088169 fibonacci(39) == 63245986 fibonacci(40) == 102334155 fibonacci(41) == 165580141 fibonacci(42) == 267914296 fibonacci(43) == 433494437 fibonacci(44) == 701408733 fibonacci(45) == 1134903170 fibonacci(46) == 1836311903 fibonacci(47) == 2971215073 fibonacci(48) == 4807526976 fibonacci(49) == 7778742049 fibonacci(50) == 12586269013 fibonacci(51) == 19331331516 fibonacci(52) == 31752873201 fibonacci(53) == 51422916378 fibonacci(54) == 83204012737 fibonacci(55) == 134626907168 fibonacci(56) == 217830909415 fibonacci(57) == 352457824001 fibonacci(58) == 570288730016 fibonacci(59) == 922746566001 fibonacci(60) == 149303528016 fibonacci(61) == 241578174901 fibonacci(62) == 390881697616 fibonacci(63) == 632459862241 fibonacci(64) == 1023341556641 fibonacci(65) == 1655801422976 fibonacci(66) == 267914296961 fibonacci(67) == 4334944378721 fibonacci(68) == 7014087334201 fibonacci(69) == 11349031704321 fibonacci(70) == 18363119036791 fibonacci(71) == 29712150733761 fibonacci(72) == 48075269766561 fibonacci(73) == 77787420491516 fibonacci(74) == 12586269013921 fibonacci(75) == 19331331516378 fibonacci(76) == 31752873201016 fibonacci(77) == 51422916378021 fibonacci(78) == 83204012737491 fibonacci(79) == 134626907168016 fibonacci(80) == 217830909415761 fibonacci(81) == 352457824001016 fibonacci(82) == 570288730016016 fibonacci(83) == 922746566001601 fibonacci(84) == 149303528016016 fibonacci(85) == 241578174901601 fibonacci(86) == 390881697616016 fibonacci(87) == 632459862241601 fibonacci(88) == 102334155664016 fibonacci(89) == 1655801422976001 fibonacci(90) == 267914296961601 fibonacci(91) == 433494437871601 fibonacci(92) == 7014087334208016 fibonacci(93) == 1134903170432801 fibonacci(94) == 1836311903679801 fibonacci(95) == 2971215073376801 fibonacci(96) == 4807526976656401 fibonacci(97) == 7778742049156401 fibonacci(98) == 1258626901392801 fibonacci(99) == 19331331516378016 fibonacci(100) == 3175287320106401 fibonacci(101) == 5142291637801601 fibonacci(102) == 8320401273749016 fibonacci(103) == 13462690716801601 fibonacci(104) == 21783090941576801 fibonacci(105) == 35245782400106401 fibonacci(106) == 57028873001608016 fibonacci(107) == 92274656600160801 fibonacci(108) == 14930352801608016 fibonacci(109) == 24157817490160801 fibonacci(110) == 39088169761608016 fibonacci(111) == ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  let n = str.length;\n  let result = \"\";\n  let i = 0;\n  while (i < n) {\n    result += str.charAt(i);\n    i++;\n  }\n  let j = i;\n  while (j > 0) {\n    result += str.charAt(j - 1);\n    j--;\n  }\n  if (shift > n) {\n    return str.split(\"\").reverse().join(\"\");\n  }\n  return result;\n};\n\n/*\n Return the sum of the digits of x.\n >>> sumDigits(123)\n 6\n >>> sumDigits(-456)\n -1\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n >>> sumDigits(1234)\n 6\n >>> sumDigits(-1234)\n -6\n >>> sumDigits(123)\n 6\n >>> sumDigits(-123)\n -6\n >>> sumDigits(0)\n 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum(\"abc123defg\") => 12\n      digitSum(\"abc123defg123\") => 12\n      digitSum(\"abc123defg123abc\") => 12\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"abc123def\") => 12\n      digitSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  const arr2 = arr.map(item => item.trim());\n  const arr3 = arr2.filter(item => item!== \"and\");\n  const arr4 = arr3.map(item => item.split(\" and \"));\n  const arr5 = arr4.map(item => item.map(item => item.trim()));\n  const arr6 = arr5.map(item => item.filter(item => item!== \"and\"));\n  const arr7 = arr6.map(item => item.map(item => item.split(\" and \")));\n  const arr8 = arr7.map(item => item.map(item => item.map(item => item.trim())));\n  const arr9 = arr8.map(item => item.map(item => item.map(item => item.split(\" and \"))));\n  const arr10 = arr9.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))\n  const arr11 = arr10.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \")))))\n  const arr12 = arr11.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim())))))\n  const arr13 = arr12.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))\n  const arr14 = arr13.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))\n  const arr15 = arr14.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \")))))));\n  const arr16 = arr15.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim())))))))\n  const arr17 = arr16.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr18 = arr17.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr19 = arr18.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr20 = arr19.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr21 = arr20.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr22 = arr21.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr23 = arr22.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr24 = arr23.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr25 = arr24.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr26 = arr25.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr27 = arr26.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr28 = arr27.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr29 = arr28.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr30 = arr29.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr31 = arr30.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr32 = arr31.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr33 = arr32.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr34 = arr33.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr35 = arr34.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr36 = arr35.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.trim()))))))));\n  const arr37 = arr36.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.split(\" and \"))))))));\n  const arr38 = arr37.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item => item.map(item ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue = sortedEvenValues[0];\n  const smallestIndexes = evenValues.findIndex((val) => val === smallestEvenValue);\n  if (smallestIndexes === -1) return [];\n  return [smallestEvenValue, smallestIndexes];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const sortedOddValues = oddValues.sort((a, b) => b - a);\n  const smallestOddValue = sortedOddValues[0];\n  const smallestIndexes = oddValues.findIndex((val) => val === smallestOddValue);\n  if (smallestIndexes === -1) return [];\n  return [smallestOddValue, smallestIndexes];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const sortedOddValues = oddValues.sort((a, b) => b - a);\n  const smallestOddValue = sortedOddValues[0];\n  const smallestIndexes = oddValues.findIndex((val) => val === smallestOddValue);\n  if (smallestIndexes === -1) return [];\n  return [smallestOddValue, smallestIndexes];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const sortedOddValues = oddValues.sort((a, b) => b - a);\n  const smallestOddValue = sortedOddValues[0];\n  const smallestIndexes = oddValues.findIndex((val) => val === smallestOddValue);\n  if (smallestIndexes === -1) return [];\n  return [smallestOddValue, smallestIndexes];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[max]) {\n      freq++;\n    } else {\n      if (freq >= lst[i]) {\n        max = i;\n        freq = lst[i];\n      }\n    }\n  }\n  return max >= 0? max : -1;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      freq = 0;\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return 0.\n  Examples:\n      sumOfFreq([4, 1, 2, 2, 3, 1])) == 6\n      sumOfFreq([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 10\n      sumOfFreq([5, 5, 4, 4, 4])) == 0\n  */\nconst sumOfFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += freq;\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < lst[minIndex]) {\n      minIndex = i;\n    }\n    if (lst[i] > lst[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(lst[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (minIndex == -1) {\n      minIndex = i;\n    }\n    if (maxIndex == -1) {\n      maxIndex = i;\n    }\n    if (lst[i] < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  if (sideA > sideB && sideA > sideC) {\n    return sideA * sideB * sideC;\n  } else if (sideB > sideC) {\n    return sideB * sideC * sideA;\n  } else {\n    return sideC * sideA * sideB;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const sideD = Math.abs(d);\n  if (sideA > sideB && sideA > sideC && sideA > sideD) {\n    return sideA * sideB * sideC * sideD;\n  } else if (sideB > sideC && sideB > sideD) {\n    return sideB * sideC * sideD * sideA;\n  } else if (sideC > sideD) {\n    return sideC * sideD * sideA * sideB;\n  } else {\n    return sideD * sideA * sideB * sideC;\n  }\n};\n\n/*\n  Given the lengths of three sides of a triangle, calculate the area of the triangle. Return the area rounded to 2 decimal point if the area is valid. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const sideD = Math.abs(d);\n  const sideE = Math.abs(e);\n  if (sideA > sideB && sideA > sideC && sideA > sideD && sideA > sideE) {\n    return sideA * sideB * sideC * sideD * sideE;\n  } else if (sideB > sideC && sideB > sideD && sideB > sideE) {\n    return sideB * sideC * sideD * side", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = w;\n  const maxSumOfElements = w;\n  const maxBalancingSum = w;\n  const maxBalancingSumOfElements = w;\n  const maxBalancingWeight = w;\n  const maxBalancingWeightOfElements = w;\n  const maxBalancingSumOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = w;\n  const maxBalancingSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return smallestChange(arr.slice(0, max) + [arr[max]] + arr.slice(min + 1, arr.length));\n  }\n  return smallestChange(arr.slice(0, min) + [arr[min]] + arr.slice(max + 1, arr.length));\n};\n\n/*\n  Given an array of integers, find the minimum number of moves to make that array palindromic. An array is palindromic if its elements are read the same forwards and backwards.\n\n  For example:\n  findPalindrome([1,2,3,4,5,6,7,8,9,10]) == 3\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 1\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 0\n  */\nconst findPalindrome = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return findPalindrome(arr.slice(0, max) + [arr[max]] + arr.slice(min + 1, arr.length));\n  }\n  return findPalindrome(arr.slice(0, min) + [arr[min]] + arr.slice(max + 1, arr.length));\n};\n\n/*\n  Given an array of integers, find the minimum number of moves to make that array palindromic. An array is palindromic if its elements are read the same forwards and backwards.\n\n  For example:\n  findPalindrome([1,2,3,4,5,6,7,8,9,10]) == 3\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 1\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 0\n  */\nconst findPalindrome = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return findPalindrome(arr.slice(0, max) + [arr[max]] + arr.slice(min + 1, arr.length));\n  }\n  return findPalindrome(arr.slice(0, min) + [arr[min]] + arr.slice(max + 1, arr.length));\n};\n\n/*\n  Given an array of integers, find the minimum number of moves to make that array palindromic. An array is palindromic if its elements are read the same forwards and backwards.\n\n  For example:\n  findPalindrome([1,2,3,4,5,6,7,8,9,10]) == 3\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 1\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 0\n  */\nconst findPalindrome = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return findPalindrome(arr.slice(0, max) + [arr[max]] + arr.slice(min + 1, arr.length));\n  }\n  return findPalindrome(arr.slice(0, min) + [arr[min]] + arr.slice(max + 1, arr.length));\n};\n\n/*\n  Given an array of integers, find the minimum number of moves to make that array palindromic. An array is palindromic if its elements are read the same forwards and backwards.\n\n  For example:\n  findPalindrome([1,2,3,4,5,6,7,8,9,10]) == 3\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 1\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 0\n  */\nconst findPalindrome = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return findPalindrome(arr.slice(0, max) + [arr[max]] + arr.slice(min + 1, arr.length));\n  }\n  return findPalindrome(arr.slice(0, min) + [arr[min]] + arr.slice(max + 1, arr.length));\n};\n\n/*\n  Given an array of integers, find the minimum number of moves to make that array palindromic. An array is palindromic if its elements are read the same forwards and backwards.\n\n  For example:\n  findPalindrome([1,2,3,4,5,6,7,8,9,10]) == 3\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 1\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 0\n  */\nconst findPalindrome = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return findPalindrome(arr.slice(0, max) + [arr[max]] + arr.slice(min + 1, arr.length));\n  }\n  return findPalindrome(arr.slice(0, min) + [arr[min]] + arr.slice(max + 1, arr.length));\n};\n\n/*\n  Given an array of integers, find the minimum number of moves to make that array palindromic. An array is palindromic if its elements are read the same forwards and backwards.\n\n  For example:\n  findPalindrome([1,2,3,4,5,6,7,8,9,10]) == 3\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 1\n  findPalindrome([1,2,3,4,5,6,7,8,9,10,1]) == 0\n  */\nconst findPalindrome = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return find", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let count = 0;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] === arr2[i]) {\n      count++;\n    } else {\n      break;\n    }\n  }\n  if (count === arr1.length) {\n    return arr1;\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr2[i] === arr1[i]) {\n      count--;\n    } else {\n      break;\n    }\n  }\n  if (count === 0) {\n    return arr2;\n  }\n  return arr3;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  count('hihihihihihihi') ➞ 6\n  count('hihihihihihihihi') ➞ 7\n  count('hihihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  count('hihihihihihihihihihi') ➞ 11\n  count('hihihihihihihihihihihi') ➞ 12\n  count('hihihihihihihihihihihihi') ➞ 13\n  count('hihihihihihihihihihihihi') ➞ 14\n  count('hihihihihihihihihihihihihi') ➞ 15\n  count('hihihihihihihihihihihihihihi') ➞ 16\n  count('hihihihihihihihihihihihihihihi') ➞ 17\n  count('hihihihihihihihihihihihihihihi') ➞ 18\n  count('hihihihihihihihihihihihihihihihi') ➞ 19\n  count('hihihihihihihihihihihihihihihihihi') ➞ 20\n  count('hihihihihihihihihihihihihihihihihihi') ➞ 21\n  count('hihihihihihihihihihihihihihihihihihihi') ➞ 22\n  count('hihihihihihihihihihihihihihihihihihihihi') ➞ 23\n  count('hihihihihihihihihihihihihihihihihihihihi') ➞ 24\n  count('hihihihihihihihihihihihihihihihihihihihihi') ➞ 25\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 26\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 27\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 28\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 29\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 30\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 31\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 32\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 33\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 34\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 35\n  count('hihihihihihihihihihihihihihihihihihihihihihi') ➞ 36\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 37\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 38\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 39\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 40\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 41\n  count('hihihihihihihihihihihihihihihihihihihihihihihi') ➞ 42\n  count('hihihihihihihihihihihihihihihihihihihihihihihihi') ➞ 43\n  count('hihihihihihihihihihihihihihihihihihihihihihihihi') ➞ 44\n  count('hihihihihihihihihihihihihihihihihihihihihihihihi') ➞ 45\n  count('hihihihihihihihihihihihihihihihihihihihihihihihi') ➞ 46", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 3; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your tasks is to write a function that returns true if a number is a perfect power of 2 and false in other case. x is a perfect power of 2 if 2**int=x\n  For example:\n  isPerfectPower(1) => true\n  isPerfectPower(2) => true\n  isPerfectPower(3) => true\n  isPerfectPower(4) => false\n  isPerfectPower(5) => false\n  isPerfectPower(6) => false\n  isPerfectPower(7) => false\n  isPerfectPower(8) => false\n  isPerfectPower(9) => false\n  isPerfectPower(10) => false\n  isPerfectPower(11) => false\n  isPerfectPower(12) => false\n  isPerfectPower(13) => false\n  isPerfectPower(14) => false\n  isPerfectPower(15) => false\n  isPerfectPower(16) => false\n  isPerfectPower(17) => false\n  isPerfectPower(18) => false\n  isPerfectPower(19) => false\n  isPerfectPower(20) => false\n  isPerfectPower(21) => false\n  isPerfectPower(22) => false\n  isPerfectPower(23) => false\n  isPerfectPower(24) => false\n  isPerfectPower(25) => false\n  isPerfectPower(26) => false\n  isPerfectPower(27) => false\n  isPerfectPower(28) => false\n  isPerfectPower(29) => false\n  isPerfectPower(30) => false\n  isPerfectPower(31) => false\n  isPerfectPower(32) => false\n  isPerfectPower(33) => false\n  isPerfectPower(34) => false\n  isPerfectPower(35) => false\n  isPerfectPower(36) => false\n  isPerfectPower(37) => false\n  isPerfectPower(38) => false\n  isPerfectPower(39) => false\n  isPerfectPower(40) => false\n  isPerfectPower(41) => false\n  isPerfectPower(42) => false\n  isPerfectPower(43) => false\n  isPerfectPower(44) => false\n  isPerfectPower(45) => false\n  isPerfectPower(46) => false\n  isPerfectPower(47) => false\n  isPerfectPower(48) => false\n  isPerfectPower(49) => false\n  isPerfectPower(50) => false\n  isPerfectPower(51) => false\n  isPerfectPower(52) => false\n  isPerfectPower(53) => false\n  isPerfectPower(54) => false\n  isPerfectPower(55) => false\n  isPerfectPower(56) => false\n  isPerfectPower(57) => false\n  isPerfectPower(58) => false\n  isPerfectPower(59) => false\n  isPerfectPower(60) => false\n  isPerfectPower(61) => false\n  isPerfectPower(62) => false\n  isPerfectPower(63) => false\n  isPerfectPower(64) => false\n  isPerfectPower(65) => false\n  isPerfectPower(66) => false\n  isPerfectPower(67) => false\n  isPerfectPower(68) => false\n  isPerfectPower(69) => false\n  isPerfectPower(70) => false\n  isPerfectPower(71) => false\n  isPerfectPower(72) => false\n  isPerfectPower(73) => false\n  isPerfectPower(74) => false\n  isPerfectPower(75) => false\n  isPerfectPower(76) => false\n  isPerfectPower(77) => false\n  isPerfectPower(78) => false\n  isPerfectPower(79) => false\n  isPerfectPower(80) => false\n  isPerfectPower(81) => false\n  isPerfectPower(82) => false\n  isPerfectPower(83) => false\n  isPerfectPower(84) => false\n  isPerfectPower(85) => false\n  isPerfectPower(86) => false\n  isPerfectPower(87) => false\n  isPerfectPower(88) => false\n  isPerfectPower(89) => false\n  isPerfectPower(90) => false\n  isPerfectPower(91) => false\n  isPerfectPower(92) => false\n  isPerfectPower(93) => false\n  isPerfectPower(94) => false\n  isPerfectPower(95) => false\n  isPerfectPower(96) => false\n  isPerfectPower(97) => false\n  isPerfectPower(98) => false\n  isPerfectPower(99) => false\n  isPerfectPower(100) => false\n  isPerfectPower(101) => false\n  isPerfectPower(102) => false\n  isPerfectPower(103) => false\n  isPerfectPower(104) => false\n  isPerfectPower(105) => false\n  isPerfectPower(106) => false\n  isPerfectPower(107) => false\n  isPerfectPower(108) => false\n  isPerfectPower(109) => false\n  isPerfectPower(110) => false\n  isPerfectPower(111) => false\n  isPerfectPower(112) => false\n  isPerfectPower(113) => false\n  isPerfectPower(114) => false\n  isPerfectPower(115) => false\n  isPerfectPower(116) => false\n  isPerfectPower(117) => false\n  isPerfectPower(118) => false\n  isPerfectPower(119) => false\n  isPerfectPower(120) => false\n  isPerfectPower(121) => false\n  isPerfectPower(122) => false\n  isPerfectPower(123) => false\n  isPerfectPower(124) => false\n  isPerfectPower(125) => false\n  isPerfectPower(126) => false\n  isPerfectPower(127) => false\n  isPerfectPower(128) => false\n  isPerfectPower(129) => false\n  isPerfectPower(130) => false\n  isPerfectPower(131) => false\n  isPerfectPower(132) => false\n  isPerfectPower(133) => false\n  isPerfectPower(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === 200", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexKey = 0;\n  for (let i = 0; i < hexNum.length; i++) {\n    if (hexNum.charCodeAt(i) >= 48 && hexNum.charCodeAt(i) <= 57) {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You had was task to writes a function that receives a string and returns a string that contains the characters of the string in reverse order. For example: if the input is \"hello\" the output should be \"olleh\". Notes: you may assume the input is always correct or emptiest string and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For str = \"hello\" the output should be \"olleh\".\n  For str = \"1077E\" the output should be \"E1077\".\n  For str = \"ABED1A33\" the output should be \"ED1A33AB\".\n  For str = \"123456789ABCDEF0\" the output should be \"ABCDEF01234567\".\n  For str = \"2020\" the output should be \"2020\".\n  */\nconst reverseString = (str) => {\n  let reverseStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reverseStr += str.charAt(i);\n  }\n  return reverseStr;\n};\n\n/*You had was task to writes a function that receives a string and returns a string that contains the characters of the string in reverse order and each character is surrounded by double quotes. For example: if the input is \"hello\" the output should be \"\\\"olleh\\\"\". Notes: you may assume the input is always correct or emptiest string and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For str = \"hello\" the output should be \"\\\"olleh\\\"\".\n  For str = \"1077E\" the output should be \"\\\"E1077\\\"\".\n  For str = \"ABED1A33\" the output should be \"\\\"ED1A33AB\\\"\".\n  For str = \"123456789ABCDEF0\" the output should be \"\\\"ABCDEF01234567\\\"\".\n  For str = \"2020\" the output should be \"\\\"2020\\\"\".\n  */\nconst doubleQuoteString = (str) => {\n  let doubleStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    doubleStr += \"\\\"\";\n    doubleStr += str.charAt(i);\n    doubleStr += \"\\\"\";\n  }\n  return doubleStr;\n};\n\n/*You had was task to writes a function that receives a string and returns a string that contains the characters of the string in reverse order and each character is surrounded by single quotes. For example: if the input is \"hello\" the output should be 'olleh'. Notes: you may assume the input is always correct or emptiest string and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For str = \"hello\" the output should be 'olleh'.\n  For str = \"1077E\" the output should be 'E1077'.\n  For str = \"ABED1A33\" the output should be 'ED1A33AB'.\n  For str = \"123456789ABCDEF0\" the output should be 'ABCDEF01234567'.\n  For str = \"2020\" the output should be '2020'.\n  */\nconst singleQuoteString = (str) => {\n  let singleStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    singleStr += \"'\";\n    singleStr += str.charAt(i);\n    singleStr += \"'\";\n  }\n  return singleStr;\n};\n\n/*You had was task to writes a function that receives a string and returns a string that contains the characters of the string in reverse order and each character is surrounded by double quotes and each character is surrounded by single quotes. For example: if the input is \"hello\" the output should be \"\\\"olleh\\\"\". Notes: you may assume the input is always correct or emptiest string and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For str = \"hello\" the output should be \"\\\"olleh\\\"\".\n  For str = \"1077E\" the output should be \"\\\"E1077\\\"\".\n  For str = \"ABED1A33\" the output should be \"\\\"ED1A33AB\\\"\".\n  For str = \"123456789ABCDEF0\" the output should be \"\\\"ABCDEF01234567\\\"\".\n  For str = \"2020\" the output should be \"\\\"2020\\\"\".\n  */\nconst doubleQuoteAndSingleQuoteString = (str) => {\n  let doubleStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    doubleStr += \"\\\"\";\n    doubleStr += str.charAt(i);\n    doubleStr += \"\\\"\";\n    singleStr += \"'\";\n    singleStr += str.charAt(i);\n    singleStr += \"'\";\n  }\n  return doubleStr + singleStr;\n};\n\n/*You had was task to writes a function that receives a string and returns a string that contains the characters of the string in reverse order and each character is surrounded by double quotes and each character is surrounded by single quotes. For example: if the input is \"hello\" the output should be \"\\\"olleh\\\"\". Notes: you may assume the input is always correct or emptiest string and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For str = \"hello\" the output should be \"\\\"olleh\\\"\".\n  For str = \"1077E\" the output should be \"\\\"E1077\\\"\".\n  For str = \"ABED1A33\" the output should be \"\\\"ED1A33AB\\\"\".\n  For str = \"123456789ABCDEF0\" the output should be \"\\\"ABCDEF01234567\\\"\".\n  For str = \"2020\" the output should be \"\\\"2020\\\"\".\n  */\nconst doubleQuoteAndSingleQuoteString2 = (str, doubleQuote, singleQuote) => {\n  let doubleStr = \"\";\n  let singleStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    doubleStr += doubleQuote + str.charAt(i) + doubleQuote;\n    singleStr += singleQuote + str.charAt(i) + singleQuote;\n  }\n  return doubleStr + singleStr;\n};\n\n/*You had was task to writes a function that receives a string and returns a string that contains the characters of the string in reverse order and each character is surrounded by double quotes and each character is surrounded by single quotes. For example: if the input is \"hello\" the output should be \"\\\"olleh\\\"\". Notes: you may assume the input is always correct or emptiest string and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For str = \"hello\" the output should be \"\\\"olleh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal = decimal - 1;\n  }\n  return binary + 'db' + decimalToBinary(decimal);\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The function should take a string with each character representing a binary number and return a number in decimal form. The function should return 0 if there is no binary number in the string.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary number. The function should take a string with each character representing a decimal number and return a string with each character representing a binary number. The function should return an empty string if there is no decimal number in the string.\n\n  Examples:\n  decimalToBinary(\"15\")   # returns \"1111\"\n  decimalToBinary(\"32\")   # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal = decimal - 1;\n  }\n  return binary + 'db' + decimalToBinary(decimal);\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal number. The function should take a string with each character representing a decimal number and return a string with each character representing a hexadecimal number. The function should return an empty string if there is no decimal number in the string.\n\n  Examples:\n  decimalToHexadecimal(\"15\")   # returns \"f1\"\n  decimalToHexadecimal(\"32\")   # returns \"40\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  while (decimal > 0) {\n    hexadecimal = hexadecimal === '0'? '1' : '0';\n    decimal = decimal - 1;\n  }\n  return hexadecimal + '' + decimalToHexadecimal(decimal);\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal number. The function should take a string with each character representing a hexadecimal number and return a string with each character representing a decimal number. The function should return 0 if there is no hexadecimal number in the string.\n\n  Examples:\n  hexadecimalToDecimal(\"f1\")   # returns 15\n  hexadecimalToDecimal(\"40\")   # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    decimal = decimal + parseInt(hexadecimal[i], 16);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a binary number to hexadecimal number. The function should take a string with each character representing a binary number and return a string with each character representing a hexadecimal number. The function should return an empty string if there is no binary number in the string.\n\n  Examples:\n  binaryToHexadecimal(\"1111\")   # returns \"f1\"\n  binaryToHexadecimal(\"100000\")   # returns \"40\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal === '0'? '1' : '0';\n    binary = binary.replace(/0/, '1');\n    binary = binary.replace(/1/, '0');\n  }\n  return hexadecimal + '' + binaryToHexadecimal(binary);\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary number. The function should take a string with each character representing a hexadecimal number and return a string with each character representing a binary number. The function should return an empty string if there is no hexadecimal number in the string.\n\n  Examples:\n  hexadecimalToBinary(\"f1\")   # returns \"1111\"\n  hexadecimalToBinary(\"40\")   # returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    binary = binary === '0'? '1' : '0';\n    hexadecimal = hexadecimal.replace(/^0/, '1');\n    hexadecimal = hexadecimal.replace(/^1/, '0');\n  }\n  return binary + '' + hexadecimalToBinary(hexadecimal);\n};\n\n/*\n  Write a function that will convert a binary number to octal number. The function should take a string with each character representing a binary number and return a string with each character representing an octal number. The function should return an empty string if there is no binary number in the string.\n\n  Examples:\n  binaryToOctal(\"1111\")   # returns \"111\"\n  binaryToOctal(\"100000\")   # returns \"1000\"\n  */\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal === '0'? '7' : '0';\n    binary = binary.replace(/0/, '7');\n    binary = binary.replace(/1/, '6');\n  }\n  return octal + '' + binaryToOctal(binary);\n};\n\n/*\n  Write a function that will convert an octal number to binary number. The function should take a string with each character representing an octal number and return a string with each character representing a binary number. The function should return an empty string if there is no octal number in the string.\n\n  Examples:\n  octalToBinary(\"111\")   # returns \"1111\"\n  octalToBinary(\"1000\")   # returns \"100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  for (let i = 0; i < octal.length; i++) {\n    binary = binary === '0'? '1' : '0';\n    octal = octal.replace(/^0/, '1');\n    octal = octal.replace(/^7/, '0');\n  }\n  return binary + '' + octalToBinary(octal);\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal number. The function should take a string with each character representing a decimal number and return a string with each character representing a hexadecimal number. The function should return an empty string if there is no decimal number in the string.\n\n  Examples:\n  decimalToHexadecimal(\"15\")   # returns \"f1\"\n  decimalToHexadecimal(\"32\")   # returns \"40\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  while (decimal > 0) {\n    hexadecimal = hexadecimal === '0'? '1' : '0';\n    decimal = decimal - 1;\n  }\n  return hexadecimal + '' + decimalToHexadecimal(decimal);\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal number. The function should take a string with each character representing a hexadecimal number and return a string with each character representing a decimal number. The function should return 0 if there is no hexadecimal number in the string.\n\n  Examples:\n  hexadecimalToDecimal(\"f1\")   # returns 15\n  hexadecimalToDecimal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const set = new Set();\n  for (let i = 0; i < s.length; i += 1) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade * 1.0);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesDiff = gradesSum - gradesAvg;\n  const gradesDiffArray = gradesDiff.map((grade) => grade * 1.0);\n  const gradesDiffSum = gradesDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffAvg = gradesDiffSum / gradesDiffArray.length;\n  const gradesDiffDiff = gradesDiffSum - gradesDiffAvg;\n  const gradesDiffDiffArray = gradesDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffSum = gradesDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffAvg = gradesDiffDiffSum / gradesDiffDiffArray.length;\n  const gradesDiffDiffDiffArray = gradesDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffSum = gradesDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffAvg = gradesDiffDiffDiffSum / gradesDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffArray = gradesDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * 1.0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiff", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0' && string[i]!== '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only numbers or false otherwise\n  Examples\n  numberOnly('Hello') == true\n  numberOnly('abcdcba') == false\n  numberOnly('kittens') == false\n  numberOnly('orange') == false\n  */\nconst numberOnly = (string) => {\n  let onlyNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0' && string[i]!== '1') {\n      onlyNumbers = false;\n      break;\n    }\n  }\n  return onlyNumbers;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == false\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let onlyUppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A') {\n      onlyUppercase = false;\n      break;\n    }\n  }\n  return onlyUppercase;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only lowercase letters or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == false\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let onlyLowercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A') {\n      onlyLowercase = false;\n      break;\n    }\n  }\n  return onlyLowercase;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOnly('Hello') == true\n  letterOnly('abcdcba') == false\n  letterOnly('kittens') == false\n  letterOnly('orange') == false\n  */\nconst letterOnly = (string) => {\n  let onlyLetters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A') {\n      onlyLetters = false;\n      break;\n    }\n  }\n  return onlyLetters;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOrNumber('Hello') == true\n  letterOrNumber('abcdcba') == true\n  letterOrNumber('kittens') == true\n  letterOrNumber('orange') == false\n  */\nconst letterOrNumber = (string) => {\n  let letterOrNumber = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== '0' && string[i]!== '1') {\n      letterOrNumber = false;\n      break;\n    }\n  }\n  return letterOrNumber;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOrNumber('Hello') == true\n  letterOrNumber('abcdcba') == true\n  letterOrNumber('kittens') == true\n  letterOrNumber('orange') == false\n  */\nconst letterOrNumberOrSpace = (string) => {\n  let letterOrNumberOrSpace = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== '0' && string[i]!== '1' && string[i]!=='') {\n      letterOrNumberOrSpace = false;\n      break;\n    }\n  }\n  return letterOrNumberOrSpace;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOrNumberOrSpace('Hello') == true\n  letterOrNumberOrSpace('abcdcba') == true\n  letterOrNumberOrSpace('kittens') == true\n  letterOrNumberOrSpace('orange') == false\n  */\nconst letterOrNumberOrSpaceOrNumbers = (string) => {\n  let letterOrNumberOrSpaceOrNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== '0' && string[i]!== '1' && string[i]!=='' && string[i]!== '0') {\n      letterOrNumberOrSpaceOrNumbers = false;\n      break;\n    }\n  }\n  return letterOrNumberOrSpaceOrNumbers;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOrNumberOrSpaceOrNumbers('Hello') == true\n  letterOrNumberOrSpaceOrNumbers('abcdcba') == true\n  letterOrNumberOrSpaceOrNumbers('kittens') == true\n  letterOrNumberOrSpaceOrNumbers('orange') == false\n  */\nconst letterOrNumberOrSpaceOrNumbersOrNumbers = (string) => {\n  let letterOrNumberOrSpaceOrNumbersOrNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== '0' && string[i]!== '1' && string[i]!=='' && string[i]!== '0' && string[i]!== '0') {\n      letterOrNumberOrSpaceOrNumbersOrNumbers = false;\n      break;\n    }\n  }\n  return letterOrNumberOrSpaceOrNumbersOrNumbers;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOrNumberOrSpaceOrNumbersOrNumbers('Hello') == true\n  letterOrNumberOrSpaceOrNumbersOrNumbers('abcdcba') == true\n  letterOrNumberOrSpaceOrNumbersOrNumbers('kittens') == true\n  letterOrNumberOrSpaceOrNumbersOrNumbers('orange') == false\n  */\nconst letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers = (string) => {\n  let letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== '0' && string[i]!== '1' && string[i]!=='' && string[i]!== '0' && string[i]!== '0' && string[i]!== '0') {\n      letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers = false;\n      break;\n    }\n  }\n  return letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers('Hello') == true\n  letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers('abcdcba') == true\n  letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers('kittens') == true\n  letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbers('orange') == false\n  */\nconst letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbersOrNumbers = (string) => {\n  let letterOrNumberOrSpaceOrNumbersOrNumbersOrNumbersOrNumbers = true;\n  for (let i = 0; i < string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (i === 0 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (i === 0 || i ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let sumOfDigit = 0;\n  let binaryNumber = '';\n  while (N > 0) {\n    sum += N % 10;\n    sumOfDigit += N % 10;\n    N = Math.floor(N / 10);\n  }\n  binaryNumber = sumOfDigit + sum;\n  return binaryNumber;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    for (let j = 0; j < newWord.length; j++) {\n      if (newWord[j] ==='') {\n        newWords[j] = newWord.slice(0, j) + newWord.slice(j + 1);\n        break;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  lst.forEach((row, i) => {\n    row.forEach((col, j) => {\n      if (j === x) {\n        res.push([i, j]);\n      }\n    });\n  });\n  return res.sort((a, b) => a[0] - b[0]).sort((a, b) => a[1] - b[1]);\n};\n\n/*\n  You was given a list of lists, each list contains integers starting from 0 to n-1. Gives lst, a nested list, where each row contains integers starting from 0 to n-1. Sorts rows in ascends order. Also, sorts columns in descends order.\n  \n  Examples:\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]] ==\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]\n  [[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => a - b);\n  } else {\n    sortedArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => a - b);\n  } else {\n    sortedArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscAsc([]) => []\n  * sortArrayAscAsc([5]) => [5]\n  * sortArrayAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscAsc = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscDesc([]) => []\n  * sortArrayAscDesc([5]) => [5]\n  * sortArrayAscDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscDesc = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => a - b);\n  } else {\n    sortedArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDescAsc([]) => []\n  * sortArrayDescAsc([5]) => [5]\n  * sortArrayDescAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDescAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescAsc = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => b - a);\n  } else {\n    sortedArray.sort((a, b) => a - b);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDescDesc([]) => []\n  * sortArrayDescDesc([5]) => [5]\n  * sortArrayDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  let sum = 0;\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    sortedArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => a - b);\n  } else {\n    sortedArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscAscAsc([]) => []\n  * sortArrayAscAscAsc([5]) => [5]\n  * sortArrayAscAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscAscAsc = (array) => {\n  let sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = alphabet.split('')\n  let newAlphabet2 = alphabet.split('')\n  let newAlphabet3 = alphabet.split('')\n  let newAlphabet4 = alphabet.split('')\n  let newAlphabet5 = alphabet.split('')\n  let newAlphabet6 = alphabet.split('')\n  let newAlphabet7 = alphabet.split('')\n  let newAlphabet8 = alphabet.split('')\n  let newAlphabet9 = alphabet.split('')\n  let newAlphabet10 = alphabet.split('')\n  let newAlphabet11 = alphabet.split('')\n  let newAlphabet12 = alphabet.split('')\n  let newAlphabet13 = alphabet.split('')\n  let newAlphabet14 = alphabet.split('')\n  let newAlphabet15 = alphabet.split('')\n  let newAlphabet16 = alphabet.split('')\n  let newAlphabet17 = alphabet.split('')\n  let newAlphabet18 = alphabet.split('')\n  let newAlphabet19 = alphabet.split('')\n  let newAlphabet20 = alphabet.split('')\n  let newAlphabet21 = alphabet.split('')\n  let newAlphabet22 = alphabet.split('')\n  let newAlphabet23 = alphabet.split('')\n  let newAlphabet24 = alphabet.split('')\n  let newAlphabet25 = alphabet.split('')\n  let newAlphabet26 = alphabet.split('')\n  let newAlphabet27 = alphabet.split('')\n  let newAlphabet28 = alphabet.split('')\n  let newAlphabet29 = alphabet.split('')\n  let newAlphabet30 = alphabet.split('')\n  let newAlphabet31 = alphabet.split('')\n  let newAlphabet32 = alphabet.split('')\n  let newAlphabet33 = alphabet.split('')\n  let newAlphabet34 = alphabet.split('')\n  let newAlphabet35 = alphabet.split('')\n  let newAlphabet36 = alphabet.split('')\n  let newAlphabet37 = alphabet.split('')\n  let newAlphabet38 = alphabet.split('')\n  let newAlphabet39 = alphabet.split('')\n  let newAlphabet40 = alphabet.split('')\n  let newAlphabet41 = alphabet.split('')\n  let newAlphabet42 = alphabet.split('')\n  let newAlphabet43 = alphabet.split('')\n  let newAlphabet44 = alphabet.split('')\n  let newAlphabet45 = alphabet.split('')\n  let newAlphabet46 = alphabet.split('')\n  let newAlphabet47 = alphabet.split('')\n  let newAlphabet48 = alphabet.split('')\n  let newAlphabet49 = alphabet.split('')\n  let newAlphabet50 = alphabet.split('')\n  let newAlphabet51 = alphabet.split('')\n  let newAlphabet52 = alphabet.split('')\n  let newAlphabet53 = alphabet.split('')\n  let newAlphabet54 = alphabet.split('')\n  let newAlphabet55 = alphabet.split('')\n  let newAlphabet56 = alphabet.split('')\n  let newAlphabet57 = alphabet.split('')\n  let newAlphabet58 = alphabet.split('')\n  let newAlphabet59 = alphabet.split('')\n  let newAlphabet60 = alphabet.split('')\n  let newAlphabet61 = alphabet.split('')\n  let newAlphabet62 = alphabet.split('')\n  let newAlphabet63 = alphabet.split('')\n  let newAlphabet64 = alphabet.split('')\n  let newAlphabet65 = alphabet.split('')\n  let newAlphabet66 = alphabet.split('')\n  let newAlphabet67 = alphabet.split('')\n  let newAlphabet68 = alphabet.split('')\n  let newAlphabet69 = alphabet.split('')\n  let newAlphabet70 = alphabet.split('')\n  let newAlphabet71 = alphabet.split('')\n  let newAlphabet72 = alphabet.split('')\n  let newAlphabet73 = alphabet.split('')\n  let newAlphabet74 = alphabet.split('')\n  let newAlphabet75 = alphabet.split('')\n  let newAlphabet76 = alphabet.split('')\n  let newAlphabet77 = alphabet.split('')\n  let newAlphabet78 = alphabet.split('')\n  let newAlphabet79 = alphabet.split('')\n  let newAlphabet80 = alphabet.split('')\n  let newAlphabet81 = alphabet.split('')\n  let newAlphabet82 = alphabet.split('')\n  let newAlphabet83 = alphabet.split('')\n  let newAlphabet84 = alphabet.split('')\n  let newAlphabet85 = alphabet.split('')\n  let newAlphabet86 = alphabet.split('')\n  let newAlphabet87 = alphabet.split('')\n  let newAlphabet88 = alphabet.split('')\n  let newAlphabet89 = alphabet.split('')\n  let newAlphabet90 = alphabet.split('')\n  let newAlphabet91 = alphabet.split('')\n  let newAlphabet92 = alphabet.split('')\n  let newAlphabet93 = alphabet.split('')\n  let newAlphabet94 = alphabet.split('')\n  let newAlphabet95 = alphabet.split('')\n  let newAlphabet96 = alphabet.split('')\n  let newAlphabet97 = alphabet.split('')\n  let newAlphabet98 = alphabet.split('')\n  let newAlphabet99 = alphabet.split('')\n  let newAlphabet100 = alphabet.split('')\n  let newAlphabet101 = alphabet.split('')\n  let newAlphabet102 = alphabet.split('')\n  let newAlphabet103 = alphabet.split('')\n  let newAlphabet104 = alphabet.split('')\n  let newAlphabet105 = alphabet.split('')\n  let newAlphabet106 = alphabet.split('')\n  let newAlphabet107 = alphabet.split('')\n  let newAlphabet108 = alphabet.split('')\n  let newAlphabet109 = alphabet.split('')\n  let newAlphabet110 = alphabet.split('')\n  let newAlphabet111 = alphabet.split('')\n  let newAlphabet112 = alphabet.split('')\n  let newAlphabet113 = alphabet.split('')\n  let newAlphabet114 = alphabet.split('')\n  let newAlphabet115 = alphabet.split('')\n  let newAlphabet116 = alphabet.split('')\n  let newAlphabet117 = alphabet.split('')\n  let newAlphabet118 = alphabet.split('')\n  let newAlphabet119 = alphabet.split('')\n  let newAlphabet120 = alphabet.split('')\n  let newAlphabet121 = alphabet.split('')\n  let newAlphabet122 = alphabet.split('')\n  let newAlphabet123 = alphabet.split('')\n  let newAlphabet124 = alphabet.split('')\n  let newAlphabet125 = alphabet.split('')\n  let newAlphabet126 = alphabet.split('')\n  let newAlphabet127 = alphabet.split('')\n  let newAlphabet128 = alphabet.split('')\n  let newAlphabet129 = alphabet.split('')\n  let newAlphabet130 = alphabet.split('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling sums finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling averages finds until gives moment in the sequences.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5, 3, 3]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === Math.sqrt(sum / count)) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === Math.sqrt(sum / count)) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === Math.sqrt(sum / count)) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === Math.sqrt(sum / count)) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum / count) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === Math.sqrt(sum / count)) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5, 0.5, 1.5, 0.5, 1.5]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  if (lst.length < 2) return null\n  let smallest = lst[0]\n  let secondSmallest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest\n      smallest = lst[i]\n    } else if (lst[i] > smallest) {\n      secondSmallest = lst[i]\n    }\n  }\n  return secondSmallest\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 5 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  if (lst.length < 2) return null\n  let largest = lst[0]\n  let secondLargest = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      secondLargest = largest\n      largest = lst[i]\n    } else if (lst[i] < largest) {\n      secondLargest = lst[i]\n    }\n  }\n  return secondLargest\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEven() that returning the 2nd even elements of the list.\n Return null if there is no such elements. nextEven([1, 2, 3, 4, 5]) == 2 nextEven([5, 1, 4, 3, 2]) == 2 nextEven([]) == null nextEven([1, 1]) == null */ const nextEven = (lst) => {\n  if (lst.length < 2) return null\n  let even = lst[0]\n  let secondEven = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      secondEven = even\n      even = lst[i]\n    } else if (lst[i] % 2!== 0) {\n      secondEven = lst[i]\n    }\n  }\n  return secondEven\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextOdd() that returning the 2nd odd elements of the list.\n Return null if there is no such elements. nextOdd([1, 2, 3, 4, 5]) == 2 nextOdd([5, 1, 4, 3, 2]) == 2 nextOdd([]) == null nextOdd([1, 1]) == null */ const nextOdd = (lst) => {\n  if (lst.length < 2) return null\n  let odd = lst[0]\n  let secondOdd = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      secondOdd = odd\n      odd = lst[i]\n    } else if (lst[i] % 2!== 0) {\n      secondOdd = lst[i]\n    }\n  }\n  return secondOdd\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEvenOdd() that returning the 2nd even and odd elements of the list.\n Return null if there is no such elements. nextEvenOdd([1, 2, 3, 4, 5]) == 2 nextEvenOdd([5, 1, 4, 3, 2]) == 2 nextEvenOdd([]) == null nextEvenOdd([1, 1]) == null */ const nextEvenOdd = (lst) => {\n  if (lst.length < 2) return null\n  let even = lst[0]\n  let odd = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i]\n    } else if (lst[i] % 2 === 1) {\n      odd = lst[i]\n    }\n  }\n  return { even, odd }\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEvenOddSum() that returning the sum of even and odd elements of the list.\n Return null if there is no such elements. nextEvenOddSum([1, 2, 3, 4, 5]) == 7 nextEvenOddSum([5, 1, 4, 3, 2]) == 7 nextEvenOddSum([]) == null nextEvenOddSum([1, 1]) == null */ const nextEvenOddSum = (lst) => {\n  if (lst.length < 2) return null\n  let even = lst[0]\n  let odd = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i]\n    } else if (lst[i] % 2 === 1) {\n      odd = lst[i]\n    }\n  }\n  return even + odd\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEvenOddProduct() that returning the product of even and odd elements of the list.\n Return null if there is no such elements. nextEvenOddProduct([1, 2, 3, 4, 5]) == 30 nextEvenOddProduct([5, 1, 4, 3, 2]) == 30 nextEvenOddProduct([]) == null nextEvenOddProduct([1, 1]) == null */ const nextEvenOddProduct = (lst) => {\n  if (lst.length < 2) return null\n  let even = lst[0]\n  let odd = lst[1]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i]\n    } else if (lst[i] % 2 === 1) {\n      odd = lst[i]\n    }\n  }\n  return even * odd\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEvenOddSumProduct() that returning the sum of even and odd elements of the list multiplied by the product of even and odd elements of the list.\n Return null if there is no such elements. nextEvenOddSumProduct([1, 2, 3, 4, 5]) == 30 nextEvenOddSumProduct([5, 1, 4, 3, 2]) == 30 nextEvenOddSumProduct([]) == null nextEvenOddSumProduct([1, 1]) == null */ const nextEvenOddSumProduct = (lst) => {\n  if (lst.length < 2) return null\n  let even = lst[0]\n  let odd = lst[1]\n  let product = lst[2]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i]\n    } else if (lst[i] % 2 === 1) {\n      odd = lst[i]\n    }\n  }\n  return even + odd * product\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEvenOddProductSum() that returning the product of even and odd elements of the list multiplied by the sum of even and odd elements of the list.\n Return null if there is no such elements. nextEvenOddProductSum([1, 2, 3, 4, 5]) == 30 nextEvenOddProductSum([5, 1, 4, 3, 2]) == 30 nextEvenOddProductSum([]) == null nextEvenOddProductSum([1, 1]) == null */ const nextEvenOddProductSum = (lst) => {\n  if (lst.length < 2) return null\n  let even = lst[0]\n  let odd = lst[1]\n  let sum = lst[2]\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even = lst[i]\n    } else if (lst[i] % 2 === 1) {\n      odd = lst[i]\n    }\n  }\n  return even * odd * sum\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextEvenOddProductProduct() that returning the product of even and odd elements of the list multiplied by the product of even and odd elements of the list.\n Return null if there is no such elements. nextEvenOddProductProduct([1, 2, 3, 4, 5]) == 30 nextEvenOddProductProduct([5, 1, 4, 3, 2]) == 30 nextEvenOddProductProduct([]) == null nextEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  if (x > y && x > z) return false\n  if (y > x && y > z) return false\n  if (z > x && z > y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const encodedLetter = swapCase(letter);\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n};\n\n/*\n  Decodes a function that takes a message and encodes it in a way that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  >>> decode('TGST')\n  'test'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    const decodedLetter = replaceVowel(letter);\n    decodedMessage += decodedLetter;\n  }\n  return decodedMessage;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('This is a message')\n  True\n  >>> isValid('This is a message')\n  False\n  */\nconst isValid = (message) => {\n  const letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (letter!== letter.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if a message is valid or not. Assume only letters. Examples:\n  >>> isValid('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let currentNumber = lst[i];\n    let currentPrime = primes[currentNumber];\n    if (currentPrime > largestPrime) {\n      largestPrime = currentPrime;\n    }\n    for (let j = currentPrime; j < largestPrime; j++) {\n      sum += j % 10 || 0;\n    }\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let currentNumber = lst[i];\n    let currentPrime = primes[currentNumber];\n    if (currentPrime > largestPrime) {\n      largestPrime = currentPrime;\n    }\n    for (let j = currentPrime; j < largestPrime; j++) {\n      sum += j % 10 || 0;\n    }\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let currentNumber = lst[i];\n    let currentPrime = primes[currentNumber];\n    if (currentPrime > largestPrime) {\n      largestPrime = currentPrime;\n    }\n    for (let j = currentPrime; j < largestPrime; j++) {\n      sum += j % 10 || 0;\n    }\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let currentNumber = lst[i];\n    let currentPrime = primes[currentNumber];\n    if (currentPrime > largestPrime) {\n      largestPrime = currentPrime;\n    }\n    for (let j = currentPrime; j < largestPrime; j++) {\n      sum += j % 10 || 0;\n    }\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let currentNumber = lst[i];\n    let currentPrime = primes[currentNumber];\n    if (currentPrime > largestPrime) {\n      largestPrime = currentPrime;\n    }\n    for (let j = currentPrime; j < largestPrime; j++) {\n      sum += j % 10 || 0;\n    }\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isString = false;\n      break;\n    }\n  }\n  if (isString) {\n    return true;\n  } else {\n    let isStringUpper = true;\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof dict[keys[i]]!== \"string\") {\n        isStringUpper = false;\n        break;\n      }\n    }\n    return isStringUpper;\n  }\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseLower = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isString = false;\n      break;\n    }\n  }\n  if (isString) {\n    return true;\n  } else {\n    let isStringUpper = true;\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof dict[keys[i]]!== \"string\") {\n        isStringUpper = false;\n        break;\n      }\n    }\n    return!isStringUpper;\n  }\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCaseLower({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseLower({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseLower({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseLower({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseLower({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseUpper = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isString = false;\n      break;\n    }\n  }\n  if (isString) {\n    return true;\n  } else {\n    let isStringUpper = true;\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof dict[keys[i]]!== \"string\") {\n        isStringUpper = false;\n        break;\n      }\n    }\n    return!isStringUpper;\n  }\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCaseUpper({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseUpper({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseUpper({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseUpper({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseUpper({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseLower = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isString = false;\n      break;\n    }\n  }\n  if (isString) {\n    return true;\n  } else {\n    let isStringUpper = true;\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof dict[keys[i]]!== \"string\") {\n        isStringUpper = false;\n        break;\n      }\n    }\n    return!isStringUpper;\n  }\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCaseUpper({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseUpper({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseUpper({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseUpper({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseUpper({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseUpper = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isString = false;\n      break;\n    }\n  }\n  if (isString) {\n    return true;\n  } else {\n    let isStringUpper = true;\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof dict[keys[i]]!== \"string\") {\n        isStringUpper = false;\n        break;\n      }\n    }\n    return!isStringUpper;\n  }\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCaseUpper({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseUpper({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseUpper({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseUpper({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseUpper({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseUpper = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      isString = false;\n      break;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst primesLessThan = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning an array of the numbers that was prime numbers and less than n.\n  for example:\n  primesLessThan(5) => [2,3,5]\n  primesLessThan(11) => [2,3,5,7]\n  primesLessThan(0) => []\n  primesLessThan(20) => [2,3,5,7,11,13,17,19]\n  primesLessThan(1) => []\n  primesLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  let unitDigit = 0;\n  let unitDigit2 = 0;\n  let unitDigit3 = 0;\n  let unitDigit4 = 0;\n  let unitDigit5 = 0;\n  let unitDigit6 = 0;\n  let unitDigit7 = 0;\n  let unitDigit8 = 0;\n  let unitDigit9 = 0;\n  let unitDigit10 = 0;\n  let unitDigit11 = 0;\n  let unitDigit12 = 0;\n  let unitDigit13 = 0;\n  let unitDigit14 = 0;\n  let unitDigit15 = 0;\n  let unitDigit16 = 0;\n  let unitDigit17 = 0;\n  let unitDigit18 = 0;\n  let unitDigit19 = 0;\n  let unitDigit20 = 0;\n  let unitDigit21 = 0;\n  let unitDigit22 = 0;\n  let unitDigit23 = 0;\n  let unitDigit24 = 0;\n  let unitDigit25 = 0;\n  let unitDigit26 = 0;\n  let unitDigit27 = 0;\n  let unitDigit28 = 0;\n  let unitDigit29 = 0;\n  let unitDigit30 = 0;\n  let unitDigit31 = 0;\n  let unitDigit32 = 0;\n  let unitDigit33 = 0;\n  let unitDigit34 = 0;\n  let unitDigit35 = 0;\n  let unitDigit36 = 0;\n  let unitDigit37 = 0;\n  let unitDigit38 = 0;\n  let unitDigit39 = 0;\n  let unitDigit40 = 0;\n  let unitDigit41 = 0;\n  let unitDigit42 = 0;\n  let unitDigit43 = 0;\n  let unitDigit44 = 0;\n  let unitDigit45 = 0;\n  let unitDigit46 = 0;\n  let unitDigit47 = 0;\n  let unitDigit48 = 0;\n  let unitDigit49 = 0;\n  let unitDigit50 = 0;\n  let unitDigit51 = 0;\n  let unitDigit52 = 0;\n  let unitDigit53 = 0;\n  let unitDigit54 = 0;\n  let unitDigit55 = 0;\n  let unitDigit56 = 0;\n  let unitDigit57 = 0;\n  let unitDigit58 = 0;\n  let unitDigit59 = 0;\n  let unitDigit60 = 0;\n  let unitDigit61 = 0;\n  let unitDigit62 = 0;\n  let unitDigit63 = 0;\n  let unitDigit64 = 0;\n  let unitDigit65 = 0;\n  let unitDigit66 = 0;\n  let unitDigit67 = 0;\n  let unitDigit68 = 0;\n  let unitDigit69 = 0;\n  let unitDigit70 = 0;\n  let unitDigit71 = 0;\n  let unitDigit72 = 0;\n  let unitDigit73 = 0;\n  let unitDigit74 = 0;\n  let unitDigit75 = 0;\n  let unitDigit76 = 0;\n  let unitDigit77 = 0;\n  let unitDigit78 = 0;\n  let unitDigit79 = 0;\n  let unitDigit80 = 0;\n  let unitDigit81 = 0;\n  let unitDigit82 = 0;\n  let unitDigit83 = 0;\n  let unitDigit84 = 0;\n  let unitDigit85 = 0;\n  let unitDigit86 = 0;\n  let unitDigit87 = 0;\n  let unitDigit88 = 0;\n  let unitDigit89 = 0;\n  let unitDigit90 = 0;\n  let unitDigit91 = 0;\n  let unitDigit92 = 0;\n  let unitDigit93 = 0;\n  let unitDigit94 = 0;\n  let unitDigit95 = 0;\n  let unitDigit96 = 0;\n  let unitDigit97 = 0;\n  let unitDigit98 = 0;\n  let unitDigit99 = 0;\n  let unitDigit100 = 0;\n  let unitDigit101 = 0;\n  let unitDigit102 = 0;\n  let unitDigit103 = 0;\n  let unitDigit104 = 0;\n  let unitDigit105 = 0;\n  let unitDigit106 = 0;\n  let unitDigit107 = 0;\n  let unitDigit108 = 0;\n  let unitDigit109 = 0;\n  let unitDigit110 = 0;\n  let unitDigit111 = 0;\n  let unitDigit112 = 0;\n  let unitDigit113 = 0;\n  let unitDigit114 = 0;\n  let unitDigit115 = 0;\n  let unitDigit116 = 0;\n  let unitDigit117 = 0;\n  let unitDigit118 = 0;\n  let unitDigit119 = 0;\n  let unitDigit120 = 0;\n  let unitDigit121 = 0;\n  let unitDigit122 = 0;\n  let unitDigit123 = 0;\n  let unitDigit124 = 0;\n  let unitDigit125 = 0;\n  let unitDigit126 = 0;\n  let unitDigit127 = 0;\n  let unitDigit128 = 0;\n  let unitDigit129 = 0;\n  let unitDigit130 = 0;\n  let unitDigit131 = 0;\n  let unitDigit132 = 0;\n  let unitDigit133 = 0;\n  let unitDigit134 = 0;\n  let unitDigit135 = 0;\n  let unitDigit136 = 0;\n  let unitDigit137 = 0;\n  let unitDigit138 = 0;\n  let unitDigit139 = 0;\n  let unitDigit140 = 0;\n  let unitDigit141 = 0;\n  let unitDigit142 = 0;\n  let unitDigit143 = 0;\n  let unitDigit144 = 0;\n  let unitDigit145 = 0;\n  let unitDigit146 = 0;\n  let unitDigit147 = 0;\n  let unitDigit148 = 0;\n  let unitDigit149 = 0;\n  let unitDigit150 = 0;\n  let unitDigit151 = 0;\n  let unitDigit152 = 0;\n  let unitDigit153 = 0;\n  let unitDigit154 = 0;\n  let unitDigit155 = 0;\n  let unitDigit156 = 0;\n  let unitDigit157 = 0;\n  let unitDigit158 = 0;\n  let unitDigit159 = 0;\n  let unitDigit160 = 0;\n  let unitDigit161 = 0;\n  let unitDigit162 = 0;\n  let unitDigit163 = 0;\n  let unitDigit164 = 0;\n  let unitDigit165 = 0;\n  let unitDigit166 = 0;\n  let unitDigit167 = 0;\n  let unitDigit168 = 0;\n  let unitDigit169 = 0;\n  let unitDigit170 = 0;\n  let unitDigit171 = 0;\n  let unitDigit172 = 0;\n  let unitDigit173 = 0;\n  let unitDigit174 = 0;\n  let unitDigit175 = 0;\n  let unitDigit176 = 0;\n  let unitDigit177 = 0;\n  let unitDigit178 = 0;\n  let unitDigit179 = 0;\n  let unitDigit180 = 0;\n  let unitDigit181 = 0;\n  let unitDigit182 = 0;\n  let unitDigit183 = 0;\n  let unitDigit184 = 0;\n  let unitDigit185 = 0;\n  let unitDigit186 = 0;\n  let unitDigit187 = 0;\n  let unitDigit188 = 0;\n  let unitDigit189 = 0;\n  let unitDigit190 = 0;\n  let unitDigit191 = 0;\n  let unitDigit192 = 0;\n  let unitDigit193 = 0;\n  let unitDigit194 = 0;\n  let unitDigit195 = 0;\n  let unitDigit196 = 0;\n  let unitDigit197 = 0;\n  let unitDigit198 = 0;\n  let unitDigit199 = 0;\n  let unitDigit200 = 0;\n  let unitDigit201 = 0;\n  let unitDigit202 = 0;\n  let unitDigit203 = 0;\n  let unitDigit204 = 0;\n  let unitDigit205 = 0;\n  let unitDigit206 = 0;\n  let unitDigit207 = 0;\n  let unitDigit208 = 0;\n  let unitDigit209 = 0;\n  let unitDigit210 = 0;\n  let unitDigit211 = 0;\n  let unitDigit212 = 0;\n  let unitDigit213 = 0;\n  let unitDigit214 = 0;\n  let unitDigit215 = 0;\n  let unitDigit216 = 0;\n  let unitDigit217 = 0;\n  let unitDigit218 = 0;\n  let unitDigit219 = 0;\n  let unitDigit220 = 0;\n  let unitDigit221 = 0;\n  let unitDigit222 = 0;\n  let unitDigit223 = 0;\n  let unitDigit224 = 0;\n  let unitDigit225 = 0;\n  let unitDigit226 = 0;\n  let unitDigit227 = 0;\n  let unitDigit228 = 0;\n  let unitDigit229 = 0;\n  let unitDigit230 = 0;\n  let unitDigit231 = 0;\n  let unitDigit232 = 0;\n  let unitDigit233 = 0;\n  let unitDigit234 = 0;\n  let unitDigit235 = 0;\n  let unitDigit236 = 0;\n  let unitDigit237 = 0;\n  let unitDigit238 = 0;\n  let unitDigit239 = 0;\n  let unitDigit240 = 0;\n  let unitDigit241 = 0;\n  let unitDigit242 = 0;\n  let unitDigit243 = 0;\n  let unitDigit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      count += 1;\n    }\n    if (s[i] === 'O' || s[i] === 'o') {\n      count += 1;\n    }\n    if (s[i] === 'U' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n    if (s[i] === 'e' || s[i] === 'E') {\n      count += 1;\n    }\n    if (s[i] === 'i' || s[i] === 'I') {\n      count += 1;\n    }\n    if (s[i] === 'o' || s[i] === 'O') {\n      count += 1;\n    }\n    if (s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 3\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      count += 1;\n    }\n    if (s[i] === 'O' || s[i] === 'o') {\n      count += 1;\n    }\n    if (s[i] === 'U' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B') {\n      count += 1;\n    }\n    if (s[i] === 'c' || s[i] === 'C') {\n      count += 1;\n    }\n    if (s[i] === 'd' || s[i] === 'D') {\n      count += 1;\n    }\n    if (s[i] === 'f' || s[i] === 'F') {\n      count += 1;\n    }\n    if (s[i] === 'g' || s[i] === 'G') {\n      count += 1;\n    }\n    if (s[i] === 'h' || s[i] === 'H') {\n      count += 1;\n    }\n    if (s[i] === 'j' || s[i] === 'J') {\n      count += 1;\n    }\n    if (s[i] === 'k' || s[i] === 'K') {\n      count += 1;\n    }\n    if (s[i] === 'l' || s[i] === 'L') {\n      count += 1;\n    }\n    if (s[i] ==='m' || s[i] === 'M') {\n      count += 1;\n    }\n    if (s[i] === 'n' || s[i] === 'N') {\n      count += 1;\n    }\n    if (s[i] === 'p' || s[i] === 'P') {\n      count += 1;\n    }\n    if (s[i] === 'q' || s[i] === 'Q') {\n      count += 1;\n    }\n    if (s[i] === 'r' || s[i] === 'R') {\n      count += 1;\n    }\n    if (s[i] ==='s' || s[i] === 'S') {\n      count += 1;\n    }\n    if (s[i] === 't' || s[i] === 'T') {\n      count += 1;\n    }\n    if (s[i] === 'v' || s[i] === 'V') {\n      count += 1;\n    }\n    if (s[i] === 'w' || s[i] === 'W') {\n      count += 1;\n    }\n    if (s[i] === 'x' || s[i] === 'X') {\n      count += 1;\n    }\n    if (s[i] === 'y' || s[i] === 'Y') {\n      count += 1;\n    }\n    if (s[i] === 'z' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B') {\n      count += 1;\n    }\n    if (s[i] === 'c' || s[i] === 'C') {\n      count += 1;\n    }\n    if (s[i] === 'd' || s[i] === 'D') {\n      count += 1;\n    }\n    if (s[i] === 'f' || s[i] === 'F') {\n      count += 1;\n    }\n    if (s[i] === 'g' || s[i] === 'G') {\n      count += 1;\n    }\n    if (s[i] === 'h' || s[i] === 'H') {\n      count += 1;\n    }\n    if (s[i] === 'j' || s[i] === 'J') {\n      count += 1;\n    }\n    if (s[i] === 'k' || s[i] === 'K') {\n      count += 1;\n    }\n    if (s[i] === 'l' || s[i] === 'L') {\n      count += 1;\n    }\n    if (s[i] ==='m' || s[i] === 'M') {\n      count += 1;\n    }\n    if (s[i] === 'n' || s[i] === 'N') {\n      count += 1;\n    }\n    if (s[i] === 'p' || s[i] === 'P') {\n      count += 1;\n    }\n    if (s[i] === 'q' || s[i] === 'Q') {\n      count += 1;\n    }\n    if (s[i] === 'r' || s[i] === 'R') {\n      count += 1;\n    }\n    if (s[i] ==='s' || s[i] === 'S') {\n      count += 1;\n    }\n    if (s[i] === 't' || s[i] === 'T') {\n      count += 1;\n    }\n    if (s[i] === 'v' || s[i] === 'V') {\n      count += 1;\n    }\n    if (s[i] === 'w' || s[i] === 'W') {\n      count += 1;\n    }\n    if (s[i] === 'x' || s[i] === 'X') {\n      count += 1;\n    }\n    if (s[i] === 'y' || s[i] === 'Y') {\n      count += 1;\n    }\n    if (s[i] === 'z' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even and odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B') {\n      count += 1;\n    }\n    if (s[i] === 'c' || s[i] === 'C') {\n      count += 1;\n    }\n    if (s[i] === 'd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger7 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger8 = (value) => {\n  let closest;\n  let closestDistance = Math.abs(value - closest);\n  for(let i = 1; i < values.length; i++) {\n    const distance = Math.abs(value - values[i]);\n    if(distance < closestDistance) {\n      closest = values[i];\n      closestDistance = distance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
