{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const closeElements = numbers.reduce((acc, curr, index) => {\n    if (Math.abs(curr - numbers[index - 1]) < threshold) {\n      acc.push(numbers[index - 1]);\n    }\n    return acc;\n  }, []);\n  return closeElements.length === numbers.length - 1;\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some((elem, index) => {\n    return numbers.indexOf(elem)!== index;\n  });\n};\n\n/**\n * Returns true if given array contains only unique elements\n * \n * >>> hasUniqueElements([1, 1, 2, 3])\n  true\n  >>> hasUniqueElements([1, 1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (numbers) => {\n  return!numbers.some", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  let current_paren_group = [];\n  let current_paren_group_length = 0;\n  let paren_group_length = 0;\n  let paren_group_open = false;\n  let paren_group_closed = false;\n  let paren_group_opening_char = '';\n  let paren_group_closing_char = '';\n  let paren_group_opening_char_length = 0;\n  let paren_group_closing_char_length = 0;\n  let paren_group_opening_char_position = 0;\n  let paren_group_closing_char_position = 0;\n  let paren_group_opening_char_position_in_string = 0;\n  let paren_group_closing_char_position_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length = 0;\n  let paren_group_closing_char_position_in_paren_group_length = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_string = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_opening_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group = 0;\n  let paren_group_closing_char_position_in_paren_group_length_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren_group_in_paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the shorter postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Gives a positive integers n, you ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2) | 0;\n  const binary = avg.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the sum of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  sum(1, 5) => \"0b11\"\n  sum(7, 5) => -1\n  sum(10, 20) => \"0b1111\"\n  sum(20, 33) => \"0b11010\"\n  */\nconst sum = (n, m) => {\n  const sum = n + m;\n  const binary = sum.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the product of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  product(1, 5) => \"0b11\"\n  product(7, 5) => -1\n  product(10, 20) => \"0b1111\"\n  product(20, 33) => \"0b11010\"\n  */\nconst product = (n, m) => {\n  const product = n * m;\n  const binary = product.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the quotient of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  quotient(1, 5) => \"0b11\"\n  quotient(7, 5) => -1\n  quotient(10, 20) => \"0b1111\"\n  quotient(20, 33) => \"0b11010\"\n  */\nconst quotient = (n, m) => {\n  const quotient = n / m;\n  const binary = quotient.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the remainder of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  remainder(1, 5) => \"0b11\"\n  remainder(7, 5) => -1\n  remainder(10, 20) => \"0b1111\"\n  remainder(20, 33) => \"0b11010\"\n  */\nconst remainder = (n, m) => {\n  const remainder = n % m;\n  const binary = remainder.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  const abs = Math.abs(n);\n  const binary = abs.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  const abs = Math.abs(n);\n  const binary = abs.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  const abs = Math.abs(n);\n  const binary = abs.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  const abs = Math.abs(n);\n  const binary = abs.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  const abs = Math.abs(n);\n  const binary = abs.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  const abs = Math.abs(n);\n  const binary = abs.toString(2);\n  return binary === \"0\"? \"0b0\" : binary;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigitsAndEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigitsAndEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigitsAndEvenOddDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    let index = sorted.indexOf(reversed[i]);\n    if (index > -1) {\n      result.push(byDigit(index));\n    }\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigit = (index) => {\n  let result = [];\n  let digits = [\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  ];\n  for (let i = 0; i < digits.length; i++) {\n    if (index === i) {\n      result.push(digits[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigits = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    let index = sorted.indexOf(reversed[i]);\n    if (index > -1) {\n      result.push(byDigit(index));\n    }\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigitsAndLength = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    let index = sorted.indexOf(reversed[i]);\n    if (index > -1) {\n      result.push(byDigit(index), byLength(index));\n    }\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigitsAndLengths = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    let index = sorted.indexOf(reversed[i]);\n    if (index > -1) {\n      result.push(byDigit(index), byLength(index));\n    }\n  }\n  return result;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDigitsAndLengthsAndDigits = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    let index = sorted.indexOf(reversed[i]);\n    if (index > -1) {\n      result.push(byDigit(index), byLength(index), byDigit(index));\n    }\n  }\n  return result;\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorial(i));\n  }\n  return factorials;\n};\n\n/* Implements the functions g that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    factorials.push(factorial(i));\n  }\n  return factorials;\n};\n\n/* Implements the function factorial that takes n as a parameter, and returning the factorial of n. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  factorial(5) == 120\n  */\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/* Implements the function sum that takes n as a parameter, and returning the sum of the numbers from 1 to n. i start from 1. the sums of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  sum(5) == 15\n  */\nconst sum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/* Implements the function product that takes n as a parameter, and returning the product of the numbers from 1 to n. i start from 1. the products of numbers from 1 to i are 1 * 2 * 3 * 4 * 5 *... = n.\n  Example:\n  product(5) == 120\n  */\nconst product = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/* Implements the function average that takes n as a parameter, and returning the average of the numbers from 1 to n. i start from 1. the averages of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  average(5) == 3\n  */\nconst average = (n) => {\n  let average = 0;\n  for (let i = 1; i <= n; i++) {\n    average += i;\n  }\n  return average / n;\n};\n\n/* Implements the function median that takes n as a parameter, and returning the median of the numbers from 1 to n. i start from 1. the medians of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  median(5) == 3\n  */\nconst median = (n) => {\n  let median = 0;\n  for (let i = 1; i <= n; i++) {\n    median += i;\n  }\n  return median / n;\n};\n\n/* Implements the function mode that takes n as a parameter, and returning the mode of the numbers from 1 to n. i start from 1. the modes of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  mode(5) == 3\n  */\nconst mode = (n) => {\n  let mode = 0;\n  let maxCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (maxCount < i) {\n      maxCount = i;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (maxCount === i) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/* Implements the function variance that takes n as a parameter, and returning the variance of the numbers from 1 to n. i start from 1. the variances of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  variance(5) == 3\n  */\nconst variance = (n) => {\n  let variance = 0;\n  for (let i = 1; i <= n; i++) {\n    variance += Math.pow((i - average(i)), 2);\n  }\n  return variance / n;\n};\n\n/* Implements the function standard deviation that takes n as a parameter, and returning the standard deviation of the numbers from 1 to n. i start from 1. the standard deviations of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  standard deviation(5) == 3\n  */\nconst standard deviation = (n) => {\n  let variance = variance(n);\n  return Math.sqrt(variance);\n};\n\n/* Implements the function quartiles that takes n as a parameter, and returning the quartiles of the numbers from 1 to n. i start from 1. the quartiles of numbers from 1 to i are 1 + 2 + 3 + 4 + 5 +... = n.\n  Example:\n  quartiles(5) == [3, 2.5, 2, 1.5]\n  */\nconst quartiles = (n) => {\n  let quartiles = [];\n  for (let i = 1; i <= n; i++) {\n    quartiles.push((i - average(i)) / variance(i));\n  }\n  return quartiles;\n};\n\n/* Implements the function quintiles that takes n as a parameter, and returning the quintiles of the numbers from 1 to n. i start from 1. the quintiles of numbers from 1 to i arepassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const isEven = isPalindrome(i);\n    const isOdd = isPalindrome(n - i);\n    if (isEven && isOdd) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(n - i);\n    } else if (isEven) {\n      evenPalindromes.push(i);\n    } else if (isOdd) {\n      oddPalindromes.push(n - i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return all possible palindromes <= n that do not contain two consecutive digits.\n\n  Example 1:\n\n      Input: 12\n      Output: [121, 1211, 1112, 11121, 211, 2112, 2121, 21211, and so on]\n      Explanation: All possible palindromes are 121, 1211, 1112, 11121, 211, 2112, 2121, 21211, and so on.\n\n  Example 2:\n\n      Input: 13\n      Output: [1311, 13112, 13113, 1321, 13211, 13212, 13213, 141, 1411, 14112, 14113, 142, 1421, 14212, 14213, 14221, 14222, 14223, and so on]\n      Explanation: All possible palindromes are 1311, 13112, 13113, 1321, 13211, 13212, 13213, 141, 1411, 14112, 14113, 142, 1421, 14212, 14213, 14221, 14222, 14223, and so on.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. 1 <= n <= 10^9\n      4. 1 <= n <= 10^9\n      5. 1 <= n <= 10^9\n      6. 1 <= n <= 10^9\n      7. 1 <= n <= 10^9\n      8. 1 <= n <= 10^9\n      9. 1 <= n <= 10^9\n      10. 1 <= n <= 10^9\n      11. 1 <= n <= 10^9\n      12. 1 <= n <= 10^9\n      13. 1 <= n <= 10^9\n      14. 1 <= n <= 10^9\n      15. 1 <= n <= 10^9\n      16. 1 <= n <= 10^9\n      17. 1 <= n <= 10^9\n      18. 1 <= n <= 10^9\n      19. 1 <= n <= 10^9\n      20. 1 <= n <= 10^9\n      21. 1 <= n <= 10^9\n      22. 1 <= n <= 10^9\n      23. 1 <= n <= 10^9\n      24. 1 <= n <= 10^9\n      25. 1 <= n <= 10^9\n      26. 1 <= n <= 10^9\n      27. 1 <= n <= 10^9\n      28. 1 <= n <= 10^9\n      29. 1 <= n <= 10^9\n      30. 1 <= n <= 10^9\n      31. 1 <= n <= 10^9\n      32. 1 <= n <= 10^9\n      33. 1 <= n <= 10^9\n      34. 1 <= n <= 10^9\n      35. 1 <= n <= 10^9\n      36. 1 <= n <= 10^9\n      37. 1 <= n <= 10^9\n      38. 1 <= n <= 10^9\n      39. 1 <= n <= 10^9\n      40. 1 <= n <= 10^9\n      41. 1 <= n <= 10^9\n      42. 1 <= n <= 10^9\n      43. 1 <= n <= 10^9\n      44. 1 <= n <= 10^9\n      45. 1 <= n <= 10^9\n      46. 1 <= n <= 10^9\n      47. 1 <= n <= 10^9\n      48. 1 <= n <= 10^9\n      49. 1 <= n <= 10^9\n      50. 1 <= n <= 10^9\n      51. 1 <= n <= 10^9\n      52. 1 <= n <= 10^9\n      53. 1 <= n <= 10^9\n      54. 1 <= n <= 10^9\n      55. 1 <= n <= 10^9\n      56. 1 <= n <= 10^9\n      57. 1 <= n <= 10^9\n      58. 1 <= n <= 10^9\n      59. 1 <= n <= 10^9\n      60. 1 <= n <= 10^9\n      61. 1 <= n <= 10^9\n      62. 1 <= n <= 10^9\n      63. 1 <= n <= 10^9\n      64. 1 <= n <= 10^9\n      65. 1 <= n <= 10^9\n      66. 1 <= n <= 10^9\n      67. 1 <= n <= 10^9\n      68. 1 <= n <= 10^9\n      69. 1 <= n <= 10^9\n      70. 1 <= n <= 10^9\n      71. 1 <= n <= 10^9\n      72. 1 <= n <= 10^9\n      73. 1 <= n <= 10^9\n      74. 1 <= n <= 10^9\n      75. 1 <= n <= 10^9\n      76. 1 <= n <= 10^9\n      77. 1 <= n <= 10^9\n      78. 1 <= n <= 10^9\n      79. 1 <= n <= 10^9\n      80. 1 <= n <= 10^9\n      81. 1 <= n <= 10^9\n      82. 1 <= n <= 10^9\n      83. 1 <= n <= 10^9\n      84. 1 <= n <= 10^9\n      85. 1 <= n <= 10^9\n      86. 1 <= n <= 10^9\n      87. 1 <= n <= 10^9\n      88. 1 <= n <= 10^9\n      89. 1 <= n <= 10^9\n      90. 1 <= n <= 10^9\n      91. 1 <= n <= 10^9\n      92. 1 <= n <= 10^9\n      93. 1 <= n <= 10^9\n      94. 1 <= n <= 10^9\n      95. 1 <= n <= 10^9\n      96. 1 <= n <= 10^9\n      97. 1 <= n <= 10^9\n      98. 1 <= n <= 10^9\n      99. 1 <= n <= 10^9\n      100. 1 <= n <= 10^9\n      101. 1 <= n <= 10^9\n      102. 1 <= n <= 10^9\n      103. 1 <= n <= 10^9\n      104", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i] % 10;\n    } else {\n      count += Math.abs(arr[i]) % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex2 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex3 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex4 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex5 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex6 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex7 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex8 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex9 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return an array of integers such that each element of the new array is equal to the sum of the elements of the original array except the element at that index.\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5]) == [-1, 3, -5]\n  >>> sumOfExceptIndex([-1, 2, -3, 4, -5, -6, -7, -8]) == [-1, 3, -5, -7, -8]\n  */\nconst sumOfExceptIndex10 = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    newArr[i] = newArr[i] - arr[i];\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    if (arr[left] > arr[right]) {\n      swap(arr, left, right);\n      left++;\n      right--;\n    } else {\n      left++;\n    }\n  }\n  return arr;\n};\n\n/*\n Write a function that will receive an array of integers and return a new array with the elements of the given array in non-decreasing order.\n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasingOrder(arr) = [1, 3, 2, 4, 6, 5]\n \n For Example:\n \n arr = [1, 5, 3, 6, 4, 2]\n nonDecreasing", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a === b) return a\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    if (a.charCodeAt(i)!== b.charCodeAt(i)) {\n      result += String.fromCharCode(a.charCodeAt(i) ^ b.charCodeAt(i))\n    }\n  }\n  return result\n}\n\n/**\n * Converts string to hexadecimal representation\n * \n * @param {string} str \n */\nconst stringToHex = str => {\n  let result = ''\n  for (let i = 0; i < str.length; i++) {\n    result += stringToHexChar(str.charCodeAt(i))\n  }\n  return result\n}\n\n/**\n * Converts char to hexadecimal representation\n * \n * @param {string} char \n */\nconst stringToHexChar = char => {\n  if (char < 10) {\n    return char.toString(16)\n  }\n  return '0' + char.toString(16)\n}\n\n/**\n * Converts hexadecimal representation to string\n * \n * @param {string} hex \n */\nconst hexToString = hex => {\n  let result = ''\n  for (let i = 0; i < hex.length; i++) {\n    result += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to char\n * \n * @param {string} hex \n */\nconst hexToChar = hex => {\n  if (hex.length % 2 === 1) {\n    hex = hex + '0'\n  }\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Converts hexadecimal representation to int\n * \n * @param {string} hex \n */\nconst hexToInt = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to float\n * \n * @param {string} hex \n */\nconst hexToFloat = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to double\n * \n * @param {string} hex \n */\nconst hexToDouble = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to boolean\n * \n * @param {string} hex \n */\nconst hexToBool = hex => {\n  return hexToInt(hex) === 1\n}\n\n/**\n * Converts hexadecimal representation to string\n * \n * @param {string} hex \n */\nconst hexToString = hex => {\n  let result = ''\n  for (let i = 0; i < hex.length; i++) {\n    result += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to char\n * \n * @param {string} hex \n */\nconst hexToChar = hex => {\n  if (hex.length % 2 === 1) {\n    hex = hex + '0'\n  }\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Converts hexadecimal representation to int\n * \n * @param {string} hex \n */\nconst hexToInt = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to float\n * \n * @param {string} hex \n */\nconst hexToFloat = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to double\n * \n * @param {string} hex \n */\nconst hexToDouble = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to boolean\n * \n * @param {string} hex \n */\nconst hexToBool = hex => {\n  return hexToInt(hex) === 1\n}\n\n/**\n * Converts hexadecimal representation to string\n * \n * @param {string} hex \n */\nconst hexToString = hex => {\n  let result = ''\n  for (let i = 0; i < hex.length; i++) {\n    result += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to char\n * \n * @param {string} hex \n */\nconst hexToChar = hex => {\n  if (hex.length % 2 === 1) {\n    hex = hex + '0'\n  }\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Converts hexadecimal representation to int\n * \n * @param {string} hex \n */\nconst hexToInt = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to float\n * \n * @param {string} hex \n */\nconst hexToFloat = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to double\n * \n * @param {string} hex \n */\nconst hexToDouble = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to boolean\n * \n * @param {string} hex \n */\nconst hexToBool = hex => {\n  return hexToInt(hex) === 1\n}\n\n/**\n * Converts hexadecimal representation to string\n * \n * @param {string} hex \n */\nconst hexToString = hex => {\n  let result = ''\n  for (let i = 0; i < hex.length; i++) {\n    result += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to char\n * \n * @param {string} hex \n */\nconst hexToChar = hex => {\n  if (hex.length % 2 === 1) {\n    hex = hex + '0'\n  }\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Converts hexadecimal representation to int\n * \n * @param {string} hex \n */\nconst hexToInt = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result\n}\n\n/**\n * Converts hexadecimal representation to float\n * \n * @param {string} hex \n */\nconst hexToFloat = hex => {\n  let result = 0\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex.substr(i, 2), 16) * Math.pow(16, hex.length - i - 1)\n  }\n  return result / Math.pow(16, hex.length - 1)\n}\n\n/**\n * Converts hexadecimal representation to double\n * \n * @param {string} hex \n */\nconst hex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n}\n\n// Do not modify anything below this point\n\nconst result = exchange([1, 2, 3, 4], [1, 2, 3, 4]);\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThank you for your help! I appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction exchange(arr1, arr2) {\n  var arr3 = [];\n  var arr4 = [];\n  arr3 = arr1.concat(arr2);\n  arr4 = arr3.filter(function(item) {\n    return item % 2 === 0;\n  });\n  if (arr4.length === 0) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (count[letter] == undefined) {\n      count[letter] = 1\n    } else {\n      count[letter] += 1\n    }\n  }\n  return count\n}\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c[i]) {\n      result += s[i];\n    } else {\n      result += s[i];\n      flag = true;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task We were given a string s and a number k. You should return a new string that contains all the characters in s except the kth character. \n Example\n  For s = \"abcde\", k = 3, the result should be \"cde\"\n  For s = \"abcdef\", k = 3, the result should be \"def\"\n  For s = \"abcdedcba\", k = 3, the result should be \"edcba\"\n  For s = \"abcdedcba\", k = 2, the result should be \"edc\"\n  For s = \"abcdedcba\", k = 0, the result should be \"\"\n  For s = \"abcdedcba\", k = -1, the result should be \"\"\n  For s = \"abcdedcba\", k = -2, the result should be \"\"\n  For s = \"abcdedcba\", k = -4, the result should be \"\"\n  For s = \"abcdedcba\", k = -5, the result should be \"\"\n  For s = \"abcdedcba\", k = -6, the result should be \"\"\n  For s = \"abcdedcba\", k = -7, the result should be \"\"\n  For s = \"abcdedcba\", k = -8, the result should be \"\"\n  For s = \"abcdedcba\", k = -9, the result should be \"\"\n  For s = \"abcdedcba\", k = -10, the result should be \"\"\n  For s = \"abcdedcba\", k = -11, the result should be \"\"\n  For s = \"abcdedcba\", k = -12, the result should be \"\"\n  For s = \"abcdedcba\", k = -13, the result should be \"\"\n  For s = \"abcdedcba\", k = -14, the result should be \"\"\n  For s = \"abcdedcba\", k = -15, the result should be \"\"\n  For s = \"abcdedcba\", k = -16, the result should be \"\"\n  For s = \"abcdedcba\", k = -17, the result should be \"\"\n  For s = \"abcdedcba\", k = -18, the result should be \"\"\n  For s = \"abcdedcba\", k = -19, the result should be \"\"\n  For s = \"abcdedcba\", k = -20, the result should be \"\"\n  For s = \"abcdedcba\", k = -21, the result should be \"\"\n  For s = \"abcdedcba\", k = -22, the result should be \"\"\n  For s = \"abcdedcba\", k = -23, the result should be \"\"\n  For s = \"abcdedcba\", k = -24, the result should be \"\"\n  For s = \"abcdedcba\", k = -25, the result should be \"\"\n  For s = \"abcdedcba\", k = -26, the result should be \"\"\n  For s = \"abcdedcba\", k = -27, the result should be \"\"\n  For s = \"abcdedcba\", k = -28, the result should be \"\"\n  For s = \"abcdedcba\", k = -29, the result should be \"\"\n  For s = \"abcdedcba\", k = -30, the result should be \"\"\n  For s = \"abcdedcba\", k = -31, the result should be \"\"\n  For s = \"abcdedcba\", k = -32, The result should be \"\"\n  For s = \"abcdedcba\", k = -33, The result should be \"\"\n  For s = \"abcdedcba\", k = -34, The result should be \"\"\n  For s = \"abcdedcba\", k = -35, The result should be \"\"\n  For s = \"abcdedcba\", k = -36, The result should be \"\"\n  For s = \"abcdedcba\", k = -37, The result should be \"\"\n  For s = \"abcdedcba\", k = -38, The result should be \"\"\n  For s = \"abcdedcba\", k = -39, The result should be \"\"\n  For s = \"abcdedcba\", k = -40, The result should be \"\"\n  For s = \"abcdedcba\", k = -41, The result should be \"\"\n  For s = \"abcdedcba\", k = -42, The result should be \"\"\n  For s = \"abcdedcba\", k = -43, The result should be \"\"\n  For s = \"abcdedcba\", k = -44, The result should be \"\"\n  For s = \"abcdedcba\", k = -45, The result should be \"\"\n  For s = \"abcdedcba\", k = -46, The result should be \"\"\n  For s = \"abcdedcba\", k = -47, The result should be \"\"\n  For s = \"abcdedcba\", k = -48, The result should be \"\"\n  For s = \"abcdedcba\", k = -49, The result should be \"\"\n  For s = \"abcdedcba\", k = -50, The result should be \"\"\n  For s = \"abcdedcba\", k = -51, The result should be \"\"\n  For s = \"abcdedcba\", k = -52, The result should be \"\"\n  For s = \"abcdedcba\", k = -53, The result should be \"\"\n  For s = \"abcdedcba\", k = -54, The result should be \"\"\n  For s = \"abcdedcba\", k = -55, The result should be \"\"\n  For s = \"abcdedcba\", k = -56, The result should be \"\"\n  For s = \"abcdedcba\", k = -57, The result should be \"\"\n  For s = \"abcdedcba\", k = -58, The result should be \"\"\n  For s = \"abcdedcba\", k = -59, The result should be \"\"\n  For s = \"abcdedcba\", k = -60, The result should be \"\"\n  For s = \"abcdedcba\", k = -61, The result should be \"\"\n  For s = \"abcdedcba\", k = -62, The result should be \"\"\n  For s = \"abcdedcba\", k = -63, The result should be \"\"\n  For s = \"abcdedcba\", k = -64, The result should be \"\"\n  For s = \"abcdedcba\", k = -65, The result should be \"\"\n  For s = \"abcdedcba\", k = -66, The result should be \"\"\n  For s = \"abcdedcba\", k = -67, The result should be \"\"\n  For s = \"abcdedcba\", k = -68, The result should be \"\"\n  For s = \"abcdedcba\", k = -69, The result should be \"\"\n  For s = \"abcdedcba\", k = -70, The result should be \"\"\n  For s = \"abcdedcba\", k = -71, The result should be \"\"\n  For s = \"abcdedcba\", k = -72, The result should be \"\"\n  For s = \"abcdedcba\", k = -73, The result should be \"\"\n  For s = \"abcdedcba\", k = -74, The result should be \"\"\n  For s = \"abcdedcba\", k = -75, The result should be \"\"\n  For s = \"abcdedcba\", k = -76, The result should be \"\"\n  For s = \"abcdedcba\", k = -77, The result should be \"\"\n  For s = \"abcdedcba\", k = -78, The result should be \"\"\n  For s = \"abcdedcba\", k = -79, The result should be \"\"\n  For s = \"abcdedcba\", k = -80, The result should be \"\"\n  For s = \"abcdedcba\", k = -81, The result should be \"\"\n  For s = \"abcdedcba\", k = -82, The result should be \"\"\n  For s = \"abcdedcba\", k = -83, The result should be \"\"\n  For s = \"abcdedcba\", k = -84, The result should be \"\"\n  For s = \"abcdedcba\", k = -85, The result ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numOdd = str.match(/\\d/g).length;\n    oddList.push(`the number of odd elements ${numOdd} the str${numOdd} ${str.length} of the ${str.length}.`);\n  }\n  return oddList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} of the ${str.length}.`);\n  }\n  return evenList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} of the ${str.length}.`);\n  }\n  return evenList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} of the ${str.length}.`);\n  }\n  return evenList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} of the ${str.length}.`);\n  }\n  return evenList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} of the ${str.length}.`);\n  }\n  return evenList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} of the ${str.length}.`);\n  }\n  return evenList;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evenList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const numEven = str.match(/\\d/g).length;\n    evenList.push(`the number of even elements ${numEven} the str${numEven} ${str.length} ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == -1\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 1; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill2 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill3 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill4 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill5 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill6 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill7 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill8 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill9 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill10 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill11 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill12 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill13 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill14 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index++;\n                max = Math.max(max, index - 1);\n            }\n        }\n    }\n    return max;\n};\n\nconst maxFill15 = (grid, capacity) => {\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                for (let k = index; k < bucket.length; k++) {\n                    bucket[k] = 0;\n                }\n                index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decs = arr.reduce((acc, val) => acc + val / 10, 0);\n  return [...arr].sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b === 0) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 0) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === decs && ones < decs && ones > 0) {\n      return -1;\n    }\n    if (a === decs && b === 0 && ones > 0 && ones < decs && ones > 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones > 0) {\n      return 0;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones > 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return 1;\n    }\n    if (a === decs && b === decs && ones > 0 && ones < decs && ones < 0) {\n      return -1;\n    }\n    if (a === decs && b === decs && ones > 0 && ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.length === n) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n vowel, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\", \"Hello\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.includes(\"aeiou\")) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\", \"Hello\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.length === n) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n vowel, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\", \"Hello\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.includes(\"aeiou\")) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\", \"Hello\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.length === n) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n vowel, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\", \"Hello\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.includes(\"aeiou\")) {\n      words.push(word);\n    }\n    index += 1;\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\", \"Hello\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  const words = [];\n  let index = 0;\n  while (index < s.length) {\n    const word = s.substring(index, index + 1);\n    if (word.length === n) {\n      words.push(word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowelsArr = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr2 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr4 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr6 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr8 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr10 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr12 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr14 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr16 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr18 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr20 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr22 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr23 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr24 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr25 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr26 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr27 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr28 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr29 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr30 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr31 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr32 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr33 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr34 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr35 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr36 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr37 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr38 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr39 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr40 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArb41 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArb42 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArb43 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr44 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr45 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArb46 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr47 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr48 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr49 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr50 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr51 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr52 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr53 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr54 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr55 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr56 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr57 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr58 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr59 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr60 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr61 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr62 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr63 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr64 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr65 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr66 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr67 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr68 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr69 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr70 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr71 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr72 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr73 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr74 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr75 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr76 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr77 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr78 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr79 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr80 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr81 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr82 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr83 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr84 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr85 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr86 = [\"a\", \"e", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return (str === '');\n};\n\n/* You was given a string of parentheses and a number N. Your jobs is to find the minimum number of parentheses needed to make the string balanced. A string S is considered to be balanced if and only if all parentheses in S are balanced. For example: the string '(())()' is balanced, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  balancedParens('(())', 2) == 'Yes'\n  balancedParens('(())', 3) == 'No'\n  */\nconst balancedParens = (str, n) => {\n  let strArr = [];\n  for (let i = 0; i < str.length; i++) {\n    strArr.push(str[i]);\n  }\n  let strArrLen = strArr.length;\n  let strArrMax = strArrLen - 1;\n  let strArrMin = 0;\n  let strArrMaxMin = 0;\n  let strArrMaxMinMin = 0;\n  let strArrMaxMinMinMax = 0;\n  let strArrMaxMinMinMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let strArrMaxMinMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isInArray\n// =====================================================================================================================\n\n/**\n * Return true if the given item is contained in the given array. Case insensitive.\n *\n * Examples:\n *\n * isInArray('a', 'abc')\n * // -> true\n *\n * isInArray('a', 'ab')\n * // -> false\n *\n * isInArray('a', 'abc', true)\n * // -> true\n *\n * isInArray('a', 'abc', false)\n * // -> false\n */\nconst isInArray = (item, array, caseSensitive) => {\n  if (caseSensitive) {\n    return array.indexOf(item)!== -1\n  }\n  return array.some((item2) => item.toLowerCase() === item2.toLowerCase())\n}\n\n// =====================================================================================================================\n// isIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n\n  for (let i = 0; i < k; i++) {\n    max = Math.max(max, arr[i]);\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n};\n\nexport { maximum, maximumArray };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  Example 1:\n\n      Input: [1, 3, 5, 7], target = 4\n\n      Output: 2\n\n  Example 2:\n\n      Input: [1, 3, 5, 7], target = 2\n\n      Output: -1\n\n  Note:\n      You may assume that the array does not contain duplicates.\n      Your function should be modified accordingly if a duplicate does exist.\n*/\nconst binarySearch = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid;\n\n  while (low <= high) {\n    mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n\n  return -1;\n};\n\nexport { binarySearch };\n\n/*\n  Given an array and a value, remove all instances of that value in-place and return the new length.\n\n  Example 1:\n\n      Input: [2,2,2], val = 1\n\n      Output: 3\n\n  Example 2:\n\n      Input: [2,2,2,2], val = 2\n\n      Output: 4\n\n  Note:\n      Do not return any element that occurs more than once.\n      Assume we are dealing with an input array which contains only non-negative integers.\n*/\nconst removeElement = (arr, val) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== val) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr.length;\n};\n\nexport { removeElement, removeElements };\n\n/*\n  Given an array and a value, remove the first occurrence of that value in the array, and return that value.\n\n  Your function should return an INTEGER.\n\n  Example 1:\n\n      Input: [1,3,5,5,6], 5\n\n      Output: 5\n\n  Example 2:\n\n      Input: [1,3,5,5,6], 2\n\n      Output: 2\n\n  Note:\n      Your function should return an INTEGER.\n      If there are no occurrences of x in the array, your function should return -1.\n*/\nconst removeFirstOccurrence = (arr, x) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === x) {\n      arr.splice(i, 1);\n      return x;\n    }\n  }\n  return -1;\n};\n\nexport { removeFirstOccurrence, removeFirstOccurrences };\n\n/*\n  Given an array and a value, remove all occurrences of that value in the array, and return a new array. If there are no occurrences of x in the array, your function should return an empty array.\n\n  Example 1:\n\n      Input: [1,3,5,5,6], 5\n\n      Output: [1,3,5,6]\n\n  Example 2:\n\n      Input: [1,3,5,5,6], 2\n\n      Output: [1,3,5,5,6]\n\n  Note:\n      Your function should return an Array.\n      If there are no occurrences of x in the array, your function should return an empty array.\n*/\nconst removeAllOccurrences = (arr, x) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== x) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { removeAllOccurrences, removeAllOccurrencesWithout };\n\n/*\n  Given an array and a value, remove all instances of that value in the array, and return a new array. If there are multiple occurrences of x in the array, your function should return an array of those values.\n\n  Example 1:\n\n      Input: [1,3,5,5,6], 5\n\n      Output: [1,3,5]\n\n  Example 2:\n\n      Input: [1,3,5,5,6], 2\n\n      Output: [1,3,5,5,6]\n\n  Note:\n      Your function should return an Array.\n      If there are multiple occurrences of x in the array, your function should return an array of those values.\n*/\nconst removeAllOccurrencesWithout = (arr, x) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== x && newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { removeAllOccurrencesWithout, removeAllOccurrences };\n\n/*\n  Given an array and a value, remove the first occurrence of that value in the array, and return that value.\n\n  Your function should return an INTEGER.\n\n  Example 1:\n\n      Input: [1,3,5,5,6], 5\n\n      Output: 3\n\n  Example 2:\n\n      Input: [1,3,5,5,6], 2\n\n      Output: 2\n\n  Note:\n      Your function should return an INTEGER.\n      If there are no occurrences of x in the array, your function should return -1.\n*/\nconst removeFirstOccurrenceWithout = (arr, x) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== x && newArr.indexOf(arr[i]) === -1) {\n      arr.splice(i, 1);\n      return x;\n    }\n  }\n  return -1;\n};\n\nexport { removeFirstOccurrenceWithout, removeFirstOccurrence };\n\n/*\n  Given an array and a value, remove all occurrences of that value in the array, and return a new array. If there are no occurrences of x in the array, your function should return an empty array.\n\n  Example 1:\n\n      Input: [1,3,5,5,6], 5\n\n      Output: [1,3,5,6]\n\n  Example 2:\n\n      Input: [1,3,5,5,6], 2\n\n      Output: [1,3,5,5,6]\n\n  Note:\n      Your function should return an Array.\n      If there are no occurrences of x in the array, your function should return an empty array.\n*/\nconst removeAllOccurrencesWithout = (arr, x) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== x && newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { removeAllOccurrencesWithout, removeAllOccurrences };\n\n/*\n  Given an array and a value, remove all occurrences of that value in the array, and return a new array. If there are multiple occurrences of x in the array, your function should return an array of those values.\n\n  Example 1:\n\n      Input: [1,3,5,5,6], 5\n\n      Output: [1,3,5]\n\n  Example 2:\n\n      Input: [1,3,5,5,6], 2\n\n      Output: [1,3,5,5,6]\n\n  Note:\n      Your function should return an Array.\n      If there are multiple occurrences of x in the array, your function should return an array of those values.\n*/\nconst removeAllOccurrencesWithout = (arr, x) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== x && newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\nexport { removeAllOccurrencesWithout, removeAllOccurrences };\n\n/*\n  Given an array ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more three digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more four digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsThreeDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more five digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFourDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more six digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsFiveDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more seven digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsSixDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more eight digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsSevenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more nine digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNineDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more ten digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTenDigits = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more eleventh digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsEleventhDigit = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more twelfth digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwelfthDigit = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more thirteenth digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 400 + 5 + 6 + 7 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(collatz[i - 1]);\n    if (collatz[i - 1] % 2 === 0) {\n      collatz[i - 1] *= 3;\n    } else {\n      collatz[i - 1] += 1;\n    }\n    i += 1;\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(collatz[i - 1]);\n    if (collatz[i - 1] % 2!== 0) {\n      collatz[i - 1] *= 3;\n    } else {\n      collatz[i - 1] += 1;\n    }\n    i += 1;\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(collatz[i - 1]);\n    if (collatz[i - 1] % 2!== 0) {\n      collatz[i - 1] *= 3;\n    } else {\n      collatz[i - 1] += 1;\n    }\n    i += 1;\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(collatz[i - 1]);\n    if (collatz[i - 1] % 2!== 0) {\n      collatz[i - 1] *= 3;\n    } else {\n      collatz[i - 1] += 1;\n    }\n    i += 1;\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(collatz[i - 1]);\n    if (collatz[i - 1] % 2!== 0) {\n      collatz[i - 1] *= 3;\n    } else {\n      collatz[i - 1] += 1;\n    }\n    i += 1;\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    collatz.push(collatz[i - 1]);\n    if (collatz[i - 1] % 2!== 0) {\n      collatz[i - 1] *= 3;\n    } else {\n      collatz[i - 1] += 1;\n    }\n    i += 1;\n  }\n  return collatz;\n};\n\n/*\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const [month, day, year] = dateArray;\n  const monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  const dayArray = [1, 3, 30, 31];\n  const yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019];\n\n  if (monthArray[month - 1] < 1 || monthArray[month - 1] > 12) return false;\n  if (dayArray[day - 1] < 1 || dayArray[day - 1] > 31) return false;\n  if (yearArray[year - 1] < 1 || yearArray[year - 1] > 2019) return false;\n  return true;\n};\n\n/*You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are both positive integers. You had to write a function which returns a random integer between min and max. min and max are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescr([5]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescr([5]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescr([5]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescr([5]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescr([5]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescr([1, 2, 2, 3, 3, 4]) ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  const [interval1StartInclusive, interval1EndInclusive] = interval1Start < interval1End? [interval1Start, interval1End] : [interval1End, interval1Start];\n  const [interval2StartInclusive, interval2EndInclusive] = interval2Start < interval2End? [interval2Start, interval2End] : [interval2End, interval2Start];\n  const [interval1StartInclusiveEnd, interval1EndInclusiveEnd] = interval1StartInclusive < interval1EndInclusive? [interval1StartInclusive, interval1EndInclusive] : [interval1EndInclusive, interval1StartInclusive];\n  const [interval2StartInclusiveEnd, interval2EndInclusiveEnd] = interval2StartInclusive < interval2EndInclusive? [interval2StartInclusive, interval2EndInclusive] : [interval2EndInclusive, interval2StartInclusive];\n  const [interval1StartInclusiveStartEnd, interval1EndInclusiveStartEnd] = interval1StartInclusiveEnd < interval1EndInclusiveEnd? [interval1StartInclusiveEnd, interval1EndInclusiveEnd] : [interval1EndInclusiveEnd, interval1StartInclusiveEnd];\n  const [interval2StartInclusiveStartEnd, interval2EndInclusiveStartEnd] = interval2StartInclusiveEnd < interval2EndInclusiveEnd? [interval2StartInclusiveEnd, interval2EndInclusiveEnd] : [interval2EndInclusiveEnd, interval2StartInclusiveEnd];\n  const [interval1StartInclusiveStartEndInclusive, interval1EndInclusiveStartEndInclusive] = interval1StartInclusiveStartEnd < interval1EndInclusiveStartEnd? [interval1StartInclusiveStartEnd, interval1EndInclusiveStartEnd] : [interval1EndInclusiveStartEnd, interval1StartInclusiveStartEnd];\n  const [interval2StartInclusiveStartEndInclusive, interval2EndInclusiveStartEndInclusive] = interval2StartInclusiveStartEnd < interval2EndInclusiveStartEnd? [interval2StartInclusiveStartEnd, interval2EndInclusiveStartEnd] : [interval2EndInclusiveStartEnd, interval2StartInclusiveStartEnd];\n  const [interval1StartInclusiveStartEndInclusiveEnd, interval1EndInclusiveStartEndInclusiveEnd] = interval1StartInclusiveStartEndInclusive < interval1EndInclusiveStartEndInclusive? [interval1StartInclusiveStartEndInclusive, interval1EndInclusiveStartEndInclusive] : [interval1EndInclusiveStartEndInclusive, interval1StartInclusiveStartEndInclusive];\n  const [interval2StartInclusiveStartEndInclusiveEnd, interval2EndInclusiveStartEndInclusiveEnd] = interval2StartInclusiveStartEndInclusive < interval2EndInclusiveStartEndInclusive? [interval2StartInclusiveStartEndInclusive, interval2EndInclusiveStartEndInclusive] : [interval2EndInclusiveStartEndInclusive, interval2StartInclusiveStartEndInclusive];\n  const [interval1StartInclusiveStartEndInclusiveEndInclusive, interval1EndInclusiveStartEndInclusiveEndInclusive] = interval1StartInclusiveStartEndInclusiveEnd < interval1EndInclusiveStartEndInclusiveEnd? [interval1StartInclusiveStartEndInclusiveEndInclusive, interval1EndInclusiveStartEndInclusiveEnd] : [interval1EndInclusiveStartEndInclusiveEndInclusive, interval1StartInclusiveStartEndInclusiveEnd];\n  const [interval2StartInclusiveStartEndInclusiveEndInclusive, interval2EndInclusiveStartEndInclusiveEndInclusive] = interval2StartInclusiveStartEndInclusiveEnd < interval2EndInclusiveStartEndInclusiveEnd? [interval2StartInclusiveStartEndInclusiveEndInclusive, interval2EndInclusiveStartEndInclusiveEnd] : [interval2EndInclusiveStartEndInclusiveEndInclusive, interval2StartInclusiveStartEndInclusiveEndInclusive];\n  const [interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusive, interval1EndInclusiveStartEndInclusiveEndInclusiveEndInclusive] = interval1StartInclusiveStartEndInclusiveEndInclusive < interval1EndInclusiveStartEndInclusiveEndInclusive? [interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusive, interval1EndInclusiveStartEndInclusiveEndInclusive] : [interval1EndInclusiveStartEndInclusiveEndInclusiveEndInclusive, interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusive];\n  const [interval2StartInclusiveStartEndInclusiveEndInclusiveEndInclusive, interval2EndInclusiveStartEndInclusiveEndInclusiveEndInclusive] = interval2StartInclusiveStartEndInclusiveEndInclusive < interval2EndInclusiveStartEndInclusiveEndInclusive? [interval2StartInclusiveStartEndInclusiveEndInclusiveEndInclusive, interval2EndInclusiveStartEndInclusiveEndInclusive] : [interval2EndInclusiveStartEndInclusiveEndInclusiveEndInclusive, interval2StartInclusiveStartEndInclusiveEndInclusiveEndInclusive];\n  const [interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive, interval1EndInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive] = interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusive < interval1EndInclusiveStartEndInclusiveEndInclusiveEndInclusive? [interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive, interval1EndInclusiveStartEndInclusiveEndInclusiveEndInclusive] : [interval1EndInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive, interval1StartInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive];\n  const [interval2StartInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive, interval2EndInclusiveStartEndInclusiveEndInclusiveEndInclusiveEndInclusive] = interval2StartInclusiveStartEndInclusiveEndInclusiveEndInclusive < interval2EndInclusiveStartEndInclusiveEndInclusiveEndInclusive? [interval2Start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*\n  You was given an array of integers and you need to return an array of\n integers representing the sums of magnitudes of integers multiplied by products of all sign of each number in the array, represents by 1, -1 or 0.\n\n Examples:\n  >>> sumMags([1, 2, 2, -4]) == [4, -4, -4, -4]\n  >>> sumMags([0, 1]) == [0, -1, 0, 1]\n  >>> sumMags([]) == []\n  */\nconst sumMags = (arr) => {\n  if (arr.length === 0) return []\n  let sum = []\n  for (let i = 0; i < arr.length; i++) {\n    sum.push(arr[i] * Math.sign(i))\n  }\n  return sum\n}\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const result = []\n  const visited = new Array(N).fill(false)\n  const queue = new Array(N).fill().map(() => [])\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift()\n    if (!visited[y]) {\n      visited[y] = true\n      result.push(grid[x][y])\n      for (let i = x - 1; i <= x + 1; i++) {\n        for (let j = y - 1; j >= y; j--) {\n          if (i === 0 || j === 0 || i === N - 1 || j === N - 1) {\n            continue\n          }\n          if (grid[i][j] > grid[i - 1][j] || grid[i][j] > grid[i + 1][j] || grid[i][j] > grid[i][j - 1]) {\n            continue\n          }\n          queue[i][j] = grid[i][j]\n        }\n      }\n    }\n  }\n\n  return result.sort()\n}\n\nconsole.log(minPath(grid, 3))\nconsole.log(minPath(grid, 1))</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Can you please explain how you came up with the solution? I tried to understand it but couldn't understand it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| c |>\nThanks for your answer. Can you please explain how you came up with the solution? I tried to understand it but couldn't understand it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| c |>\nThanks for your answer. Can you please explain how you came up with the solution? I tried to understand it but couldn't understand it.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction minPath(grid, k) {\n    const N = grid.length\n    const result = []\n    const visited = new Array(N).fill(false)\n    const queue = new Array(N).fill().map(() => [])\n\n    for (let i = 0; i < N; i++) {\n        queue[i][0] = i\n    }\n\n    while (queue.length > 0) {\n        const [x, y] = queue.shift()\n        if (!visited[y]) {\n            visited[y] = true\n            result.push(grid[x][y])\n            for (let i = x - 1; i <= x + 1; i++) {\n                for (let j = y - 1; j >= y; j--) {\n                    if (i === 0 || j === 0 || i === N - 1 || j === N - 1) {\n                        continue\n                    }\n                    if (grid[i][j] > grid[i - 1][j] || grid[i][j] > grid[i + 1][j] || grid[i][j] > grid[i][j - 1]) {\n                        continue\n                    }\n                    queue[i][j] = grid[i][j]\n                }\n            }\n        }\n    }\n\n    return result.sort()\n}\n\nconsole.log(minPath(grid, 3))\nconsole.log(minPath(grid, 1))</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Can you please explain how you came up with the solution? I tried to understand it but couldn't understand it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| a |>\n<code>\nfunction minPath(grid, k) {\n  const N = grid.length\n  const result = []\n  const visited = new Array(N).fill(false)\n  const queue = new Array(N).fill().map(() => [])\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift()\n    if (!visited[y]) {\n      visited[y] = true\n      result.push(grid[x][y])\n      for (let i = x - 1; i <= x + 1; i++) {\n        for (let j = y - 1; j >= y; j--) {\n          if (i === 0 || j === 0 || i === N - 1 || j === N - 1) {\n            continue\n          }\n          if (grid[i][j] > grid[i - 1][j] || grid[i][j] > grid[i + 1][j] || grid[i][j] > grid[i][j - 1]) {\n            continue\n          }\n          queue[i][j] = grid[i][j]\n        }\n      }\n    }\n  }\n\n  return result.sort()\n}\n\nconsole.log(minPath(grid, 3))\nconsole.log(minPath(grid, 1))</code>\n<|/ a dscore=0 tags=javascript,algorithm,arrays |>\n<| c |>\nThanks for your answer. Can you please explain how you came up with the solution? I tried to understand it but couldn't understand it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction minPath(grid, k) {\n  const N = grid.length\n  const result = []\n  const visited = new Array(N).fill(false)\n  const queue = new Array(N).fill().map(() => [])\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift()\n    if (!visited[y]) {\n      visited[y] = true\n      result.push(grid[x][y])\n      for (let i = x - 1; i <= x + 1; i++) {\n        for (let j = y - 1; j >= y; j--) {\n          if (i === 0 || j === 0 || i === N - 1 || j === N - 1) {\n            continue\n          }\n          if (grid[i][j] > grid[i - 1][j] || grid[i][j] > grid[i + 1][j] || grid[i][j] > grid[i][j - 1]) {\n            continue\n          }\n          queue[i][j] = grid[i][j]\n        }\n      }\n    }\n  }\n\n  return result.sort()\n}\n\nconsole.log(minPath(grid, 3))\nconsole.log(minPath(grid, 1))</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nThanks for your answer. Can you please explain how you came up with the solution? I tried to understand it but couldn't understand it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction minPath(grid, k) {\n  const N = grid.length\n  const result = []\n  const visited = new Array(N).fill(false)\n  const queue = new Array(N).fill().map(() => [])\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift()\n    if (!visited[y]) {\n      visited[y] = true\n      result.push(grid[x][y])\n      for (let i = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of a and b\n * \n * Returns NaN if either input is a NaN\n * \n * >>> leastCommonMultiple(6, 4)\n  24\n  >>> leastCommonMultiple(6, 0)\n  NaN\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) {\n    return b;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  for (let i = 1; i <= n; i++) {\n    arr.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return arr;\n};\n\n/*\n  You are given two non-negative integers n and k. \n  You are required to return a list of all numbers in the range [1, n] which sum to k. \n  Example:\n  Input: n = 4, k = 3\n  Output: [1, 3, 5]\n  Explanation: \n  1 + 3 = 4 \n  3 + 5 = 7 \n  5 + 1 = 6 \n  1 + 6 = 7 \n  7 + 1 = 8 \n  1 + 8 = 9\n  1 + 9 = 10 \n  1 + 10 = 11\n  1 + 11 = 12\n  1 + 12 = 13\n  1 + 13 = 14\n  1 + 14 = 15\n  1 + 15 = 16\n  1 + 16 = 17\n  1 + 17 = 18\n  1 + 18 = 19\n  1 + 19 = 20\n  1 + 20 = 21 \n  1 + 21 = 22\n  1 + 22 = 23\n  1 + 23 = 24\n  1 + 24 = 25\n  1 + 25 = 26\n  1 + 26 = 27\n  1 + 27 = 28\n  1 + 28 = 29\n  1 + 29 = 30\n  1 + 30 = 31\n  1 + 31 = 32\n  1 + 32 = 33\n  1 + 33 = 34\n  1 + 34 = 35\n  1 + 35 = 36\n  1 + 36 = 37\n  1 + 37 = 38\n  1 + 38 = 39\n  1 + 39 = 40\n  1 + 40 = 41\n  1 + 41 = 42\n  1 + 42 = 43\n  1 + 43 = 44\n  1 + 44 = 45\n  1 + 45 = 46\n  1 + 46 = 47\n  1 + 47 = 48\n  1 + 48 = 49\n  1 + 49 = 50\n  1 + 50 = 51\n  1 + 51 = 52\n  1 + 52 = 53\n  1 + 53 = 54\n  1 + 54 = 55\n  1 + 55 = 56\n  1 + 56 = 57\n  1 + 57 = 58\n  1 + 58 = 59\n  1 + 59 = 60\n  1 + 60 = 61\n  1 + 61 = 62\n  1 + 62 = 63\n  1 + 63 = 64\n  1 + 64 = 65\n  1 + 65 = 66\n  1 + 66 = 67\n  1 + 67 = 68\n  1 + 68 = 69\n  1 + 69 = 70\n  1 + 70 = 71\n  1 + 71 = 72\n  1 + 72 = 73\n  1 + 73 = 74\n  1 + 74 = 75\n  1 + 75 = 76\n  1 + 76 = 77\n  1 + 77 = 78\n  1 + 78 = 79\n  1 + 79 = 80\n  1 + 80 = 81\n  1 + 81 = 82\n  1 + 82 = 83\n  1 + 83 = 84\n  1 + 84 = 85\n  1 + 85 = 86\n  1 + 86 = 87\n  1 + 87 = 88\n  1 + 88 = 89\n  1 + 89 = 90\n  1 + 90 = 91\n  1 + 91 = 92\n  1 + 92 = 93\n  1 + 93 = 94\n  1 + 94 = 95\n  1 + 95 = 96\n  1 + 96 = 97\n  1 + 97 = 98\n  1 + 98 = 99\n  1 + 99 = 100\n  1 + 100 = 101\n  1 + 101 = 102\n  1 + 102 = 103\n  1 + 103 = 104\n  1 + 104 = 105\n  1 + 105 = 106\n  1 + 106 = 107\n  1 + 107 = 108\n  1 + 108 = 110\n  1 + 110 = 111\n  1 + 111 = 112\n  1 + 112 = 113\n  1 + 113 = 114\n  1 + 114 = 115\n  1 + 115 = 116\n  1 + 116 = 117\n  1 + 117 = 118\n  1 + 118 = 119\n  1 + 119 = 120\n  1 + 120 = 121\n  1 + 121 = 122\n  1 + 122 = 123\n  1 + 123 = 124\n  1 + 124 = 125\n  1 + 125 = 126\n  1 + 126 = 127\n  1 + 127 = 128\n  1 + 128 = 129\n  1 + 129 = 130\n  1 + 130 = 131\n  1 + 131 = 132\n  1 + 132 = 133\n  1 + 133 = 134\n  1 + 134 = 135\n  1 + 135 = 136\n  1 + 136 = 137\n  1 + 137 = 138\n  1 + 138 = 139\n  1 + 139 = 140\n  1 + 140 = 141\n  1 + 141 = 142\n  1 + 142 = 143\n  1 + 143 = 144\n  1 + 144 = 145\n  1 + 145 = 146\n  1 + 146 = 147\n  1 + 147 = 148\n  1 + 148 = 149\n  1 + 149 = 150\n  1 + 150 = 151\n  1 + 151 = 152\n  1 + 152 = 153\n  1 + 153 = 154\n  1 + 154 = 155\n  1 + 155 = 156\n  1 + 156 = 157\n  1 + 157 = 158\n  1 + 158 = 159\n  1 + 159 = 160\n  1 + 160 = 161\n  1 + 161 = 162\n  1 + 162 = 163\n  1 + 163 = 164\n  1 + 164 = 165\n  1 + 165 = 166\n  1 + 166 = 167\n  1 + 167 = 168\n  1 + 168 = 169\n  1 + 169 = 170\n  1 + 170 = 171\n  1 + 171 = 172\n  1 + 172 = 173\n  1 + 173 = 174\n  1 + 174 = 175\n  1 + 175 = 176\n  1 + 176 = 177\n  1 + 177 = 178\n  1 + 178 = 179\n  1 + 179 = 180\n  1 + 180 = 181\n  1 + 181 = 182\n  1 + 182 = 183\n  1 + 183 = 184\n  1 + 184 = 185\n  1 + 185 = 186\n  1 + 186 = 187\n  1 + 187 = 188\n  1 + 188 = 189\n  1 + 189 = 190\n  1 + 190 = 191\n  1 + 191 = 192\n  1 + 192 = 193\n  1 + 193 = 194\n  1 + 194 = 195\n  1 + 195 = 196\n  1 + 196 = 197\n  1 + 197 = 198\n  1 + 198 = 199\n  1 + 199 = 200\n  1 + 200 = 201\n  1 + 201 = 202\n  1 + 202 = 203\n  1 + 203 = 204\n  1 + 204 = 205\n  1 + 205 = 206\n  1 + 206 = 207\n  1 + 207 = 208\n  1 + 208 = 209\n  1 + 209 = 210\n  1 + 210 = 211\n  1 + 211 = 212\n  1 + 212 = 213\n  1 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i;\n  }\n  return product % 10;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 2.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 8\n  digits(235) == 42\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i * 2;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 6\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits multiplied by 2.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 6\n  digits(235) == 42\n  */\nconst digitSumOdd2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 3.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 9\n  digits(235) == 36\n  */\nconst digitSumOdd3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 3.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 9\n  digits(235) == 36\n  */\nconst digitSumOdd4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits multiplied by 3.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 6\n  */\nconst digitSumOdd5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits multiplied by 3.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 6\n  */\nconst digitSumOdd6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 4.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 12\n  digits(235) == 48\n  */\nconst digitSumOdd7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 4.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 12\n  digits(235) == 48\n  */\nconst digitSumOdd8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits multiplied by 4.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 6\n  */\nconst digitSumOdd9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits multiplied by 4.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 6\n  */\nconst digitSumOdd10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 5.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 15\n  digits(235) == 105\n  */\nconst digitSumOdd11 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even-numbered digits multiplied by 5.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 15\n  digits(235) == 105\n  */\nconst digitSumOdd12 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-numbered digits multiplied by 5.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 6\n  */\nconst digitSumOdd13 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 10 * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd-num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const bracketStack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let isNest = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n      bracketStack.push(string[i]);\n    } else if (string[i] === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        isNest = true;\n      }\n      bracketStack.pop();\n    }\n    if (openBrackets > closeBrackets) {\n      isNest = false;\n    }\n  }\n  return isNest;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const bracketStack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let isNest = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n      bracketStack.push(string[i]);\n    } else if (string[i] === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        isNest = true;\n      }\n      bracketStack.pop();\n    }\n    if (openBrackets > closeBrackets) {\n      isNest = false;\n    }\n  }\n  return isNest;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const bracketStack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let isNest = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n      bracketStack.push(string[i]);\n    } else if (string[i] === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        isNest = true;\n      }\n      bracketStack.pop();\n    }\n    if (openBrackets > closeBrackets) {\n      isNest = false;\n    }\n  }\n  return isNest;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const bracketStack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let isNest = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n      bracketStack.push(string[i]);\n    } else if (string[i] === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        isNest = true;\n      }\n      bracketStack.pop();\n    }\n    if (openBrackets > closeBrackets) {\n      isNest = false;\n    }\n  }\n  return isNest;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const bracketStack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let isNest = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n      bracketStack.push(string[i]);\n    } else if (string[i] === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        isNest = true;\n      }\n      bracketStack.pop();\n    }\n    if (openBrackets > closeBrackets) {\n      isNest = false;\n    }\n  }\n  return isNest;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const bracketStack = [];\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  let isNest = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n      bracketStack.push(string[i]);\n    } else if (string[i] === ']') {\n      closeBrackets++;\n      if (openBrackets === closeBrackets) {\n        openBrackets = 0;\n        closeBrackets = 0;\n        isNest = true;\n      }\n      bracketStack.pop();\n    }\n    if (openBrackets > closeBrackets) {\n      isNest = false;\n    }\n  }\n  return isNest;\n};\n\n/*\n  Create a function that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt[txt.length - 1];\n  return words.every(word => word.includes(lastChar) && word.split(\"\").every(char => char.match(/[a-z]/i)));\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const firstWord = words[0];\n  const lastWord = words[words.length - 1];\n  return firstWord === lastWord.split(\"\").reverse().join(\"\");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisors = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex2 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex3 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex4 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex5 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex6 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex7 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex8 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex9 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex10 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex11 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex12 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\n/*Create a function which returns an array of all numbers from 0 to n which are not divisible by any number between 1 and n. For example, if the input is 5, the output should be [1,2,3,4,5].\n\n  Examples:\n  divisors([1,2,3,4,5]) = [1,2,3,4,5]\n  divisors(5) = [0,1,2,3,4]\n*/\nconst divisorsIndex13 = (arr) => {\n  const arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      arr2.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max > min) {\n    return [max, min];\n  } else {\n    return [null, null];\n  }\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  sumOfPositiveIntegers([]) == (null, null)\n  sumOfPositiveIntegers([0]) == (null, null)\n  */\nconst sumOfPositiveIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, null];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  sumOfNegativeIntegers([]) == (null, null)\n  sumOfNegativeIntegers([0]) == (null, null)\n  */\nconst sumOfNegativeIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return [null, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, null];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [null, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === b) return null\n  if (a === 0) return 0\n  if (a === 1) return 1\n  if (a === -1) return -1\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.POSITIVE_INFINITY) return Number.POSITIVE_INFINITY\n  if (a === Number.NEGATIVE_INFINITY) return Number.NEGATIVE_INFINITY\n  if (a === Number.NaN) return Number.NaN\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MIN) return Number.MIN\n  if (a === Number.MAX) return Number.MAX\n  if (a === Number.EPSILON) return Number.EPSILON\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == true\n  isEqualToSumOdd(12) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == true\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == true\n  isEqualToSumOdd(12) == true\n  */\nconst isEqualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == true\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == true\n  isEqualToSumOdd(12) == true\n  */\nconst isEqualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == true\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factori", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentPrefix = currentPrefix + string[i];\n    } else {\n      prefixes.push(currentPrefix);\n      currentPrefix = string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === string[string.length - 1]) {\n      currentSuffix = currentSuffix + string[i];\n    } else {\n      suffixes.push(currentSuffix);\n      currentSuffix = string[i];\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(current", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all - in it with underscore, and if a string had more than 2 consecutive -, then replacing all consecutive - with _ fixMinus(\"Example\") == \"Example\"\n  fixMinus(\"Example 1\") == \"Example_1\"\n  fixMinus(\" Example 2\") == \"Example_2\"\n  fixMinus(\" Example   3\") == \"Example_3\"\n  */\nconst fixMinus = (text) => {\n  return text.replace(/-/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all. in it with _, and if a string had more than 2 consecutive., then replacing all consecutive. with _ fixDots(\"Example\") == \"Example\"\n  fixDots(\"Example 1\") == \"Example_1\"\n  fixDots(\" Example 2\") == \"Example_2\"\n  fixDots(\" Example   3\") == \"Example_3\"\n  */\nconst fixDots = (text) => {\n  return text.replace(/\\./g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all! in it with _, and if a string had more than 2 consecutive!, then replacing all consecutive! with _ fixExclamations(\"Example\") == \"Example\"\n  fixExclamations(\"Example 1\") == \"Example_1\"\n  fixExclamations(\" Example 2\") == \"Example_2\"\n  fixExclamations(\" Example   3\") == \"Example_3\"\n  */\nconst fixExclamations = (text) => {\n  return text.replace(/!/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all @ in it with _, and if a string had more than 2 consecutive @, then replacing all consecutive @ with _ fixAt(\"Example\") == \"Example\"\n  fixAt(\"Example 1\") == \"Example_1\"\n  fixAt(\" Example 2\") == \"Example_2\"\n  fixAt(\" Example   3\") == \"Example_3\"\n  */\nconst fixAt = (text) => {\n  return text.replace(/@/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all # in it with _, and if a string had more than 2 consecutive #, then replacing all consecutive # with _ fixHash(\"#Example\") == \"Example\"\n  fixHash(\"#Example 1\") == \"Example_1\"\n  fixHash(\" Example 2\") == \"Example_2\"\n  fixHash(\" Example   3\") == \"Example_3\"\n  */\nconst fixHash = (text) => {\n  return text.replace(/#/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all $ in it with _, and if a string had more than 2 consecutive $, then replacing all consecutive $ with _ fixDollars(\"Example\") == \"Example\"\n  fixDollars(\"Example 1\") == \"Example_1\"\n  fixDollars(\" Example 2\") == \"Example_2\"\n  fixDollars(\" Example   3\") == \"Example_3\"\n  */\nconst fixDollars = (text) => {\n  return text.replace(/\\$/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all % in it with _, and if a string had more than 2 consecutive %, then replacing all consecutive % with _ fixPercent(\"Example\") == \"Example\"\n  fixPercent(\"Example 1\") == \"Example_1\"\n  fixPercent(\" Example 2\") == \"Example_2\"\n  fixPercent(\" Example   3\") == \"Example_3\"\n  */\nconst fixPercent = (text) => {\n  return text.replace(/%/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all & in it with _, and if a string had more than 2 consecutive &, then replacing all consecutive & with _ fixAmpersand(\"Example\") == \"Example\"\n  fixAmpersand(\"Example 1\") == \"Example_1\"\n  fixAmpersand(\" Example 2\") == \"Example_2\"\n  fixAmpersand(\" Example   3\") == \"Example_3\"\n  */\nconst fixAmpersand = (text) => {\n  return text.replace(/&/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all ^ in it with _, and if a string had more than 2 consecutive ^, then replacing all consecutive ^ with _ fixCaret(\"Example\") == \"Example\"\n  fixCaret(\"Example 1\") == \"Example_1\"\n  fixCaret(\" Example 2\") == \"Example_2\"\n  fixCaret(\" Example   3\") == \"Example_3\"\n  */\nconst fixCaret = (text) => {\n  return text.replace(/\\^/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all _ in it with space, and if a string had more than 2 consecutive _, then replacing all consecutive _ with space fixUnderscore(\"Example\") == \"Example\"\n  fixUnderscore(\"Example 1\") == \"Example_1\"\n  fixUnderscore(\" Example 2\") == \"Example_2\"\n  fixUnderscore(\" Example   3\") == \"Example_3\"\n  */\nconst fixUnderscore = (text) => {\n  return text.replace(/_/g, \" \");\n};\n\n/*\n  Gives a string text, replacing all ~ in it with space, and if a string had more than 2 consecutive ~, then replacing all consecutive ~ with space fixTilde(\"Example\") == \"Example\"\n  fixTilde(\"Example 1\") == \"Example_1\"\n  fixTilde(\" Example 2\") == \"Example_2\"\n  fixTilde(\" Example   3\") == \"Example_3\"\n  */\nconst fixTilde = (text) => {\n  return text.replace(/~/g, \" \");\n};\n\n/*\n  Gives a string text, replacing all : in it with space, and if a string had more than 2 consecutive :, then replacing all consecutive : with space fixColon(\"Example\") == \"Example\"\n  fixColon(\"Example 1\") == \"Example_1\"\n  fixColon(\" Example 2\") == \"Example_2\"\n  fixColon(\" Example   3\") == \"Example_3\"\n  */\nconst fixColon = (text) => {\n  return text.replace(/:/g, \" \");\n};\n\n/*\n  Gives a string text, replacing all < in it with space, and if a string had more than 2 consecutive <, then replacing all consecutive < with space fixLessThan(\"Example\") == \"Example\"\n  fixLessThan(\"Example 1\") == \"Example_1\"\n  fixLessThan(\" Example 2\") == \"Example_2\"\n  fixLessThan(\" Example   3\") == \"Example_3\"\n  */\nconst fixLessThan = (text) => {\n  return text.replace(/</g, \" \");\n};\n\n/*\n  Gives a string text, replacing all > in it with space, and if a string had more than 2 consecutive >, then replacing all consecutive > with space fixGreaterThan(\"Example\") == \"Example\"\n  fixGreaterThan(\"Example 1\") == \"Example_1\"\n  fixGreaterThan(\" Example 2\") == \"Example_2\"\n  fixGreaterThan(\" ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the number of entries in the list whose indexes are not a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countNonMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the number of entries in the list whose indexes are a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the entries in the list whose indexes are a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubed = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the entries in the list whose indexes are not a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumNotCubed = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 || lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the entries in the list whose indexes are a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst productCubed = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the entries in the list whose indexes are not a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst productNotCubed = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 || lst[i] % 4!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the entries in the list whose indexes are a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst productCubedAndNotCubed = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the entries in the list whose indexes are not a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst productNotCubedAndCubed = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 || lst[i] % 4!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the entries in the list whose indexes are a multiples of 3 or 4. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst productCubedAndCubed = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const result = [];\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      result.push(sentence[i - 1]);\n    }\n  }\n  return result;\n};\n\nexport { wordsInSentence };\n\n/*\n  You were given a string representing a sentence,\n you need to return the number of words in the sentence.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: 4\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: 3\n\n  Example 3:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog\"\n      Output: 9\n\n  Example 4:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog.\"\n      Output: 9\n\n  Example 5:\n      Input: sentence = \"\"\n      Output: 0\n\n  Example 6:\n      Input: sentence = \"   \"\n      Output: 0\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence2 = (sentence) => {\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport { wordsInSentence2 };\n\n/*\n  You were given a string representing a sentence,\n you need to return the number of words in the sentence that starts with a given letter.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: 2\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: 1\n\n  Example 3:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog\"\n      Output: 5\n\n  Example 4:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog.\"\n      Output: 5\n\n  Example 5:\n      Input: sentence = \"\"\n      Output: 0\n\n  Example 6:\n      Input: sentence = \"   \"\n      Output: 0\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n      * sentence[i] starts with 'a'\n  */\nconst wordsInSentence3 = (sentence, letter) => {\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char === letter && char!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport { wordsInSentence3 };\n\n/*\n  You were given a string representing a sentence,\n you need to return the number of words in the sentence that starts with a given letter and ends with a given letter.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: 2\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: 1\n\n  Example 3:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog\"\n      Output: 5\n\n  Example 4:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog.\"\n      Output: 5\n\n  Example 5:\n      Input: sentence = \"\"\n      Output: 0\n\n  Example 6:\n      Input: sentence = \"   \"\n      Output: 0\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n      * sentence[i] starts with 'a'\n      * sentence[i] ends with 'g'\n  */\nconst wordsInSentence4 = (sentence, letter, endLetter) => {\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char === letter && char!=='') {\n      count++;\n    }\n    if (char === endLetter && char!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport { wordsInSentence4 };\n\n/*\n  You were given a string representing a sentence,\n you need to return the number of words in the sentence that starts with a given letter and ends with a given letter.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: 2\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: 1\n\n  Example 3:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog\"\n      Output: 5\n\n  Example 4:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog.\"\n      Output: 5\n\n  Example 5:\n      Input: sentence = \"\"\n      Output: 0\n\n  Example 6:\n      Input: sentence = \"   \"\n      Output: 0\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n      * sentence[i] starts with 'a'\n      * sentence[i] ends with 'g'\n  */\nconst wordsInSentence5 = (sentence, letter, endLetter) => {\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char === letter && char!=='') {\n      count++;\n    }\n    if (char === endLetter && char!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport { wordsInSentence5 };\n\n/*\n  You were given a string representing a sentence,\n you need to return the number of words in the sentence that starts with a given letter and ends with a given letter.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: 2\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: 1\n\n  Example 3:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog\"\n      Output: 5\n\n  Example 4:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog.\"\n      Output: 5\n\n  Example 5:\n      Input: sentence = \"\"\n      Output: 0\n\n  Example 6:\n      Input: sentence = \"   \"\n      Output: 0\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n      * sentence[i] starts with 'a'\n      * sentence[i] ends with 'g'\n  */\nconst wordsInSentence6 = (sentence, letter, endLetter) => {\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char === letter && char!=='') {\n      count++;\n    }\n    if (char === endLetter && char!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport { wordsInSentence6 };\n\n/*\n  You were given a string representing a sentence,\n you need to return the number of words in the sentence that starts with a given letter and ends with a given letter.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: 2\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: 1\n\n  Example 3:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog\"\n      Output: 5\n\n  Example 4:\n      Input: sentence = \"The quick brown fox jumps over the lazy dog.\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  const [num2, denom2] = n.split(\"/\").map(Number);\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom2) return true;\n  if (numer === num2 && denom === denom", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sumOfDigits = nums.reduce((sum, num) => {\n    return sum + num.toString().split('').reduce((sumOfDigit, digit) => sumOfDigit + +digit, 0);\n  }, 0);\n  return nums.sort((a, b) => {\n    return sumOfDigits - a.toString().split('').reduce((sumOfDigit, digit) => sumOfDigit + +digit, 0) -\n      sumOfDigits - b.toString().split('').reduce((sumOfDigit, digit) => sumOfDigit + +digit, 0);\n  });\n};\n\n/*\n  Write a function that returns the first element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> first([2, 3, 4, 5]) == 3\n  >>> first([2, 3, 4, 5]) == null\n  */\nconst first = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[0]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns the last element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> last([2, 3, 4, 5]) == 5\n  >>> last([2, 3, 4, 5]) == null\n  */\nconst last = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[i]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns an array of numbers that satisfy a condition. Notes: if there is no such element return an empty array.\n\n For examples:\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == [2, 4, 5]\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == []\n  */\nconst filter = (arr, condition) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Write a function that returns the first element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> first([2, 3, 4, 5]) == 3\n  >>> first([2, 3, 4, 5]) == null\n  */\nconst first = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[0]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns the last element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> last([2, 3, 4, 5]) == 5\n  >>> last([2, 3, 4, 5]) == null\n  */\nconst last = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[i]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns an array of numbers that satisfy a condition. Notes: if there is no such element return an empty array.\n\n For examples:\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == [2, 4, 5]\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == []\n  */\nconst filter = (arr, condition) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Write a function that returns the first element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> first([2, 3, 4, 5]) == 3\n  >>> first([2, 3, 4, 5]) == null\n  */\nconst first = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[0]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns the last element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> last([2, 3, 4, 5]) == 5\n  >>> last([2, 3, 4, 5]) == null\n  */\nconst last = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[i]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns an array of numbers that satisfy a condition. Notes: if there is no such element return an empty array.\n\n For examples:\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == [2, 4, 5]\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == []\n  */\nconst filter = (arr, condition) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Write a function that returns the first element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> first([2, 3, 4, 5]) == 3\n  >>> first([2, 3, 4, 5]) == null\n  */\nconst first = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[0]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns the last element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> last([2, 3, 4, 5]) == 5\n  >>> last([2, 3, 4, 5]) == null\n  */\nconst last = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[i]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns an array of numbers that satisfy a condition. Notes: if there is no such element return an empty array.\n\n For examples:\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == [2, 4, 5]\n  >>> filter([2, 3, 4, 5], (x) => x % 2 === 0) == []\n  */\nconst filter = (arr, condition) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Write a function that returns the first element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> first([2, 3, 4, 5]) == 3\n  >>> first([2, 3, 4, 5]) == null\n  */\nconst first = (arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[0]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns the last element of an array that satisfies a condition. Notes: if there is no such element return null.\n\n For examples:\n  >>> last([2, 3, 4, 5]) == 5\n  >>> last([2, 3, 4, 5]) == null\n  */\nconst last = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[i]) return arr[i];\n  }\n  return null;\n};\n\n/*\n  Write a function that returns an array of numbers that satisfy a condition. Notes: if there is no ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  oddFilter([15, -73, 14, -15]) => 1 \n  oddFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  evenFilter([15, -73, 14, -15]) => 0 \n  evenFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst evenFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  oddSumFilter([15, -73, 14, -15]) => 1 \n  oddSumFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst oddSumFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  evenSumFilter([15, -73, 14, -15]) => 0 \n  evenSumFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst evenSumFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  oddProductFilter([15, -73, 14, -15]) => 1 \n  oddProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst oddProductFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  evenProductFilter([15, -73, 14, -15]) => 0 \n  evenProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst evenProductFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  oddSumProductFilter([15, -73, 14, -15]) => 1 \n  oddSumProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst oddSumProductFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  evenSumProductFilter([15, -73, 14, -15]) => 0 \n  evenSumProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst evenSumProductFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  oddSumProductFilter([15, -73, 14, -15]) => 1 \n  oddSumProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst oddSumProductFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  evenSumProductFilter([15, -73, 14, -15]) => 0 \n  evenSumProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst evenSumProductFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 0 && nums[i] % 3 === 0 && nums[i] % 5 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  oddSumProductFilter([15, -73, 14, -15]) => 1 \n  oddSumProductFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst oddSumProductFilter = (nums) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(findMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a |>\n<code>\nfunction findMaxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1)\n  let planet2Orbit = orbit(planet2)\n  let planet1Sun = sun(planet1)\n  let planet2Sun = sun(planet2)\n  let planet1SunOrbit = orbit(planet1Sun)\n  let planet2SunOrbit = orbit(planet2Sun)\n  let planet1SunSun = sun(planet1Sun)\n  let planet2SunSun = sun(planet2Sun)\n  let planet1SunSunOrbit = orbit(planet1SunSun)\n  let planet2SunSunOrbit = orbit(planet2SunSun)\n  let planet1SunSunSun = sun(planet1SunSun)\n  let planet2SunSunSun = sun(planet2SunSun)\n  let planet1SunSunSunOrbit = orbit(planet1SunSunSun)\n  let planet2SunSunSunOrbit = orbit(planet2SunSunSun)\n  let planet1SunSunSunSun = sun(planet1SunSunSun)\n  let planet2SunSunSunSun = sun(planet2SunSunSun)\n  let planet1SunSunSunSunOrbit = orbit(planet1SunSunSunSun)\n  let planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun)\n  let planet1SunSunSunSunSun = sun(planet1SunSunSunSun)\n  let planet2SunSunSunSun = sun(planet2SunSunSunSun)\n  let planet1SunSunSunSunOrbit = orbit(planet1SunSunSunSun)\n  let planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun)\n  let planet1SunSunSunSunSun = sun(planet1SunSunSunSun)\n  let planet2SunSunSunSun = sun(planet2SunSunSunSun)\n  let planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSun)\n  let planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun)\n  let planet1SunSunSunSunSun = sun(planet1SunSunSunSunSun)\n  let planet2SunSunSunSun = sun(planet2SunSunSunSun)\n  let planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSun)\n  let planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun)\n  let planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSun)\n  let planet2SunSunSunSunSun = sun(planet2SunSunSunSun)\n  let planet1SunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun)\n  let planet2SunSunSunSunOrbit = orbit(planet2SunSunSunSun)\n  let planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSun)\n  let planet2SunSunSunSunSun = sun(planet2SunSunSunSun)\n  let planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun)\n  let planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSun)\n  let planet1SunSunSunSunSunSun = sun(planet1SunSunSunSunSun)\n  let planet2SunSunSunSunSun = sun(planet2SunSunSunSunSun)\n  let planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun)\n  let planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSun = sun(planet1SunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSun = sun(planet2SunSunSunSunSun)\n  let planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSun)\n  let planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSun = sun(planet1SunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSun = sun(planet2SunSunSunSunSunSun)\n  let planet1SunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSun = sun(planet1SunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSun = sun(planet2SunSunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSun = sun(planet1SunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSun = sun(planet2SunSunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSunSunOrbit = orbit(planet1SunSunSunSunSunSunSunSunSun)\n  let planet2SunSunSunSunSunSunSunOrbit = orbit(planet2SunSunSunSunSunSunSun)\n  let planet1SunSunSunSunSunSunSunSunOrbit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string in upper case. You may assume that the string will had at least 1 character. You may not use any loop to do that. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. You may use only string methods to do that. You may not use any conditional statement. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, start = 0, end = n) => {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequence = (n, start = 0, end = n, step = 1, step = 1) => {\n  const result = [];\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  const sumOfSquares = lst.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return sumOfSquares % 2 === 0? sumOfSquares : 0;\n};\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    score.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const correct = guesses.every((guess, i) => {\n    return guess === score[i];\n  });\n  return correct? [0, 0, 0, 0, 0, 0] : Math.abs(guesses.map((guess, i) => guess - score[i]));\n};\n\n// Tests\nconst tests = [\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 2]],\n  [[1, 2, 3, 4, 5", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = class_name + extension;\n    const extension_class_name = extension_class.slice(0, extension_class.lastIndexOf('.'));\n    const extension_class_name_length = extension_class_name.length;\n    const extension_class_name_upper = extension_class_name.toUpperCase();\n    const extension_class_name_lower = extension_class_name.toLowerCase();\n    const extension_class_name_upper_caps = extension_class_name_upper.slice(0, extension_class_name_upper.length - extension_class_name_length);\n    const extension_class_name_lower_caps = extension_class_name_lower.slice(0, extension_class_name_lower.length - extension_class_name_length);\n    const extension_class_name_upper_sm = extension_class_name_upper.slice(extension_class_name_upper.length - extension_class_name_length);\n    const extension_class_name_lower_sm = extension_class_name_lower.slice(extension_class_name_lower.length - extension_class_name_length);\n    const extension_class_name_upper_caps_sm = extension_class_name_upper_sm.slice(0, extension_class_name_upper_sm.length - extension_class_name_length);\n    const extension_class_name_lower_caps_sm = extension_class_name_lower_sm.slice(0, extension_class_name_lower_sm.length - extension_class_name_length);\n    const extension_class_name_upper_sm_index = extension_class_name_upper.lastIndexOf('S');\n    const extension_class_name_lower_sm_index = extension_class_name_lower.lastIndexOf('S');\n    const extension_class_name_upper_caps_sm_index = extension_class_name_upper_sm.lastIndexOf('S');\n    const extension_class_name_lower_caps_sm_index = extension_class_name_lower_sm.lastIndexOf('S');\n    const extension_class_name_upper_caps_sm_length = extension_class_name_upper_caps_sm.length;\n    const extension_class_name_lower_caps_sm_length = extension_class_name_lower_caps_sm.length;\n    const extension_class_name_upper_caps_sm_upper = extension_class_name_upper_caps_sm.slice(0, extension_class_name_upper_caps_sm_length);\n    const extension_class_name_lower_caps_sm_upper = extension_class_name_lower_caps_sm.slice(0, extension_class_name_lower_caps_sm_length);\n    const extension_class_name_upper_caps_sm_lower = extension_class_name_upper_caps_sm.slice(extension_class_name_upper_caps_sm_length);\n    const extension_class_name_lower_caps_sm_lower = extension_class_name_lower_caps_sm.slice(extension_class_name_lower_caps_sm_length);\n    const extension_class_name_upper_caps_sm_upper_sm = extension_class_name_upper_caps_sm.slice(0, extension_class_name_upper_caps_sm_upper.length);\n    const extension_class_name_lower_caps_sm_upper_sm = extension_class_name_lower_caps_sm.slice(0, extension_class_name_lower_caps_sm_upper.length);\n    const extension_class_name_upper_caps_sm_lower_sm = extension_class_name_upper_caps_sm.slice(extension_class_name_upper_caps_sm_upper.length);\n    const extension_class_name_lower_caps_sm_lower_sm = extension_class_name_lower_caps_sm.slice(extension_class_name_lower_caps_sm_upper.length);\n    const extension_class_name_upper_caps_sm_upper_sm_length = extension_class_name_upper_caps_sm_upper_sm.length;\n    const extension_class_name_lower_caps_sm_upper_sm_length = extension_class_name_lower_caps_sm_upper_sm.length;\n    const extension_class_name_upper_caps_sm_lower_sm_length = extension_class_name_upper_caps_sm_lower_sm.length;\n    const extension_class_name_lower_caps_sm_lower_sm_length = extension_class_name_lower_caps_sm_lower_sm.length;\n    const extension_class_name_upper_caps_sm_upper_sm_upper = extension_class_name_upper_caps_sm_upper_sm.slice(0, extension_class_name_upper_caps_sm_upper_sm_length);\n    const extension_class_name_lower_caps_sm_upper_sm_upper = extension_class_name_lower_caps_sm_upper_sm.slice(0, extension_class_name_lower_caps_sm_upper_sm_length);\n    const extension_class_name_upper_caps_sm_lower_sm_upper = extension_class_name_upper_caps_sm_lower_sm.slice(0, extension_class_name_upper_caps_sm_lower_sm_upper);\n    const extension_class_name_lower_caps_sm_lower_sm_upper = extension_class_name_lower_caps_sm_lower_sm.slice(0, extension_class_name_lower_caps_sm_lower_sm_upper);\n    const extension_class_name_upper_caps_sm_upper_sm_upper_sm = extension_class_name_upper_caps_sm_upper_sm.slice(0, extension_class_name_upper_caps_sm_upper_sm_upper_sm_length);\n    const extension_class_name_lower_caps_sm_upper_sm_upper_sm = extension_class_name_lower_caps_sm_upper_sm.slice(0, extension_class_name_lower_caps_sm_upper_sm_upper_sm_length);\n    const extension_class_name_upper_caps_sm_lower_sm_upper_sm = extension_class_name_upper_caps_sm_lower_sm_upper.slice(0, extension_class_name_upper_caps_sm_lower_sm_upper_sm_length);\n    const extension_class_name_lower_caps_sm_lower_sm_upper_sm = extension_class_name_lower_caps_sm_lower_sm_upper.slice(0, extension_class_name_lower_caps_sm_lower_sm_upper_sm_length);\n    const extension_class_name_upper_caps_sm_upper_sm_upper_sm_length = extension_class_name_upper_caps_sm_upper_sm_upper_sm.length;\n    const extension_class_name_lower_caps_sm_upper_sm_upper_sm_length = extension_class_name_lower_caps_sm_upper_sm_upper_sm.length;\n    const extension_class_name_upper_caps_sm_lower_sm_upper_sm_length = extension_class_name_upper_caps_sm_lower_sm_upper_sm.length;\n    const extension_class_name_lower_caps_sm_lower_sm_upper_sm_length = extension_class_name_lower_caps_sm_lower_sm_upper_sm.length;\n    const extension_class_name_upper_caps_sm_upper_sm_upper_sm_upper = extension_class_name_upper_caps_sm_upper_sm_upper_sm.slice(0, extension_class_name_upper_caps_sm_upper_sm_upper_sm_length);\n    const extension_class_name_lower_caps_sm_upper_sm_upper_sm_upper = extension_class_name_lower_caps_sm_upper_sm_upper_sm.slice(0, extension_class_name_lower_caps_sm_upper_sm_upper_sm_length);\n    const extension_class_name_upper_caps_sm_lower_sm_upper_sm_upper = extension_class_name_upper_caps_sm_lower_sm_upper_sm.slice(0, extension_class_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  let aIndex = 0;\n  let bIndex = 0;\n  let aIndex2 = 0;\n  let bIndex2 = 0;\n  let aIndex3 = 0;\n  let bIndex3 = 0;\n  let aIndex4 = 0;\n  let bIndex4 = 0;\n  let aIndex5 = 0;\n  let bIndex5 = 0;\n  let aIndex6 = 0;\n  let bIndex6 = 0;\n  let aIndex7 = 0;\n  let bIndex7 = 0;\n  let aIndex8 = 0;\n  let bIndex8 = 0;\n  let aIndex9 = 0;\n  let bIndex9 = 0;\n  let aIndex10 = 0;\n  let bIndex10 = 0;\n  let aIndex11 = 0;\n  let bIndex11 = 0;\n  let aIndex12 = 0;\n  let bIndex12 = 0;\n  let aIndex13 = 0;\n  let bIndex13 = 0;\n  let aIndex14 = 0;\n  let bIndex14 = 0;\n  let aIndex15 = 0;\n  let bIndex15 = 0;\n  let aIndex16 = 0;\n  let bIndex16 = 0;\n  let aIndex17 = 0;\n  let bIndex17 = 0;\n  let aIndex18 = 0;\n  let bIndex18 = 0;\n  let aIndex19 = 0;\n  let bIndex19 = 0;\n  let aIndex20 = 0;\n  let bIndex20 = 0;\n  let aIndex21 = 0;\n  let bIndex21 = 0;\n  let aIndex22 = 0;\n  let bIndex22 = 0;\n  let aIndex23 = 0;\n  let bIndex23 = 0;\n  let aIndex24 = 0;\n  let bIndex24 = 0;\n  let aIndex25 = 0;\n  let bIndex25 = 0;\n  let aIndex26 = 0;\n  let bIndex26 = 0;\n  let aIndex27 = 0;\n  let bIndex27 = 0;\n  let aIndex28 = 0;\n  let bIndex28 = 0;\n  let aIndex29 = 0;\n  let bIndex29 = 0;\n  let aIndex30 = 0;\n  let bIndex30 = 0;\n  let aIndex31 = 0;\n  let bIndex31 = 0;\n  let aIndex32 = 0;\n  let bIndex32 = 0;\n  let aIndex33 = 0;\n  let bIndex33 = 0;\n  let aIndex34 = 0;\n  let bIndex34 = 0;\n  let aIndex35 = 0;\n  let bIndex35 = 0;\n  let aIndex36 = 0;\n  let bIndex36 = 0;\n  let aIndex37 = 0;\n  let bIndex37 = 0;\n  let aIndex38 = 0;\n  let bIndex38 = 0;\n  let aIndex39 = 0;\n  let bIndex39 = 0;\n  let aIndex40 = 0;\n  let bIndex40 = 0;\n  let aIndex41 = 0;\n  let bIndex41 = 0;\n  let aIndex42 = 0;\n  let bIndex42 = 0;\n  let aIndex43 = 0;\n  let bIndex43 = 0;\n  let aIndex44 = 0;\n  let bIndex44 = 0;\n  let aIndex45 = 0;\n  let bIndex45 = 0;\n  let aIndex46 = 0;\n  let bIndex46 = 0;\n  let aIndex47 = 0;\n  let bIndex47 = 0;\n  let aIndex48 = 0;\n  let bIndex48 = 0;\n  let aIndex49 = 0;\n  let bIndex49 = 0;\n  let aIndex50 = 0;\n  let bIndex50 = 0;\n  let aIndex51 = 0;\n  let bIndex51 = 0;\n  let aIndex52 = 0;\n  let bIndex52 = 0;\n  let aIndex53 = 0;\n  let bIndex53 = 0;\n  let aIndex54 = 0;\n  let bIndex54 = 0;\n  let aIndex55 = 0;\n  let bIndex55 = 0;\n  let aIndex56 = 0;\n  let bIndex56 = 0;\n  let aIndex57 = 0;\n  let bIndex57 = 0;\n  let aIndex58 = 0;\n  let bIndex58 = 0;\n  let aIndex59 = 0;\n  let bIndex59 = 0;\n  let aIndex60 = 0;\n  let bIndex60 = 0;\n  let aIndex61 = 0;\n  let bIndex61 = 0;\n  let aIndex62 = 0;\n  let bIndex62 = 0;\n  let aIndex63 = 0;\n  let bIndex63 = 0;\n  let aIndex64 = 0;\n  let bIndex64 = 0;\n  let aIndex65 = 0;\n  let bIndex65 = 0;\n  let aIndex66 = 0;\n  let bIndex66 = 0;\n  let aIndex67 = 0;\n  let bIndex67 = 0;\n  let aIndex68 = 0;\n  let bIndex68 = 0;\n  let aIndex69 = 0;\n  let bIndex69 = 0;\n  let aIndex70 = 0;\n  let bIndex70 = 0;\n  let aIndex71 = 0;\n  let bIndex71 = 0;\n  let aIndex72 = 0;\n  let bIndex72 = 0;\n  let aIndex73 = 0;\n  let bIndex73 = 0;\n  let aIndex74 = 0;\n  let bIndex74 = 0;\n  let aIndex75 = 0;\n  let bIndex75 = 0;\n  let aIndex76 = 0;\n  let bIndex76 = 0;\n  let aIndex77 = 0;\n  let bIndex77 = 0;\n  let aIndex78 = 0;\n  let bIndex78 = 0;\n  let aIndex79 = 0;\n  let bIndex79 = 0;\n  let aIndex80 = 0;\n  let bIndex80 = 0;\n  let aIndex81 = 0;\n  let bIndex81 = 0;\n  let aIndex82 = 0;\n  let bIndex82 = 0;\n  let aIndex83 = 0;\n  let bIndex83 = 0;\n  let aIndex84 = 0;\n  let bIndex84 = 0;\n  let aIndex85 = 0;\n  let bIndex85 = 0;\n  let aIndex86 = 0;\n  let bIndex86 = 0;\n  let aIndex87 = 0;\n  let bIndex87 = 0;\n  let aIndex88 = 0;\n  let bIndex88 = 0;\n  let aIndex89 = 0;\n  let bIndex89 = 0;\n  let aIndex90 = 0;\n  let bIndex90 = 0;\n  let aIndex91 = 0;\n  let bIndex91 = 0;\n  let aIndex92 = 0;\n  let bIndex92 = 0;\n  let aIndex93 = 0;\n  let bIndex93 = 0;\n  let aIndex94 = 0;\n  let bIndex94 = 0;\n  let aIndex95 = 0;\n  let bIndex95 = 0;\n  let aIndex96 = 0;\n  let bIndex96 = 0;\n  let aIndex97 = 0;\n  let bIndex97 = 0;\n  let aIndex98 = 0;\n  let bIndex98 = 0;\n  let aIndex99 = 0;\n  let bIndex99 = 0;\n  let aIndex100 = 0;\n  let bIndex100 = 0;\n  let aIndex101 = 0;\n  let bIndex101 = 0;\n  let aIndex102 = 0;\n  let bIndex102 = 0;\n  let aIndex103 = 0;\n  let bIndex103 = 0;\n  let aIndex104 = 0;\n  let bIndex104 = 0;\n  let aIndex105 = 0;\n  let bIndex105 = 0;\n  let aIndex106 = 0;\n  let bIndex106 = 0;\n  let aIndex107 = 0;\n  let bIndex107 = 0;\n  let aIndex108 = 0;\n  let bIndex108 = 0;\n  let aIndex109 = 0;\n  let bIndex109 = 0;\n  let aIndex110 = 0;\n  let bIndex110 = 0;\n  let aIndex111 = 0;\n  let bIndex111 = 0;\n  let aIndex112 = 0;\n  let bIndex112 = 0;\n  let aIndex113 = 0;\n  let bIndex113 = 0;\n  let aIndex114 = 0;\n  let bIndex114 = 0;\n  let aIndex115 = 0;\n  let bIndex115 = 0;\n  let aIndex116 = 0;\n  let bIndex116 = 0;\n  let aIndex117 = 0;\n  let bIndex117 = 0;\n  let aIndex118 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that had the length of the string and the number of vowels contained in the string.\n\n   Example:\n      vowelCount(\"hello\") ==> (5, 2)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowelCount(\"helloooooooo\") ==> (5, 4)\n      vowel", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRomanLower = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanUpperLower = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRomanLowerLower = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanUpperUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRomanLowerUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanUpperLowerUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRomanLowerLowerUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRomanUpperUpperUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toUpperCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRomanLowerUpperUpperUpper = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> int", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given a triangle, find the area of its perimeter. Return trueer if the area of the triangle is equal to the area of the perimeter, false otherwise.\n  Example:\n  triangleArea(3, 4, 5) == true\n  triangleArea(1, 2, 3) == false\n  */\nconst triangleArea = (a, b, c) => {\n  return Math.abs(a * b * c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle. Return trueer if the circumference of the triangle is equal to the circumference of the perimeter, false otherwise.\n  Example:\n  triangleCircumference(3, 4, 5) == true\n  triangleCircumference(1, 2, 3) == false\n  */\nconst triangleCircumference = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) * 2;\n};\n\n/*\n Given a triangle, find the area of the triangle formed by the three sides. Return trueer if the area of the triangle is equal to the area of the triangle, false otherwise.\n  Example:\n  triangleAreaFromThreeSides(3, 4, 5) == true\n  triangleAreaFromThreeSides(1, 2, 3) == false\n  */\nconst triangleAreaFromThreeSides = (a, b, c, d) => {\n  return Math.abs(a * b * c * d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle formed by the three sides. Return trueer if the circumference of the triangle is equal to the circumference of the triangle, false otherwise.\n  Example:\n  triangleCircumferenceFromThreeSides(3, 4, 5) == true\n  triangleCircumferenceFromThreeSides(1, 2, 3) == false\n  */\nconst triangleCircumferenceFromThreeSides = (a, b, c, d) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) * 2;\n};\n\n/*\n Given a triangle, find the area of the triangle formed by the three sides. Return trueer if the area of the triangle is equal to the area of the triangle, false otherwise.\n  Example:\n  triangleAreaFromThreeSides(3, 4, 5) == true\n  triangleAreaFromThreeSides(1, 2, 3) == false\n  */\nconst triangleAreaFromThreeSides = (a, b, c, d) => {\n  return Math.abs(a * b * c * d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle formed by the three sides. Return trueer if the circumference of the triangle is equal to the circumference of the triangle, false otherwise.\n  Example:\n  triangleCircumferenceFromThreeSides(3, 4, 5) == true\n  triangleCircumferenceFromThreeSides(1, 2, 3) == false\n  */\nconst triangleCircumferenceFromThreeSides = (a, b, c, d) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) * 2;\n};\n\n/*\n Given a triangle, find the area of the triangle formed by the three sides. Return trueer if the area of the triangle is equal to the area of the triangle, false otherwise.\n  Example:\n  triangleAreaFromThreeSides(3, 4, 5) == true\n  triangleAreaFromThreeSides(1, 2, 3) == false\n  */\nconst triangleAreaFromThreeSides = (a, b, c, d) => {\n  return Math.abs(a * b * c * d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle formed by the three sides. Return trueer if the circumference of the triangle is equal to the circumference of the triangle, false otherwise.\n  Example:\n  triangleCircumferenceFromThreeSides(3, 4, 5) == true\n  triangleCircumferenceFromThreeSides(1, 2, 3) == false\n  */\nconst triangleCircumferenceFromThreeSides = (a, b, c, d) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) * 2;\n};\n\n/*\n Given a triangle, find the area of the triangle formed by the three sides. Return trueer if the area of the triangle is equal to the area of the triangle, false otherwise.\n  Example:\n  triangleAreaFromThreeSides(3, 4, 5) == true\n  triangleAreaFromThreeSides(1, 2, 3) == false\n  */\nconst triangleAreaFromThreeSides = (a, b, c, d) => {\n  return Math.abs(a * b * c * d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle formed by the three sides. Return trueer if the circumference of the triangle is equal to the circumference of the triangle, false otherwise.\n  Example:\n  triangleCircumferenceFromThreeSides(3, 4, 5) == true\n  triangleCircumferenceFromThreeSides(1, 2, 3) == false\n  */\nconst triangleCircumferenceFromThreeSides = (a, b, c, d) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) * 2;\n};\n\n/*\n Given a triangle, find the area of the triangle formed by the three sides. Return trueer if the area of the triangle is equal to the area of the triangle, false otherwise.\n  Example:\n  triangleAreaFromThreeSides(3, 4, 5) == true\n  triangleAreaFromThreeSides(1, 2, 3) == false\n  */\nconst triangleAreaFromThreeSides = (a, b, c, d) => {\n  return Math.abs(a * b * c * d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle formed by the three sides. Return trueer if the circumference of the triangle is equal to the circumference of the triangle, false otherwise.\n  Example:\n  triangleCircumferenceFromThreeSides(3, 4, 5) == true\n  triangleCircumferenceFromThreeSides(1, 2, 3) == false\n  */\nconst triangleCircumferenceFromThreeSides = (a, b, c, d) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)) * 2;\n};\n\n/*\n Given a triangle, find the area of the triangle formed by the three sides. Return trueer if the area of the triangle is equal to the area of the triangle, false otherwise.\n  Example:\n  triangleAreaFromThreeSides(3, 4, 5) == true\n  triangleAreaFromThreeSides(1, 2, 3) == false\n  */\nconst triangleAreaFromThreeSides = (a, b, c, d) => {\n  return Math.abs(a * b * c * d) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2));\n};\n\n/*\n Given a triangle, find the circumference of the triangle formed by the three sides. Return trueer if the circumference of the triangle is equal to the circumference of the triangle, false otherwise.\n  Example:\n  triangleCircumferenceFromThreeSides(3, 4, 5) == true\n  triangleCircumferenceFromThreeSides(1, 2, 3) == false\n  */\nconst triangleCir", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const uniqueCharMap = new Map();\n  const sortedWords = words.sort((a, b) => a.length - b.length);\n  let maxCharCount = 0;\n  let maxCharCountWord = '';\n  let maxCharCountWordIndex = 0;\n  for (let i = 0; i < sortedWords.length; i++) {\n    const word = sortedWords[i];\n    const charCount = word.length;\n    if (charCount > maxCharCount) {\n      maxCharCount = charCount;\n      maxCharCountWord = word;\n      maxCharCountWordIndex = i;\n    }\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      if (!uniqueCharMap.has(char)) {\n        uniqueCharMap.set(char, 1);\n      } else {\n        uniqueCharMap.set(char, uniqueCharMap.get(char) + 1);\n      }\n    }\n  }\n  return maxCharCountWord === ''\n   ? ''\n    : sortedWords[maxCharCountWordIndex];\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of the character 'a' in that string. countA(\"aba\") === 2 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === 0 countA(\"aba\") === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  return [number - need, remaining - need];\n};\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  return [number - need, remaining - need];\n};\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  return [number - need, remaining - need];\n};\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  return [number - need, remaining - need];\n};\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  return [number - need, remaining - need];\n};\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  return [number - need, remaining - need];\n};\n\n/*\n  You're a hungry rabbit, and you already had eaten ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const uniqueChars = chars.filter((char, index) => chars.indexOf(char) === index);\n  return uniqueChars.length;\n};\n\n/**\n * Returns true if the given string is a valid email address\n * \n * A valid email address is a string that does not contain any spaces, tabs, or line breaks\n * \n * Valid email addresses follow the format \n * \n * removed@example.com\n * \n * Returns true if the given string is a valid email address\n * \n * Returns false if the given string is not valid email address\n * \n * >>> isValidEmail('removed@example.com')\n * true\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n * false\n * >>> isValidEmail('removed@example.com')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      newString += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      newString += s.charAt(i).toUpperCase();\n    } else {\n      newString += s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n Given a string s, a number k, and a number m, find the number of ways to make string s into a palindrome of length at most k.\n  Examples\n  makePalindrome(\"ab\", 2, 2) = 1\n  makePalindrome(\"ab\", 2, 3) = 1\n  makePalindrome(\"ab\", 2, 4) = 2\n  makePalindrome(\"ab\", 2, 5) = 2\n  makePalindrome(\"ab\", 2, 6) = 3\n  makePalindrome(\"ab\", 2, 7) = 4\n  makePalindrome(\"ab\", 2, 8) = 4\n  makePalindrome(\"ab\", 2, 9) = 4\n  makePalindrome(\"ab\", 2, 10) = 4\n  makePalindrome(\"ab\", 2, 11) = 4\n  makePalindrome(\"ab\", 2, 12) = 4\n  makePalindrome(\"ab\", 2, 13) = 3\n  makePalindrome(\"ab\", 2, 14) = 3\n  makePalindrome(\"ab\", 2, 15) = 3\n  makePalindrome(\"ab\", 2, 16) = 3\n  makePalindrome(\"ab\", 2, 17) = 3\n  makePalindrome(\"ab\", 2, 18) = 3\n  makePalindrome(\"ab\", 2, 19) = 3\n  makePalindrome(\"ab\", 2, 20) = 3\n  makePalindrome(\"ab\", 2, 21) = 3\n  makePalindrome(\"ab\", 2, 22) = 3\n  makePalindrome(\"ab\", 2, 23) = 3\n  makePalindrome(\"ab\", 2, 24) = 3\n  makePalindrome(\"ab\", 2, 25) = 3\n  makePalindrome(\"ab\", 2, 26) = 3\n  makePalindrome(\"ab\", 2, 27) = 3\n  makePalindrome(\"ab\", 2, 28) = 3\n  makePalindrome(\"ab\", 2, 29) = 3\n  makePalindrome(\"ab\", 2, 30) = 3\n  makePalindrome(\"ab\", 2, 31) = 3\n  makePalindrome(\"ab\", 2, 32) = 3\n  makePalindrome(\"ab\", 2, 33) = 3\n  makePalindrome(\"ab\", 2, 34) = 3\n  makePalindrome(\"ab\", 2, 35) = 3\n  makePalindrome(\"ab\", 2, 36) = 3\n  makePalindrome(\"ab\", 2, 37) = 3\n  makePalindrome(\"ab\", 2, 38) = 3\n  makePalindrome(\"ab\", 2, 39) = 3\n  makePalindrome(\"ab\", 2, 40) = 3\n  makePalindrome(\"ab\", 2, 41) = 3\n  makePalindrome(\"ab\", 2, 42) = 3\n  makePalindrome(\"ab\", 2, 43) = 3\n  makePalindrome(\"ab\", 2, 44) = 3\n  makePalindrome(\"ab\", 2, 45) = 3\n  makePalindrome(\"ab\", 2, 46) = 3\n  makePalindrome(\"ab\", 2, 47) = 3\n  makePalindrome(\"ab\", 2, 48) = 3\n  makePalindrome(\"ab\", 2, 49) = 3\n  makePalindrome(\"ab\", 2, 50) = 3\n  makePalindrome(\"ab\", 2, 51) = 3\n  makePalindrome(\"ab\", 2, 52) = 3\n  makePalindrome(\"ab\", 2, 53) = 3\n  makePalindrome(\"ab\", 2, 54) = 3\n  makePalindrome(\"ab\", 2, 55) = 3\n  makePalindrome(\"ab\", 2, 56) = 3\n  makePalindrome(\"ab\", 2, 57) = 3\n  makePalindrome(\"ab\", 2, 58) = 3\n  makePalindrome(\"ab\", 2, 59) = 3\n  makePalindrome(\"ab\", 2, 60) = 3\n  makePalindrome(\"ab\", 2, 61) = 3\n  makePalindrome(\"ab\", 2, 62) = 3\n  makePalindrome(\"ab\", 2, 63) = 3\n  makePalindrome(\"ab\", 2, 64) = 3\n  makePalindrome(\"ab\", 2, 65) = 3\n  makePalindrome(\"ab\", 2, 66) = 3\n  makePalindrome(\"ab\", 2, 67) = 3\n  makePalindrome(\"ab\", 2, 68) = 3\n  makePalindrome(\"ab\", 2, 69) = 3\n  makePalindrome(\"ab\", 2, 70) = 3\n  makePalindrome(\"ab\", 2, 71) = 3\n  makePalindrome(\"ab\", 2, 72) = 3\n  makePalindrome(\"ab\", 2, 73) = 3\n  makePalindrome(\"ab\", 2, 74) = 3\n  makePalindrome(\"ab\", 2, 75) = 3\n  makePalindrome(\"ab\", 2, 76) = 3\n  makePalindrome(\"ab\", 2, 77) = 3\n  makePalindrome(\"ab\", 2, 78) = 3\n  makePalindrome(\"ab\", 2, 79) = 3\n  makePalindrome(\"ab\", 2, 80) = 3\n  makePalindrome(\"ab\", 2, 81) = 3\n  makePalindrome(\"ab\", 2, 82) = 3\n  makePalindrome(\"ab\", 2, 83) = 3\n  makePalindrome(\"ab\", 2, 84) = 3\n  makePalindrome(\"ab\", 2, 85) = 3\n  makePalindrome(\"ab\", 2, 86) = 3\n  makePalindrome(\"ab\", 2, 87) = 3\n  makePalindrome(\"ab\", 2, 88) = 3\n  makePalindrome(\"ab\", 2, 89) = 3\n  makePalindrome(\"ab\", 2, 90) = 3\n  makePalindrome(\"ab\", 2, 91) = 3\n  makePalindrome(\"ab\", 2, 92) = 3\n  makePalindrome(\"ab\", 2, 93) = 3\n  makePalindrome(\"ab\", 2, 94) = 3\n  makePalindrome(\"ab\", 2, 95) = 3\n  makePalindrome(\"ab\", 2, 96) = 3\n  makePalindrome(\"ab\", 2, 97) = 3\n  makePalindrome(\"ab\", 2, 98) = 3\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == '9a2b9fde0c79f39d47ebb9d67e22a89e'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha1')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha256 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha256('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037a6e0f0eb94fe8ee941ed940'\n  */\nconst stringToSha256 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d59c0faa3e57f0ff0'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3('Hello world') == 'f9e99f2c6fdc88fbe0f59aacd15a2b5afc4'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d59c0faa3e57f0ff0'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3('Hello world') == 'f9e99f2c6fdc88fbe0f59aacd15a2b5afc4'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d59c0faa3e57f0ff0'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3('Hello world') == 'f9e99f2c6fdc88fbe0f59aacd15a2b5afc4'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d59c0faa3e57f0ff0'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3('Hello world') == 'f9e99f2c6fdc88fbe0f59aacd15a2b5afc4'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'ddaf35a193617abacc417349ae20413112e6fa4e89a97d59c0faa3e57f0ff0'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3('Hello world') == 'f9e99f2c6fdc88fbe0f59aacd15a2b5afc4'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'ddaf35a193617abacc417349ae20413112", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the odd digits between a\n and b, in ascends order.\n\n  For example:\n  generateOdds(2, 8) => [1, 3, 5, 7, 9]\n  generateOdds(8, 2) => [1, 3, 5, 7, 9]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of their digits, in\n  ascends order.\n\n  For example:\n  generateSum(2, 8) => [3, 6, 9]\n  generateSum(8, 2) => [3, 6, 9]\n  generateSum(10, 14) => []\n  */\nconst generateSum = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the product of their digits, in\n  ascends order.\n\n  For example:\n  generateProduct(2, 8) => [4, 6, 8]\n  generateProduct(8, 2) => [4, 6, 8]\n  generateProduct(10, 14) => []\n  */\nconst generateProduct = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of their digits, in\n  descends order.\n\n  For example:\n  generateSumDesc(2, 8) => [9, 6, 3]\n  generateSumDesc(8, 2) => [9, 6, 3]\n  generateSumDesc(10, 14) => []\n  */\nconst generateSumDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the product of their digits, in\n  descends order.\n\n  For example:\n  generateProductDesc(2, 8) => [8, 4, 2]\n  generateProductDesc(8, 2) => [8, 4, 2]\n  generateProductDesc(10, 14) => []\n  */\nconst generateProductDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of their digits, in\n  ascends order.\n\n  For example:\n  generateSumDescAndProduct(2, 8) => [9, 6, 3]\n  generateSumDescAndProduct(8, 2) => [9, 6, 3]\n  generateSumDescAndProduct(10, 14) => []\n  */\nconst generateSumDescAndProduct = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the product of their digits, in\n  ascends order.\n\n  For example:\n  generateProductDescAndProduct(2, 8) => [8, 4, 2]\n  generateProductDescAndProduct(8, 2) => [8, 4, 2]\n  generateProductDescAndProduct(10, 14) => []\n  */\nconst generateProductDescAndProduct = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of their digits, in\n  descends order.\n\n  For example:\n  generateSumAndProduct(2, 8) => [3, 9, 6]\n  generateSumAndProduct(8, 2) => [3, 9, 6]\n  generateSumAndProduct(10, 14) => []\n  */\nconst generateSumAndProduct = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the product of their digits, in\n  descends order.\n\n  For example:\n  generateProductAndProduct(2, 8) => [8, 6, 4]\n  generateProductAndProduct(8, 2) => [8, 6, 4]\n  generateProductAndProduct(10, 14) => []\n  */\nconst generateProductAndProduct = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of their digits, in\n  ascends order.\n\n  For example:\n  generateSumAndProductDesc(2, 8) => [9, 6, 3]\n  generateSumAndProductDesc(8, 2) => [9, 6, 3]\n  generateSumAndProductDesc(10, 14) => []\n  */\nconst generateSumAndProductDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  result.sort((a, b) => b - a);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the product of their digits, in\n  ascends order.\n\n  For example:\n  generateProductAndProductDesc(2, 8) => [8, 6, 4]\n  generateProductAndProductDesc(8, 2) => [8, 6, 4]\n  generateProductAndProductDesc(10, 14) => []\n  */\nconst generateProductAndProductDesc = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  result.sort((a, b) => b - a);\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the sum of their digits, in\n  descends order.\n\n  For example:\n  generateSumAndProductDescAndProduct(2, 8) => [9, 6, 3]\n  generateSumAndProductDescAndProduct(8, 2) => [9, 6, 3]\n  generateSumAndProductDescAndProduct(10, 14) => []\n  */\nconst generateSumAndProductDescAndProduct = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  result.sort((a, b) => b - a);\n  result.sort((a, b) => a - b);\n  result.sort((a, b) => a - b);\n  result.sort((a, b) => b - a);\n  return result;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = music_array.map(music_note => music_note.charCodeAt(0) - 64);\n  const music_beats = music_notes.map(music_note => music_note % 12);\n  return music_beats;\n};\n\n// Tests\nconst music_tests = [\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 2],\n  ['o o|.| o| o|.|.|.|.| o o', 1],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],\n  ['o o|.| o| o|.|.|.|.| o o', 4],", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many time", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => {\n    const aNum = parseInt(a, 10)\n    const bNum = parseInt(b, 10)\n    if (aNum < bNum) {\n      return -1\n    }\n    if (aNum > bNum) {\n      return 1\n    }\n    return 0\n  })\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(' ')\n  const sortedLetters = letterArray.sort((a, b) => {\n    const aLetter = a.toLowerCase()\n    const bLetter = b.toLowerCase()\n    if (aLetter < bLetter) {\n      return -1\n    }\n    if (aLetter > bLetter) {\n      return 1\n    }\n    return 0\n  })\n  return sortedLetters.join(' ')\n}\n\n/* Input is a space-delimited string of words from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with words sort from smaller to larger\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ')\n  const sortedWords = wordArray.sort((a, b) => {\n    const aWord = a.toLowerCase()\n    const bWord = b.toLowerCase()\n    if (aWord < bWord) {\n      return -1\n    }\n    if (aWord > bWord) {\n      return 1\n    }\n    return 0\n  })\n  return sortedWords.join(' ')\n}\n\n/* Input is a space-delimited string of words from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with words sort from smaller to larger\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ')\n  const sortedWords = wordArray.sort((a, b) => {\n    const aWord = a.toLowerCase()\n    const bWord = b.toLowerCase()\n    if (aWord < bWord) {\n      return -1\n    }\n    if (aWord > bWord) {\n      return 1\n    }\n    return 0\n  })\n  return sortedWords.join(' ')\n}\n\n/* Input is a space-delimited string of words from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with words sort from smaller to larger\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ')\n  const sortedWords = wordArray.sort((a, b) => {\n    const aWord = a.toLowerCase()\n    const bWord = b.toLowerCase()\n    if (aWord < bWord) {\n      return -1\n    }\n    if (aWord > bWord) {\n      return 1\n    }\n    return 0\n  })\n  return sortedWords.join(' ')\n}\n\n/* Input is a space-delimited string of words from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with words sort from smaller to larger\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ')\n  const sortedWords = wordArray.sort((a, b) => {\n    const aWord = a.toLowerCase()\n    const bWord = b.toLowerCase()\n    if (aWord < bWord) {\n      return -1\n    }\n    if (aWord > bWord) {\n      return 1\n    }\n    return 0\n  })\n  return sortedWords.join(' ')\n}\n\n/* Input is a space-delimited string of words from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with words sort from smaller to larger\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  const wordArray = words.split(' ')\n  const sortedWords = wordArray.sort((a, b) => {\n    const aWord = a.toLowerCase()\n    const bWord = b.toLowerCase()\n    if (aWord < bWord) {\n      return -1\n    }\n    if (aWord > bWord) {\n      return 1\n    }\n    return 0\n  })\n  return sortedWords.join(' ')\n}\n\n/* Input is a space-delimited string of words from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with words sort from smaller to larger\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalParts = number.toFixed(2).split('.')\n  const integerParts = decimalParts[0].split('')\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimalParts.length\n  const integerPartsLength = integerParts.length\n  const decimalPartsLength = decimal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference === smallestDifference) {\n      smallestDifferenceValueIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[smallestDifferenceValueIndex]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference === smallestDifference) {\n      smallestDifferenceValueIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[smallestDifferenceValueIndex]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference === smallestDifference) {\n      smallestDifferenceValueIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[smallestDifferenceValueIndex]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference === smallestDifference) {\n      smallestDifferenceValueIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[smallestDifferenceValueIndex]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference === smallestDifference) {\n      smallestDifferenceValueIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[smallestDifferenceValueIndex]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference === smallestDifference) {\n      smallestDifferenceValueIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[smallestDifferenceValueIndex]];\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallestDifference = Number.MAX_SAFE_INTEGER;\n  let smallestDifferenceIndex = 0;\n  let smallestDifferenceValue = 0;\n  let smallestDifferenceValueIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const difference = Math.abs(numbers[i] - numbers[smallestDifferenceIndex]);\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n      smallestDifferenceValue = numbers[i];\n      smallestDifferenceValueIndex = i;\n    } else if (difference ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Converts RGB color to HSL\n * @param {number} r Red color in range 0 - 255\n * @param {number} g Green color in range 0 - 255\n * @param {number} b Blue color in range 0 - 255\n * @returns {Array} HSL\n */\nconst rgbToHsl = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let l;\n  if (max === min) {\n    h = 0;\n    s = 0;\n    l = 0;\n  } else {\n    const d = max - min;\n    s = d / max;\n    const l = (min + max) / 2;\n    if (max === r) {\n      h = ((g - b) / d + (g < b? 6 : 0)) / 6;\n    } else if (max === g) {\n      h = (b - r) / d + 2;\n    } else {\n      h = (r - g) / d + 4;\n    }\n    h /= 6;\n  }\n  return [h, s, l];\n};\n\n/**\n * Converts HSL color to RGB\n * @param {number} h Hue color in range 0 - 1\n * @param {number} s Saturation color in range 0 - 1\n * @param {number} l Lightness color in range 0 - 1\n * @returns {Array} RGB\n */\nconst hslToRgb = (h, s, l) => {\n  let r, g, b;\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    const hue2rgb = (p, q, t) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n    const q = l < 0.5? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\n/**\n * Converts RGB color to hex\n * @param {number} r Red color in range 0 - 255\n * @param {number} g Green color in range 0 - 255\n * @param {number} b Blue color in range 0 - 255\n * @returns {string} Hex color\n */\nconst rgbToHex = (r, g, b) => {\n  const hex = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  return hex;\n};\n\n/**\n * Converts hex color to RGB\n * @param {string} hex Hex color\n * @returns {Array} RGB\n */\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n/**\n * Converts RGB color to HSV\n * @param {number} r Red color in range 0 - 255\n * @param {number} g Green color in range 0 - 255\n * @param {number} b Blue color in range 0 - 255\n * @returns {Array} HSV\n */\nconst rgbToHsv = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  let s;\n  let v;\n  if (max === 0) {\n    h = 0;\n    s = 0;\n    v = 0;\n  } else {\n    v = max;\n    const d = r === max? g - b : b === max? r - g : r === g? b - r : g - r;\n    s = d / max;\n    const l = (min + max) / 2;\n    if (max === r) {\n      h = ((g - b) / d + (g < b? 6 : 0)) / 6;\n    } else if (max === g) {\n      h = (b - r) / d + 2;\n    } else {\n      h = (r - g) / d + 4;\n    }\n    h /= 6;\n  }\n  return [h, s, v];\n};\n\n/**\n * Converts HSV color to RGB\n * @param {number} h Hue color in range 0 - 1\n * @param {number} s Saturation color in range 0 - 1\n * @param {number} v Value color in range 0 - 1\n * @returns {Array} RGB\n */\nconst hsvToRgb = (h, s, v) => {\n  let r, g, b;\n  if (s === 0) {\n    r = g = b = v;\n  } else {\n    const hue2rgb = (p, q, t) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n    const q = v * (1 - s);\n    const p = v * (1 - s * f);\n    const t = v * (1 - s * (1 - f));\n    switch (Math.floor(h)) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n        break;\n    }\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\n/**\n * Converts RGB color to hex\n * @param {number} r Red color in range 0 - 255\n * @param {number} g Green color in range 0 - 255\n * @param {number} b Blue color in range 0 - 255\n * @returns {string} Hex color\n */\nconst rgbToHexString = (r, g, b) => {\n  const hex = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  return hex;\n};\n\n/**\n * Converts hex color to RGB\n * @param {string} hex Hex color\n * @returns {Array} RGB\n */\nconst hexToRgbString = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;\n};\n\n/**\n * Converts RGB color to HSV\n * @param {number} r Red color in range 0 - 255\n * @param {number} g Green color in range 0 - 255\n * @param {number} b Blue color in range 0 - 255\n * @returns {Array} HSV\n */\nconst rgbToHsvString = (r, g, b) => {\n  const max = Math.max(r, g, b);\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter gives list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gives list of any python values only for nulls\n  >>> filterNulls(['a', 3.14, 5])\n  [null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for nones\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  [null]\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  [null]\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  [null]\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  [null]\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty sets\n  >>> filterEmptySets(['a', 3.14, 5])\n  [null]\n  >>> filterEmptySets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySets = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty tuples\n  >>> filterEmptyTuples(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyTuples = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gives list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [null]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === null);\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) break\n    length++\n  }\n  return length\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n  >>> isascii('abc')\n  True\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) return false\n  }\n  return true\n}\n\n/* Return true if given string has only ascii chars\n  >>> isascii('')\n  False\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n    }\n    if (maxDivisorFactor > maxDivisor) {\n      maxDivisor = maxDivisorFactor;\n    }\n  }\n  return maxDivisor;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize2(8)\n  [2, 2, 2]\n  >>> factorize2(25)\n  [5, 5]\n  >>> factorize2(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize3(8)\n  [2, 2, 2]\n  >>> factorize3(25)\n  [5, 5]\n  >>> factorize3(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize4(8)\n  [2, 2, 2]\n  >>> factorize4(25)\n  [5, 5]\n  >>> factorize4(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize5(8)\n  [2, 2, 2]\n  >>> factorize5(25)\n  [5, 5]\n  >>> factorize5(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize6(8)\n  [2, 2, 2]\n  >>> factorize6(25)\n  [5, 5]\n  >>> factorize6(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize7(8)\n  [2, 2, 2]\n  >>> factorize7(25)\n  [5, 5]\n  >>> factorize7(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize8(8)\n  [2, 2, 2]\n  >>> factorize8(25)\n  [5, 5]\n  >>> factorize8(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize9(8)\n  [2, 2, 2]\n  >>> factorize9(25)\n  [5, 5]\n  >>> factorize9(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize10(8)\n  [2, 2, 2]\n  >>> factorize10(25)\n  [5, 5]\n  >>> factorize10(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize11(8)\n  [2, 2, 2]\n  >>> factorize11(25)\n  [5, 5]\n  >>> factorize11(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = []\n  let factor = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor)\n      factor = 1\n      i++\n    } else {\n      factor++\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factor", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) === char.toUpperCase().charCodeAt(0)? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, returns true if it contains only letters, false otherwise.\n  >>> isLetter('a')\n  true\n  >>> isLetter('ab')\n  false\n  */\nconst isLetter = (string) => {\n  return /^[a-z]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only numbers, false otherwise.\n  >>> isNumber('a')\n  true\n  >>> isNumber('ab')\n  false\n  */\nconst isNumber = (string) => {\n  return /^[0-9]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters and numbers, false otherwise.\n  >>> isAlpha('a')\n  true\n  >>> isAlpha('ab')\n  false\n  */\nconst isAlpha = (string) => {\n  return /^[a-z0-9]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, false otherwise.\n  >>> isAlphanumeric('a')\n  true\n  >>> isAlphanumeric('ab')\n  false\n  >>> isAlphanumeric('abc def')\n  false\n  >>> isAlphanumeric('abc def ghi')\n  true\n  */\nconst isAlphanumeric = (string) => {\n  return /^[a-z0-9 ]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, false otherwise.\n  >>> isAlphanumericAndUnderscore('a')\n  true\n  >>> isAlphanumericAndUnderscore('ab')\n  false\n  >>> isAlphanumericAndUnderscore('abc def')\n  false\n  >>> isAlphanumericAndUnderscore('abc def ghi')\n  true\n  */\nconst isAlphanumericAndUnderscore = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, false otherwise.\n  >>> isAlphanumericAndDash('a')\n  true\n  >>> isAlphanumericAndDash('ab')\n  false\n  >>> isAlphanumericAndDash('abc def')\n  false\n  >>> isAlphanumericAndDash('abc def ghi')\n  true\n  */\nconst isAlphanumericAndDash = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, hyphens, and apostrophes, false otherwise.\n  >>> isAlphanumericAndApostrophe('a')\n  true\n  >>> isAlphanumericAndApostrophe('ab')\n  false\n  >>> isAlphanumericAndApostrophe('abc def')\n  false\n  >>> isAlphanumericAndApostrophe('abc def ghi')\n  true\n  */\nconst isAlphanumericAndApostrophe = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, hyphens, and apostrophes, hyphens, and dashes, hyphens, and underscores, false otherwise.\n  >>> isAlphanumericAndUnderscoreAndApostrophe('a')\n  true\n  >>> isAlphanumericAndUnderscoreAndApostrophe('ab')\n  false\n  >>> isAlphanumericAndUnderscoreAndApostrophe('abc def')\n  false\n  >>> isAlphanumericAndUnderscoreAndApostrophe('abc def ghi')\n  true\n  */\nconst isAlphanumericAndUnderscoreAndApostrophe = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, hyphens, and apostrophes, hyphens, and dashes, hyphens, and underscores, hyphens, and dashes, false otherwise.\n  >>> isAlphanumericAndDashAndApostrophe('a')\n  true\n  >>> isAlphanumericAndDashAndApostrophe('ab')\n  false\n  >>> isAlphanumericAndDashAndApostrophe('abc def')\n  false\n  >>> isAlphanumericAndDashAndApostrophe('abc def ghi')\n  true\n  */\nconst isAlphanumericAndDashAndApostrophe = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, hyphens, and apostrophes, hyphens, and dashes, hyphens, and underscores, hyphens, and dashes, false otherwise.\n  >>> isAlphanumericAndUnderscoreAndDashAndApostrophe('a')\n  true\n  >>> isAlphanumericAndUnderscoreAndDashAndApostrophe('ab')\n  false\n  >>> isAlphanumericAndUnderscoreAndDashAndApostrophe('abc def')\n  false\n  >>> isAlphanumericAndUnderscoreAndDashAndApostrophe('abc def ghi')\n  true\n  */\nconst isAlphanumericAndUnderscoreAndDashAndApostrophe = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, hyphens, and apostrophes, hyphens, and dashes, hyphens, and underscores, hyphens, and dashes, false otherwise.\n  >>> isAlphanumericAndDashAndApostropheAndUnderscore('a')\n  true\n  >>> isAlphanumericAndDashAndApostropheAndUnderscore('ab')\n  false\n  >>> isAlphanumericAndDashAndApostropheAndUnderscore('abc def')\n  false\n  >>> isAlphanumericAndDashAndApostropheAndUnderscore('abc def ghi')\n  true\n  */\nconst isAlphanumericAndDashAndApostropheAndUnderscore = (string) => {\n  return /^[a-z0-9 _-]+$/.test(string);\n};\n\n/* Given a string, returns true if it contains only letters, numbers, and spaces, hyphens, and underscores, hyphens, and dashes, hyphens, and apostrophes, hyphens, and dashes, hyphens, and underscores, hyphens, and dashes, false otherwise.\n  >>> isAlphanumericAndUnderscoreAndDashAndApostropheAndDash('a')\n  true\n  >>> isAlphanumericAndUnderscoreAndDashAndApostropheAndDash('ab')\n  false\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a gives suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution. Run it with Babel to see the output.\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your solution", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumber([-1, 2, -4, 5, 6])\n  [1, 2, 4, 5, 6]\n  >>> getNumber([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNumber = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getString(['hello', 'world', '!'])\n  ['hello', 'world', '!']\n  >>> getString(['hello', 'world', 1])\n  ['hello', 'world', 1]\n  */\nconst getString = (l) => {\n  return l.filter((x) => typeof x ==='string');\n};\n\n/*Return only booleans in the list.\n  >>> getBoolean([true, false, true])\n  [true, false, true]\n  >>> getBoolean([false, false, true])\n  [false, false, true]\n  */\nconst getBoolean = (l) => {\n  return l.filter((x) => typeof x === 'boolean');\n};\n\n/*Return only functions in the list.\n  >>> getFunction([() => {}, () => {}])\n  [() => {}, () => {}]\n  >>> getFunction([() => {}, () => {}])\n  [() => {}, () => {}]\n  */\nconst getFunction = (l) => {\n  return l.filter((x) => typeof x === 'function');\n};\n\n/*Return only objects in the list.\n  >>> getObject([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObject([{}, {}, {}])\n  [{}, {}, {}]\n  */\nconst getObject = (l) => {\n  return l.filter((x) => typeof x === 'object');\n};\n\n/*Return only arrays in the list.\n  >>> getArray([[], [], []])\n  [[], [], []]\n  >>> getArray([[], [], []])\n  [[], [], []]\n  */\nconst getArray = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only nulls in the list.\n  >>> getNull([null, null, null])\n  [null, null, null]\n  >>> getNull([null, null, null])\n  [null, null, null]\n  */\nconst getNull = (l) => {\n  return l.filter((x) => x === null);\n};\n\n/*Return only NaNs in the list.\n  >>> getNaN([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> getNaN([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  */\nconst getNaN = (l) => {\n  return l.filter((x) => isNaN(x));\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArray([[], [], []])\n  [[], [], []]\n  >>> getEmptyArray([[], [], []])\n  [[], [], []]\n  */\nconst getEmptyArray = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObject([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getEmptyObject([{}, {}, {}])\n  [{}, {}, {}]\n  */\nconst getEmptyObject = (l) => {\n  return l.filter((x) => Object.keys(x).length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => x.length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyString(['', ''])\n  ['', '']\n  >>> getEmptyString(['', ''])\n  ['', '']\n  */\nconst getEmptyString = (l) => {\n  return l.filter((x) => ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  const i = Math.floor(Math.sqrt(n));\n  if (i === 1) {\n    return true;\n  }\n  if (i > 2 && i <= 5) {\n    return false;\n  }\n  if (n!== 11) {\n    return isPrime(n % 10);\n  }\n  return false;\n};\n\n/*Return true if a number is even, and false otherwise.\n  >>> isEven(6)\n  false\n  >>> isEven(10)\n  true\n  >>> isEven(11)\n  false\n  >>> isEven(13)\n  true\n  >>> isEven(14)\n  false\n  >>> isEven(15)\n  false\n  >>> isEven(16)\n  true\n  >>> isEven(17)\n  true\n  >>> isEven(18)\n  true\n  >>> isEven(19)\n  true\n  >>> isEven(20)\n  true\n  >>> isEven(21)\n  false\n  >>> isEven(22)\n  true\n  >>> isEven(23)\n  true\n  >>> isEven(24)\n  true\n  >>> isEven(25)\n  true\n  >>> isEven(26)\n  true\n  >>> isEven(27)\n  true\n  >>> isEven(28)\n  true\n  >>> isEven(29)\n  true\n  >>> isEven(30)\n  true\n  >>> isEven(31)\n  true\n  >>> isEven(32)\n  true\n  >>> isEven(33)\n  true\n  >>> isEven(34)\n  true\n  >>> isEven(35)\n  true\n  >>> isEven(36)\n  true\n  >>> isEven(37)\n  true\n  >>> isEven(38)\n  true\n  >>> isEven(39)\n  true\n  >>> isEven(40)\n  true\n  >>> isEven(41)\n  true\n  >>> isEven(42)\n  true\n  >>> isEven(43)\n  true\n  >>> isEven(44)\n  true\n  >>> isEven(45)\n  true\n  >>> isEven(46)\n  true\n  >>> isEven(47)\n  true\n  >>> isEven(48)\n  true\n  >>> isEven(49)\n  true\n  >>> isEven(50)\n  true\n  >>> isEven(51)\n  true\n  >>> isEven(52)\n  true\n  >>> isEven(53)\n  true\n  >>> isEven(54)\n  true\n  >>> isEven(55)\n  true\n  >>> isEven(56)\n  true\n  >>> isEven(57)\n  true\n  >>> isEven(58)\n  true\n  >>> isEven(59)\n  true\n  >>> isEven(60)\n  true\n  >>> isEven(61)\n  true\n  >>> isEven(62)\n  true\n  >>> isEven(63)\n  true\n  >>> isEven(64)\n  true\n  >>> isEven(65)\n  true\n  >>> isEven(66)\n  true\n  >>> isEven(67)\n  true\n  >>> isEven(68)\n  true\n  >>> isEven(69)\n  true\n  >>> isEven(70)\n  true\n  >>> isEven(71)\n  true\n  >>> isEven(72)\n  true\n  >>> isEven(73)\n  true\n  >>> isEven(74)\n  true\n  >>> isEven(75)\n  true\n  >>> isEven(76)\n  true\n  >>> isEven(77)\n  true\n  >>> isEven(78)\n  true\n  >>> isEven(79)\n  true\n  >>> isEven(80)\n  true\n  >>> isEven(81)\n  true\n  >>> isEven(82)\n  true\n  >>> isEven(83)\n  true\n  >>> isEven(84)\n  true\n  >>> isEven(85)\n  true\n  >>> isEven(86)\n  true\n  >>> isEven(87)\n  true\n  >>> isEven(88)\n  true\n  >>> isEven(89)\n  true\n  >>> isEven(90)\n  true\n  >>> isEven(91)\n  true\n  >>> isEven(92)\n  true\n  >>> isEven(93)\n  true\n  >>> isEven(94)\n  true\n  >>> isEven(95)\n  true\n  >>> isEven(96)\n  true\n  >>> isEven(97)\n  true\n  >>> isEven(98)\n  true\n  >>> isEven(99)\n  true\n  >>> isEven(100)\n  true\n  >>> isEven(101)\n  true\n  >>> isEven(102)\n  true\n  >>> isEven(103)\n  true\n  >>> isEven(104)\n  true\n  >>> isEven(105)\n  true\n  >>> isEven(106)\n  true\n  >>> isEven(107)\n  true\n  >>> isEven(108)\n  true\n  >>> isEven(109)\n  true\n  >>> isEven(110)\n  true\n  >>> isEven(111)\n  true\n  >>> isEven(112)\n  true\n  >>> isEven(113)\n  true\n  >>> isEven(114)\n  true\n  >>> isEven(115)\n  true\n  >>> isEven(116)\n  true\n  >>> isEven(117)\n  true\n  >>> isEven(118)\n  true\n  >>> isEven(119)\n  true\n  >>> isEven(120)\n  true\n  >>> isEven(121)\n  true\n  >>> isEven(122)\n  true\n  >>> isEven(123)\n  true\n  >>> isEven(124)\n  true\n  >>> isEven(125)\n  true\n  >>> isEven(126)\n  true\n  >>> isEven(127)\n  true\n  >>> isEven(128)\n  true\n  >>> isEven(129)\n  true\n  >>> isEven(130)\n  true\n  >>> isEven(131)\n  true\n  >>> isEven(132)\n  true\n  >>> isEven(133)\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) == 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) == 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) == 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) == 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) == 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return x;\n};\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by five, while its value at the indicies that was divisible by five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by seven, while its value at the indicies that was divisible by seven was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by nine, while its value at the indicies that was divisible by nine was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.sort((a, b) => a - b);\n    }\n  }\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of elements in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of squares of elements in the list.\n  >>> sumSquaresElement([1, 2, 3])\n  18\n  >>> sumSquaresElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumSquaresElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of squares of elements in the list.\n  >>> productSquaresElement([1, 2, 3])\n  18\n  >>> productSquaresElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productSquaresElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  27\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  27\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  27\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  27\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  27\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  27\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  27\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  27\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  27\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  27\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  27\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  27\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i].sort();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEvenOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOddEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOddEvenOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i].sort();\n    } else {\n      l[i] = l[i].sort().reverse();\n    }\n  }\n  return l;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEvenOddEvenOddEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n const groups = encodeCyclic(s);\n return groups.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic2 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n const groups = encodeCyclic2(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic3 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n const groups = encodeCyclic3(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic4 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n const groups = encodeCyclic4(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic5 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n const groups = encodeCyclic5(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic6 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic6 = (s) => {\n const groups = encodeCyclic6(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic7 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic7 = (s) => {\n const groups = encodeCyclic7(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic8 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic8 = (s) => {\n const groups = encodeCyclic8(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic9 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic9 = (s) => {\n const groups = encodeCyclic9(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic10 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.reverse().join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic10 = (s) => {\n const groups = encodeCyclic10(s);\n return groups.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string. */ const encodeCyclic11 = (s) => { var groups = [], groups2 = []; for (let ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n  return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0 || n === 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean)\n    mean = numbers[i]\n  }\n  return sum / numbers.length\n}\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsolute", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triples", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j] === 1) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSum", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString();\n  let res = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    res = `${str[i]}${res}`;\n  }\n  return parseInt(res, base);\n};\n\n/*\n Convert number to string with specified radix. Radix must be between 2 and 36.\n >>> numberToString(8, 2)\n '10'\n >>> numberToString(8, 10)\n '1000000'\n >>> numberToString(8, 16)\n '1000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10100000000'\n >>> numberToString(2708, 16)\n '10100000000000000'\n >>> numberToString(2708, 2)\n '10100'\n >>> numberToString(2708, 10)\n '10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.PI * Math.pow(a, 2);\n};\n\n/*Given a triangles area and higher return area for a square.\n  >>> squareArea(7.5)\n  25.5\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*Given a triangles area and higher return area for a circle.\n  >>> circleArea(7.5)\n  7.5\n  */\nconst circleArea = (a) => {\n  return Math.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib4Num = 0;\n  for (let i = 1; i <= n; i++) {\n    fib4Num += fib4Num + fib4Num + fib4Num;\n  }\n  return fib4Num;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the Fibonacci number sequence. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  let fibonacciNum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibonacciNum += fibonacciNum;\n  }\n  return fibonacciNum;\n};\n\n/*The Fibonacci number sequence is a sequence of numbers where the next number is the sum of the previous two numbers. Please writes a functions to efficiently computing the n-th elements of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  } else {\n    const mid = Math.floor(l.length / 2)\n    return median(l[mid], l[l.length - mid])\n  }\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a b c ')\n  true\n  >>> isPalindromeWithSpace('a b c d')\n  false\n  >>> isPalindromeWithSpace('a b c d ')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText.replace(/\\s/g, '');\n};\n\n/*\n  Check if gives string is a palindrome with spaces included\n  >>> isPalindromeWithSpace('a b c')\n  true\n  >>> isPalindromeWithSpace('a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0)\n    throw new RangeError('modp() arguments must be non-negative');\n  if (p === 0)\n    return 1;\n  if (p === 1)\n    return n;\n  if (n === 0)\n    return 0;\n  if (n === 1)\n    return p;\n  if (n === p)\n    return n;\n  if (n < p)\n    return modp(n - p, p);\n  if (n > p)\n    return modp(n, p - 1);\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 10)\n  8\n  >>> modpow(2, 400)\n  1\n  >>> modpow(2, -400)\n  0\n  */\nconst modpow = (n, p, m) => {\n  if (n < 0 || p < 0 || m <= 0)\n    throw new RangeError('modpow() arguments must be non-negative');\n  if (p === 0)\n    return 1;\n  if (p === 1)\n    return n;\n  if (n === 0)\n    return 0;\n  if (n === 1)\n    return p;\n  if (n === p)\n    return n;\n  if (n < p)\n    return modpow(n - p, p, m);\n  if (n > p)\n    return modpow(n, p - 1, m);\n  if (m === 0)\n    return 1;\n  if (m === 1)\n    return n;\n  if (m === 2)\n    return p;\n  if (m === p)\n    return n;\n  if (m === 3)\n    return modpow(n - 1, p, m - 1);\n  if (m === 4)\n    return modpow(n, p - 1, m - 1);\n  if (m === 5)\n    return modpow(n, p, m - 2);\n  if (m === 6)\n    return modpow(n - 1, p, m - 2);\n  if (m === 7)\n    return modpow(n, p - 1, m - 3);\n  if (m === 8)\n    return modpow(n, p - 1, m - 3);\n  if (m === 9)\n    return modpow(n, p, m - 4);\n  if (m === 10)\n    return modpow(n, p - 1, m - 4);\n  if (m === 11)\n    return modpow(n, p, m - 5);\n  if (m === 12)\n    return modpow(n - 1, p, m - 5);\n  if (m === 13)\n    return modpow(n, p - 1, m - 6);\n  if (m === 14)\n    return modpow(n, p - 1, m - 6);\n  if (m === 15)\n    return modpow(n, p - 1, m - 7);\n  if (m === 16)\n    return modpow(n - 1, p, m - 7);\n  if (m === 17)\n    return modpow(n, p - 1, m - 8);\n  if (m === 18)\n    return modpow(n, p - 1, m - 8);\n  if (m === 19)\n    return modpow(n, p - 1, m - 9);\n  if (m === 20)\n    return modpow(n, p - 1, m - 9);\n  if (m === 21)\n    return modpow(n, p - 1, m - 10);\n  if (m === 22)\n    return modpow(n - 1, p, m - 10);\n  if (m === 23)\n    return modpow(n, p - 1, m - 11);\n  if (m === 24)\n    return modpow(n, p - 1, m - 11);\n  if (m === 25)\n    return modpow(n, p - 1, m - 12);\n  if (m === 26)\n    return modpow(n - 1, p, m - 12);\n  if (m === 27)\n    return modpow(n, p - 1, m - 13);\n  if (m === 28)\n    return modpow(n, p - 1, m - 13);\n  if (m === 29)\n    return modpow(n, p - 1, m - 14);\n  if (m === 30)\n    return modpow(n, p - 1, m - 14);\n  if (m === 31)\n    return modpow(n, p - 1, m - 15);\n  if (m === 32)\n    return modpow(n - 1, p, m - 15);\n  if (m === 33)\n    return modpow(n, p - 1, m - 16);\n  if (m === 34)\n    return modpow(n, p - 1, m - 16);\n  if (m === 35)\n    return modpow(n, p - 1, m - 17);\n  if (m === 36)\n    return modpow(n - 1, p, m - 17);\n  if (m === 37)\n    return modpow(n, p - 1, m - 18);\n  if (m === 38)\n    return modpow(n, p - 1, m - 18);\n  if (m === 39)\n    return modpow(n, p - 1, m - 19);\n  if (m === 40)\n    return modpow(n, p - 1, m - 19);\n  if (m === 41)\n    return modpow(n, p - 1, m - 20);\n  if (m === 42)\n    return modpow(n - 1, p, m - 20);\n  if (m === 43)\n    return modpow(n, p - 1, m - 21);\n  if (m === 44)\n    return modpow(n, p - 1, m - 21);\n  if (m === 45)\n    return modpow(n, p - 1, m - 22);\n  if (m === 46)\n    return modpow(n - 1, p, m - 22);\n  if (m === 47)\n    return modpow(n, p - 1, m - 23);\n  if (m === 48)\n    return modpow(n, p - 1, m - 23);\n  if (m === 49)\n    return modpow(n, p - 1, m - 24);\n  if (m === 50)\n    return modpow(n, p - 1, m - 24);\n  if (m === 51)\n    return modpow(n, p - 1, m - 25);\n  if (m === 52)\n    return modpow(n - 1, p, m - 25);\n  if (m === 53)\n    return modpow(n, p - 1, m - 26);\n  if (m === 54)\n    return modpow(n, p - 1, m - 26);\n  if (m === 55)\n    return modpow(n, p - 1, m - 27);\n  if (m === 56)\n    return modpow(n - 1, p, m - 27);\n  if (m === 57)\n    return modpow(n, p - 1, m - 28);\n  if (m === 58)\n    return modpow(n, p - 1, m - 28);\n  if (m === 59)\n    return modpow(n, p - 1, m - 29);\n  if (m === 60)\n    return modpow(n, p - 1, m - 29);\n  if (m === 61)\n    return modpow(n, p - 1, m - 30);\n  if (m === 62)\n    return modpow(n - 1, p, m - 30);\n  if (m === 63)\n    return modpow(n, p - 1, m - 31);\n  if (m === 64)\n    return modpow(n, p - 1, m - 31);\n  if (m === 65)\n    return modpow(n, p - 1, m - 32);\n  if (m === 66)\n    return modpow(n - 1, p, m - 32);\n  if (m === 67)\n    return modpow(n, p - 1, m - 33);\n  if (m === 68)\n    return modpow(n, p - 1, m - 33);\n  if (m === 69)\n    return modpow(n, p - 1, m - 34);\n  if (m === 70)\n    return modpow(n, p - 1, m - 34);\n  if (m === 71)\n    return modpow(n, p - 1, m - 35);\n  if (m === 72)\n    return modpow(n - 1, p, m - 35);\n  if (m === 73)\n    return modpow(n, p - 1, m - 36);\n  if (m === 74)\n    return modpow(n, p - 1, m - 36);\n  if (m === 75)\n    return modpow(n, p - 1, m - 37);\n  if (m === 76)\n    return modpow(n - 1, p, m - 37);\n  if (m === 77)\n    return modpow(n, p - 1, m - 38);\n  if (m === 78)\n    return modpow(n, p - 1, m - 38);\n  if (m === 79)\n    return modpow(n, p - 1, m - 39);\n  if (m === 80)\n    return modpow(n, p - 1, m - 39);\n  if (m === 81)\n    return modpow(n, p - 1, m - 40);\n  if (m === 82)\n    return modpow(n - 1, p, m - 40);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    while (j < numbers.length && numbers[j] === numbers[i]) {\n      j++;\n    }\n    result.push(numbers[i]);\n    if (j < numbers.length) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = (n, xs) => slice(Math.max(0, n), Infinity, xs);\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = (fn, xs) => {\n  const reversed = slice(xs.length)\n   .reverse()\n   .reduce((acc, x, i) => fn(acc, x, i)? acc : [], xs);\n  return reversed.slice(0, -1);\n};\n\n/**\n * Returns a new list containing the first `n` elements of the given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `true`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropWhile(isNotFour, [1, 2, 3, 4]); //=> [3, 4]\n *\n *      R.dropWhile(x => x!== 'd', 'Ramda'); //=> 'da'\n */\nconst dropWhile = (fn, xs) => {\n  let result = [];\n  let i = 0;\n  let len = xs.length;\n  while (i < len) {\n    if (!fn(xs[i], i++)) {\n      break;\n    }\n  }\n  return result.concat(xs.slice(i));\n};\n\n/**\n * Returns a new list containing the first `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `true`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropRepeatsWith(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropRepeatsWith(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropRepeatsWith = (fn, xs) => {\n  const result = [];\n  let j = 0;\n  let len = xs.length;\n  while (j < len) {\n    if (fn(xs[j], j, xs)) result.push(xs[j]);\n    j++;\n  }\n  return result;\n};\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nconst dropRepeats = (xs) => dropRepeatsWith((a, b) => equals(a, b), xs);\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @deprecated since v0.19.0\n * @example\n *\n *     R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 3, 3, 3, 4, 4]\n */\nconst dropRepeatsWith = (fn, xs) => {\n  return dropRepeats(dropRepeatsWith(fn, xs));\n};\n\n/**\n * Returns a new list without any consecutive elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @deprecated since v0.19.0\n * @example\n *\n *     R.takeLast([1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nconst takeLast = slice(0, -1);\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift2 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift2 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift3 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift3 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift4 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift4 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift5 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift5 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift6 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift6 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift7 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift7 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift8 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift8 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift9 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift9 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift10 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift10 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift11 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift11 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift12 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift12 = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n /* returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift13 = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string and returns string without consonant.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuations is a function that takes string and returns string without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removePunctuations('abcdef')\n  'abcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'BAA'\n  >>> removePunctuations('zbcd')\n  'zbc'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'BAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeAllWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeAllWhiteSpaces('')\n  ''\n  >>> removeAllWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeAllWhiteSpaces('aaaaa')\n  ''\n  >>> removeAllWhiteSpaces('aaBAA')\n  'BAA'\n  >>> removeAllWhiteSpaces('zbcd')\n  'zbc'\n  */\nconst removeAllWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeAllPunctuations is a function that takes string and returns string without punctuation.\n  >>> removeAllPunctuations('')\n  ''\n  >>> removeAllPunctuations(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllPunctuations('abcdef')\n  'abcdef'\n  >>> removeAllPunctuations('aaaaa')\n  ''\n  >>> removeAllPunctuations('aaBAA')\n  'BAA'\n  >>> removeAllPunctuations('zbcd')\n  'zbc'\n  */\nconst removeAllPunctuations = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  removeAllNumbers is a function that takes string and returns string without numbers.\n  >>> removeAllNumbers('')\n  ''\n  >>> removeAllNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllNumbers('abcdef')\n  'abcdef'\n  >>> removeAllNumbers('aaaaa')\n  ''\n  >>> removeAllNumbers('aaBAA')\n  'BAA'\n  >>> removeAllNumbers('zbcd')\n  'zbc'\n  */\nconst removeAllNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removeAllVowels is a function that takes string and returns string without vowel.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  ''\n  >>> removeAllVowels('aaBAA')\n  'BAA'\n  >>> removeAllVowels('zbcd')\n  'zbc'\n  */\nconst removeAllVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeAllConsonants is a function that takes string and returns string without consonant.\n  >>> removeAllConsonants('')\n  ''\n  >>> removeAllConsonants(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllConsonants('abcdef')\n  'abcdef'\n  >>> removeAllConsonants('aaaaa')\n  ''\n  >>> removeAllConsonants('aaBAA')\n  'BAA'\n  >>> removeAllConsonants('zbcd')\n  'zbc'\n  */\nconst removeAllConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeAllWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeAllWhiteSpaces('')\n  ''\n  >>> removeAllWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeAllWhiteSpaces('aaaaa')\n  ''\n  >>> removeAllWhiteSpaces('aaBAA')\n  'BAA'\n  >>> removeAllWhiteSpaces('zbcd')\n  'zbc'\n  */\nconst removeAllWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeAllPunctuations is a function that takes string and returns string without punctuation.\n  >>> removeAllPunctuations('')\n  ''\n  >>> removeAllPunctuations(\"abcdef\\nghijklm\")\n  'abcdefghijklm", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange2 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange3 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange4 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange5 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange6 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange7 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange8 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange9 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange10 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange11 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange12 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange13 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange14 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange15 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 20)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  false\n  */\nconst inRange16 = (l, a, b) => {\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x raised to the power y\n  >>> pow(2, 3)\n  8\n  >>> pow(2, -3)\n  0.25\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Get the square root of x\n  >>> sqrt(25)\n  5\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Get the square root of x raised to the power y\n  >>> square_root(25)\n  5\n  */\nconst square_root = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of x\n  >>> cube_root(25)\n  5\n  */\nconst cube_root = (x) => {\n  return Math.pow(x, 1 / 3);\n};\n\n/*Get the cube root of x raised to the power y\n  >>> cube_root_power(25, 3)\n  5\n  */\nconst cube_root_power = (x, y) => {\n  return Math.pow(x, 1 / y);\n};\n\n/*Get the square root of x raised to the power y raised to the power z\n  >>> square_root_power(25, 3, 4)\n  5\n  */\nconst square_root_power = (x, y, z) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t\n  >>> square_root_power(25, 3, 4, 5)\n  5\n  */\nconst square_root_power_t = (x, y, z, t) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u\n  >>> square_root_power_t(25, 3, 4, 5, 6)\n  5\n  */\nconst square_root_power_u = (x, y, z, t, u) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v\n  >>> square_root_power_u(25, 3, 4, 5, 6, 7)\n  5\n  */\nconst square_root_power_v = (x, y, z, t, u, v) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u) * Math.pow(v, 1 / v);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v raised to the power w\n  >>> square_root_power_v(25, 3, 4, 5, 6, 7, 8)\n  5\n  */\nconst square_root_power_w = (x, y, z, t, u, v, w) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u) * Math.pow(v, 1 / v) * Math.pow(w, 1 / w);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v raised to the power w raised to the power x\n  >>> square_root_power_x(25, 3, 4, 5, 6, 7, 8, 9)\n  5\n  */\nconst square_root_power_x = (x, y, z, t, u, v, w, x) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u) * Math.pow(v, 1 / v) * Math.pow(w, 1 / w) * Math.pow(x, 1 / x);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v raised to the power w raised to the power x raised to the power y\n  >>> square_root_power_y(25, 3, 4, 5, 6, 7, 8, 9, 10)\n  5\n  */\nconst square_root_power_y = (x, y, z, t, u, v, w, x, y) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u) * Math.pow(v, 1 / v) * Math.pow(w, 1 / w) * Math.pow(x, 1 / x) * Math.pow(y, 1 / y);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v raised to the power w raised to the power x raised to the power y raised to the power z\n  >>> square_root_power_z(25, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  5\n  */\nconst square_root_power_z = (x, y, z, t, u, v, w, x, y, z) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u) * Math.pow(v, 1 / v) * Math.pow(w, 1 / w) * Math.pow(x, 1 / x) * Math.pow(y, 1 / y) * Math.pow(z, 1 / z);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v raised to the power w raised to the power x raised to the power y raised to the power z raised to the power t\n  >>> square_root_power_t(25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  5\n  */\nconst square_root_power_t = (x, y, z, t, u, v, w, x, y, z, t) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(t, 1 / u) * Math.pow(v, 1 / v) * Math.pow(w, 1 / w) * Math.pow(x, 1 / x) * Math.pow(y, 1 / y) * Math.pow(z, 1 / z) * Math.pow(t, 1 / t);\n};\n\n/*Get the square root of x raised to the power y raised to the power z raised to the power t raised to the power u raised to the power v raised to the power w raised to the power x raised to the power y raised to the power z raised to the power t raised to the power u\n  >>> square_root_power_u(25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n  5\n  */\nconst square_root_power_u = (x, y, z, t, u, v, w, x, y, z, t, u) => {\n  return Math.pow(x, 1 / y) * Math.pow(y, 1 / z) * Math.pow(z, 1 / t) * Math.pow(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = Math.min(s0.length, s1.length);\n  for (let i = 0; i < len; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  11\n  >>> fibonacci(5)\n  10\n  >>> fibonacci(4)\n  8\n  >>> fibonacci(3)\n  7\n  >>> fibonacci(2)\n  5\n  >>> fibonacci(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55\n  >>> fibonacciSequence(8)\n  21\n  >>> fibonacciSequence(7)\n  13\n  >>> fibonacciSequence(6)\n  11\n  >>> fibonacciSequence(5)\n  10\n  >>> fibonacciSequence(4)\n  8\n  >>> fibonacciSequence(3)\n  7\n  >>> fibonacciSequence(2)\n  5\n  >>> fibonacciSequence(1)\n  1\n*/\nconst fibonacciSequence = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacciSequence(n - 1) + fibonacciSequence(n - 2);\n};\n\n/*\n  >>> fibonacciSequence(10)\n  55", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g);\n  return openings.length === closings.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]+>/g);\n  const closings = brackets.match(/<[^<>]+>/g", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return i === j;\n};\n\n/**\n * Return true if all elements of list are strictly equal\n * to each other.\n *\n * Examples:\n *\n * ``` javascript\n * strictlyEqual(1, 1)\n * strictlyEqual(1, 2, 3)\n * strictlyEqual(1, 2, 3)\n * strictlyEqual(1, 2, 3, 4)\n * strictlyEqual(1, 2, 3, 4, 5)\n * strictlyEqual(1, 2, 3, 4, 5, 6)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)\n * strictlyEqual(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisors(8)\n  2\n  >>> numberOfDivisors(13)\n  1\n  >>> numberOfDivisors(210)\n  0\n  */\nconst numberOfDivisors = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisors(8)\n  2\n  >>> numberOfDivisors(13)\n  1\n  >>> numberOfDivisors(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisorsOf(8)\n  2\n  >>> numberOfDivisorsOf(13)\n  1\n  >>> numberOfDivisorsOf(210)\n  0\n  */\nconst numberOfDivisorsOf = (n) => {\n  let count = 0;\n  for (let i = 2; i <= largestPrimeFactor(n); i++) {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ')\n  const paren_array_length = paren_array.length\n  const max_level = 0\n  let max_level_paren_level = 0\n  let current_level = 0\n\n  for (let i = 0; i < paren_array_length; i++) {\n    if (paren_array[i].includes('(')) {\n      current_level++\n    } else if (paren_array[i].includes(')')) {\n      current_level--\n    }\n\n    if (current_level > max_level) {\n      max_level = current_level\n      max_level_paren_level = i\n    }\n  }\n\n  return [max_level, max_level_paren_level]\n}\n\n/* Given a string representing a nested parentheses, output the string that represents the nested parentheses separated by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> nestParentheses('(()()) ((())) () ((())()())')\n  '(()() ((())) () ((())()())'\n  */\nconst nestParentheses = (paren_string) => {\n  const [max_level, max_level_paren_level] = parseNestedParens(paren_string)\n  const nested_paren_string = paren_string.slice(0, max_level_paren_level + 1)\n  const nested_paren_array = nested_paren_string.split(' ')\n  const nested_paren_array_length = nested_paren_array.length\n\n  for (let i = 0; i < nested_paren_array_length; i++) {\n    if (nested_paren_array[i].includes('(')) {\n      nested_paren_array[i] = '(' + nested_paren_array[i]\n    } else if (nested_paren_array[i].includes(')')) {\n      nested_paren_array[i] = nested_paren_array[i] + ')'\n    }\n  }\n\n  return nested_paren_string\n}\n\n/* Given a string representing a nested parentheses, output the string that represents the nested parentheses separated by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> nestParentheses('(()()) ((())) () ((())()())')\n  '(()() ((())) () ((())()())'\n  */\nconst nestParentheses2 = (paren_string) => {\n  const [max_level, max_level_paren_level] = parseNestedParens(paren_string)\n  const nested_paren_string = paren_string.slice(0, max_level_paren_level + 1)\n  const nested_paren_array = nested_paren_string.split(' ')\n  const nested_paren_array_length = nested_paren_array.length\n\n  for (let i = 0; i < nested_paren_array_length; i++) {\n    if (nested_paren_array[i].includes('(')) {\n      nested_paren_array[i] = '(' + nested_paren_array[i]\n    } else if (nested_paren_array[i].includes(')')) {\n      nested_paren_array[i] = nested_paren_array[i] + ')'\n    }\n  }\n\n  return nested_paren_string\n}\n\n/* Given a string representing a nested parentheses, output the string that represents the nested parentheses separated by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> nestParentheses('(()()) ((())) () ((())()())')\n  '(()() ((())) () ((())()())'\n  */\nconst nestParentheses3 = (paren_string) => {\n  const [max_level, max_level_paren_level] = parseNestedParens(paren_string)\n  const nested_paren_string = paren_string.slice(0, max_level_paren_level + 1)\n  const nested_paren_array = nested_paren_string.split(' ')\n  const nested_paren_array_length = nested_paren_array.length\n\n  for (let i = 0; i < nested_paren_array_length; i++) {\n    if (nested_paren_array[i].includes('(')) {\n      nested_paren_array[i] = '(' + nested_paren_array[i]\n    } else if (nested_paren_array[i].includes(')')) {\n      nested_paren_array[i] = nested_paren_array[i] + ')'\n    }\n  }\n\n  return nested_paren_string\n}\n\n/* Given a string representing a nested parentheses, output the string that represents the nested parentheses separated by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> nestParentheses('(()()) ((())) () ((())()())')\n  '(()() ((())) () ((())()())'\n  */\nconst nestParentheses4 = (paren_string) => {\n  const [max_level, max_level_paren_level] = parseNestedParens(paren_string)\n  const nested_paren_string = paren_string.slice(0, max_level_paren_level + 1)\n  const nested_paren_array = nested_paren_string.split(' ')\n  const nested_paren_array_length = nested_paren_array.length\n\n  for (let i = 0; i < nested_paren_array_length; i++) {\n    if (nested_paren_array[i].includes('(')) {\n      nested_paren_array[i] = '(' + nested_paren_array[i]\n    } else if (nested_paren_array[i].includes(')')) {\n      nested_paren_array[i] = nested_paren_array[i] + ')'\n    }\n  }\n\n  return nested_paren_string\n}\n\n/* Given a string representing a nested parentheses, output the string that represents the nested parentheses separated by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> nestParentheses('(()()) ((())) () ((())()())')\n  '(()() ((())) () ((())()())'\n  */\nconst nestParentheses5 = (paren_string) => {\n  const [max_level, max_level_paren_level] = parseNestedParens(paren_string)\n  const nested_paren_string = paren_string.slice(0, max_level_paren_level + 1)\n  const nested_paren_array = nested_paren_string.split(' ')\n  const nested_paren_array_length = nested_paren_array.length\n\n  for (let i = 0; i < nested_paren_array_length; i++) {\n    if (nested_paren_array[i].includes('(')) {\n      nested_paren_array[i] = '(' + nested_paren_array[i]\n    } else if (nested_paren_array[i].includes(')')) {\n      nested_paren_array[i] = nested_paren_array[i] + ')'\n    }\n  }\n\n  return nested_paren_string\n}\n\n/* Given a string representing a nested parentheses, output the string that represents the nested parentheses separated by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> nestParentheses('(()()) ((())) () ((())()())')\n  '(()() ((())) () ((())()())'\n  */\nconst nestParentheses6 = (paren_string) => {\n  const [max_level, max_level_paren_level] = parseNestedParens(paren_string)\n  const nested_paren_string = paren_string.slice(0, max_level_paren_level + 1)\n  const nested_paren_array = nested_paren_string.split(' ')\n  const nested_paren_array_length = nested_paren_array.length\n\n  for (let i = 0; i < nested_paren_array_length; i++) {\n    if (nested_paren_array[i].includes('(')) {\n      nested_paren_array[i] = '(' + nested_paren_array[i]\n    } else if (nested_paren_array[i].includes(')')) {\n      nested_paren_array[i] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n * \n * >>> capitalizeFirstLetter(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetter(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetter(\"HelloWorld\")\n * \"HelloWorld\"\n */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).replace(/\\s+/g,'');\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized and each word separated by a space.\n * \n * >>> capitalizeFirstLetterWithSpaces(\"Hello World\")\n * \"Hello World\"\n * >>> capitalizeFirstLetterWithSpaces(\"Hello World!\")\n * \"Hello World!\"\n * >>> capitalizeFirstLetterWithSpaces(\"HelloWorld\")\n * \"Hello World\"\n */\nconst capitalizeFirstLetterWithSpaces = (string) => {\n  return string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/**\n * Returns the derivative of the polynomial at point x\n * @param {Array} xs - array of x values\n * @returns {Array} derivative of the polynomial at point x\n */\nconst derivativeAt = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length; i++) {\n    derivatives.push(xs[i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) return n;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n Write a function to compute the n-th Fibonacci number using the recursive formula.\n >>> fib(5)\n 8\n >>> fib(10)\n 13\n >>> fib(20)\n 41\n >>> fib(30)\n 89\n >>> fib(40)\n 144\n >>> fib(50)\n 233\n >>> fib(60)\n 377\n >>> fib(70)\n 610\n >>> fib(80)\n 987\n >>> fib(90)\n 1597\n >>> fib(100)\n 2584\n >>> fib(110)\n 4181\n >>> fib(120)\n 6765\n >>> fib(130)\n 10946\n >>> fib(140)\n 17711\n >>> fib(150)\n 28657\n >>> fib(160)\n 46368\n >>> fib(170)\n 75025\n >>> fib(180)\n 121393\n >>> fib(190)\n 196418\n >>> fib(200)\n 317811\n >>> fib(210)\n 514229\n >>> fib(220)\n 832040\n >>> fib(230)\n 1346269\n >>> fib(240)\n 2178309\n >>> fib(250)\n 3524578\n >>> fib(260)\n 5702887\n >>> fib(270)\n 9227465\n >>> fib(280)\n 14930352\n >>> fib(290)\n 24157817\n >>> fib(300)\n 32670557\n >>> fib(310)\n 49891781\n >>> fib(320)\n 63245986\n >>> fib(330)\n 92170082\n >>> fib(340)\n 149481725\n >>> fib(350)\n 242176472\n >>> fib(360)\n 322507311\n >>> fib(370)\n 497119290\n >>> fib(380)\n 633418095\n >>> fib(390)\n 922746613\n >>> fib(400)\n 1493035280\n >>> fib(410)\n 2415781700\n >>> fib(420)\n 3267055700\n >>> fib(430)\n 4989178100\n >>> fib(440)\n 6324598600\n >>> fib(450)\n 9217008200\n >>> fib(460)\n 14948172500\n >>> fib(470)\n 24217647200\n >>> fib(480)\n 32250731100\n >>> fib(490)\n 4971192900\n >>> fib(500)\n 63341809500\n >>> fib(510)\n 92274661300\n >>> fib(520)\n 14930352800\n >>> fib(530)\n 24157817000\n >>> fib(540)\n 32670557000\n >>> fib(550)\n 49891781000\n >>> fib(560)\n 63245986000 \n >>> fib(570)\n 92170082000\n >>> fib(580)\n 149481725000\n >>> fib(590)\n 242176472000\n >>> fib(600)\n 322507311000 \n >>> fib(610)\n 49711929000\n >>> fib(620)\n 633418095000 \n >>> fib(630)\n 922746613000 \n >>> fib(640)\n 149303528000 \n >>> fib(650)\n 241578170000\n >>> fib(660)\n 326705570000\n >>> fib(670)\n 498917810000\n >>> fib(680)\n 632459860000 \n >>> fib(690)\n 92170082000\n >>> fib(700)\n 149481725000\n >>> fib(710)\n 242176472000\n >>> fib(720)\n 322507311000 \n >>> fib(730)\n 49711929000\n >>> fib(740)\n 633418095000 \n >>> fib(750)\n 922746613000 \n >>> fib(760)\n 149303528000 \n >>> fib(770)\n 241578170000\n >>> fib(780)\n 326705570000\n >>> fib(790)\n 498917810000\n >>> fib(800)\n 632459860000 \n >>> fib(810)\n 92170082000\n >>> fib(820)\n 149481725000\n >>> fib(830)\n 242176472000\n >>> fib(840)\n 322507311000 \n >>> fib(850)\n 49711929000\n >>> fib(860)\n 633418095000 \n >>> fib(870)\n 922746613000 \n >>> fib(880)\n 149303528000 \n >>> fib(890)\n 241578170000\n >>> fib(900)\n 326705570000\n >>> fib(910)\n 498917810000\n >>> fib(920)\n 632459860000 \n >>> fib(930)\n 92170082000\n >>> fib(930)\n 149481725000\n >>> fib(930)\n 242176472000\n >>> fib(930)\n 322507311000 \n >>> fib(930)\n 49711929000\n >>> fib(930)\n 633418095000 \n >>> fib(930)\n 922746613000 \n >>> fib(930)\n 149303528000 \n >>> fib(930)\n 241578170000\n >>> fib(930)\n 326705570000\n >>> fib(930)\n 498917810000\n >>> fib(930)\n 632459860000 \n >>> fib(9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digit = x % 10;\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digit;\n    digit = digit / 10;\n  }\n  return result;\n};\n\n/*\n This function takes an integer and returns the sum of its digits. If the sum is greater than 9, return 9.\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(1234)\n  10\n  >>> sumDigits(12345)\n  15\n  >>> sumDigits(123456)\n  21\n  >>> sumDigits(1234567)\n  28\n  >>> sumDigits(123456789)\n  42\n  >>> sumDigits(1234567890)\n  49\n  >>> sumDigits(12345678901)\n  58\n  >>> sumDigits(123456789012)\n  66\n  >>> sumDigits(1234567890123)\n  74\n  >>> sumDigits(12345678901234)\n  82\n  >>> sumDigits(123456789012345)\n  90\n  >>> sumDigits(1234567890123456)\n  98\n  >>> sumDigits(12345678901234567)\n  104\n  >>> sumDigits(123456789012345678)\n  112\n  >>> sumDigits(1234567890123456788)\n  120\n  >>> sumDigits(12345678901234567889)\n  128\n  >>> sumDigits(123456789012345678899)\n  136\n  >>> sumDigits(1234567890123456788999)\n  144\n  >>> sumDigits(12345678901234567889999)\n  152\n  >>> sumDigits(123456789012345678899999)\n  160\n  >>> sumDigits(1234567890123456788999999)\n  168\n  >>> sumDigits(12345678901234567889999999)\n  176\n  >>> sumDigits(1234567890123456788999999999)\n  184\n  >>> sumDigits(123456789012345678899999999999)\n  192\n  >>> sumDigits(12345678901234567889999999999999)\n  200\n  >>> sumDigits(123456789012345678899999999999998)\n  208\n  >>> sumDigits(1234567890123456788999999999999987)\n  216\n  >>> sumDigits(12345678901234567889999999999999876)\n  224\n  >>> sumDigits(123456789012345678899999999999998765)\n  232\n  >>> sumDigits(1234567890123456788999999999999987654)\n  240\n  >>> sumDigits(12345678901234567889999999999999876543)\n  248\n  >>> sumDigits(123456789012345678899999999999998765432)\n  256\n  >>> sumDigits(1234567890123456788999999999999987654321)\n  264\n  >>> sumDigits(12345678901234567889999999999999876543210)\n  272\n  >>> sumDigits(123456789012345678899999999999998765432101)\n  280\n  >>> sumDigits(1234567890123456788999999999999987654321010)\n  288\n  >>> sumDigits(12345678901234567889999999999999876543210100)\n  296\n  >>> sumDigits(12345678901234567889999999999999876543210101)\n  304\n  >>> sumDigits(123456789012345678899999999999998765432101010)\n  312\n  >>> sumDigits(123456789012345678899999999999998765432101011)\n  320\n  >>> sumDigits(1234567890123456788999999999999987654321010100)\n  328\n  >>> sumDigits(1234567890123456788999999999999987654321010101)\n  336\n  >>> sumDigits(12345678901234567889999999999999876543210101010)\n  344\n  >>> sumDigits(12345678901234567889999999999999876543210101011)\n  352\n  >>> sumDigits(123456789012345678899999999999998765432101010100)\n  360\n  >>> sumDigits(123456789012345678899999999999998765432101010101)\n  368\n  >>> sumDigits(1234567890123456788999999999999987654321010101010)\n  376\n  >>> sumDigits(1234567890123456788999999999999987654321010101011)\n  384\n  >>> sumDigits(12345678901234567889999999999999876543210101010100)\n  392\n  >>> sumDigits(12345678901234567889999999999999876543210101010101)\n  400\n  >>> sumDigits(123456789012345678899999999999998765432101010101010)\n  408\n  >>> sumDigits(123456789012345678899999999999998765432101010101011)\n  416\n  >>> sumDigits(1234567890123456788999999999999987654321010101010100)\n  424\n  >>> sumDigits(1234567890123456788999999999999987654321010101010101)\n  432\n  >>> sumDigits(12345678901234567889999999999999876543210101010101010)\n  440\n  >>> sumDigits(12345678901234567889999999999999876543210101010101011)\n  448\n  >>> sumDigits(123456789012345678899999999999998765432101010101010100)\n  456\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101)\n  464\n  >>> sumDigits(1234567890123456788999999999999987654321010101010101010)\n  472\n  >>> sumDigits(1234567890123456788999999999999987654321010101010101011)\n  480\n  >>> sumDigits(12345678901234567889999999999999876543210101010101010100)\n  488\n  >>> sumDigits(12345678901234567889999999999999876543210101010101010101)\n  496\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101010)\n  504\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101011)\n  512\n  >>> sumDigits(1234567890123456788999999999999987654321010101010101010100)\n  520\n  >>> sumDigits(12345678901234567889999999999999876543210101010101010101)\n  528\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101010)\n  536\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101011)\n  544\n  >>> sumDigits(1234567890123456788999999999999987654321010101010101010100)\n  552\n  >>> sumDigits(12345678901234567889999999999999876543210101010101010101)\n  560\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101010)\n  568\n  >>> sumDigits(123456789012345678899999999999998765432101010101010101011)\n  576\n  >>> sumDigits(12345678901234567889999999999999", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the lower character only' ASCII code.\n\n  Examples:\n      lowerSum(\"\") => 0\n      lowerSum(\"abAB\") => 65\n      lowerSum(\"abcCd\") => 67\n      lowerSum(\"helloE\") => 69\n      lowerSum(\"woArBld\") => 65\n      lowerSum(\"aAaaaXa\") => 65\n  */\nconst lowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n};\n\n// keep this function call here \nconst result = fruitDistribution(\"5 apple and 6 oranges\", 19);\nconsole.log(result);</code>\n\nAnother approach is to use regular expression to get the number from the string and use reduce to calculate the sum of the fruits in the basket:\n\n<code>\nconst fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.match(/(\\d+)/g).map(Number);\n  return n - mango - apple - oranges;\n};\n\n// keep this function call here \nconst result = fruitDistribution(\"5 apple and 6 oranges\", 19);\nconsole.log(result);</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apple, oranges, mango] = s.split(\" \").map(Number);\n  return n - mango - apple - oranges;\n}\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\",120));</code>\n<|/ a tags=javascript,arrays |>\n<| a d", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((n) => n % 2 === 0);\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestEvenIndex = evenValues.findIndex((n) => n === smallestEvenValue);\n  return smallestEvenIndex? [smallestEvenValue, smallestEvenIndex] : [];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestOddIndex = oddValues.findIndex((n) => n === smallestOddValue);\n  return smallestOddIndex? [smallestOddValue, smallestOddIndex] : [];\n};\n\nexport { pluckOdd };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd2 = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestOddIndex = oddValues.findIndex((n) => n === smallestOddValue);\n  return smallestOddIndex? [smallestOddValue, smallestOddIndex] : [];\n};\n\nexport { pluckOdd2 };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd3 = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestOddIndex = oddValues.findIndex((n) => n === smallestOddValue);\n  return smallestOddIndex? [smallestOddValue, smallestOddIndex] : [];\n};\n\nexport { pluckOdd3 };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd4 = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  const smallestOddValue = oddValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  if (maxFreq >= 0) {\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max && lst[i] >= maxFreq) {\n        return lst[i];\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You was given a non-empty string and an integer k. Return a string that consists of k copies of the string in reverse order. \n  Examples:\n      reverse(\"hello\", 2) == \"olleh\"\n      reverse(\"hello\", 3) == \"hell\"\n      reverse(\"hello\", 0) == \"hello\"\n      reverse(\"hello\", -1) == \"hello\"\n  */\nconst reverse = (str, k) => {\n  if (k > str.length || k < 0) {\n    return str;\n  }\n  let reversedStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You was given a non-empty string and an integer k. Return a string that consists of k copies of the string in reverse order. \n  Examples:\n      reverse(\"hello\", 2) == \"olleh\"\n      reverse(\"hello\", 3) == \"hell\"\n      reverse(\"hello\", 0) == \"hello\"\n      reverse(\"hello\", -1) == \"hello\"\n  */\nconst reverse = (str, k) => {\n  if (k > str.length || k < 0) {\n    return str;\n  }\n  let reversedStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You was given a non-empty string and an integer k. Return a string that consists of k copies of the string in reverse order. \n  Examples:\n      reverse(\"hello\", 2) == \"olleh\"\n      reverse(\"hello\", 3) == \"hell\"\n      reverse(\"hello\", 0) == \"hello\"\n      reverse(\"hello\", -1) == \"hello\"\n  */\nconst reverse = (str, k) => {\n  if (k > str.length || k < 0) {\n    return str;\n  }\n  let reversedStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You was given a non-empty string and an integer k. Return a string that consists of k copies of the string in reverse order. \n  Examples:\n      reverse(\"hello\", 2) == \"olleh\"\n      reverse(\"hello\", 3) == \"hell\"\n      reverse(\"hello\", 0) == \"hello\"\n      reverse(\"hello\", -1) == \"hello\"\n  */\nconst reverse = (str, k) => {\n  if (k > str.length || k < 0) {\n    return str;\n  }\n  let reversedStr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  strings.forEach((string) => {\n    if (!string.includes(substring)) {\n      filteredStrings.push(string);\n    }\n  });\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [];\n  let min = 0;\n  let max = lst.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    sortedList.push(lst[mid]);\n    if (mid < lst.length - 1) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  return side1 + side2 + side3 > 0? side1 + side2 + side3 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  const side4 = Math.abs(d * b);\n  return side1 + side2 + side3 + side4 > 0? side1 + side2 + side3 + side4 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  const side4 = Math.abs(d * b);\n  const side5 = Math.abs(e * b);\n  return side1 + side2 + side3 + side4 + side5 > 0? side1 + side2 + side3 + side4 + side5 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  const side4 = Math.abs(d * b);\n  const side5 = Math.abs(e * b);\n  const side6 = Math.abs(f * b);\n  return side1 + side2 + side3 + side4 + side5 + side6 > 0? side1 + side2 + side3 + side4 + side5 + side6 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given sides. Return null if the three given sides form a triangle. Otherwise return the area of the triangle formed by the three given sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == null\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g) => {\n  const side1 = Math.abs(a * b);\n  const side2 = Math.abs(c * b);\n  const side3 = Math.abs(a * c);\n  const side4 = Math.abs(d * b);\n  const side5 = Math.abs(e * b);\n  const side6 = Math.abs(f * b);\n  const side7 = Math.abs(g * b);\n  return side1 + side2 + side3 + side4 + side5 + side6 + side7 > 0? side1 + side2 + side3 + side4 + side5 + side6 + side7 : null;\n};\n\n/*\n  Gives the area of the triangle formed by the three given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sumOfElements(q) <= w) return true\n  return false\n}\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindrome(q) && sum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let mid = 0;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n\n  while (i < len) {\n    mid = len / 2;\n    max = arr[mid];\n    min = arr[mid];\n\n    while (i < len) {\n      j = i;\n      while (j < len) {\n        if (arr[j] > max) {\n          max = arr[j];\n        }\n        if (arr[j] < min) {\n          min = arr[j];\n        }\n        j++;\n      }\n      i++;\n    }\n\n    if (min > max) {\n      temp = min;\n      min = max;\n      max = temp;\n    }\n\n    if (min > arr[mid]) {\n      mid++;\n    }\n  }\n\n  return min;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [10, 5, 6, 4, 2].\n*/\nconst largestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 4, 2, 6, 10].\n*/\nconst smallestNumbers = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n    arr[j] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n    arr[j] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n    arr[j] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n    arr[j] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n    arr[j] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    max = arr[i];\n    min = arr[i];\n    i = j;\n    while (j < len) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n      j++;\n    }\n    arr[i] = max;\n    arr[j] = min;\n  }\n\n  return arr;\n};\n\n/*\n  Given an array arr of integers, return a new array with the largest and smallest number in each position. For example, if arr is [3, 10, 5, 1, 6, 4, 2], the new array should be [3, 1, 1, 4, 2, 6, 10].\n*/\nconst largestAndSmallestNumbers = (arr) => {\n  const len = arr.length;\n  let max = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const common = lst1.filter(item => lst2.includes(item));\n  return common;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 0\n  count('hihi') ➞ 1\n  count('hihihi') ➞ 2\n  count('hihihihi') ➞ 3\n  count('hihihihihi') ➞ 4\n  count('hihihihihihi') ➞ 5\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 3; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy2 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy3 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy4 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy5 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy6 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy7 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy8 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false\n  isDivisibleBy(7, 3) => false\n  isDivisibleBy(7, 7) => true\n  */\nconst isDivisibleBy9 = (x, y) => {\n  if (y === 0) return false;\n  if (y === 1) return true;\n  if (x % y === 0) return true;\n  return false;\n};\n\n/*Your tasks is to write a function which returns true if a number is divisible by another number and false in other case. x is a number divisible by y if y%x=0 and false in other case\n  For example:\n  isDivisibleBy(1, 2) => true\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(3, 2) => false\n  isDivisibleBy(5, 3) => false\n  isDivisibleBy(5, 5) => false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 8 === 0) return false\n  if (a % 9 === 0) return false\n  if (a % 10 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 12 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 14 === 0) return false\n  if (a % 15 === 0) return false\n  if (a % 16 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 18 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 20 === 0) return false\n  if (a % 21 === 0) return false\n  if (a % 22 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 24 === 0) return false\n  if (a % 25 === 0) return false\n  if (a % 26 === 0) return false\n  if (a % 27 === 0) return false\n  if (a % 28 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 30 === 0) return false\n  if (a % 31 === 0) return false\n  if (a % 32 === 0) return false\n  if (a % 33 === 0) return false\n  if (a % 34 === 0) return false\n  if (a % 35 === 0) return false\n  if (a % 36 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 38 === 0) return false\n  if (a % 39 === 0) return false\n  if (a % 40 === 0) return false\n  if (a % 41 === 0) return false\n  if (a % 42 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 44 === 0) return false\n  if (a % 45 === 0) return false\n  if (a % 46 === 0) return false\n  if (a % 47 === 0) return false\n  if (a % 48 === 0) return false\n  if (a % 49 === 0) return false\n  if (a % 50 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 52 === 0) return false\n  if (a % 53 === 0) return false\n  if (a % 54 === 0) return false\n  if (a % 55 === 0) return false\n  if (a % 56 === 0) return false\n  if (a % 57 === 0) return false\n  if (a % 58 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 60 === 0) return false\n  if (a % 61 === 0) return false\n  if (a % 62 === 0) return false\n  if (a % 63 === 0) return false\n  if (a % 64 === 0) return false\n  if (a % 65 === 0) return false\n  if (a % 66 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 68 === 0) return false\n  if (a % 69 === 0) return false\n  if (a % 70 === 0) return false\n  if (a % 71 === 0) return false\n  if (a % 72 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 74 === 0) return false\n  if (a % 75 === 0) return false\n  if (a % 76 === 0) return false\n  if (a % 77 === 0) return false\n  if (a % 78 === 0) return false\n  if (a % 79 === 0) return false\n  if (a % 80 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 82 === 0) return false\n  if (a % 83 === 0) return false\n  if (a % 84 === 0) return false\n  if (a % 85 === 0) return false\n  if (a % 86 === 0) return false\n  if (a % 87 === 0) return false\n  if (a % 88 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 90 === 0) return false\n  if (a % 91 === 0) return false\n  if (a % 92 === 0) return false\n  if (a % 93 === 0) return false\n  if (a % 94 === 0) return false\n  if (a % 95 === 0) return false\n  if (a % 96 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 98 === 0) return false\n  if (a % 99 === 0) return false\n  if (a % 100 === 0) return false\n  if (a % 101 === 0) return false\n  if (a % 102 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 104 === 0) return false\n  if (a % 105 === 0) return false\n  if (a % 106 === 0) return false\n  if (a % 107 === 0) return false\n  if (a % 108 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 110 === 0) return false\n  if (a % 111 === 0) return false\n  if (a % 112 === 0) return false\n  if (a % 113 === 0) return false\n  if (a % 114 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 116 === 0) return false\n  if (a % 117 === 0) return false\n  if (a % 118 === 0) return false\n  if (a % 119 === 0) return false\n  if (a % 120 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 122 === 0) return false\n  if (a % 123 === 0) return false\n  if (a % 124 === 0) return false\n  if (a % 125 === 0) return false\n  if (a % 126 === 0) return false\n  if (a % 127 === 0) return false\n  if (a % 128 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 130 === 0) return false\n  if (a % 131 === 0) return false\n  if (a % 132 === 0) return false\n  if (a % 133 === 0) return false\n  if (a % 134 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 136 === 0) return false\n  if (a % 137 === 0) return false\n  if (a % 138 === 0) return false\n  if (a % 139 === 0) return false\n  if (a % 140 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 142 === 0) return false\n  if (a % 143 === 0) return false\n  if (a % 144 === 0) return false\n  if (a % 145 === 0) return false\n  if (a % 146 === 0) return false\n  if (a % 147 === 0) return false\n  if (a % 148 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 150 === 0) return false\n  if (a % 151 === 0) return false\n  if (a % 152 === 0) return false\n  if (a % 153 === 0) return false\n  if (a % 154 === 0) return false\n  if (a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let primes = [];\n  let primesLength = 0;\n  let isPrime = true;\n  let isPrimeLength = 0;\n  let isPrimeLength2 = 0;\n  let isPrimeLength3 = 0;\n  let isPrimeLength4 = 0;\n  let isPrimeLength5 = 0;\n  let isPrimeLength6 = 0;\n  let isPrimeLength7 = 0;\n  let isPrimeLength8 = 0;\n  let isPrimeLength9 = 0;\n  let isPrimeLengthA = 0;\n  let isPrimeLengthB = 0;\n  let isPrimeLengthC = 0;\n  let isPrimeLengthD = 0;\n  let isPrimeLengthE = 0;\n  let isPrimeLengthF = 0;\n  let isPrimeLength10 = 0;\n  let isPrimeLength11 = 0;\n  let isPrimeLength12 = 0;\n  let isPrimeLength13 = 0;\n  let isPrimeLength14 = 0;\n  let isPrimeLength15 = 0;\n  let isPrimeLength16 = 0;\n  let isPrimeLength17 = 0;\n  let isPrimeLength18 = 0;\n  let isPrimeLength19 = 0;\n  let isPrimeLength20 = 0;\n  let isPrimeLength21 = 0;\n  let isPrimeLength22 = 0;\n  let isPrimeLength23 = 0;\n  let isPrimeLength24 = 0;\n  let isPrimeLength25 = 0;\n  let isPrimeLength26 = 0;\n  let isPrimeLength27 = 0;\n  let isPrimeLength28 = 0;\n  let isPrimeLength29 = 0;\n  let isPrimeLength30 = 0;\n  let isPrimeLength31 = 0;\n  let isPrimeLength32 = 0;\n  let isPrimeLength33 = 0;\n  let isPrimeLength34 = 0;\n  let isPrimeLength35 = 0;\n  let isPrimeLength36 = 0;\n  let isPrimeLength37 = 0;\n  let isPrimeLength38 = 0;\n  let isPrimeLength39 = 0;\n  let isPrimeLength40 = 0;\n  let isPrimeLength41 = 0;\n  let isPrimeLength42 = 0;\n  let isPrimeLength43 = 0;\n  let isPrimeLength44 = 0;\n  let isPrimeLength45 = 0;\n  let isPrimeLength46 = 0;\n  let isPrimeLength47 = 0;\n  let isPrimeLength48 = 0;\n  let isPrimeLength49 = 0;\n  let isPrimeLength50 = 0;\n  let isPrimeLength51 = 0;\n  let isPrimeLength52 = 0;\n  let isPrimeLength53 = 0;\n  let isPrimeLength54 = 0;\n  let isPrimeLength55 = 0;\n  let isPrimeLength56 = 0;\n  let isPrimeLength57 = 0;\n  let isPrimeLength58 = 0;\n  let isPrimeLength59 = 0;\n  let isPrimeLength60 = 0;\n  let isPrimeLength61 = 0;\n  let isPrimeLength62 = 0;\n  let isPrimeLength63 = 0;\n  let isPrimeLength64 = 0;\n  let isPrimeLength65 = 0;\n  let isPrimeLength66 = 0;\n  let isPrimeLength67 = 0;\n  let isPrimeLength68 = 0;\n  let isPrimeLength69 = 0;\n  let isPrimeLength70 = 0;\n  let isPrimeLength71 = 0;\n  let isPrimeLength72 = 0;\n  let isPrimeLength73 = 0;\n  let isPrimeLength74 = 0;\n  let isPrimeLength75 = 0;\n  let isPrimeLength76 = 0;\n  let isPrimeLength77 = 0;\n  let isPrimeLength78 = 0;\n  let isPrimeLength79 = 0;\n  let isPrimeLength80 = 0;\n  let isPrimeLength81 = 0;\n  let isPrimeLength82 = 0;\n  let isPrimeLength83 = 0;\n  let isPrimeLength84 = 0;\n  let isPrimeLength85 = 0;\n  let isPrimeLength86 = 0;\n  let isPrimeLength87 = 0;\n  let isPrimeLength88 = 0;\n  let isPrimeLength89 = 0;\n  let isPrimeLength90 = 0;\n  let isPrimeLength91 = 0;\n  let isPrimeLength92 = 0;\n  let isPrimeLength93 = 0;\n  let isPrimeLength94 = 0;\n  let isPrimeLength95 = 0;\n  let isPrimeLength96 = 0;\n  let isPrimeLength97 = 0;\n  let isPrimeLength98 = 0;\n  let isPrimeLength99 = 0;\n  let isPrimeLength100 = 0;\n  let isPrimeLength101 = 0;\n  let isPrimeLength102 = 0;\n  let isPrimeLength103 = 0;\n  let isPrimeLength104 = 0;\n  let isPrimeLength105 = 0;\n  let isPrimeLength106 = 0;\n  let isPrimeLength107 = 0;\n  let isPrimeLength108 = 0;\n  let isPrimeLength109 = 0;\n  let isPrimeLength110 = 0;\n  let isPrimeLength111 = 0;\n  let isPrimeLength112 = 0;\n  let isPrimeLength113 = 0;\n  let isPrimeLength114 = 0;\n  let isPrimeLength115 = 0;\n  let isPrimeLength116 = 0;\n  let isPrimeLength117 = 0;\n  let isPrimeLength118 = 0;\n  let isPrimeLength119 = 0;\n  let isPrimeLength120 = 0;\n  let isPrimeLength121 = 0;\n  let isPrimeLength122 = 0;\n  let isPrimeLength123 = 0;\n  let isPrimeLength124 = 0;\n  let isPrimeLength125 = 0;\n  let isPrimeLength126 = 0;\n  let isPrimeLength127 = 0;\n  let isPrimeLength128 = 0;\n  let isPrimeLength129 = 0;\n  let isPrimeLength130 = 0;\n  let isPrimeLength131 = 0;\n  let isPrimeLength132 = 0;\n  let isPrimeLength133 = 0;\n  let isPrimeLength134 = 0;\n  let isPrimeLength135 = 0;\n  let isPrimeLength136 = 0;\n  let isPrimeLength137 = 0;\n  let isPrimeLength138 = 0;\n  let isPrimeLength139 = 0;\n  let isPrimeLength140 = 0;\n  let isPrimeLength141 = 0;\n  let isPrimeLength142 = 0;\n  let isPrimeLength143 = 0;\n  let isPrimeLength144 = 0;\n  let isPrimeLength145 = 0;\n  let isPrimeLength146 = 0;\n  let isPrimeLength147 = 0;\n  let isPrimeLength148 = 0;\n  let isPrimeLength149 = 0;\n  let isPrimeLength150 = 0;\n  let isPrimeLength151 = 0;\n  let isPrimeLength152 = 0;\n  let isPrimeLength153 = 0;\n  let isPrimeLength154", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimal%2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal/2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The function should receive a binary number as a string and return a decimal number. The function should return 0 if there is no binary number in the string.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  binaryToDecimal(\"0\") # returns 0\n  binaryToDecimal(\"1\") # returns 1\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binary[i];\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary number. The function should receive a decimal number as a string and return a binary number. The function should return 0 if there is no decimal number in the string.\n\n  Examples:\n  decimalToBinary(\"15\") # returns \"1111\"\n  decimalToBinary(\"32\") # returns \"100000\"\n  decimalToBinary(\"0\") # returns \"0\"\n  decimalToBinary(\"1\") # returns \"1\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimal%2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal/2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The function should receive a binary number as a string and return a hexadecimal number. The function should return 0 if there is no binary number in the string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  binaryToHex(\"0\") # returns \"0\"\n  binaryToHex(\"1\") # returns \"1\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The function should receive a hexadecimal number as a string and return a binary number. The function should return 0 if there is no hexadecimal number in the string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  hexToBinary(\"0\") # returns \"0\"\n  hexToBinary(\"1\") # returns \"1\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i), 16).toString(2)}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The function should receive a binary number as a string and return a hexadecimal number. The function should return 0 if there is no binary number in the string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  binaryToHex(\"0\") # returns \"0\"\n  binaryToHex(\"1\") # returns \"1\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The function should receive a hexadecimal number as a string and return a binary number. The function should return 0 if there is no hexadecimal number in the string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  hexToBinary(\"0\") # returns \"0\"\n  hexToBinary(\"1\") # returns \"1\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i), 16).toString(2)}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The function should receive a binary number as a string and return a hexadecimal number. The function should return 0 if there is no binary number in the string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  binaryToHex(\"0\") # returns \"0\"\n  binaryToHex(\"1\") # returns \"1\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The function should receive a hexadecimal number as a string and return a binary number. The function should return 0 if there is no hexadecimal number in the string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  hexToBinary(\"0\") # returns \"0\"\n  hexToBinary(\"1\") # returns \"1\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i), 16).toString(2)}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The function should receive a binary number as a string and return a hexadecimal number. The function should return 0 if there is no binary number in the string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  binaryToHex(\"0\") # returns \"0\"\n  binaryToHex(\"1\") # returns \"1\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The function should receive a hexadecimal number as a string and return a binary number. The function should return 0 if there is no hexadecimal number in the string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  hexToBinary(\"0\") # returns \"0\"\n  hexToBinary(\"1\") # returns \"1\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i), 16).toString(2)}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) count += 1;\n  }\n  return count >= 3;\n};\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 1.0);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesGrades = gradesArray.map((grade, index) => {\n    if (grade >= gradesAvg) {\n      return grade;\n    }\n    if (grade < gradesAvg) {\n      return gradesArray.length - index - 1;\n    }\n  });\n  return gradesGrades;\n};\n\n/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 1.0);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesGrades = gradesArray.map((grade, index) => {\n    if (grade >= gradesAvg) {\n      return grade;\n    }\n    if (grade < gradesAvg) {\n      return gradesArray.length - index - 1;\n    }\n  });\n  return gradesGrades;\n};\n\n/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 1.0);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesGrades = gradesArray.map((grade, index) => {\n    if (grade >= gradesAvg) {\n      return grade;\n    }\n    if (grade < gradesAvg) {\n      return gradesArray.length - index - 1;\n    }\n  });\n  return gradesGrades;\n};\n\n/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 1.0);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesGrades = gradesArray.map((grade, index) => {\n    if (grade >= gradesAvg) {\n      return grade;\n    }\n    if (grade < gradesAvg) {\n      return gradesArray.length - index - 1;\n    }\n  });\n  return gradesGrades;\n};\n\n/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 1.0);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesGrades = gradesArray.map((grade, index) => {\n    if (grade >= gradesAvg) {\n      return grade;\n    }\n    if (grade < gradesAvg) {\n      return gradesArray.length - index - 1;\n    }\n  });\n  return gradesGrades;\n};\n\n/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      prime = false\n      break\n    }\n  }\n  return prime\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters a-z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letter = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n      break\n    }\n  }\n  return letter\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters A-Z or false otherwise\n  Examples\n  upperCaseLetters('Hello') == true\n  upperCaseLetters('abcdcba') == true\n  upperCaseLetters('kittens') == false\n  upperCaseLetters('orange') == false\n  */\nconst upperCaseLetters = (string) => {\n  let upperCaseLetter = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'A' || string[i] > 'Z') {\n      upperCaseLetter = false\n      break\n    }\n  }\n  return upperCaseLetter\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters a-z or A-Z or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      lettersAndNumbers = false\n      break\n    }\n    if (string[i] < 'A' || string[i] > 'Z') {\n      lettersAndNumbers = false\n      break\n    }\n  }\n  return lettersAndNumbers\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters a-z or A-Z or 0-9 or false otherwise\n  Examples\n  lettersAndNumbersAndSymbols('Hello') == true\n  lettersAndNumbersAndSymbols('abcdcba') == true\n  lettersAndNumbersAndSymbols('kittens') == false\n  lettersAndNumbersAndSymbols('orange') == false\n  */\nconst lettersAndNumbersAndSymbols = (string) => {\n  let lettersAndNumbersAndSymbols = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      lettersAndNumbersAndSymbols = false\n      break\n    }\n    if (string[i] < 'A' || string[i] > 'Z') {\n      lettersAndNumbersAndSymbols = false\n      break\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      lettersAndNumbersAndSymbols = false\n      break\n    }\n  }\n  return lettersAndNumbersAndSymbols\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters a-z or A-Z or 0-9 or symbols or false otherwise\n  Examples\n  lettersAndNumbersAndSymbolsAndSpaces('Hello') == true\n  lettersAndNumbersAndSymbolsAndSpaces('abcdcba') == true\n  lettersAndNumbersAndSymbolsAndSpaces('kittens') == false\n  lettersAndNumbersAndSymbolsAndSpaces('orange') == false\n  */\nconst lettersAndNumbersAndSymbolsAndSpaces = (string) => {\n  let lettersAndNumbersAndSymbolsAndSpaces = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      lettersAndNumbersAndSymbolsAndSpaces = false\n      break\n    }\n    if (string[i] < 'A' || string[i] > 'Z') {\n      lettersAndNumbersAndSymbolsAndSpaces = false\n      break\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      lettersAndNumbersAndSymbolsAndSpaces = false\n      break\n    }\n    if (string[i] <'') {\n      lettersAndNumbersAndSymbolsAndSpaces = false\n      break\n    }\n  }\n  return lettersAndNumbersAndSymbolsAndSpaces\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters a-z or A-Z or 0-9 or symbols or spaces or false otherwise\n  Examples\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLines('Hello') == true\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLines('abcdcba') == true\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLines('kittens') == false\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLines('orange') == false\n  */\nconst lettersAndNumbersAndSymbolsAndSpacesAndNewLines = (string) => {\n  let lettersAndNumbersAndSymbolsAndSpacesAndNewLines = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLines = false\n      break\n    }\n    if (string[i] < 'A' || string[i] > 'Z') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLines = false\n      break\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLines = false\n      break\n    }\n    if (string[i] <'') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLines = false\n      break\n    }\n    if (string[i] === '\\n') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLines = false\n      break\n    }\n  }\n  return lettersAndNumbersAndSymbolsAndSpacesAndNewLines\n}\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters a-z or A-Z or 0-9 or symbols or spaces or newlines or false otherwise\n  Examples\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers('Hello') == true\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers('abcdcba') == true\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers('kittens') == false\n  lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers('orange') == false\n  */\nconst lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers = (string) => {\n  let lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers = false\n      break\n    }\n    if (string[i] < 'A' || string[i] > 'Z') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers = false\n      break\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers = false\n      break\n    }\n    if (string[i] <'') {\n      lettersAndNumbersAndSymbolsAndSpacesAndNewLinesAndNumbers = false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsOne = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOne = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1. */ const endsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const startsTwo = (n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i === 2) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 2. */ const startsTwoStarts = (n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 2. */ const endsTwo = (n) => {\n  let count = 0;\n  for (let i = n; i >= 2; i--) {\n    if (i === 2) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 2. */ const endsTwoEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 2; i--) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 2. */ const startsThree = (n) => {\n  let count = 0;\n  for (let i = 3; i <= n; i++) {\n    if (i === 3) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 3. */ const startsThreeStarts = (n) => {\n  let count = 0;\n  for (let i = 3; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 3. */ const endsThree = (n) => {\n  let count = 0;\n  for (let i = n; i >= 3; i--) {\n    if (i === 3) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 3. */ const endsThreeEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 3; i--) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 3. */ const startsFour = (n) => {\n  let count = 0;\n  for (let i = 4; i <= n; i++) {\n    if (i === 4) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 4. */ const startsFourStarts = (n) => {\n  let count = 0;\n  for (let i = 4; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 4. */ const endsFour = (n) => {\n  let count = 0;\n  for (let i = n; i >= 4; i--) {\n    if (i === 4) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 4. */ const endsFourEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 4; i--) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 4. */ const startsFive = (n) => {\n  let count = 0;\n  for (let i = 5; i <= n; i++) {\n    if (i === 5) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 5. */ const startsFiveStarts = (n) => {\n  let count = 0;\n  for (let i = 5; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 5. */ const endsFive = (n) => {\n  let count = 0;\n  for (let i = n; i >= 5; i--) {\n    if (i === 5) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 5. */ const endsFiveEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 5; i--) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 5. */ const startsSix = (n) => {\n  let count = 0;\n  for (let i = 6; i <= n; i++) {\n    if (i === 6) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 6. */ const startsSixStarts = (n) => {\n  let count = 0;\n  for (let i = 6; i <= n; i++) {\n    if (i === 1 || i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 6. */ const endsSix = (n) => {\n  let count = 0;\n  for (let i = n; i >= 6; i--) {\n    if (i === 6) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 6. */ const endsSixEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 6; i--) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 6. */ const startsSeven = (n) => {\n  let count = 0;\n  for (let i = 7; i <= n; i++) {\n    if (i === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  words.forEach((word) => {\n    const newWord = '';\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] ==='') {\n        newWord += word[word.length - i - 1];\n      } else {\n        newWord += word[i];\n      }\n    }\n    newWords.push(newWord);\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  words.forEach((word) => {\n    const newWord = '';\n    for (let i = word.length - 1; i >= 0; i--) {\n      if (word[i] ==='') {\n        newWord += word[i];\n      } else {\n        newWord += word[i];\n      }\n    }\n    newWords.push(newWord);\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  words.forEach((word) => {\n    const newWord = '';\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] ==='') {\n        newWord += word[word.length - i - 1];\n      } else {\n        newWord += word[i];\n      }\n    }\n    newWords.push(newWord);\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDescAsc('Hi') returns 'Hi'\n  antiShuffleDescAsc('hello') returns 'olleh'\n  antiShuffleDescAsc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAscAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  words.forEach((word) => {\n    const newWord = '';\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] ==='') {\n        newWord += word[word.length - i - 1];\n      } else {\n        newWord += word[i];\n      }\n    }\n    newWords.push(newWord);\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDescAscAsc('Hi') returns 'Hi'\n  antiShuffleDescAscAsc('hello') returns 'olleh'\n  antiShuffleDescAscAsc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDescAscAscAsc = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  words.forEach((word) => {\n    const newWord = '';\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] ==='') {\n        newWord += word[word.length - i - 1];\n      } else {\n        newWord += word[i];\n      }\n    }\n    newWords.push(newWord);\n  });\n  return newWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value and all word (separated by space) was replaced by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDescAscAscAsc('Hi') returns 'Hi'\n  antiShuffleDescAscAscAsc('hello') returns 'olleh'\n  antiShuffleDescAscAscAsc", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  lst.forEach((row, index) => {\n    const rowResult = [];\n    row.forEach((col, colIndex) => {\n      if (col === x) {\n        rowResult.push([index, colIndex]);\n      }\n    });\n    if (rowResult.length > 0) {\n      result.push(rowResult);\n    }\n  });\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences2 = (lst) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences3 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences4 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences5 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences6 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences7 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences8 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You was given a list of integers, lst, and an integer x, and you need to find the number of occurrences of x in lst. Gives lst, x, and integers count. \n  \n  Examples:\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 1) == 3\n  countOccurrences([], 1) == 0\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 5) == 3\n  countOccurrences([1,2,3,4,5,6,7,8,9,10], 7) == 4\n  */\nconst countOccurrences9 = (lst, x) => {\n  let count = 0;\n  lst.forEach((el) => {\n    if (el === x) {\n      count++;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabetArr = alphabet.split('');\n  let alphabetArr2 = alphabet.split('');\n  let alphabetArr3 = alphabet.split('');\n  let alphabetArr4 = alphabet.split('');\n  let alphabetArr5 = alphabet.split('');\n  let alphabetArr6 = alphabet.split('');\n  let alphabetArr7 = alphabet.split('');\n  let alphabetArr8 = alphabet.split('');\n  let alphabetArr9 = alphabet.split('');\n  let alphabetArr10 = alphabet.split('');\n  let alphabetArr11 = alphabet.split('');\n  let alphabetArr12 = alphabet.split('');\n  let alphabetArr13 = alphabet.split('');\n  let alphabetArr14 = alphabet.split('');\n  let alphabetArr15 = alphabet.split('');\n  let alphabetArr16 = alphabet.split('');\n  let alphabetArr17 = alphabet.split('');\n  let alphabetArr18 = alphabet.split('');\n  let alphabetArr19 = alphabet.split('');\n  let alphabetArr20 = alphabet.split('');\n  let alphabetArr21 = alphabet.split('');\n  let alphabetArr22 = alphabet.split('');\n  let alphabetArr23 = alphabet.split('');\n  let alphabetArr24 = alphabet.split('');\n  let alphabetArr25 = alphabet.split('');\n  let alphabetArr26 = alphabet.split('');\n  let alphabetArr27 = alphabet.split('');\n  let alphabetArr28 = alphabet.split('');\n  let alphabetArr29 = alphabet.split('');\n  let alphabetArr30 = alphabet.split('');\n  let alphabetArr31 = alphabet.split('');\n  let alphabetArr32 = alphabet.split('');\n  let alphabetArr33 = alphabet.split('');\n  let alphabetArr34 = alphabet.split('');\n  let alphabetArr35 = alphabet.split('');\n  let alphabetArr36 = alphabet.split('');\n  let alphabetArr37 = alphabet.split('');\n  let alphabetArr38 = alphabet.split('');\n  let alphabetArr39 = alphabet.split('');\n  let alphabetArr40 = alphabet.split('');\n  let alphabetArf41 = alphabet.split('');\n  let alphabetArf42 = alphabet.split('');\n  let alphabetArf43 = alphabet.split('');\n  let alphabetArr44 = alphabet.split('');\n  let alphabetArr45 = alphabet.split('');\n  let alphabetArr46 = alphabet.split('');\n  let alphabetArr47 = alphabet.split('');\n  let alphabetArr48 = alphabet.split('');\n  let alphabetArr49 = alphabet.split('');\n  let alphabetArr50 = alphabet.split('');\n  let alphabetArr51 = alphabet.split('');\n  let alphabetArr52 = alphabet.split('');\n  let alphabetArr53 = alphabet.split('');\n  let alphabetArr54 = alphabet.split('');\n  let alphabetArr55 = alphabet.split('');\n  let alphabetArr56 = alphabet.split('');\n  let alphabetArr57 = alphabet.split('');\n  let alphabetArr58 = alphabet.split('');\n  let alphabetArr59 = alphabet.split('');\n  let alphabetArr60 = alphabet.split('');\n  let alphabetArr61 = alphabet.split('');\n  let alphabetArr62 = alphabet.split('');\n  let alphabetArr63 = alphabet.split('');\n  let alphabetArr64 = alphabet.split('');\n  let alphabetArr65 = alphabet.split('');\n  let alphabetArr66 = alphabet.split('');\n  let alphabetArr67 = alphabet.split('');\n  let alphabetArr68 = alphabet.split('');\n  let alphabetArr69 = alphabet.split('');\n  let alphabetArr70 = alphabet.split('');\n  let alphabetArr71 = alphabet.split('');\n  let alphabetArr72 = alphabet.split('');\n  let alphabetArr73 = alphabet.split('');\n  let alphabetArr74 = alphabet.split('');\n  let alphabetArr75 = alphabet.split('');\n  let alphabetArr76 = alphabet.split('');\n  let alphabetArr77 = alphabet.split('');\n  let alphabetArr78 = alphabet.split('');\n  let alphabetArr79 = alphabet.split('');\n  let alphabetArr80 = alphabet.split('');\n  let alphabetArr81 = alphabet.split('');\n  let alphabetArr82 = alphabet.split('');\n  let alphabetArr83 = alphabet.split('');\n  let alphabetArr84 = alphabet.split('');\n  let alphabetArr85 = alphabet.split('');\n  let alphabetArr86 = alphabet.split('');\n  let alphabetArr87 = alphabet.split('');\n  let alphabetArr88 = alphabet.split('');\n  let alphabetArr89 = alphabet.split('');\n  let alphabetArr90 = alphabet.split('');\n  let alphabetArr91 = alphabet.split('');\n  let alphabetArr92 = alphabet.split('');\n  let alphabetArr93 = alphabet.split('');\n  let alphabetArr94 = alphabet.split('');\n  let alphabetArr95 = alphabet.split('');\n  let alphabetArr96 = alphabet.split('');\n  let alphabetArr97 = alphabet.split('');\n  let alphabetArr98 = alphabet.split('');\n  let alphabetArr99 = alphabet.split('');\n  let alphabetArr100 = alphabet.split('');\n  let alphabetArr101 = alphabet.split('');\n  let alphabetArr102 = alphabet.split('');\n  let alphabetArr103 = alphabet.split('');\n  let alphabetArr104 = alphabet.split('');\n  let alphabetArr105 = alphabet.split('');\n  let alphabetArr106 = alphabet.split('');\n  let alphabetArr107 = alphabet.split('');\n  let alphabetArr108 = alphabet.split('');\n  let alphabetArr109 = alphabet.split('');\n  let alphabetArr110 = alphabet.split('');\n  let alphabetArr111 = alphabet.split('');\n  let alphabetArr112 = alphabet.split('');\n  let alphabetArr113 = alphabet.split('');\n  let alphabetArr114 = alphabet.split('');\n  let alphabetArr115 = alphabet.split('');\n  let alphabetArr116 = alphabet.split('');\n  let alphabetArr117 = alphabet.split('');\n  let alphabetArr118 = alphabet.split('');\n  let alphabetArr119 = alphabet.split('');\n  let alphabetArr120 = alphabet.split('');\n  let alphabetArr121 = alphabet.split('');\n  let alphabetArr122 = alphabet.split('');\n  let alphabetArr123 = alphabet.split('');\n  let alphabetArr124 = alphabet.split('');\n  let alphabetArr125 = alphabet.split('');\n  let alphabetArr126 = alphabet.split('');\n  let alphabetArr127 = alphabet.split('');\n  let alphabetArr128 = alphabet.split('');\n  let alphabetArr129 = alphabet.split('');\n  let alphabetArr130 = alphabet.split('');\n  let alphabetArr131 = alphabet.split('');\n  let alphabetArr132 = alphabet.split('');\n  let alphabetArr133 = alphabet.split('');\n  let alphabetArr134 = alphabet.split('');\n  let alphabetArr135 = alphabet.split('');\n  let alphabetArr136 = alphabet.split('');\n  let alphabetArr137 = alphabet.split('');\n  let alphabetArr138 = alphabet.split('');\n  let alphabetArr139 = alphabet.split('');\n  let alphabetArr140 = alphabet.split('');\n  let alphabetArr141 = alphabet.split('');\n  let alphabetArr142 = alphabet.split('');\n  let alphabetArr143 = alphabet.split('');", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 1, 2, 2, 1]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n      min = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling sums finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 6, 10, 15, 21]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n    sum = numbers[i];\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling averages finds until gives moment in the sequences.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4.5, 6.5, 8.5, 10.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviations finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variances finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviations finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variances finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviations finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variances finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviations finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variances finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 1.5811388300841898, 0.8146961230254516, 0.6249941392254638, 0.454545454545454545]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let smallest = lst[0];\n  let secondSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSm", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = S.split('.').filter(w => w.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For example", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return true\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageArray = message.split('');\n  const newMessageArray = [];\n  for (let i = 0; i < messageArray.length; i++) {\n    const letter = messageArray[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessageArray.push(letter);\n    } else {\n      const nextLetterIndex = letterIndex + 1;\n      const nextLetter = alphabet[nextLetterIndex];\n      newMessageArray.push(nextLetter);\n    }\n  }\n  return newMessageArray.join('');\n};\n\n/*\n  Decodes a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const messageArray = message.split('');\n  const newMessageArray = [];\n  for (let i = 0; i < messageArray.length; i++) {\n    const letter = messageArray[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex === -1) {\n      newMessageArray.push(letter);\n    } else {\n      const nextLetterIndex = letterIndex + 1;\n      const nextLetter = alphabet[nextLetterIndex];\n      newMessageArray.push(nextLetter);\n    }\n  }\n  return newMessageArray.join('');\n};\n\n/*\n  Returns all possible combinations of 2 letters, where each letter appears 2 times consecutively, and each letter appears 3 times consecutively. Assume only letters. Examples:\n  >>> allCombinations()\npassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let j = 0;\n    while (n % 10!= 0) {\n      n = n / 10;\n      j++;\n    }\n    sum += j;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let j = 0;\n    while (n % 10!= 0) {\n      n = n / 10;\n      j++;\n    }\n    sum += j;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let j = 0;\n    while (n % 10!= 0) {\n      n = n / 10;\n      j++;\n    }\n    sum += j;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let j = 0;\n    while (n % 10!= 0) {\n      n = n / 10;\n      j++;\n    }\n    sum += j;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let j = 0;\n    while (n % 10!= 0) {\n      n = n / 10;\n      j++;\n    }\n    sum += j;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let j = 0;\n    while (n % 10!= 0) {\n      n = n / 10;\n      j++;\n    }\n    sum += j;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was numbers in lowest cases or all keys was numbers in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!== 'number') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was dates in lowest cases or all keys was dates in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!== 'date') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was booleans in lowest cases or all keys was booleans in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!== 'boolean') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was arrays in lowest cases or all keys was arrays in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!== 'object') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was nulls in lowest cases or all keys was nulls in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!== 'null') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was undefined in lowest cases or all keys was undefined in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  keys.forEach(key => {\n    if (typeof dict[key]!== 'undefined') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was NaNs in lowest cases or all keys was NaNs in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array of integers and returning the sum of all integers in the array.\n  For example:\n  sumOfArray([1,2,3]) => 6\n  sumOfArray([2,3,4]) => 10\n  sumOfArray([1,3,5]) => 6\n  sumOfArray([]) => 0\n  sumOfArray([1,3,5]) => 6\n  sumOfArray([1,3,5,7]) => 15\n  sumOfArray([1,3,5,7,11]) => 15\n  sumOfArray([1,3,5,7,11,13]) => 21\n  sumOfArray([1,3,5,7,11,13,17]) => 21\n  sumOfArray([1,3,5,7,11,13,17,19]) => 25\n  sumOfArray([1,3,5,7,11,13,17,19,23]) => 25\n  sumOfArray([1,3,5,7,11,13,17,19,23,29]) => 41\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31]) => 41\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37]) => 57\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41]) => 57\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53]) => 79\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59]) => 79\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61]) => 89\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67]) => 89\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71]) => 101\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73]) => 101\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79]) => 103\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81]) => 103\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83]) => 107\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89]) => 107\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97]) => 109\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101]) => 109\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103]) => 113\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107]) => 113\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109]) => 117\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113]) => 117\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117]) => 121\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121]) => 121\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121,123]) => 123\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121,123,127]) => 123\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121,123,127,131]) => 127\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121,123,127,131,137]) => 127\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121,123,127,131,137,141]) => 131\n  sumOfArray([1,3,5,7,11,13,17,19,23,29,31,37,41,53,59,61,67,71,73,79,81,83,89,97,101,103,107,109,113,117,121,123,127,131,137,141,143]) => 131\n  sumOfArray([1,3,5,7,11,13,17,19,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns the sum of the units digit. Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a + b;\n};\n\n/*Complete the function that takes two integers and returns the difference of the units digit. Assume the input is always valid.\n  Examples:\n  diff(148, 412) should return 16.\n  diff(19, 28) should return 72.\n  diff(2020, 1851) should return 0.\n  diff(14,-15) should return 20.\n  */\nconst diff = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a - b;\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / Math.abs(b);\n};\n\n/*Complete the function that takes two integers and returns the product of the units digit divided by the absolute value of the units digit. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      count += 1;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      count += 1;\n    }\n    if (s[i] === 'O' || s[i] === 'o') {\n      count += 1;\n    }\n    if (s[i] === 'U' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n    if (s[i] === 'e' || s[i] === 'E') {\n      count += 1;\n    }\n    if (s[i] === 'i' || s[i] === 'I') {\n      count += 1;\n    }\n    if (s[i] === 'o' || s[i] === 'O') {\n      count += 1;\n    }\n    if (s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 2\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n    if (s[i] === 'e' || s[i] === 'E') {\n      count += 1;\n    }\n    if (s[i] === 'i' || s[i] === 'I') {\n      count += 1;\n    }\n    if (s[i] === 'o' || s[i] === 'O') {\n      count += 1;\n    }\n    if (s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    }\n    if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    }\n    if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    }\n    if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    }\n    if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    }\n    if (s[i] === 'H' || s[i] === 'h') {\n      count += 1;\n    }\n    if (s[i] === 'J' || s[i] === 'j') {\n      count += 1;\n    }\n    if (s[i] === 'K' || s[i] === 'k') {\n      count += 1;\n    }\n    if (s[i] === 'L' || s[i] === 'l') {\n      count += 1;\n    }\n    if (s[i] === 'M' || s[i] ==='m') {\n      count += 1;\n    }\n    if (s[i] === 'N' || s[i] === 'n') {\n      count += 1;\n    }\n    if (s[i] === 'P' || s[i] === 'p') {\n      count += 1;\n    }\n    if (s[i] === 'Q' || s[i] === 'q') {\n      count += 1;\n    }\n    if (s[i] === 'R' || s[i] === 'r') {\n      count += 1;\n    }\n    if (s[i] === 'S' || s[i] ==='s') {\n      count += 1;\n    }\n    if (s[i] === 'T' || s[i] === 't') {\n      count += 1;\n    }\n    if (s[i] === 'V' || s[i] === 'v') {\n      count += 1;\n    }\n    if (s[i] === 'W' || s[i] === 'w') {\n      count += 1;\n    }\n    if (s[i] === 'X' || s[i] === 'x') {\n      count += 1;\n    }\n    if (s[i] === 'Y' || s[i] === 'y') {\n      count += 1;\n    }\n    if (s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'b') {\n      count += 1;\n    }\n    if (s[i] === 'C' || s[i] === 'c') {\n      count += 1;\n    }\n    if (s[i] === 'D' || s[i] === 'd') {\n      count += 1;\n    }\n    if (s[i] === 'F' || s[i] === 'f') {\n      count += 1;\n    }\n    if (s[i] === 'G' || s[i] === 'g') {\n      count += 1;\n    }\n    if (s[i] === 'H' || s[i] === 'h') {\n      count += 1;\n    }\n    if (s[i] === 'J' || s[i] === 'j') {\n      count += 1;\n    }\n    if (s[i] === 'K' || s[i] === 'k') {\n      count += 1;\n    }\n    if (s[i] === 'L' || s[i] === 'l') {\n      count += 1;\n    }\n    if (s[i] === 'M' || s[i] ==='m') {\n      count += 1;\n    }\n    if (s[i] === 'N' || s[i] === 'n') {\n      count += 1;\n    }\n    if (s[i] === 'P' || s[i] === 'p') {\n      count += 1;\n    }\n    if (s[i] === 'Q' || s[i] === 'q') {\n      count += 1;\n    }\n    if (s[i] === 'R' || s[i] === 'r') {\n      count += 1;\n    }\n    if (s[i] === 'S' || s[i] ==='s') {\n      count += 1;\n    }\n    if (s[i] === 'T' || s[i] === 't') {\n      count += 1;\n    }\n    if (s[i] === 'V' || s[i] === 'v') {\n      count += 1;\n    }\n    if (s[i] === 'W' || s[i] === 'w') {\n      count += 1;\n    }\n    if (s[i] === 'X' || s[i] === 'x') {\n      count += 1;\n    }\n    if (s[i] === 'Y' || s[i] === 'y') {\n      count += 1;\n    }\n    if (s[i] === 'Z' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countVowelEven('aBCdEf') returns 2\n  countVowelEven('abcdefg') returns 0\n  countVowelEven('dBBE') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n    if (s[i] === 'e' || s[i] === 'E') {\n      count += 1;\n    }\n    if (s[i] === 'i' || s[i] === '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger(value);\n    }\n    if (difference < 3) {\n      return closestInteger(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger2(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger2(value);\n    }\n    if (difference < 3) {\n      return closestInteger2(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger2(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger3(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger3(value);\n    }\n    if (difference < 3) {\n      return closestInteger3(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger3(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger4(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger4(value);\n    }\n    if (difference < 3) {\n      return closestInteger4(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger4(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger5(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger5(value);\n    }\n    if (difference < 3) {\n      return closestInteger5(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger5(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger6(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger6(value);\n    }\n    if (difference < 3) {\n      return closestInteger6(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger6(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger7 = (value) => {\n  const closest = (value) => {\n    const difference = Math.abs(value - closestInteger7(value));\n    if (difference < 1) {\n      return value;\n    }\n    if (difference < 2) {\n      return closestInteger7(value);\n    }\n    if (difference < 3) {\n      return closestInteger7(value - 1);\n    }\n    if (difference < 4) {\n      return closestInteger7(value + 1);\n    }\n    return value;\n  };\n  return closest(value);\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
