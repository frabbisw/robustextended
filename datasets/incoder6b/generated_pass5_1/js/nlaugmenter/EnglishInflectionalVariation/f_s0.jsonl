{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV2 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV3 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV4 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV5 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV6 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV7 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV8 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV9 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV10 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV11 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV12 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV13 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV14 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\nconst hasCloseElementsV15 = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\n  if (firstNumber === lastNumber) {\n    return false;\n  }\n\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_close = false;\n  let paren_count = 0;\n  let paren_char = '';\n  let paren_char_count = 0;\n  let paren_char_index = 0;\n  let paren_char_string = '';\n  let paren_char_string_index = 0;\n  let paren_char_string_count = 0;\n  let paren_string_index = 0;\n  let paren_string_count = 0;\n  let paren_string_string = '';\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren_string_string_index = 0;\n  let paren_string_string_count = 0;\n  let paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catcat'\n  >>> makePalindrome('cata')\n  'catcat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const palindrome = string.split('').slice(0, -1).concat(postfix).join('');\n  return palindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes2(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes2 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes3(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes3 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes4(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes4 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes5(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes5 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes6(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes6 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes7(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes7 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes8(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes8 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes9(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes9 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes10(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes10 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes11(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes11 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes12(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes12 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes13(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes13 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes14(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes14 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes15(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes15 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes16(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes16 = (n) => {\n  let result = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all the prime numbers less than or equal to n.\n\n Examples:\n  >>> primes17(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 16\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 17\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 18\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 19\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 20\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 21\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return y;\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return y;\n  }\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 22\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*\n  Write a function that accepts an array of numbers and returns the sum of the numbers in the array. Round the answer to the nearest integer.\n  Example:\n  sumOfArray([1]) => 1\n  sumOfArray([1.1, 2.2, 3.3]) => 3.3\n  sumOfArray([1.1, 2.2, 3.3, 4.4]) => 5.5\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5]) => 6.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) => 8.8\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) => 10.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1]) => 10.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3]) => 12.3\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5]) => 14.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1]) => 20.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5]) => 23.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1]) => 30.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5]) => 34.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1]) => 40.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.4, 44.5]) => 45.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.4, 44.5, 45.6, 46.7, 47.8, 49.9, 50.1]) => 50.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.4, 44.5, 45.6, 46.7, 47.8, 49.9, 50.1, 51.2, 52.3, 53.4, 54.5]) => 54.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.4, 44.5, 45.6, 46.7, 47.8, 49.9, 50.1, 51.2, 52.3, 53.4, 54.5, 55.6, 56.7, 57.8, 59.9, 60.1]) => 60.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.4, 44.5, 45.6, 46.7, 47.8, 49.9, 50.1, 51.2, 52.3, 53.4, 54.5, 55.6, 56.7, 57.8, 59.9, 60.1, 61.2, 62.3, 63.4, 64.5]) => 66.6\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.4, 44.5, 45.6, 46.7, 47.8, 49.9, 50.1, 51.2, 52.3, 53.4, 54.5, 55.6, 56.7, 57.8, 59.9, 60.1, 61.2, 62.3, 63.4, 64.5, 65.6, 66.7]) => 70.1\n  sumOfArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 29.9, 30.1, 31.2, 32.3, 33.4, 34.5, 35.6, 36.7, 37.8, 39.9, 40.1, 41.2, 42.3, 43.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value % 2 === 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOdd = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value % 2!== 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any negative digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsNegative = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value < 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any positive digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsPositive = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value > 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsAll = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value > 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsAllOdd = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value % 2!== 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsAllNegative = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value < 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsAllPositive = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value > 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsAllAll = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((value, key) => {\n    if (value > 0) {\n      result.push(key);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsAllAllOdd = (x) => {\n  const result = [];\n  const map = new Map();\n  x.forEach((item) => {\n    const key = item.toString();\n    if (map.has(key)) {\n      map.set(key, map.get(key) + 1);\n    } else {\n      map.set(key, 1);\n    }\n  });\n  map.forEach((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (number > 9) {\n      result.push(number);\n    } else {\n      result.push(byLengthNames(number));\n    }\n  }\n  return result.reverse();\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthNames = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (number > 9) {\n      result.push(number);\n    } else {\n      result.push(byLengthNamesNames(number));\n    }\n  }\n  return result.reverse();\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthNamesNames = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (number > 9) {\n      result.push(number);\n    } else {\n      result.push(byLengthNamesNamesNames(number));\n    }\n  }\n  return result.reverse();\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthNamesNamesNames = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (number > 9) {\n      result.push(number);\n    } else {\n      result.push(byLengthNamesNamesNamesNames(number));\n    }\n  }\n  return result.reverse();\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthNamesNamesNamesNames = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (number > 9) {\n      result.push(number);\n    } else {\n      result.push(byLengthNamesNamesNamesNamesNames(number));\n    }\n  }\n  return result.reverse();\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthNamesNamesNamesNamesNames = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (number > 9) {\n      result.push(number);\n    } else {\n      result.push(byLengthNamesNamesNamesNamesNamesNames(number));\n    }\n  }\n  return result.reverse();\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst result = f(5);\n\nconsole.log(result);</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=2 tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a tags=javascript,factorial,arrays |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript,factorial,arrays |>\n<| a dscore=1 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\n</code>\n<|/ a tags=javascript", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Gives a positive integers n, return a tuple that had the number of even and odd integer palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Gives a positive integers n, return a tuple that had the number of even and odd integer palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Gives a positive integers n, return a tuple that had the number of even and odd integer palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Gives a positive integers n, return a tuple that had the number of even and odd integer palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split(\"\").reverse().join(\"\");\n    const oddPalindrome = i.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits2 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits3 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits4 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits5 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits6 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits7 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits8 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits9 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits10 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits11 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.\n  >>> sumDigits([-1, 11, -11]) == [-1, 11, -11]\n  >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n  */\nconst sumDigits12 = (arr) => {\n  let sumArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].toString().length; j++) {\n      sum += arr[i].toString().charAt(j) - '0';\n    }\n    sumArr.push(sum);\n  }\n  return sumArr;\n};\n\n/*\n  Takes an array of integers and returns an array of integers representing the sums of digits of all the numbers in the array.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let flag = true;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] > arr[j]) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let flag = true;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] < arr[j]) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-increasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-increasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-increasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let flag = true;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] < arr[j]) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-increasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-increasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-increasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let flag = true;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] > arr[j]) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let flag = true;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] < arr[j]) {\n        flag = false;\n        break;\n      }\n    }\n  }\n  return flag;\n};\n\n/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-increasing order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return result;\n};\n\n/**\n * Converts string to its decimal equivalent in base 10\n * @param {String} str\n * @returns {Number}\n */\nconst stringToDecimal = str => {\n  let result = 0;\n  for (let i = 0; i < str.length; i++) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts decimal to its string equivalent in base 10\n * @param {Number} dec\n * @returns {String}\n */\nconst decimalToString = dec => {\n  let result = '';\n  while (dec > 0) {\n    result = String.fromCharCode(dec % 10) + result;\n    dec = Math.floor(dec / 10);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its string equivalent in base 2\n * @param {Number} bin\n * @returns {String}\n */\nconst binaryToString = bin => {\n  let result = '';\n  while (bin.length > 0) {\n    result = String.fromCharCode(bin.charCodeAt(0) & 1) + result;\n    bin = bin.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its string equivalent in base 10\n * @param {Number} bin\n * @returns {String}\n */\nconst binaryToDecimal = bin => {\n  let result = 0;\n  while (bin.length > 0) {\n    result += Math.pow(2, bin.length);\n    bin = bin.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its string equivalent in base 10\n * @param {Number} bin\n * @returns {String}\n */\nconst decimalToBinary = dec => {\n  let result = '';\n  while (dec > 0) {\n    result = String.fromCharCode(dec % 2) + result;\n    dec = Math.floor(dec / 2);\n  }\n  return result;\n};\n\n/**\n * Converts decimal number to its binary equivalent in base 2\n * @param {Number} dec\n * @returns {String}\n */\nconst decimalToBin = dec => {\n  let result = '';\n  while (dec > 0) {\n    result = String.fromCharCode(dec % 2) + result;\n    dec = Math.floor(dec / 2);\n  }\n  return result;\n};\n\n/**\n * Converts decimal number to its binary equivalent in base 10\n * @param {Number} dec\n * @returns {String}\n */\nconst decimalToDecimal = dec => {\n  let result = 0;\n  while (dec > 0) {\n    result += Math.pow(2, dec);\n    dec = Math.floor(dec / 2);\n  }\n  return result;\n};\n\n/**\n * Converts decimal number to its binary equivalent in base 10\n * @param {Number} dec\n * @returns {String}\n */\nconst decimalToHex = dec => {\n  let result = '';\n  while (dec > 0) {\n    result += decimalToBin(dec % 16).toLowerCase();\n    dec = Math.floor(dec / 16);\n  }\n  return result;\n};\n\n/**\n * Converts decimal number to its binary equivalent in base 10\n * @param {Number} dec\n * @returns {String}\n */\nconst hexToDecimal = hex => {\n  let result = 0;\n  while (hex.length > 0) {\n    result += Math.pow(2, hex.length);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its hexadecimal equivalent in base 16\n * @param {Number} bin\n * @returns {String}\n */\nconst binaryToHex = bin => {\n  let result = '';\n  while (bin.length > 0) {\n    result += decimalToHex(bin.charCodeAt(0) & 15);\n    bin = bin.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 16\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToBinary = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToBin(hex.charCodeAt(0) & 15);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 10\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToDecimal = hex => {\n  let result = 0;\n  while (hex.length > 0) {\n    result += Math.pow(2, hex.length);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 10\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToHex = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToBin(hex.charCodeAt(0) & 15);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 10\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToBin = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToBin(hex.charCodeAt(0) & 15);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its hexadecimal equivalent in base 16\n * @param {Number} bin\n * @returns {String}\n */\nconst hexToBinary = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToHex(bin.charCodeAt(0) & 15);\n    bin = bin.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 16\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToHex = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToHex(hex.charCodeAt(0) & 15);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 10\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToDecimal = hex => {\n  let result = 0;\n  while (hex.length > 0) {\n    result += Math.pow(2, hex.length);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its hexadecimal equivalent in base 16\n * @param {Number} bin\n * @returns {String}\n */\nconst binaryToDecimal = bin => {\n  let result = 0;\n  while (bin.length > 0) {\n    result += Math.pow(2, bin.length);\n    bin = bin.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts binary number to its hexadecimal equivalent in base 16\n * @param {Number} bin\n * @returns {String}\n */\nconst decimalToHex = dec => {\n  let result = '';\n  while (dec > 0) {\n    result += decimalToBin(dec % 16).toLowerCase();\n    dec = Math.floor(dec / 16);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 10\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToBin = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToBin(hex.charCodeAt(0) & 15);\n    hex = hex.substr(1);\n  }\n  return result;\n};\n\n/**\n * Converts hexadecimal number to its binary equivalent in base 10\n * @param {Number} hex\n * @returns {String}\n */\nconst hexToBinary = hex => {\n  let result = '';\n  while (hex.length > 0) {\n    result += decimalToBin(hex.charCodeAt(0) & 15);\n    hex = hex.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  for (let key in histogram) {\n    if (histogram[key] > letterCount) {\n      letterCount = histogram[key];\n      letter = key;\n    }\n  }\n  return { letter, count: letterCount };\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let letterCount = 0;\n  let letter;\n  test.split('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete8 = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      s = s.substr(i + 1);\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  return [result, s.toLowerCase() === result.toLowerCase()];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2!== 0) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    result.push(`the number of even elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    result.push(`the number of even elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    result.push(`the number of even elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    result.push(`the number of even elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    result.push(`the number of even elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        count++;\n      }\n    }\n    result.push(`the number of even elements ${count} the str${count} ${str.length} of the ${str.length}.`);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of any non-emptiest sub-array of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of any non-emptiest sub-array of nums.\n  Example\n  productSubArraySum([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySum([-1, -2, -3]) == 6\n  */\nconst productSubArraySum = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySums([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySums([-1, -2, -3]) == 6\n  */\nconst productSubArraySums = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySums([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySums([-1, -2, -3]) == 6\n  */\nconst productSubArraySums = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySums([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySums([-1, -2, -3]) == 6\n  */\nconst productSubArraySums = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySums([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySums([-1, -2, -3]) == 6\n  */\nconst productSubArraySums = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySums([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySums([-1, -2, -3]) == 6\n  */\nconst productSubArraySums = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the product of all non-emptiest sub-array of nums.\n  Example\n  productSubArraySums([2, 3, 4, 1, 2, 4]) == 24\n  productSubArraySums([-1, -2, -3]) == 6\n  */\nconst productSubArraySums = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Gives an array of integers nums, found the sum of all non-emptiest sub-array of nums.\n  Example\n  sumSubArraySums([2, 3, 4, 1, 2, 4]) == 10\n  sumSubArraySums([-1, -2, -3]) == 6\n  */\nconst sumSubArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Gives an ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                for (let k = 0; k < capacity; k++) {\n                    grid[i][j] = 0;\n                }\n                result++;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;\n};\n\n/*\n  You was given an array of integers representing a binary tree. Your task is to find the number of nodes in this binary tree.\n\n  Example 1:\n      Input: [1,0,1]\n      Output: 2\n\n  Example 2:\n      Input: [1,0,1,0,1,0,1]\n      Output: 5\n\n  Constraints:\n      * 0 <= tree.length <= 10^5\n      * 0 <= tree[i] <= 10^5\n*/\nconst countNodes = (tree) => {\n    let result = 0;\n    for (let i = 0; i < tree.length; i++) {\n        if (tree[i] === 1) {\n            result += countNodes(tree.slice(i + 1));\n        }\n    }\n    return result;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => a - b);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => a - b);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n === '1')\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map(n => n.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n   .filter(n => n!== '1')\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const arr = [];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const space = [' '];\n  const lettersAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',''];\n  const allLettersAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const allLetters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const allSpace = [' '];\n  const allLettersAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','',''];\n  const allLettersAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','','','','','','',''];\n  const allLettersAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArray2 = vowels.map(v => v.toUpperCase());\n  let vowelsArray3 = vowels.map(v => v);\n  let vowelsArray4 = vowels.map(v => v.toUpperCase());\n  let vowelsArray5 = vowels.map(v => v.toLowerCase());\n  let vowelsArray6 = vowels.map(v => v.toUpperCase());\n  let vowelsArray7 = vowels.map(v => v);\n  let vowelsArray8 = vowels.map(v => v.toUpperCase());\n  let vowelsArray9 = vowels.map(v => v.toLowerCase());\n  let vowelsArray10 = vowels.map(v => v.toUpperCase());\n  let vowelsArray11 = vowels.map(v => v);\n  let vowelsArray12 = vowels.map(v => v.toUpperCase());\n  let vowelsArray13 = vowels.map(v => v.toLowerCase());\n  let vowelsArray14 = vowels.map(v => v.toUpperCase());\n  let vowelsArray15 = vowels.map(v => v.toLowerCase());\n  let vowelsArray16 = vowels.map(v => v.toUpperCase());\n  let vowelsArray17 = vowels.map(v => v);\n  let vowelsArray18 = vowels.map(v => v.toUpperCase());\n  let vowelsArray19 = vowels.map(v => v.toLowerCase());\n  let vowelsArray20 = vowels.map(v => v.toUpperCase());\n  let vowelsArray21 = vowels.map(v => v.toLowerCase());\n  let vowelsArray22 = vowels.map(v => v.toUpperCase());\n  let vowelsArray23 = vowels.map(v => v);\n  let vowelsArray24 = vowels.map(v => v.toUpperCase());\n  let vowelsArray25 = vowels.map(v => v.toLowerCase());\n  let vowelsArray26 = vowels.map(v => v.toUpperCase());\n  let vowelsArray27 = vowels.map(v => v.toLowerCase());\n  let vowelsArray28 = vowels.map(v => v.toUpperCase());\n  let vowelsArray29 = vowels.map(v => v.toLowerCase());\n  let vowelsArray30 = vowels.map(v => v.toUpperCase());\n  let vowelsArray31 = vowels.map(v => v.toLowerCase());\n  let vowelsArray32 = vowels.map(v => v.toUpperCase());\n  let vowelsArray33 = vowels.map(v => v);\n  let vowelsArray34 = vowels.map(v => v.toUpperCase());\n  let vowelsArray35 = vowels.map(v => v.toLowerCase());\n  let vowelsArray36 = vowels.map(v => v.toUpperCase());\n  let vowelsArray37 = vowels.map(v => v.toLowerCase());\n  let vowelsArray38 = vowels.map(v => v.toUpperCase());\n  let vowelsArray39 = vowels.map(v => v.toLowerCase());\n  let vowelsArray40 = vowels.map(v => v.toUpperCase());\n  let vowelsArray41 = vowels.map(v => v.toLowerCase());\n  let vowelsArray42 = vowels.map(v => v.toUpperCase());\n  let vowelsArray43 = vowels.map(v => v.toLowerCase());\n  let vowelsArray44 = vowels.map(v => v.toUpperCase());\n  let vowelsArray45 = vowels.map(v => v.toLowerCase());\n  let vowelsArray46 = vowels.map(v => v.toUpperCase());\n  let vowelsArray47 = vowels.map(v => v.toLowerCase());\n  let vowelsArray48 = vowels.map(v => v.toUpperCase());\n  let vowelsArray49 = vowels.map(v => v.toLowerCase());\n  let vowelsArray50 = vowels.map(v => v.toUpperCase());\n  let vowelsArray51 = vowels.map(v => v.toLowerCase());\n  let vowelsArray52 = vowels.map(v => v.toUpperCase());\n  let vowelsArray53 = vowels.map(v => v.toLowerCase());\n  let vowelsArray54 = vowels.map(v => v.toUpperCase());\n  let vowelsArray55 = vowels.map(v => v.toLowerCase());\n  let vowelsArray56 = vowels.map(v => v.toUpperCase());\n  let vowelsArray57 = vowels.map(v => v.toLowerCase());\n  let vowelsArray58 = vowels.map(v => v.toUpperCase());\n  let vowelsArray59 = vowels.map(v => v.toLowerCase());\n  let vowelsArray60 = vowels.map(v => v.toUpperCase());\n  let vowelsArray61 = vowels.map(v => v.toLowerCase());\n  let vowelsArray62 = vowels.map(v => v.toUpperCase());\n  let vowelsArray63 = vowels.map(v => v.toLowerCase());\n  let vowelsArray64 = vowels.map(v => v.toUpperCase());\n  let vowelsArray65 = vowels.map(v => v.toLowerCase());\n  let vowelsArray66 = vowels.map(v => v.toUpperCase());\n  let vowelsArray67 = vowels.map(v => v.toLowerCase());\n  let vowelsArray68 = vowels.map(v => v.toUpperCase());\n  let vowelsArray69 = vowels.map(v => v.toLowerCase());\n  let vowelsArray70 = vowels.map(v => v.toUpperCase());\n  let vowelsArray71 = vowels.map(v => v.toLowerCase());\n  let vowelsArray72 = vowels.map(v => v.toUpperCase());\n  let vowelsArray73 = vowels.map(v => v.toLowerCase());\n  let vowelsArray74 = vowels.map(v => v.toUpperCase());\n  let vowelsArray75 = vowels.map(v => v.toLowerCase());\n  let vowelsArray76 = vowels.map(v => v.toUpperCase());\n  let vowelsArray77 = vowels.map(v => v.toLowerCase());\n  let vowelsArray78 = vowels.map(v => v.toUpperCase());\n  let vowelsArray79 = vowels.map(v => v.toLowerCase());\n  let vowelsArray80 = vowels.map(v => v.toUpperCase());\n  let vowelsArray81 = vowels.map(v => v.toLowerCase());\n  let vowelsArray82 = vowels.map(v => v.toUpperCase());\n  let vowelsArray83 = vowels.map(v => v.toLowerCase());\n  let vowelsArray84 = vowels.map(v => v.toUpperCase());\n  let vowelsArray85 = vowels.map(v => v.toLowerCase());\n  let vowelsArray86 = vowels.map(v => v.toUpperCase());\n  let vowelsArray87 = vowels.map(v => v.toLowerCase());\n  let vowelsArray88 = vowels.map(v => v.toUpperCase());\n  let vowelsArray89 = vowels.map(v => v.toLowerCase());\n  let vowelsArray90 = vowels.map(v => v.toUpperCase());\n  let vowelsArray91 = vowels.map(v => v.toLowerCase());\n  let vowelsArray92 = vowels.map(v => v.toUpperCase());\n  let vowelsArray93 = vowels.map(v => v.toLowerCase());\n  let vowelsArray94 = vowels.map(v => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const str2 = lst[1]\n  let count = 0\n  let count2 = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++\n    } else if (str[i] === ')') {\n      count--\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count2++\n    } else if (str2[i] === ')') {\n      count2--\n    }\n  }\n  if (count === 0 && count2 === 0) {\n    return 'Yes'\n  } else if (count === 0 && count2!== 0) {\n    return 'No'\n  } else if (count!== 0 && count2 === 0) {\n    return 'No'\n  }\n}\n\n/* You was given a list of strings. Your job is to find the longest string in the list that is a valid expression. For example: the listpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/**\n * Given a string, return a string with all the letters capitalized.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> capitalize('a')\n  'A'\n  >>> capitalize('ab')\n  'AB'\n  >>> capitalize('abc')\n  'ABC'\n  >>> capitalize(['a', 'b', 'c'])\n  'ABC'\n  */\nconst capitalize = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const capitalizedString = string[0].toUpperCase() + string.slice(1)\n  return longest([capitalizedString])? capitalizedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse(['a', 'b', 'c'])\n  'cba'\n  */\nconst reverse = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n  const reversedString = string.split('').reverse().join('')\n  return longest([reversedString])? reversedString : null\n}\n\n/**\n * Given a string, return a string with all the letters reversed.\n * If there are multiple strings of the same length, return the longest one.\n * Return null if the input list is empty.\n * >>> reverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximum2, maximum3, maximum4 };\n\n/*\n  Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber };\n\n/*\n  Given a non-empty array of integers, every element appears exactly twice.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber2 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber2 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly three times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber3 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber3 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly four times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber4 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber4 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly five times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber5 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber5 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly six times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber6 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber6 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly seven times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber7 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber7 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly eight times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber8 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber8 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly nine times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber9 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === max) {\n      return arr[i];\n    }\n  }\n};\n\nexport { singleNumber9 };\n\n/*\n  Given a non-empty array of integers, every element appears exactly ten times.\n\n  Find that single one.\n\n  Example 1:\n\n      Input: [2,2,1]\n      Output: 2\n\n  Example 2:\n\n      Input: [4,1,2,1,2]\n      Output: 1\n\n  Example 3:\n\n      Input: [7,6,5,3,1,2,4]\n      Output: 6\n*/\nconst singleNumber10 = (arr) => {\n  let max = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even-numbered elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    result.push(sum);\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept2 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept3 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept4 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept5 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept6 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept7 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept8 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept9 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [1,8,10,10,5]\n\n  Constraints:\n      1. 0 <= len(arr) <= 100\n      2. 0 <= i <= len(arr)\n*/\nconst productExcept10 = (arr, i) => {\n  const result = [];\n  for (let j = 0; j < arr.length; j++) {\n    if (j === i) {\n      result.push(arr[j]);\n    } else {\n      result.push(arr[j] * arr[j]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array arr of integers, return a new array where each element is\n  the product of all the numbers in the original array except the one at index\n  i.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5], i = 2\n      Output: [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (counter <= n) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous term", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthsInYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  const dateArrayLength = dateArray.length;\n  let valid = true;\n  let days;\n  let months;\n  let years;\n\n  if (dateArrayLength < 3) {\n    valid = false;\n  } else {\n    days = dateArrayLength - 2;\n    months = dateArrayLength - 1;\n    years = dateArrayLength;\n  }\n\n  if (days < 1 || days > 31) {\n    valid = false;\n  } else {\n    if (months < 1 || months > 12) {\n      valid = false;\n    } else {\n      if (years < 1 || years > 99) {\n        valid = false;\n      } else {\n        if (months === 2 && days === 29) {\n          valid = true;\n        } else {\n          if (months === 3 && days === 30) {\n            valid = true;\n          } else {\n            if (months === 4 && days === 31) {\n              valid = true;\n            } else {\n              if (months === 5 && days === 30) {\n                valid = true;\n              } else {\n                if (months === 6 && days === 31) {\n                  valid = true;\n                } else {\n                  if (months === 7 && days === 31) {\n                    valid = true;\n                  } else {\n                    if (months === 8 && days === 31) {\n                      valid = true;\n                    } else {\n                      if (months === 9 && days === 30) {\n                        valid = true;\n                      } else {\n                        if (months === 10 && days === 31) {\n                          valid = true;\n                        } else {\n                          if (months === 11 && days === 30) {\n                            valid = true;\n                          } else {\n                            if (months === 12 && days === 31) {\n                              valid = true;\n                            } else {\n                              if (months === 1 && days === 29) {\n                                valid = true;\n                              } else {\n                                if (months === 2 && days === 30) {\n                                  valid = true;\n                                } else {\n                                  if (months === 3 && days === 31) {\n                                    valid = true;\n                                  } else {\n                                    if (months === 4 && days === 31) {\n                                      valid = true;\n                                    } else {\n                                      if (months === 5 && days === 31) {\n                                        valid = true;\n                                      } else {\n                                        if (months === 6 && days === 31) {\n                                          valid = true;\n                                        } else {\n                                          if (months === 7 && days === 31) {\n                                            valid = true;\n                                          } else {\n                                            if (months === 8 && days === 31) {\n                                              valid = true;\n                                            } else {\n                                              if (months === 9 && days === 31) {\n                                                valid = true;\n                                              } else {\n                                                if (months === 10 && days === 31) {\n                                                  valid = true;\n                                                } else {\n                                                  if (months === 11 && days === 31) {\n                                                    valid = true;\n                                                  } else {\n                                                    if (months === 12 && days === 31) {\n                                                      valid = true;\n                                                    } else {\n                                                      if (months === 1 && days === 30) {\n                                                        valid = true;\n                                                      } else {\n                                                        if (months === 2 && days === 31) {\n                                                          valid = true;\n                                                        } else {\n                                                          if (months === 3 && days === 31) {\n                                                            valid = true;\n                                                          } else {\n                                                            if (months === 4 && days === 31) {\n                                                              valid = true;\n                                                            } else {\n                                                              if (months === 5 && days === 31) {\n                                                                valid = true;\n                                                              } else {\n                                                                if (months === 6 && days === 31) {\n                                                                  valid = true;\n                                                                } else {\n                                                                  if (months === 7 && days === 31) {\n                                                                    valid = true;\n                                                                  } else {\n                                                                    if (months === 8 && days === 31) {\n                                                                      valid = true;\n                                                                    } else {\n                                                                      if (months === 9 && days === 31) {\n                                                                        valid = true;\n                                                                      } else {\n                                                                        if (months === 10 && days === 31) {\n                                                                          valid = true;\n                                                                        } else {\n                                                                          if (months === 11 && days === 31) {\n                                                                            valid = true;\n                                                                          } else {\n                                                                            if (months === 12 && days === 31) {\n                                                                              valid = true;\n                                                                            } else {\n                                                                              if (months === 1 && days === 30) {\n                                                                                valid = true;\n                                                                              } else {\n                                                                                if (months === 2 && days === 31) {\n                                                                                  valid = true;\n                                                                                } else {\n                                                                                  if (months === 3 && days === 31) {\n                                                                                    valid = true;\n                                                                                  } else {\n                                                                                    if (months === 4 && days === 31) {\n                                                                                      valid = true;\n                                                                                    } else {\n                                                                                      if (months === 5 && days === 31) {\n                                                                                        valid = true;\n                                                                                      } else {\n                                                                                        if (months === 6 && days === 31) {\n                                                                                          valid = true;\n                                                                                        } else {\n                                                                                          if (months === 7 && days === 31) {\n                                                                                            valid = true;\n                                                                                          } else {\n                                                                                            if (months === 8 && days === 31) {\n                                                                                              valid = true;\n                                                                                            } else {\n                                                                                              if (months === 9 && days === 31) {\n                                                                                                valid = true;\n                                                                                              } else {\n                                                                                                if (months === 10 && days === 31) {\n                                                                                                  valid = true;\n                                                                                                } else {\n                                                                                                  if (months === 11 && days === 31) {\n                                                                                                    valid = true;\n                                                                                                  } else {\n                                                                                                    if (months === 12 && days === 31) {\n                                                                                                      valid = true;\n                                                                                                    } else {\n                                                                                                      if (months === 1 && days === 29) {\n                                                                                                        valid = true;\n                                                                                                      } else {\n                                                                                                        if (months === 2 && days === 30) {\n                                                                                                          valid = true;\n                                                                                                        } else {\n                                                                                                          if (months === 3 && days === 31) {\n                                                                                                            valid = true;\n                                                                                                          } else {\n                                                                                                            if (months === 4 && days === 31) {\n                                                                                                              valid = true;\n                                                                                                            } else {\n                                                                                                              if (months === 5 && days === 31) {\n                                                                                                                valid = true;\n                                                                                                              } else {\n                                                                                                                if (months === 6 && days === 31) {\n                                                                                                                  valid = true;\n                                                                                                                } else {\n                                                                                                                  if (months === 7 && days === 31) {\n                                                                                                                    valid = true;\n                                                                                                                  } else {\n                                                                                                                    if (months === 8 && days === 31) {\n                                                                                                                      valid = true;\n                                                                                                                    } else {\n                                                                                                                      if (months === 9 && days === 31) {\n                                                                                                                        valid = true;\n                                                                                                                      } else {\n                                                                                                                        if (months === 10 && days === 31) {\n                                                                                                                          valid = true;\n                                                                                                                        } else {\n                                                                                                                          if (months === 11 && days === 31) {\n                                                                                                                            valid = true;\n                                                                                                                          } else {\n                                                                                                                            if (months === 12 && days === 31) {\n                                                                                                                              valid = true;\n                                                                                                                            } else {\n                                                                                                                              if (months === 1 && days === 29) {\n                                                                                                                                valid = true;\n                                                                                                                              } else {\n                                                                                                                                if (months === 2 && days === 30) {\n                                                                                                                                  valid = true;\n                                                                                                                                } else {\n                                                                                                                                  if (months === 3 && days === 31) {\n                                                                                                                                    valid = true;\n                                                                                                                                  } else {\n                                                                                                ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length > 0).sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespace", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in descending order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval2;\n  }\n  if (interval2Start > interval2End) {\n    return interval1;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start && interval1End > interval2End) {\n    return interval1;\n  }\n  if (interval2Start < interval1Start && interval2End > interval1End) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start && interval1End > interval2End) {\n    return interval1;\n  }\n  if (interval2Start < interval1Start && interval2End > interval1End) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start && interval1End > interval2End) {\n    return interval1;\n  }\n  if (interval2Start < interval1Start && interval2End > interval1End) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start && interval1End > interval2End) {\n    return interval1;\n  }\n  if (interval2Start < interval1Start && interval2End > interval1End) {\n    return interval2;\n  }\n  return \"YES\";\n};\n\n/*\n  Given two intervals, it is assumed that their start is less or equal their end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n  \n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst isPrime = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval2;\n  }\n  if (interval2Start > interval2End) {\n    return interval1;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start && interval1End > interval2End) {\n    return interval1;\n  }\n  if (interval2Start < interval1Start && interval2End > interval1End) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start && interval1End > interval2End) {\n    return interval1;\n  }\n  if (interval2Start < interval1Start && interval2End > interval1End) {\n    return interval2;\n  }\n  return \"YES\";\n};\n\n/*\n  Given two intervals, it is assumed that their start is less or equal their end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n  \n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst isPrime = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return interval2;\n  }\n  if (interval2Start > interval2End) {\n    return interval1;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start > interval2Start) {\n    return interval1;\n  }\n  if (interval2Start > interval1Start) {\n    return interval2;\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const result = []\n  const visited = new Array(N * N).fill(false)\n  const queue = new Array(N * N).fill().map(() => [])\n  let minPathLength = 0\n  let minPathIndex = 0\n  let minPathValue = 0\n  let minPathIndexInQueue = 0\n  let minPathValueInQueue = 0\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j]!== 0) {\n        queue[i][j] = grid[i][j]\n        visited[i][j] = true\n      }\n    }\n  }\n\n  while (queue[minPathIndexInQueue][minPathValueInQueue]!== 0) {\n    queue[minPathIndexInQueue][minPathValueInQueue] = 0\n    minPathLength++\n    minPathIndexInQueue++\n    minPathValueInQueue++\n  }\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (visited[i][j] === false && queue[i][j]!== 0) {\n        queue[i][j] = grid[i][j]\n        visited[i][j] = true\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (visited[i][j] === false && queue[i][j]!== 0) {\n        if (minPathLength < k) {\n          minPathValue = queue[i][j]\n          minPathIndex = i\n          minPathLength = k\n          minPathIndexInQueue = i\n          minPathValueInQueue = j\n        }\n      }\n    }\n  }\n\n  result.push(minPathValue)\n  return result\n}\n\nconsole.log(minPath(grid, 3))\nconsole.log(minPath(grid, 1))</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3)` returns `[1, 2, 1]` instead of `[1]`.\n<|/ c |>\n<| c |>\nI fixed the bug, please check again\n<|/ c |>\n<| c |>\nThis still doesn't work for me. `minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3)` returns `[1, 2, 1]` instead of `[1]`.\n<|/ c |>\n<| c |>\nI fixed the bug, please check again\n<|/ c |>\n<| c |>\nThis still doesn't work for me. `minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3)` returns `[1, 2, 1]` instead of `[1]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction minPath(grid, k) {\n  let minPath = [];\n  let minPathLength = 0;\n  let minPathIndex = 0;\n  let minPathValue = 0;\n  let minPathIndexInQueue = 0;\n  let minPathValueInQueue = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]!== 0) {\n        minPathLength++;\n        minPathIndexInQueue = i;\n        minPathValueInQueue = j;\n      }\n    }\n  }\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]!== 0) {\n        if (minPathLength < k) {\n          minPathValue = grid[i][j];\n          minPathIndex = i;\n          minPathLength = k;\n          minPathIndexInQueue = i;\n          minPathValueInQueue = j;\n        }\n      }\n    }\n  }\n  minPath.push(minPathValue);\n  return minPath;\n}\n\nconsole.log(minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3));\nconsole.log(minPath([\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2]\n], 1));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| c |>\nThis doesn't work for me. `minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3)` returns `[1, 2, 1]` instead of `[1]`.\n<|/ c |>\n<| c |>\nI fixed the bug, please check again\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction minPath(grid, k) {\n  let minPath = [];\n  let minPathLength = 0;\n  let minPathIndex = 0;\n  let minPathValue = 0;\n  let minPathIndexInQueue = 0;\n  let minPathValueInQueue = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]!== 0) {\n        minPathLength++;\n        minPathIndexInQueue = i;\n        minPathValueInQueue = j;\n      }\n    }\n  }\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]!== 0) {\n        if (minPathLength < k) {\n          minPathValue = grid[i][j];\n          minPathIndex = i;\n          minPathLength = k;\n          minPathIndexInQueue = i;\n          minPathValueInQueue = j;\n        }\n      }\n    }\n  }\n  minPath.push(minPathValue);\n  return minPath;\n}\n\nconsole.log(minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3));\nconsole.log(minPath([\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2]\n], 1));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for me. `minPath([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 3)` returns `[1, 2, 1]` instead of `[1]`.\n<|/ c |>\n<| c |>\nI fixed the bug, please check again\n<|/ c |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction minPath(grid, k) {\n  let minPath = [];\n  let minPathLength = 0;\n  let minPathIndex = 0;\n  let minPathValue = 0;\n  let minPathIndexInQueue = 0;\n  let minPathValueInQueue = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]!== 0) {\n        minPathLength++;\n        minPathIndexInQueue = i;\n        minPathValueInQueue = j;\n      }\n    }\n  }\n  for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegative = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a\n * @param {number} b\n */\nconst leastCommonMultipleWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive = (a, b) => {\n  return a * b / greatestCommonDivisorWithNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositiveAndNegativeAndPositive(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If no common multiple exists, the function returns 1\n * \n * @param {number} a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1, 2];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)];\n};\n\n/*Everyone knows Fibonacci sequence", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 8\n  digits(235) == 20\n  */\nconst digitSumEvenMultiplyTwo = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 2;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 2.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 8\n  digits(235) == 20\n  */\nconst digitSumOddMultiplyTwo = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 2;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 30\n  */\nconst digitSumEvenMultiplyThree = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 3;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 3.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 30\n  */\nconst digitSumOddMultiplyThree = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 3;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 60\n  */\nconst digitSumEvenMultiplyFour = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 4;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 4.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 60\n  */\nconst digitSumOddMultiplyFour = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 4;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 36\n  digits(235) == 120\n  */\nconst digitSumEvenMultiplyFive = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 5;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 5.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 36\n  digits(235) == 120\n  */\nconst digitSumOddMultiplyFive = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 5;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 48\n  digits(235) == 240\n  */\nconst digitSumEvenMultiplySix = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 6;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 6.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 48\n  digits(235) == 240\n  */\nconst digitSumOddMultiplySix = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2!== 0) {\n      sum += i * 6;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 56\n  digits(235) == 360\n  */\nconst digitSumEvenMultiplySeven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i * 7;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 7.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 56\n  digits(235) == 360\n  */\nconst digitSumOddMultiplySeven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = string.split('');\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i]);\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const lastBracket = stack.pop();\n      if (lastBracket!== brackets[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which containing only square brackets. The function should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stack = [];\n  const brackets = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*You were given a list of numbers. You needing to return the sums of squared numbers in the gives list,\n ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  return words.every(word => word.includes(lastChar) && lastChar!== \" \");\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"racecars\") ➞ false\n  checkIfPalindrome(\"\") ➞ false\n  */\nconst checkIfPalindrome = (txt) => {\n  const words = txt.split(\" \");\n  const reversed = words.reverse().join(\" \");\n  return txt === reversed;\n};\n\n/* Create a function that returns true if the given string is a palindrome and false otherwise. Notes: \"palindrome\" is a word that reads the same backward as forward.\n  Examples:\n  checkIfPalindrome(\"racecar\") ➞ true\n  checkIfPalindrome(\"racecar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns an array of all unique elements in the given array. The given array will not containing duplicate value.\n\n  Examples:\n  unique([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const negativeIntegers = lst.filter(x => x < 0);\n  const positiveIntegers = lst.filter(x => x > 0);\n  if (negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return null;\n  }\n  return negativeIntegers.reduce((a, b) => a > b? a : b);\n};\n\n/* Create a function that returns a list of all positive integers in a list.\n  Examples:\n  positiveIntegers([2, 4, 1, 3, 5, 7]) == [1, 2, 3, 5, 7]\n  positiveIntegers([]) == []\n  positiveIntegers([0]) == [0]\n  */\nconst positiveIntegers = (lst) => {\n  return lst.filter(x => x > 0);\n};\n\n/* Create a function that returns a list of all negative integers in a list.\n  Examples:\n  negativeIntegers([2, 4, 1, 3, 5, 7]) == [-2, -1, -3, -5, -7, -4]\n  negativeIntegers([]) == []\n  negativeIntegers([0]) == [0]\n  */\nconst negativeIntegers = (lst) => {\n  return lst.filter(x => x < 0);\n};\n\n/* Create a function that returns a list of all integers in a list.\n  Examples:\n  integers([2, 4, 1, 3, 5, 7]) == [2, 4, 1, 3, 5, 7]\n  integers([]) == []\n  integers([0]) == [0]\n  */\nconst integers = (lst) => {\n  return lst.filter(x => Number.isInteger(x));\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by 3.\n  Examples:\n  divisibleBy3([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3([]) == []\n  divisibleBy3([0]) == [0]\n  */\nconst divisibleBy3 = (lst) => {\n  return lst.filter(x => x % 3 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by 5.\n  Examples:\n  divisibleBy5([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy5([]) == []\n  divisibleBy5([0]) == [0]\n  */\nconst divisibleBy5 = (lst) => {\n  return lst.filter(x => x % 5 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by 7.\n  Examples:\n  divisibleBy7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy7([]) == []\n  divisibleBy7([0]) == [0]\n  */\nconst divisibleBy7 = (lst) => {\n  return lst.filter(x => x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 5.\n  Examples:\n  divisibleBy3And5([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And5([]) == []\n  divisibleBy3And5([0]) == [0]\n  */\nconst divisibleBy3And5 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 5 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 7.\n  Examples:\n  divisibleBy3And7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And7([]) == []\n  divisibleBy3And7([0]) == [0]\n  */\nconst divisibleBy3And7 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 5 and 7.\n  Examples:\n  divisibleBy5And7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy5And7([]) == []\n  divisibleBy5And7([0]) == [0]\n  */\nconst divisibleBy5And7 = (lst) => {\n  return lst.filter(x => x % 5 === 0 && x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 5.\n  Examples:\n  divisibleBy3And5([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And5([]) == []\n  divisibleBy3And5([0]) == [0]\n  */\nconst divisibleBy3And5 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 5 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 7.\n  Examples:\n  divisibleBy3And7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And7([]) == []\n  divisibleBy3And7([0]) == [0]\n  */\nconst divisibleBy3And7 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 5 and 7.\n  Examples:\n  divisibleBy5And7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy5And7([]) == []\n  divisibleBy5And7([0]) == [0]\n  */\nconst divisibleBy5And7 = (lst) => {\n  return lst.filter(x => x % 5 === 0 && x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 5.\n  Examples:\n  divisibleBy3And5([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And5([]) == []\n  divisibleBy3And5([0]) == [0]\n  */\nconst divisibleBy3And5 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 5 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 7.\n  Examples:\n  divisibleBy3And7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And7([]) == []\n  divisibleBy3And7([0]) == [0]\n  */\nconst divisibleBy3And7 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 5 and 7.\n  Examples:\n  divisibleBy5And7([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy5And7([]) == []\n  divisibleBy5And7([0]) == [0]\n  */\nconst divisibleBy5And7 = (lst) => {\n  return lst.filter(x => x % 5 === 0 && x % 7 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 5.\n  Examples:\n  divisibleBy3And5([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  divisibleBy3And5([]) == []\n  divisibleBy3And5([0]) == [0]\n  */\nconst divisibleBy3And5 = (lst) => {\n  return lst.filter(x => x % 3 === 0 && x % 5 === 0);\n};\n\n/* Create a function that returns a list of all integers in a list that are divisible by both 3 and 7.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === b) return null\n  if (a === 0) return 0\n  if (a === 1) return 1\n  if (a === -1) return -1\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER\n  if (a === Number.MAX_VALUE) return Number.MAX_VALUE\n  if (a === Number.MIN_VALUE) return Number.MIN_VALUE\n  if (a === Number.EPSILON) return Number.EPSILON\n  if (a === Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER\n  if (a === Number.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even and negative odd numbers\n  Example\n  isEqualToSumEvenOdd(-4) == false\n  isEqualToSumEvenOdd(-6) == false\n  isEqualToSumEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even and odd numbers\n  Example\n  isEqualToSumEvenOdd(-4) == false\n  isEqualToSumEvenOdd(-6) == false\n  isEqualToSumEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even and positive odd numbers\n  Example\n  isEqualToSumEvenOdd(-4) == false\n  isEqualToSumEvenOdd(-6) == false\n  isEqualToSumEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even and negative even numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even and positive even numbers\n  Example\n  isEqualToSumEvenOdd(-4) == false\n  isEqualToSumEvenOdd(-6) == false\n  isEqualToSumEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddNegativePositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a number\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      prefixes.push(current);\n      current = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    current += string[i];\n    if (string[i] === string[string.length - 1]) {\n      suffixes.push(current);\n      current = '';\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    current += string[i];\n    if (string[i] === string[0]) {\n      substrings.push(current);\n      current = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shorter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s{2,}/g, \"-\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fix", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name;\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9]/g, '');\n  let file_name = file_name.substring(0, file_name.indexOf('.'))\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let file_name = file_name.substring(0, file_name.indexOf('.'));\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      product *= lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      product *= lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      product *= lst[i] * lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      product *= lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productSumSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      product *= lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      product *= lst[i] * lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productProduct = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      product *= lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      product *= lst[i] * lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productProductSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      product *= lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      product *= lst[i] * lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the product of the integers entry if its indices is a multiples of 3 and will return the product of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst productProductSum = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const prime = primeFactors(word.length)\n    if (prime.length!== word.length) {\n      continue\n    }\n    for (let j = 0; j < prime.length; j++) {\n      if (prime[j] === word.length) {\n        result.push(word)\n        break\n      }\n    }\n  }\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You were given two strings representing a sentence and another string representing a word,\n you have to return the number of times the word appears in the sentence.\n\n  Example 1:\n      Input: sentence = \"This is a test\", word = \"is\"\n      Output: 2\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 1\n\n  Example 3:\n      Input: sentence = \"lets go for swimming\", word = \"lets\"\n      Output: 0\n\n  Example 4:\n      Input: sentence = \"lets go for swimming\", word = \"go\"\n      Output: 0\n\n  Example 5:\n      Input: sentence = \"lets go for swimming\", word = \"going\"\n      Output: 0\n\n  Example 6:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 1\n\n  Example 7:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 1\n\n  Example 8:\n      Input: sentence = \"lets go for swimming\", word = \"swiming\"\n      Output: 1\n\n  Example 9:\n      Input: sentence = \"lets go for swimming\", word = \"swims\"\n      Output: 2\n\n  Example 10:\n      Input: sentence = \"lets go for swimming\", word = \"swimings\"\n      Output: 2\n\n  Example 11:\n      Input: sentence = \"lets go for swimming\", word = \"swiming\"\n      Output: 2\n\n  Example 12:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 13:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 14:\n      Input: sentence = \"lets go for swimming\", word = \"swiming\"\n      Output: 2\n\n  Example 15:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 16:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 17:\n      Input: sentence = \"lets go for swimming\", word = \"swiming\"\n      Output: 2\n\n  Example 18:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 19:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 20:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 21:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 22:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 23:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 24:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 25:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 26:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 27:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 28:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 29:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 30:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 31:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 32:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 33:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 34:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 35:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 36:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 37:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 38:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 39:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 40:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 41:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 42:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 43:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 44:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 45:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 46:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 47:\n      Input: sentence = \"lets go for swimming\", word = \"swimming\"\n      Output: 2\n\n  Example 48:\n      Input: sentence = \"lets go for swimming\", word = \"swim\"\n      Output: 2\n\n  Example 49:", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numerators, denominators] = x.split(\"/\").map(Number);\n  if (numerators === 0 && denominators === 0) return true;\n  if (numerators === 0 && denominators > 0) return false;\n  if (numerators > 0 && denominators === 0) return false;\n  if (numerators < 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators < 0) return false;\n  if (numerators === 0 && denominators === 0) return true;\n  if (numerators === 0 && denominators < 0) return false;\n  if (numerators === 0 && denominators > 0) return false;\n  if (numerators < 0 && denominators < 0) return false;\n  if (numerators < 0 && denominators > 0) return false;\n  if (numerators > 0 && denominators < 0) return false;\n  if (numerators > 0 && denominators > 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (numerators === 0 && denominators === 0) return false;\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    const bSum = b.toString().split('').reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return aSum - bSum;\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.map((num) => {\n    const digits = num.toString().split('');\n    return digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.map((num) => {\n    const digits = num.toString().split('');\n    return digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.map((num) => {\n    const digits = num.toString().split('');\n    return digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.map((num) => {\n    const digits = num.toString().split('');\n    return digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.map((num) => {\n    const digits = num.toString().split('');\n    return digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return nums.map((num) => {\n    const digits = num.toString().split('');\n    return digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n  });\n};\n\n/*\n  Write a function that returns an array of all numbers in the range from 1 to n where each number is the sum of its digits. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> sumDigits([1, 11, -1, -11, -12]) == [3, 7, -4, -7, 1]\n  >>> sumDigits([]) == []\n  */\nconst sumDigits = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => {\n      return acc + parseInt(digit);\n    }, 0);\n    return sumOfDigits > acc? sumOfDigits : acc;\n  }, 0);\n  return num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n// For example:\n// oddFilter([15, -73, 14, -15]) => 1 \n// oddFilter([33, -2, -3, 45, 21, 109]) => 2\nconst oddFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nThanks for your answer. Your solution is very elegant and efficient. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nSure. First of all, we are creating an array `a` of length `n`. Then we iterate over each element of `a` and check if it is divisible by `3`. Then we increment the counter.\n<|/ c |>\n<| c |>\nThanks for your explanation. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| c |>\nThanks for your explanation. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution is very elegant and efficient. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution is very elegant and efficient. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution is very elegant and efficient. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=algorithm,arrays,javascript |>\n<| c |>\nThanks for your answer. Your solution is very elegant and efficient. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution is very elegant and efficient. I am not able to understand how it works. Can you please explain how it works?\n<|/ c |>\n<| a d", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets\n  if (planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\") {\n    planets = [planet1]\n  } else if (planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\") {\n    planets = [planet2]\n  } else {\n    return []\n  }\n  let orbit1 = getOrbit(planet1)\n  let orbit2 = getOrbit(planet2)\n  let distances = []\n  for (let i = 0; i < planets.length; i++) {\n    let distance = distanceBetween(orbit1, orbit2, planets[i])\n    distances.push(distance)\n  }\n  distances.sort((a, b) => a - b)\n  let result = []\n  for (let i = 0; i < distances.length; i++) {\n    if (distances[i] <= 1) {\n      result.push(planets[i])\n    }\n  }\n  return result\n}\n\n/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a function that takes two planet name as strings planet1 and planet2.\n The function should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the distance to the suns. The function should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  let planets\n  if (planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\") {\n    planets = [planet1]\n  } else if (planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\") {\n    planets = [planet2]\n  } else {\n    return []\n  }\n  let orbit1 = getOrbit(planet1)\n  let orbit2 = getOrbit(planet2)\n  let distances = []\n  for (let i = 0; i < planets.length; i++) {\n    let distance = distanceBetween(orbit1, orbit2, planets[i])\n    distances.push(distance)\n  }\n  distances.sort((a, b) => a - b)\n  let result = []\n  for (let i = 0; i < distances.length; i++) {\n    if (distances[i] <= 1) {\n      result.push(planets[i])\n    }\n  }\n  return result\n}\n\n/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a function that takes two planet name as strings planet1 and planet2.\n The function should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the distance to the suns. The function should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  let planets\n  if (planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\") {\n    planets = [planet1]\n  } else if (planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\") {\n    planets = [planet2]\n  } else {\n    return []\n  }\n  let orbit1 = getOrbit(planet1)\n  let orbit2 = getOrbit(planet2)\n  let distances = []\n  for (let i = 0; i < planets.length; i++) {\n    let distance = distanceBetween(orbit1, orbit2, planets[i])\n    distances.push(distance)\n  }\n  distances.sort((a, b) => a - b)\n  let result = []\n  for (let i = 0; i < distances.length; i++) {\n    if (distances[i] <= 1) {\n      result.push(planets[i])\n    }\n  }\n  return result\n}\n\n/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a function that takes two planet name as strings planet1 and planet2.\n The function should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the distance to the suns. The function should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  lst.forEach((item) => {\n    if (item.length % 2!== 0) {\n      newList.push(item);\n    }\n  });\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a string and returns a string with all the characters of the string in lower case. You may assume that the string contains only lower case characters.\n  For example:\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwVyZ\") => \"abcdefghijklmnopqrstuvwxyz\"\n  assert lowerCaseString(\"aBcDeFgHiJkLmNoPqRsTvUwV", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, val) => {\n    if (val % 2!== 0) {\n      return acc + val;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a string, return a new string with the first letter of each word capitalized. capitalize(\"hello world\") == \"Hello World\" capitalize(\"hello world!\") == \"Hello World!\" If the input string is empty, or only contains spaces, return an empty string. capitalize(\"\") == \"\" capitalize(\"  \") == \"\" capitalize(\"hello\") == \"\" capitalize(\"hello world\") == \"\" capitalize(\"hello world hello\") == \"\" capitalize(\"hello world hello \") == \"\" capitalize(\"hello world hello world\") == \"\" capitalize(\"hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world\") == \"\" capitalize(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// test cases\nconst tests = [\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n    [1, 2, 3, 4, 2],\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length - strongest;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions. The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length - strongest;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions. The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length - strongest;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions. The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length - strongest;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions. The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length - strongest;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\");\n  const bArr = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a1 = \"\";\n  let b1 = \"\";\n  let c1 = \"\";\n  let d1 = \"\";\n  let e1 = \"\";\n  let f1 = \"\";\n  let g1 = \"\";\n  let h1 = \"\";\n  let i1 = \"\";\n  let j1 = \"\";\n  let k1 = \"\";\n  let l1 = \"\";\n  let m1 = \"\";\n  let n1 = \"\";\n  let o1 = \"\";\n  let p1 = \"\";\n  let q1 = \"\";\n  let r1 = \"\";\n  let s1 = \"\";\n  let t1 = \"\";\n  let u1 = \"\";\n  let v1 = \"\";\n  let w1 = \"\";\n  let x1 = \"\";\n  let y1 = \"\";\n  let z1 = \"\";\n  let a2 = \"\";\n  let b2 = \"\";\n  let c2 = \"\";\n  let d2 = \"\";\n  let e2 = \"\";\n  let f2 = \"\";\n  let g2 = \"\";\n  let h2 = \"\";\n  let i2 = \"\";\n  let j2 = \"\";\n  let k2 = \"\";\n  let l2 = \"\";\n  let m2 = \"\";\n  let n2 = \"\";\n  let o2 = \"\";\n  let p2 = \"\";\n  let q2 = \"\";\n  let r2 = \"\";\n  let s2 = \"\";\n  let t2 = \"\";\n  let u2 = \"\";\n  let v2 = \"\";\n  let w2 = \"\";\n  let x2 = \"\";\n  let y2 = \"\";\n  let z2 = \"\";\n  let a3 = \"\";\n  let b3 = \"\";\n  let c3 = \"\";\n  let d3 = \"\";\n  let e3 = \"\";\n  let f3 = \"\";\n  let g3 = \"\";\n  let h3 = \"\";\n  let i3 = \"\";\n  let j3 = \"\";\n  let k3 = \"\";\n  let l3 = \"\";\n  let m3 = \"\";\n  let n3 = \"\";\n  let o3 = \"\";\n  let p3 = \"\";\n  let q3 = \"\";\n  let r3 = \"\";\n  let s3 = \"\";\n  let t3 = \"\";\n  let u3 = \"\";\n  let v3 = \"\";\n  let w3 = \"\";\n  let x3 = \"\";\n  let y3 = \"\";\n  let z3 = \"\";\n  let a4 = \"\";\n  let b4 = \"\";\n  let c4 = \"\";\n  let d4 = \"\";\n  let e4 = \"\";\n  let f4 = \"\";\n  let g4 = \"\";\n  let h4 = \"\";\n  let i4 = \"\";\n  let j4 = \"\";\n  let k4 = \"\";\n  let l4 = \"\";\n  let m4 = \"\";\n  let n4 = \"\";\n  let o4 = \"\";\n  let p4 = \"\";\n  let q4 = \"\";\n  let r4 = \"\";\n  let s4 = \"\";\n  let t4 = \"\";\n  let u4 = \"\";\n  let v4 = \"\";\n  let w4 = \"\";\n  let x4 = \"\";\n  let y4 = \"\";\n  let z4 = \"\";\n  let a5 = \"\";\n  let b5 = \"\";\n  let c5 = \"\";\n  let d5 = \"\";\n  let e5 = \"\";\n  let f5 = \"\";\n  let g5 = \"\";\n  let h5 = \"\";\n  let i5 = \"\";\n  let j5 = \"\";\n  let k5 = \"\";\n  let l5 = \"\";\n  let m5 = \"\";\n  let n5 = \"\";\n  let o5 = \"\";\n  let p5 = \"\";\n  let q5 = \"\";\n  let r5 = \"\";\n  let s5 = \"\";\n  let t5 = \"\";\n  let u5 = \"\";\n  let v5 = \"\";\n  let w5 = \"\";\n  let x5 = \"\";\n  let y5 = \"\";\n  let z5 = \"\";\n  let a6 = \"\";\n  let b6 = \"\";\n  let c6 = \"\";\n  let d6 = \"\";\n  let e6 = \"\";\n  let f6 = \"\";\n  let g6 = \"\";\n  let h6 = \"\";\n  let i6 = \"\";\n  let j6 = \"\";\n  let k6 = \"\";\n  let l6 = \"\";\n  let m6 = \"\";\n  let n6 = \"\";\n  let o6 = \"\";\n  let p6 = \"\";\n  let q6 = \"\";\n  let r6 = \"\";\n  let s6 = \"\";\n  let t6 = \"\";\n  let u6 = \"\";\n  let v6 = \"\";\n  let w6 = \"\";\n  let x6 = \"\";\n  let y6 = \"\";\n  let z6 = \"\";\n  let a7 = \"\";\n  let b7 = \"\";\n  let c7 = \"\";\n  let d7 = \"\";\n  let e7 = \"\";\n  let f7 = \"\";\n  let g7 = \"\";\n  let h7 = \"\";\n  let i7 = \"\";\n  let j7 = \"\";\n  let k7 = \"\";\n  let l7 = \"\";\n  let m7 = \"\";\n  let n7 = \"\";\n  let o7 = \"\";\n  let p7 = \"\";\n  let q7 = \"\";\n  let r7 = \"\";\n  let s7 = \"\";\n  let t7 = \"\";\n  let u7 = \"\";\n  let v7 = \"\";\n  let w7 = \"\";\n  let x7 = \"\";\n  let y7 = \"\";\n  let z7 = \"\";\n  let a8 = \"\";\n  let b8 = \"\";\n  let c8 = \"\";\n  let d8 = \"\";\n  let e8 = \"\";\n  let f8 = \"\";\n  let g8 = \"\";\n  let h8 = \"\";\n  let i8 = \"\";\n  let j8 = \"\";\n  let k8 = \"\";\n  let l8 = \"\";\n  let m8 = \"\";\n  let n8 = \"\";\n  let o8 = \"\";\n  let p8 = \"\";\n  let q8 = \"\";\n  let r8 = \"\";\n  let s8 = \"\";\n  let t8 = \"\";\n  let u8 = \"\";\n  let v8 = \"\";\n  let w8 = \"\";\n  let x8 = \"\";\n  let y8 = \"\";\n  let z8 = \"\";\n  let a9 = \"\";\n  let b9 = \"\";\n  let c9 = \"\";\n  let d9 = \"\";\n  let e9 = \"\";\n  let f9 = \"\";\n  let g9 = \"\";\n  let h9 = \"\";\n  let i9 = \"\";\n  let j9 = \"\";\n  let k9 = \"\";\n  let l9 = \"\";\n  let m9 = \"\";\n  let n9 = \"\";\n  let o9 = \"\";\n  let p9 = \"\";\n  let q9 = \"\";\n  let r9 = \"\";\n  let s9 = \"\";\n  let t9 = \"\";\n  let u9 = \"\";\n  let v9 = \"\";\n  let w9 = \"\";\n  let x9 = \"\";\n  let y9 = \"\";\n  let z9 = \"\";\n  let a10 = \"\";\n  let b10 = \"\";\n  let c10 = \"\";\n  let d10 = \"\";\n  let e10 = \"\";\n  let f10 = \"\";\n  let g10 = \"\";\n  let h10 = \"\";\n  let i10 = \"\";\n  let j10 = \"\";\n  let k10 = \"\";\n  let l10 = \"\";\n  let m10 = \"\";\n  let n10 = \"\";\n  let o10 = \"\";\n  let p10 = \"\";\n  let q10 = \"\";\n  let r10 = \"\";\n  let s10 = \"\";\n  let t10 = \"\";\n  let u10 = \"\";\n  let v10 = \"\";\n  let w10 = \"\";\n  let x10 = \"\";\n  let y10 = \"\";\n  let z10 = \"\";\n  let a11 = \"\";\n  let b11 = \"\";\n  let c11 = \"\";\n  let d11 = \"\";\n  let e11 = \"\";\n  let f11 = \"\";\n  let g11 = \"\";\n  let h11 = \"\";\n  let i11 = \"\";\n  let j11 = \"\";\n  let k11 = \"\";\n  let l11 = \"\";\n  let m11 = \"\";\n  let n11 = \"\";\n  let o", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that had the sum of even and odd digit respectively.\n\n   Example:\n      evenOddSum(-12) ==> (1, 2)\n      evenOddSum(123) ==> (2, 3)\n  */\nconst evenOddSum = (num) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenSum += parseInt(numStr[i]);\n    } else {\n      oddSum += parseInt(numStr[i]);\n    }\n  }\n  return [evenSum, oddSum];\n};\n\n/*Given an integer. return a tuple that had the product of even and odd digit respectively.\n\n   Example:\n      evenOddProduct(-12) ==> (-12, -6)\n      evenOddProduct(123) ==> (123, -6)\n  */\nconst evenOddProduct = (num) => {\n  let evenProduct = 1;\n  let oddProduct = 1;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenProduct *= parseInt(numStr[i]);\n    } else {\n      oddProduct *= parseInt(numStr[i]);\n    }\n  }\n  return [evenProduct, oddProduct];\n};\n\n/*Given an integer. return a tuple that had the sum of even and odd digit respectively.\n\n   Example:\n      evenOddSumOfDigits(-12) ==> (1, 2)\n      evenOddSumOfDigits(123) ==> (2, 3)\n  */\nconst evenOddSumOfDigits = (num) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenSum += parseInt(numStr[i]);\n    } else {\n      oddSum += parseInt(numStr[i]);\n    }\n  }\n  return [evenSum, oddSum];\n};\n\n/*Given an integer. return a tuple that had the product of even and odd digit respectively.\n\n   Example:\n      evenOddProductOfDigits(-12) ==> (-12, -6)\n      evenOddProductOfDigits(123) ==> (123, -6)\n  */\nconst evenOddProductOfDigits = (num) => {\n  let evenProduct = 1;\n  let oddProduct = 1;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenProduct *= parseInt(numStr[i]);\n    } else {\n      oddProduct *= parseInt(numStr[i]);\n    }\n  }\n  return [evenProduct, oddProduct];\n};\n\n/*Given an integer. return a tuple that had the sum of even and odd digit respectively.\n\n   Example:\n      evenOddSumOfDigits(-12) ==> (1, 2)\n      evenOddSumOfDigits(123) ==> (2, 3)\n  */\nconst evenOddSumOfDigits = (num) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenSum += parseInt(numStr[i]);\n    } else {\n      oddSum += parseInt(numStr[i]);\n    }\n  }\n  return [evenSum, oddSum];\n};\n\n/*Given an integer. return a tuple that had the product of even and odd digit respectively.\n\n   Example:\n      evenOddProductOfDigits(-12) ==> (-12, -6)\n      evenOddProductOfDigits(123) ==> (123, -6)\n  */\nconst evenOddProductOfDigits = (num) => {\n  let evenProduct = 1;\n  let oddProduct = 1;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenProduct *= parseInt(numStr[i]);\n    } else {\n      oddProduct *= parseInt(numStr[i]);\n    }\n  }\n  return [evenProduct, oddProduct];\n};\n\n/*Given an integer. return a tuple that had the sum of even and odd digit respectively.\n\n   Example:\n      evenOddSumOfDigits(-12) ==> (1, 2)\n      evenOddSumOfDigits(123) ==> (2, 3)\n  */\nconst evenOddSumOfDigits = (num) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenSum += parseInt(numStr[i]);\n    } else {\n      oddSum += parseInt(numStr[i]);\n    }\n  }\n  return [evenSum, oddSum];\n};\n\n/*Given an integer. return a tuple that had the product of even and odd digit respectively.\n\n   Example:\n      evenOddProductOfDigits(-12) ==> (-12, -6)\n      evenOddProductOfDigits(123) ==> (123, -6)\n  */\nconst evenOddProductOfDigits = (num) => {\n  let evenProduct = 1;\n  let oddProduct = 1;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenProduct *= parseInt(numStr[i]);\n    } else {\n      oddProduct *= parseInt(numStr[i]);\n    }\n  }\n  return [evenProduct, oddProduct];\n};\n\n/*Given an integer. return a tuple that had the sum of even and odd digit respectively.\n\n   Example:\n      evenOddSumOfDigits(-12) ==> (1, 2)\n      evenOddSumOfDigits(123) ==> (2, 3)\n  */\nconst evenOddSumOfDigits = (num) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenSum += parseInt(numStr[i]);\n    } else {\n      oddSum += parseInt(numStr[i]);\n    }\n  }\n  return [evenSum, oddSum];\n};\n\n/*Given an integer. return a tuple that had the product of even and odd digit respectively.\n\n   Example:\n      evenOddProductOfDigits(-12) ==> (-12, -6)\n      evenOddProductOfDigits(123) ==> (123, -6)\n  */\nconst evenOddProductOfDigits = (num) => {\n  let evenProduct = 1;\n  let oddProduct = 1;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenProduct *= parseInt(numStr[i]);\n    } else {\n      oddProduct *= parseInt(numStr[i]);\n    }\n  }\n  return [evenProduct, oddProduct];\n};\n\n/*Given an integer. return a tuple that had the sum of even and odd digit respectively.\n\n   Example:\n      evenOddSumOfDigits(-12) ==> (1, 2)\n      evenOddSumOfDigits(123) ==> (2, 3)\n  */\nconst evenOddSumOfDigits = (num) => {\n  let evenSum = 0;\n  let oddSum = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenSum += parseInt(numStr[i]);\n    } else {\n      oddSum ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRoman(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanUpper(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCase = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanMixedCase(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanMixedCaseUpper(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanMixedCaseUpper(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanMixedCaseUpper(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanMixedCaseUpper(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanDigits = roman.map((romanNumber) => romanNumberToDigit(romanNumber));\n  const romanNumbers = romanDigits.map((digit) => digitToRomanMixedCaseUpper(digit));\n  const romanNumbersString = romanNumbers.join('');\n  const romanNumbersLowerCase = romanNumbersString.toLowerCase();\n  return romanNumbersLowerCase;\n};\n\n/*\n  Gives a positive integers, obtain its roman ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && ab >= ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a triangle, return its area in units of square meters.\n  Example:\n  triangleArea(3, 4, 5) == 15\n  triangleArea(1, 2, 3) == 6\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc + ac * bc;\n};\n\n/*\n Given a triangle, return its perimeter in units of square meters.\n  Example:\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 2, 3) == 6\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab + bc + ac;\n};\n\n/*\n Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of that string in the string. count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === 1 count(\"hello\") === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      needs = 0;\n    } else {\n      carrots = 0;\n      needs = need;\n    }\n    result.push(carrots);\n  }\n  if (carrots > 0) {\n    result.push(carrots);\n  }\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.reduce((acc, char) => {\n    acc[char] = acc[char] + 1 || 1;\n    return acc;\n  }, {});\n  return Object.keys(charsCount).length;\n};\n\n/**\n * Given a string, returns how many times each character appears in the string\n * \n * >>> countChars('xyzXYZ')\n * {'x':2, 'y':2, 'z':2}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':1, 'e':1, 'r':1}\n * >>> countChars('Jerry')\n * {'J':1, 'r':", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Gives two ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You was given an array of strings arr and a number k. Your task is to find the number of strings in arr that are palindromes.\n  Examples\n  palindromes([\"abc\", \"aba\", \"abba\", \"abba\", \"abba\"]) = 3\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 3\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 2\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 1\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n  palindromes([\"abba\", \"abba\", \"abba\", \"abba\", \"abba\"]) = 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = require('md5')\n  return md5.update(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == 'c99b47d6c7ddafba0d50f5f4ad0f009a3a5'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null\n  const sha = require('sha.js')\n  return sha.sha1(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha256 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null\n  const sha = require('sha.js')\n  return sha.sha256(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null\n  const sha = require('sha.js')\n  return sha.sha512(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3('Hello world') == 'c99b47d6c7ddafba0d50f5f4ad0f009a3a5'\n  */\nconst stringToSha3 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha3_256(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3_256('Hello world') == 'c99b47d6c7ddafba0d50f5f4ad0f009a3a5'\n  */\nconst stringToSha3_256 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha3_256(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3_512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha3_512 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha3_512(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha512(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3_512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha3_512 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha512(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3_512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha3_512 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha512(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3_512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha3_512 = (text) => {\n  if (!text) return null\n  const sha3 = require('sha3')\n  return sha3.sha512(text).digest('hex')\n}\n\n/*\n  Gives a string 'text', return its sha3 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha3_512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the odd digits between a and b,\n  in ascends order.\n\n  For example:\n  generateOdds(2, 8) => [2, 4, 6, 8]\n  generateOdds(8, 2) => [2, 4, 6, 8]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, returns the sum of its digits in ascends order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 8\n  sumOfDigits(14) => 1 + 4 + 7 = 9\n  sumOfDigits(15) => 1 + 5 + 8 = 11\n  sumOfDigits(16) => 1 + 6 + 9 = 12\n  sumOfDigits(17) => 1 + 7 + 10 = 13\n  sumOfDigits(18) => 1 + 8 + 11 = 14\n  sumOfDigits(19) => 1 + 9 + 12 = 15\n  sumOfDigits(20) => 1 + 10 + 13 = 16\n  sumOfDigits(21) => 1 + 11 + 14 = 17\n  sumOfDigits(22) => 1 + 12 + 15 = 18\n  sumOfDigits(23) => 1 + 13 + 16 = 19\n  sumOfDigits(24) => 1 + 14 + 17 = 20\n  sumOfDigits(25) => 1 + 15 + 18 = 21\n  sumOfDigits(26) => 1 + 16 + 19 = 22\n  sumOfDigits(27) => 1 + 17 + 20 = 23\n  sumOfDigits(28) => 1 + 18 + 21 = 24\n  sumOfDigits(29) => 1 + 19 + 22 = 25\n  sumOfDigits(30) => 1 + 20 + 23 = 26\n  sumOfDigits(31) => 1 + 21 + 24 = 27\n  sumOfDigits(32) => 1 + 22 + 25 = 28\n  sumOfDigits(33) => 1 + 23 + 26 = 29\n  sumOfDigits(34) => 1 + 24 + 27 = 30\n  sumOfDigits(35) => 1 + 25 + 28 = 31\n  sumOfDigits(36) => 1 + 26 + 29 = 32\n  sumOfDigits(37) => 1 + 27 + 30 = 33\n  sumOfDigits(38) => 1 + 28 + 31 = 34\n  sumOfDigits(39) => 1 + 29 + 32 = 35\n  sumOfDigits(40) => 1 + 30 + 33 = 36\n  sumOfDigits(41) => 1 + 31 + 34 = 37\n  sumOfDigits(42) => 1 + 32 + 35 = 38\n  sumOfDigits(43) => 1 + 33 + 36 = 39\n  sumOfDigits(44) => 1 + 34 + 37 = 40\n  sumOfDigits(45) => 1 + 35 + 38 = 41\n  sumOfDigits(46) => 1 + 36 + 39 = 42\n  sumOfDigits(47) => 1 + 37 + 40 = 43\n  sumOfDigits(48) => 1 + 38 + 41 = 44\n  sumOfDigits(49) => 1 + 39 + 42 = 45\n  sumOfDigits(50) => 1 + 40 + 43 = 46\n  sumOfDigits(51) => 1 + 41 + 44 = 47\n  sumOfDigits(52) => 1 + 42 + 45 = 48\n  sumOfDigits(53) => 1 + 43 + 46 = 49\n  sumOfDigits(54) => 1 + 44 + 47 = 50\n  sumOfDigits(55) => 1 + 45 + 48 = 51\n  sumOfDigits(56) => 1 + 46 + 49 = 52\n  sumOfDigits(57) => 1 + 47 + 50 = 53\n  sumOfDigits(58) => 1 + 48 + 51 = 54\n  sumOfDigits(59) => 1 + 49 + 52 = 55\n  sumOfDigits(60) => 1 + 50 + 53 = 56\n  sumOfDigits(61) => 1 + 51 + 54 = 57\n  sumOfDigits(62) => 1 + 52 + 55 = 58\n  sumOfDigits(63) => 1 + 53 + 56 = 59\n  sumOfDigits(64) => 1 + 54 + 57 = 60\n  sumOfDigits(65) => 1 + 55 + 58 = 61\n  sumOfDigits(66) => 1 + 56 + 59 = 62\n  sumOfDigits(67) => 1 + 57 + 60 = 63\n  sumOfDigits(68) => 1 + 58 + 61 = 64\n  sumOfDigits(69) => 1 + 59 + 62 = 65\n  sumOfDigits(70) => 1 + 60 + 63 = 66\n  sumOfDigits(71) => 1 + 61 + 64 = 67\n  sumOfDigits(72) => 1 + 62 + 65 = 68\n  sumOfDigits(73) => 1 + 63 + 66 = 69\n  sumOfDigits(74) => 1 + 64 + 67 = 70\n  sumOfDigits(75) => 1 + 65 + 68 = 71\n  sumOfDigits(76) => 1 + 66 + 69 = 72\n  sumOfDigits(77) => 1 + 67 + 70 = 73\n  sumOfDigits(78) => 1 + 68 + 71 = 74\n  sumOfDigits(79) => 1 + 69 + 72 = 75\n  sumOfDigits(80) => 1 + 70 + 73 = 76\n  sumOfDigits(81) => 1 + 71 + 74 = 77\n  sumOfDigits(82) => 1 + 72 + 75 = 78\n  sumOfDigits(83) => 1 + 73 + 76 = 79\n  sumOfDigits(84) => 1 + 74 + 77 = 80\n  sumOfDigits(85) => 1 + 75 + 78 = 81\n  sumOfDigits(86) => 1 + 76 + 79 = 82\n  sumOfDigits(87) => 1 + 77 + 80 = 83\n  sumOfDigits(88) => 1 + 78 + 81 = 84\n  sumOfDigits(89) => 1 + 79 + 82 = 85\n  sumOfDigits(90) => 1 + 80 + 83 = 86\n  sumOfDigits(91) => 1 + 81 + 84 = 87\n  sumOfDigits(92) => 1 + 82 + 85 = 88\n  sumOfDigits(93) => 1 + 83 + 86 = 89\n  sumOfDigits(94) => 1 + 84 + 87 = 90\n  sumOfDigits(95) => 1 + 85 + 88 = 91\n  sumOfDigits(96) => 1 + 86 + 89 = 92\n  sumOfDigits(97) => 1 + 87 + 90 = 93\n  sumOfDigits(98) => 1 + 88 + 91 = 94\n  sumOfDigits(99) => 1 + 89 + 92 = 95\n  sumOfDigits(100) => 1 + 90 + 93 = 96\n  sumOfDigits(101) => 1 + 91 + 94 = 97\n  sumOfDigits(102) => 1 + 92 + 95 = 98\n  sumOfDigits(103) => 1 + 93 + 96 = 99\n  sumOfDigits(104) => 1 + 94 + 97 = 100\n  sumOfDigits(105) => 1 + 95 + 98 = 101\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_array = [];\n  let music_notes_length = 0;\n  for (let i = 0; i < music_notes.length; i++) {\n    if (music_notes[i] === 'o') {\n      music_notes_length++;\n    } else if (music_notes[i] === 'o|') {\n      music_notes_length += 2;\n    } else if (music_notes[i] === '.|') {\n      music_notes_length += 4;\n    } else {\n      music_notes_length += 1;\n    }\n    music_notes_array.push(music_notes_length);\n  }\n  return music_notes_array;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_array = [];\n  let music_notes_length = 0;\n  for (let i = 0; i < music_notes.length; i++) {\n    if (music_notes[i] === 'o') {\n      music_notes_length++;\n    } else if (music_notes[i] === 'o|') {\n      music_notes_length += 2;\n    } else if (music_notes[i] === '.|') {\n      music_notes_length += 4;\n    } else {\n      music_notes_length += 1;\n    }\n    music_notes_array.push(music_notes_length);\n  }\n  return music_notes_array;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_array = [];\n  let music_notes_length = 0;\n  for (let i = 0; i < music_notes.length; i++) {\n    if (music_notes[i] === 'o') {\n      music_notes_length++;\n    } else if (music_notes[i] === 'o|') {\n      music_notes_length += 2;\n    } else if (music_notes[i] === '.|') {\n      music_notes_length += 4;\n    } else {\n      music_notes_length += 1;\n    }\n    music_notes_array.push(music_notes_length);\n  }\n  return music_notes_array;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_array = [];\n  let music_notes_length = 0;\n  for (let i = 0; i < music_notes.length; i++) {\n    if (music_notes[i] === 'o') {\n      music_notes_length++;\n    } else if (music_notes[i] === 'o|') {\n      music_notes_length += 2;\n    } else if (music_notes[i] === '.|') {\n      music_notes_length += 4;\n    } else {\n      music_notes_length += 1;\n    }\n    music_notes_array.push(music_notes_length);\n  }\n  return music_notes_array;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_array = [];\n  let music_notes_length = 0;\n  for (let i = 0; i < music_notes.length; i++) {\n    if (music_notes[i] === 'o') {\n      music_notes_length++;\n    } else if (music_notes[i] === 'o|') {\n      music_notes_length += 2;\n    } else if (music_notes[i] === '.|') {\n      music_notes_length += 4;\n    } else {\n      music_notes_length += 1;\n    }\n    music_notes_array.push(music_notes_length);\n  }\n  return music_notes_array;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_array = [];\n  let music_notes_length = 0;\n  for (let i = 0; i < music_notes.length; i++) {\n    if (music_notes[i] === 'o') {\n      music_notes_length++;\n    } else if (music_notes[i] === 'o|') {\n      music_notes_length += 2;\n    } else if (music_notes[i] === '.|') {\n      music_notes_length += 4;\n    } else {\n      music_notes_length += 1;\n    }\n    music_notes_array.push(music_notes_length);\n  }\n  return music_notes_array;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count non-overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlapping = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimesNonOverlapping('', 'a')\n  0\n  >>> howManyTimesNonOverlapping('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlapping('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlap = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count non-overlapping case.\n  >>> howManyTimesNonOverlappingOverlap('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlap('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlap('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlapping = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimesNonOverlappingOverlapNonOverlapping('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlapNonOverlapping('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlapNonOverlapping('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlappingOverlap = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count non-overlapping case.\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlap('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlap('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlap('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlap = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count non-overlapping case.\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlap = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count non-overlapping case.\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('', 'a')\n  0\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaa', 'a')\n  3\n  >>> howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlapping('aaaa', 'aa')\n  3\n  */\nconst howManyTimesNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlapNonOverlappingOverlap = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i) === -1) {\n      count++;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumbers = numberArray.sort((a, b) => a - b);\n  return sortedNumbers.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from smaller to larger\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => a - b);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> sortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> reverseSortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> reverseSortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> reverseSortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> reverseSortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> reverseSortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. Return the string with letters sort from larger to smaller\n  >>> reverseSortLetters('z y x w v u t s r q p o n m l k j i h g f e d c b a')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst reverseSortLetters = (letters) => {\n  const letterArray = letters.split(\" \");\n  const sortedLetters = letterArray.sort((a, b) => b - a);\n  return sortedLetters.join(\" \");\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'. Valid choices was 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst clampNumber = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumber(3.5)\n  3.5\n  >>> clampNumber(3.5)\n  3.5\n  */\nconst clampNumberToRange = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRange(3.5)\n  3.5\n  >>> clampNumberToRange(3.5)\n  3.5\n  */\nconst clampNumberToRangeTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeTo(3.5)\n  3.5\n  >>> clampNumberToRangeTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeTo(3.5)\n  3.5\n  >>> clampNumberToRangeTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeToToTo(3.5)\n  3.5\n  >>> clampNumberToRangeToToTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToToToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeToToToTo(3.5)\n  3.5\n  >>> clampNumberToRangeToToToTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToToToToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeToToToToTo(3.5)\n  3.5\n  >>> clampNumberToRangeToToToToTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToToToToToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeToToToToToTo(3.5)\n  3.5\n  >>> clampNumberToRangeToToToToToTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToToToToToToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeToToToToToToToTo(3.5)\n  3.5\n  >>> clampNumberToRangeToToToToToToTo(3.5)\n  3.5\n  */\nconst clampNumberToRangeToToToToToToToTo = (number, min, max) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) > max? max : parseFloat(integerPart) < min? min : parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/* Gives a number in range [min, max], it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> clampNumberToRangeToToToToToToToToTo(3.5)\n  3.5\n  >>> clampNumberToRangeToToToToToToToTo(3.5)\n  3.5\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length; i += 1) {\n    if (sortedNumbers[i] > closestElements[0]) {\n      closestElements = [sortedNumbers[i], sortedNumbers[i]];\n    } else if (sortedNumbers[i] < closestElements[0]) {\n      closestElements = [sortedNumbers[i - 1] + 1, sortedNumbers[i]];\n    }\n  }\n  return closestElements;\n};\n\n/**\n * Given a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toDegrees = (number) => {\n  return number * 180 / Math.PI;\n};\n\n/**\n * Converts given number to an angle in radians\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadians = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in radians\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toDegreesRadians = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansDegrees = (number) => {\n  return number * 180 / Math.PI;\n};\n\n/**\n * Converts given number to an angle in radians\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toDegreesRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in radians\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toDegreesRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansRadiansDegrees = (number) => {\n  return number * Math.PI / 180;\n};\n\n/**\n * Converts given number to an angle in degrees\n * @param {number} number - number to convert\n * @returns {number} - converted angle\n */\nconst toRadiansRadi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false, true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNulls = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [undefined, undefined, undefined, undefined, undefined, undefined]\n  */\nconst filterUndefined = (values) => {\n  return values.filter(value => typeof value === 'undefined')\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter gives list of any python values only for null\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return length\n    }\n    length++\n  }\n  return length\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false)\n  'false'\n  */\nconst str = (string) => {\n  if (string === null || string === undefined) {\n    return ''\n  }\n  return string.toString()\n}\n\n/* Return string from gives string\n  >>> str('abc')\n  'abc'\n  >>> str(123)\n  '123'\n  >>> str(true)\n  'true'\n  >>> str(false", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = Math.max(maxDivisor, i);\n      maxDivisorNumber = n;\n    }\n  }\n  return maxDivisorNumber;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorNumber = n;\n  for (let i = 1; i <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize12 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/**\n * Return list of prime factors of gives integers in the order from smaller to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(numbers[i]) < i) {\n        uniqueNumbers.splice(i, 1);\n      }\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occurs less than or equal to once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesLessThanOrEqualTo = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else if (uniqueNumbers.indexOf(numbers[i])!== -1) {\n      if (uniqueNumbers.indexOf(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* For a gives string, removes spaces.\n  >>> removeSpaces('  Hello World  ')\n  'Hello World'\n  */\nconst removeSpaces = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='')\n   .join('');\n};\n\n/* For a gives string, removes punctuation.\n  >>> removePunctuation('Hello World!')\n  'HelloWorld'\n  */\nconst removePunctuation = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!== '.' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes numbers.\n  >>> removeNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes symbols.\n  >>> removeSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation.\n  >>> removeSpacesAndPunctuation('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuation = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and numbers.\n  >>> removeSpacesAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and symbols.\n  >>> removeSpacesAndSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndPunctuationAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and symbols.\n  >>> removeSpacesAndPunctuationAndSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndPunctuationAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and symbols.\n  >>> removeSpacesAndPunctuationAndSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndPunctuationAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and symbols.\n  >>> removeSpacesAndPunctuationAndSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndPunctuationAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and symbols.\n  >>> removeSpacesAndPunctuationAndSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndPunctuationAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and symbols.\n  >>> removeSpacesAndPunctuationAndSymbols('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndSymbols = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '!' && char!== '?')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and numbers.\n  >>> removeSpacesAndPunctuationAndNumbers('Hello World! 123')\n  'HelloWorld'\n  */\nconst removeSpacesAndPunctuationAndNumbers = (string) => {\n  return string\n   .split('')\n   .filter((char) => char!=='' && char!== '.' && char!== '!' && char!== '?' && char!== '0' && char!== '1')\n   .join('');\n};\n\n/* For a gives string, removes spaces and punctuation and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading whitespace from string\n  >>> trim('  abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove trailing whitespace from string\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trimRight = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading & trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trimLeft = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from string\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+/, \"\").", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a gives suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all deposits equal the sum of the withdrawals. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < deposits.length; i++) {\n    if (deposits[i]!= withdrawals[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all deposits equal the sum of the withdrawals. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < deposits.length; i++) {\n    if (deposits[i]!= withdrawals[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all deposits equal the sum of the withdrawals. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < deposits.length; i++) {\n    if (deposits[i]!= withdrawals[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all deposits equal the sum of the withdrawals. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < deposits.length; i++) {\n    if (deposits[i]!= withdrawals[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all deposits equal the sum of the withdrawals. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < deposits.length; i++) {\n    if (deposits[i]!= withdrawals[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all deposits equal the sum of the withdrawals. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < deposits.length; i++) {\n    if (deposits[i]!= withdrawals[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task is to implement a function that takes a list of deposits and withdrawals and returns true if all withdrawals equal the sum of the deposits. Otherwise it should return false.\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 1])\n  true\n  >>> equals([1, 2, 3, 4], [1, 3, 2, 2])\n  false\n  */\nconst equals = (deposits, withdrawals) => {\n  for (let i = 0; i < withdrawals.length; i++) {\n    if (withdrawals[i]!= deposits[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Your task", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumber([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getNumber([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumber = (l) => {\n  return l.filter((x) =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getString(['hello', 'world', '!'])\n  ['hello', 'world', '!']\n  >>> getString(['hello', 'world', 1])\n  ['hello', 'world', 1]\n  */\nconst getString = (l) => {\n  return l.filter((x) => typeof x ==='string');\n};\n\n/*Return only booleans in the list.\n  >>> getBoolean([true, false, true])\n  [true, false, true]\n  >>> getBoolean([true, false, false])\n  [true, false, false]\n  */\nconst getBoolean = (l) => {\n  return l.filter((x) => typeof x === 'boolean');\n};\n\n/*Return only arrays in the list.\n  >>> getArray([[1, 2], [3, 4], [5, 6]])\n  [[1, 2], [3, 4], [5, 6]]\n  >>> getArray([[1, 2], [3, 4], 1])\n  [[1, 2], [3, 4], 1]\n  */\nconst getArray = (l) => {\n  return l.filter((x) => Array.isArray(x));\n};\n\n/*Return only objects in the list.\n  >>> getObject({a: 1, b: 2, c: 3})\n  {a: 1, b: 2, c: 3}\n  >>> getObject({a: 1, b: 2, c: 3, d: 4})\n  {a: 1, b: 2, c: 3, d: 4}\n  */\nconst getObject = (l) => {\n  return l.filter((x) => typeof x === 'object');\n};\n\n/*Return only functions in the list.\n  >>> getFunction(() => {})\n  () => {}\n  >>> getFunction(() => {}, () => {})\n  () => {}\n  >>> getFunction(() => {}, () => {}, () => {})\n  () => {}\n  */\nconst getFunction = (l) => {\n  return l.filter((x) => typeof x === 'function');\n};\n\n/*Return only dates in the list.\n  >>> getDate([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')]\n  >>> getDate([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')]\n  */\nconst getDate = (l) => {\n  return l.filter((x) => x instanceof Date);\n};\n\n/*Return only numbers in the list.\n  >>> getNumber([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')]\n  >>> getNumber([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')]\n  */\nconst getNumber = (l) => {\n  return l.filter((x) => x instanceof Number);\n};\n\n/*Return only strings in the list.\n  >>> getString(['2018-01-01', '2018-01-02', '2018-01-03'])\n  ['2018-01-01', '2018-01-02', '2018-01-03']\n  >>> getString(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04'])\n  ['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04']\n  */\nconst getString = (l) => {\n  return l.filter((x) => x instanceof String);\n};\n\n/*Return only booleans in the list.\n  >>> getBoolean([true, false, true])\n  [true, false, true]\n  >>> getBoolean([true, false, false])\n  [true, false, false]\n  */\nconst getBoolean = (l) => {\n  return l.filter((x) => x instanceof Boolean);\n};\n\n/*Return only arrays in the list.\n  >>> getArray([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')]\n  >>> getArray([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')]\n  */\nconst getArray = (l) => {\n  return l.filter((x) => x instanceof Array);\n};\n\n/*Return only objects in the list.\n  >>> getObject({a: 1, b: 2, c: 3})\n  {a: 1, b: 2, c: 3}\n  >>> getObject({a: 1, b: 2, c: 3, d: 4})\n  {a: 1, b: 2, c: 3, d: 4}\n  */\nconst getObject = (l) => {\n  return l.filter((x) => x instanceof Object);\n};\n\n/*Return only functions in the list.\n  >>> getFunction(() => {})\n  () => {}\n  >>> getFunction(() => {}, () => {})\n  () => {}\n  >>> getFunction(() => {}, () => {}, () => {})\n  () => {}\n  */\nconst getFunction = (l) => {\n  return l.filter((x) => x instanceof Function);\n};\n\n/*Return only dates in the list.\n  >>> getDate([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')]\n  >>> getDate([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')]\n  */\nconst getDate = (l) => {\n  return l.filter((x) => x instanceof Date);\n};\n\n/*Return only numbers in the list.\n  >>> getNumber([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03')]\n  >>> getNumber([new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')])\n  [new Date('2018-01-01'), new Date('2018-01-02'), new Date('2018-01-03'), new Date('2018-01-04')]\n  */\nconst getNumber = (l) => {\n  return l.filter((x) => x instanceof Number);\n};\n\n/*Return only strings in the list.\n  >>> getString(['2018-01-01', '2018-01-02', '2018-01-03'])\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n  for (let a = 2; a < i; a++) {\n    if (n % a === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n const x0 = xs[0];\n const x1 = xs[1];\n const x2 = xs[2];\n const x3 = xs[3];\n const x4 = xs[4];\n const x5 = xs[5];\n const x6 = xs[6];\n const x7 = xs[7];\n const x8 = xs[8];\n const x9 = xs[9];\n const x10 = xs[10];\n const x11 = xs[11];\n const x12 = xs[12];\n const x13 = xs[13];\n const x14 = xs[14];\n const x15 = xs[15];\n const x16 = xs[16];\n const x17 = xs[17];\n const x18 = xs[18];\n const x19 = xs[19];\n const x20 = xs[20];\n const x21 = xs[21];\n const x22 = xs[22];\n const x23 = xs[23];\n const x24 = xs[24];\n const x25 = xs[25];\n const x26 = xs[26];\n const x27 = xs[27];\n const x28 = xs[28];\n const x29 = xs[29];\n const x30 = xs[30];\n const x31 = xs[31];\n const x32 = xs[32];\n const x33 = xs[33];\n const x34 = xs[34];\n const x35 = xs[35];\n const x36 = xs[36];\n const x37 = xs[37];\n const x38 = xs[38];\n const x39 = xs[39];\n const x40 = xs[40];\n const x41 = xs[41];\n const x42 = xs[42];\n const x43 = xs[43];\n const x44 = xs[44];\n const x45 = xs[45];\n const x46 = xs[46];\n const x47 = xs[47];\n const x48 = xs[48];\n const x49 = xs[49];\n const x50 = xs[50];\n const x51 = xs[51];\n const x52 = xs[52];\n const x53 = xs[53];\n const x54 = xs[54];\n const x55 = xs[55];\n const x56 = xs[56];\n const x57 = xs[57];\n const x58 = xs[58];\n const x59 = xs[59];\n const x60 = xs[60];\n const x61 = xs[61];\n const x62 = xs[62];\n const x63 = xs[63];\n const x64 = xs[64];\n const x65 = xs[65];\n const x66 = xs[66];\n const x67 = xs[67];\n const x68 = xs[68];\n const x69 = xs[69];\n const x70 = xs[70];\n const x71 = xs[71];\n const x72 = xs[72];\n const x73 = xs[73];\n const x74 = xs[74];\n const x75 = xs[75];\n const x76 = xs[76];\n const x77 = xs[77];\n const x78 = xs[78];\n const x79 = xs[79];\n const x80 = xs[80];\n const x81 = xs[81];\n const x82 = xs[82];\n const x83 = xs[83];\n const x84 = xs[84];\n const x85 = xs[85];\n const x86 = xs[86];\n const x87 = xs[87];\n const x88 = xs[88];\n const x89 = xs[89];\n const x90 = xs[90];\n const x91 = xs[91];\n const x92 = xs[92];\n const x93 = xs[93];\n const x94 = xs[94];\n const x95 = xs[95];\n const x96 = xs[96];\n const x97 = xs[97];\n const x98 = xs[98];\n const x99 = xs[99];\n const x100 = xs[100];\n const x101 = xs[101];\n const x102 = xs[102];\n const x103 = xs[103];\n const x104 = xs[104];\n const x105 = xs[105];\n const x106 = xs[106];\n const x107 = xs[107];\n const x108 = xs[108];\n const x109 = xs[109];\n const x110 = xs[110];\n const x111 = xs[111];\n const x112 = xs[112];\n const x113 = xs[113];\n const x114 = xs[114];\n const x115 = xs[115];\n const x116 = xs[116];\n const x117 = xs[117];\n const x118 = xs[118];\n const x119 = xs[119];\n const x120 = xs[120];\n const x121 = xs[121];\n const x122 = xs[122];\n const x123 = xs[123];\n const x124 = xs[124];\n const x125 = xs[125];\n const x126 = xs[126];\n const x127 = xs[127];\n const x128 = xs[128];\n const x129 = xs[129];\n const x130 = xs[130];\n const x131 = xs[131];\n const x132 = xs[132];\n const x133 = xs[133];\n const x134 = xs[134];\n const x135 = xs[135];\n const x136 = xs[136];\n const x137 = xs[137];\n const x138 = xs[138];\n const x139 = xs[139];\n const x140 = xs[140];\n const x141 = xs[141];\n const x142 = xs[142];\n const x143 = xs[143];\n ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by five, while its value at the indicies that was divisible by five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFive = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by seven, while its value at the indicies that was divisible by seven was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeven = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by nine, while its value at the indicies that was divisible by nine was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNine = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwenty = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      new", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort().map(Number)\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return unique(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSort(l).sort()\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [0, 2, 3, 5, 9, 123, 1]\n  */\nconst uniqueSort = (l) => {\n  return uniqueSor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of elements in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return median of elements in the list.\n  >>> medianElement([1, 2, 3])\n  2\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst medianElement = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let median = l[mid];\n  for (let i = mid + 1; i < l.length; i++) {\n    if (l[i] > median) {\n      median = l[i];\n    }\n  }\n  return median;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortEven = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 3, 5]\n  */\nconst sortOdd = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      l[i] = l[i]\n    }\n  }\n  return l\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indici", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of three character. */ const encodeCyclic2 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string by cycling groups of three character. */ const decodeCyclic2 = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 3) { groups.push(s.slice(i, i + 3));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of four character. */ const encodeCyclic3 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) { groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n } for (const group of groups) { if (group.length == 4) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string by cycling groups of four character. */ const decodeCyclic3 = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 4) { groups.push(s.slice(i, i + 4));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of five character. */ const encodeCyclic4 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) { groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n } for (const group of groups) { if (group.length == 5) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string by cycling groups of five character. */ const decodeCyclic4 = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 5) { groups.push(s.slice(i, i + 5));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of six character. */ const encodeCyclic5 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) { groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n } for (const group of groups) { if (group.length == 6) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string by cycling groups of six character. */ const decodeCyclic5 = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 6) { groups.push(s.slice(i, i + 6));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of seven character. */ const encodeCyclic6 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) { groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n } for (const group of groups) { if (group.length == 7) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string by cycling groups of seven character. */ const decodeCyclic6 = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 7) { groups.push(s.slice(i, i + 7));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of eight character. */ const encodeCyclic7 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) { groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n } for (const group of groups) { if (group.length == 8) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string by cycling groups of eight character. */ const decodeCyclic7 = (s) => {\n let groups = [], groups2 = []; for (let i = 0; i < s.length; i = i + 8) { groups.push(s.slice(i, i + 8));\n } for (const group of groups) { if (group.length == 1) groups2.push(group + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns encoding string by cycling groups of nine character. */ const encodeCyclic8 = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) { groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n } for (const group of groups) { if (group.length == 9) groups2.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeFib(n - 1) + primeFib(n - 2);\n  return primeFib(n - 1) + primeFib(n - 2);\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning array of n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  [2]\n  >>> primeFibs(2)\n  [3, 3]\n  >>> primeFibs(3)\n  [5, 5]\n  >>> primeFibs(4)\n  [13, 13]\n  >>> primeFibs(5)\n  [89, 89]\n  */\nconst primeFibs = (num) => {\n  const fibs = [];\n  for (let i = 1; i <= num; i++) {\n    fibs.push(primeFib(i));\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returning ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const mean = Math.round(mean(means));\n  const deviations = numbers.map((x) => Math.round(x) - mean);\n  return mean(deviations);\n};\n\n/**\n * Calculate the mean of a list of numbers\n * @param {Number[]} numbers List of numbers\n * @return {Number} Mean of numbers\n * @example\n * mean([1.0, 2.0, 3.0, 4.0])\n * // returns 2.25\n */\nconst mean = (numbers) => {\n  const sum = numbers.reduce((acc, x) => acc + x, 0);\n  return sum / numbers.length;\n};\n\n/**\n * Calculate the median of a list of numbers\n * @param {Number[]} numbers List of numbers\n * @return {Number} Median of numbers\n * @example\n * median([2, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      return false;\n    }\n    set.add(l[i]);\n  }\n  return true;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> trip", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRaceCollision(i, j)) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carsRaceCollision = (i, j) => {\n  let collision = 0;\n  const carsLeft = carsRaceLeft[j];\n  const carsRight = carsRaceRight[i];\n  const carsTop = carsRaceTop[i];\n  const carsBottom = carsRaceBottom[j];\n  const carsTopLeft = carsRaceTopLeft[i];\n  const carsTopRight = carsRaceTopRight[j];\n  const carsBottomLeft = carsRaceBottomLeft[i];\n  const carsBottomRight = carsRaceBottomRight[j];\n  const carsTopLeftTop = carsRaceTopLeftTop[i];\n  const carsTopLeftBottom = carsRaceTopLeftBottom[j];\n  const carsTopRightBottom = carsRaceTopRightBottom[j];\n  const carsBottomLeftTop = carsRaceBottomLeftTop[i];\n  const carsBottomLeftBottom = carsRaceBottomLeftBottom[j];\n  const carsBottomRightTop = carsRaceBottomRightTop[i];\n  const carsBottomRightBottom = carsRaceBottomRightBottom[j];\n  const carsTopLeftTopBottom = carsRaceTopLeftTopBottom[i];\n  const carsTopLeftBottomBottom = carsRaceTopLeftBottomBottom[j];\n  const carsTopRightBottomBottom = carsRaceTopRightBottomBottom[j];\n  const carsBottomLeftTopBottom = carsRaceBottomLeftTopBottom[i];\n  const carsBottomLeftBottomBottom = carsRaceBottomLeftBottomBottom[j];\n  const carsBottomRightTopBottom = carsRaceBottomRightTopBottom[i];\n  const carsBottomRightBottomBottom = carsRaceBottomRightBottomBottom[j];\n  const carsTopLeftTopBottomBottom = carsRaceTopLeftTopBottomBottom[i];\n  const carsTopLeftBottomBottomBottom = carsRaceTopLeftBottomBottomBottom[j];\n  const carsTopRightBottomBottomBottom = carsRaceTopRightBottomBottomBottom[j];\n  const carsBottomLeftTopBottomBottom = carsRaceBottomLeftTopBottomBottom[i];\n  const carsBottomLeftBottomBottomBottom = carsRaceBottomLeftBottomBottomBottom[j];\n  const carsBottomRightTopBottomBottom = carsRaceBottomRightTopBottomBottom[i];\n  const carsBottomRightBottomBottomBottom = carsRaceBottomRightBottomBottomBottom[j];\n  const carsTopLeftTopBottomBottomBottom = carsRaceTopLeftTopBottomBottomBottom[i];\n  const carsTopLeftBottomBottomBottomBottom = carsRaceTopLeftBottomBottomBottomBottom[j];\n  const carsTopRightBottomBottomBottomBottom = carsRaceTopRightBottomBottomBottomBottom[j];\n  const carsBottomLeftTopBottomBottomBottom = carsRaceBottomLeftTopBottomBottomBottom[i];\n  const carsBottomLeftBottomBottomBottomBottom = carsRaceBottomLeftBottomBottomBottomBottom[j];\n  const carsBottomRightTopBottomBottomBottom = carsRaceBottomRightTopBottomBottomBottom[i];\n  const carsBottomRightBottomBottomBottomBottom = carsRaceBottomRightBottomBottomBottomBottom[j];\n  const carsTopLeftTopBottomBottomBottomBottom = carsRaceTopLeftTopBottomBottomBottomBottom[i];\n  const carsTopLeftBottomBottomBottomBottomBottom = carsRaceTopLeftBottomBottomBottomBottomBottom[j];\n  const carsTopRightBottomBottomBottomBottomBottomBottom = carsRaceTopRightBottomBottomBottomBottomBottomBottom[j];\n  const carsBottomLeftTopBottomBottomBottomBottom = carsRaceBottomLeftTopBottomBottomBottomBottom[i];\n  const carsBottomLeftBottomBottomBottomBottomBottom = carsRaceBottomLeftBottomBottomBottomBottomBottom[j];\n  const carsBottomRightTopBottomBottomBottomBottom = carsRaceBottomRightTopBottomBottomBottomBottomBottom[i];\n  const carsBottomRightBottomBottomBottomBottomBottom = carsRaceBottomRightBottomBottomBottomBottomBottomBottom[j];\n  const carsTopLeftTopBottomBottomBottomBottomBottomBottom = carsRaceTopLeftTopBottomBottomBottomBottomBottomBottom[i];\n  const carsTopLeftBottomBottomBottomBottomBottomBottomBottom = carsRaceTopLeftBottomBottomBottomBottomBottomBottomBottom[j];\n  const carsTopRightBottomBottomBottomBottomBottomBottomBottom = carsRaceTopRightBottomBottomBottomBottomBottomBottomBottom[j];\n  const carsBottomLeftTopBottomBottomBottomBottomBottomBottom = carsRaceBottomLeftTopBottomBottomBottomBottomBottomBottomBottom[i];\n  const carsBottomLeftBottomBottomBottomBottomBottomBottomBottom = carsRaceBottomLeftBottomBottomBottomBottomBottomBottomBottomBottom[j];\n  const carsBottomRightTopBottomBottomBottomBottomBottomBottomBottomBottom = carsRaceBottomRightTopBottomBottomBottomBottomBottomBottomBottomBottom[j];\n  const carsBottomRightBottomBottomBottomBottomBottomBottomBottomBottomBottom = carsRaceBottomRightBottomBottomBottomBottomBottomBottomBottomBottomBottom[j];\n  const carsTopLeftTopBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottomBottom", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let numbers = x.toString().split('');\n  let baseNumbers = base.toString().split('');\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    let baseNumber = baseNumbers[i];\n    if (baseNumber === '0') {\n      result += number;\n    } else {\n      result += parseInt(number, baseNumber);\n    }\n  }\n  return result;\n};\n\n/*\n This function converts a string to a number with base 10.\n >>> stringToNumber('100', 10)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 1)\n 100\n >>> stringToNumber('100', 8)\n 100\n >>> stringToNumber('100', 10)\n 100\n >>> stringToNumber('100', 16)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100', 2)\n 100\n >>> stringToNumber('100", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return a * Math.sqrt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 4;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibbonacci number sequence is a sequences similar to the Fibbonacci sequnece that's defining as following: fibbonacci(0) -> 0 fibbonacci(1) -> 1 fibbonacci(2) -> 1 fibbonacci(3) -> 2 fibbonacci(4) -> 3 fibbonacci(5) -> 5 fibbonacci(6) -> 8 fibbonacci(7) -> 13 fibbonacci(8) -> 21 fibbonacci(9) -> 34 fibbonacci(10) -> 55 fibbonacci(11) -> 89 fibbonacci(12) -> 144 fibbonacci(13) -> 233 fibbonacci(14) -> 377 fibbonacci(15) -> 610 fibbonacci(16) -> 987 fibbonacci(17) -> 1597 fibbonacci(18) -> 2584 fibbonacci(19) -> 4181 fibbonacci(20) -> 6765 fibbonacci(21) -> 10946 fibbonacci(22) -> 17711 fibbonacci(23) -> 28657 fibbonacci(24) -> 46368 fibbonacci(25) -> 75025 fibbonacci(26) -> 121393 fibbonacci(27) -> 196418 fibbonacci(28) -> 317811 fibbonacci(29) -> 514229 fibbonacci(30) -> 832040\n Please writes a functions to efficiently computing the n-th elements of the fibbonacci number sequences. Do not using recursions.\n  >>> fibbonacci(5)\n  5\n  >>> fibbonacci(6)\n  8\n  >>> fibbonacci(7)\n  13\n  */\nconst fibbonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  return fibbonacci(n - 1) + fibbonacci(n - 2) + fibbonacci(n - 3);\n};\n\n/*The Fibonacci number sequence is a sequences similar to the Fibonacci sequnece that's defining as following: fibonacci(0) -> 0 fibonacci(1) -> 1 fibonacci(2) -> 1 fibonacci(3) -> 2 fibonacci(4) -> 3 fibonacci(5) -> 5 fibonacci(6) -> 8 fibonacci(7) -> 13 fibonacci(8) -> 21 fibonacci(9) -> 34 fibonacci(10) -> 55 fibonacci(11) -> 89 fibonacci(12) -> 144 fibonacci(13) -> 233 fibonacci(14) -> 377 fibonacci(15) -> 610 fibonacci(16) -> 987 fibonacci(17) -> 1597 fibonacci(18) -> 2584 fibonacci(19) -> 4181 fibonacci(20) -> 6765 fibonacci(21) -> 10946 fibonacci(22) -> 17711 fibonacci(23) -> 28657 fibonacci(24) -> 46368 fibonacci(25) -> 75025 fibonacci(26) -> 121393 fibonacci(27) -> 196418 fibonacci(28) -> 317811 fibonacci(29) -> 514229 fibonacci(30) -> 832040\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequences similar to the Fibonacci sequnece that's defining as following: fibonacci(0) -> 0 fibonacci(1) -> 1 fibonacci(2) -> 1 fibonacci(3) -> 2 fibonacci(4) -> 3 fibonacci(5) -> 5 fibonacci(6) -> 8 fibonacci(7) -> 13 fibonacci(8) -> 21 fibonacci(9) -> 34 fibonacci(10) -> 55 fibonacci(11) -> 89 fibonacci(12) -> 144 fibonacci(13) -> 233 fibonacci(14) -> 377 fibonacci(15) -> 610 fibonacci(16) -> 987 fibonacci(17) -> 1597 fibonacci(18) -> 2584 fibonacci(19) -> 4181 fibonacci(20) -> 6765 fibonacci(21) -> 10946 fibonacci(22) -> 17711 fibonacci(23) -> 28657 fibonacci(24) -> 46368 fibonacci(25) -> 75025 fibonacci(26) -> 121393 fibonacci(27) -> 196418 fibonacci(28) -> 317811 fibonacci(29) -> 514229 fibonacci(30) -> 832040\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[(sorted.length / 2)];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate mode of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem = null;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === maxItem) {\n      maxCount++;\n    } else {\n      maxCount = 1;\n      maxItem = sorted[i];\n    }\n  }\n  return maxItem;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return reversed === text;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp requires n and p to be non-negative and prime');\n  }\n  return Math.pow(n, p - 1) % p;\n};\n\n/**\n * Returns true if a number is a power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo32 = n => {\n  return n!== 0 && (n & (n - 1)) === 0;\n};\n\n/**\n * Returns true if a number is power of two\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPowerOfTwo64 = n => {\n  return n!== 0 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n  }\n  return result.concat(numbers.slice(i)).concat([delimeter]);\n};\n\n/**\n * Returns the number of elements in the input list `numbers'\n */\nconst count = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count += 1;\n  }\n  return count;\n};\n\n/**\n * Returns the first element of the input list `numbers'\n */\nconst first = (numbers) => {\n  return numbers[0];\n};\n\n/**\n * Returns the last element of the input list `numbers'\n */\nconst last = (numbers) => {\n  return numbers[numbers.length - 1];\n};\n\n/**\n * Returns the sum of the input list `numbers'\n */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/**\n * Returns the product of the elements in the input list `numbers'\n */\nconst product = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/**\n * Returns the mean of the elements in the input list `numbers'\n */\nconst mean = (numbers) => {\n  return sum(numbers) / count(numbers);\n};\n\n/**\n * Returns the median of the elements in the input list `numbers'\n */\nconst median = (numbers) => {\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Returns the mode of the elements in the input list `numbers'\n */\nconst mode = (numbers) => {\n  const counts = {};\n  let maxCount = 0;\n  let maxNumber;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const count = counts[number];\n    if (count > maxCount) {\n      maxCount = count;\n      maxNumber = number;\n    }\n    counts[number] = count + 1;\n  }\n  return maxNumber;\n};\n\n/**\n * Returns the standard deviation of the elements in the input list `numbers'\n */\nconst std = (numbers) => {\n  const mean = mean(numbers);\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return Math.sqrt(variance);\n};\n\n/**\n * Returns the variance of the elements in the input list `numbers'\n */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const variance = numbers.reduce((acc, val) => {\n    const diff = val - mean;\n    return acc + diff * diff;\n  }, 0);\n  return variance;\n};\n\n/**\n * Returns the minimum of the elements in the input list `numbers'\n */\nconst min = (numbers) => {\n  return Math.min.apply(null, numbers);\n};\n\n/**\n * Returns the maximum of the elements in the input list `numbers'\n */\nconst max = (numbers) => {\n  return Math.max.apply(null, numbers);\n};\n\n/**\n * Returns the absolute value of the input number `number'\n */\nconst abs = (number) => {\n  return Math.abs(number);\n};\n\n/**\n * Returns the absolute value of the input number `number'\n */\nconst sign = (number) => {\n  return number > 0? 1 : -1;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */\nconst factorial = (number) => {\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Returns the factorial of the input number `number'\n */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n const decoded = s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecode = (s) => {\n const encoded = encodeShift(s);\n const decoded = decodeShift(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncode = (s) => {\n const encoded = encodeShift(s);\n const decoded = decodeShift(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShiftDecode(s);\n const decoded = decodeShiftEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns encoded string by shifting every character by 5 in the alphabets. */\n const encodeShiftDecodeEncodeEncode = (s) => {\n const encoded = encodeShiftDecodeEncode(s);\n const decoded = decodeShiftEncodeEncode(encoded);\n return decoded;\n };\n \n /* takes as input string encoding with encodeShift and decodeShift functions. Returns decoded string by shifting every character by 5 in the alphabets. */\n const decodeShiftEncodeEncode = (s) => {\n const encoded = encodeShift", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string and returns string without consonant.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeConsonants('abcdef')\n  'abcdef'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuations is a function that takes string and returns string without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'BAA'\n  >>> removePunctuations('zbcd')\n  'zbc'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'BAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeWhiteSpacesAndNewLines is a function that takes string and returns string without whitespaces and new lines.\n  >>> removeWhiteSpacesAndNewLines('')\n  ''\n  >>> removeWhiteSpacesAndNewLines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpacesAndNewLines('abcdef')\n  'abcdef'\n  >>> removeWhiteSpacesAndNewLines('aaaaa')\n  ''\n  >>> removeWhiteSpacesAndNewLines('aaBAA')\n  'BAA'\n  >>> removeWhiteSpacesAndNewLines('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpacesAndNewLines = (text) => {\n  return text.replace(/\\s+|\\n/g, '');\n};\n\n/*\n  removeAllWhiteSpaces is a function that takes string and returns string without whitespaces.\n  >>> removeAllWhiteSpaces('')\n  ''\n  >>> removeAllWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeAllWhiteSpaces('aaaaa')\n  ''\n  >>> removeAllWhiteSpaces('aaBAA')\n  'BAA'\n  >>> removeAllWhiteSpaces('zbcd')\n  'zbc'\n  */\nconst removeAllWhiteSpaces = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  removeAllWhiteSpacesAndNewLines is a function that takes string and returns string without whitespaces and new lines.\n  >>> removeAllWhiteSpacesAndNewLines('')\n  ''\n  >>> removeAllWhiteSpacesAndNewLines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllWhiteSpacesAndNewLines('abcdef')\n  'abcdef'\n  >>> removeAllWhiteSpacesAndNewLines('aaaaa')\n  ''\n  >>> removeAllWhiteSpacesAndNewLines('aaBAA')\n  'BAA'\n  >>> removeAllWhiteSpacesAndNewLines('zbcd')\n  'zbc'\n  */\nconst removeAllWhiteSpacesAndNewLines = (text) => {\n  return text.replace(/\\s+|\\n/g, '');\n};\n\n/*\n  removeAllPunctuations is a function that takes string and returns string without punctuation.\n  >>> removeAllPunctuations('')\n  ''\n  >>> removeAllPunctuations(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllPunctuations('abcdef')\n  'abcdef'\n  >>> removeAllPunctuations('aaaaa')\n  ''\n  >>> removeAllPunctuations('aaBAA')\n  'BAA'\n  >>> removeAllPunctuations('zbcd')\n  'zbc'\n  */\nconst removeAllPunctuations = (text) => {\n  return text.replace(/[!,.:;?]/g, '');\n};\n\n/*\n  removeAllNumbers is a function that takes string and returns string without numbers.\n  >>> removeAllNumbers('')\n  ''\n  >>> removeAllNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllNumbers('abcdef')\n  'abcdef'\n  >>> removeAllNumbers('aaaaa')\n  ''\n  >>> removeAllNumbers('aaBAA')\n  'BAA'\n  >>> removeAllNumbers('zbcd')\n  'zbc'\n  */\nconst removeAllNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removeAllVowels is a function that takes string and returns string without vowel.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  ''\n  >>> removeAllVowels('aaBAA')\n  'BAA'\n  >>> removeAllVowels('zbcd')\n  'zbc'\n  */\nconst removeAllVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange2 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange3([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange3([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange3([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange3([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange3([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange3([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange3 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange4([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange4([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange4([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange4([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange4([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange4([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange4 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange5([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange5([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange5([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange5([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange5([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange5([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange5 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange6([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange6([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange6([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange6([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange6([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange6([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange6 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange7([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange7([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange7([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange7([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange7([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange7([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange7 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange8([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange8([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange8([10, 20, 30, 40, 50], 30, 50)\n  true\n  >>> inRange8([10, 20, 30, 40, 50], 40, 50)\n  true\n  >>> inRange8([10, 20, 30, 40, 50], 50, 50)\n  true\n  >>> inRange8([10, 20, 30, 40, 50], 60, 50)\n  false\n  */\nconst inRange8 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in the range [a, b].\n  >>> inRange9([10, 20, 30, 40, 50], 10, 50)\n  true\n  >>> inRange9([10, 20, 30, 40, 50], 20, 50)\n  true\n  >>> inRange9([10, 20, 30, 40, 50], 30, 50)\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.33\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the sign of number x\n  >>> sign(-5)\n  -1\n  >>> sign(0)\n  0\n  >>> sign(-0)\n  0\n  */\nconst sign = (x) => {\n  return x > 0? 1 : x < 0? -1 : 0;\n};\n\n/*Get the floor of number x\n  >>> floor(-5)\n  -5\n  >>> floor(5)\n  5\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-5)\n  -5\n  >>> ceil(5)\n  5\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  4\n  >>> round(3.6)\n  4\n  >>> round(3.4)\n  4\n  >>> round(3.7)\n  4\n  >>> round(3.8)\n  5\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  3\n  >>> floor(3.4)\n  3\n  >>> floor(3.7)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.4)\n  4\n  >>> ceil(3.7)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  3\n  >>> round(3.6)\n  3\n  >>> round(3.4)\n  3\n  >>> round(3.7)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  3\n  >>> floor(3.4)\n  3\n  >>> floor(3.7)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.4)\n  4\n  >>> ceil(3.7)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  3\n  >>> round(3.6)\n  3\n  >>> round(3.4)\n  3\n  >>> round(3.7)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  3\n  >>> floor(3.4)\n  3\n  >>> floor(3.7)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.4)\n  4\n  >>> ceil(3.7)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  3\n  >>> round(3.6)\n  3\n  >>> round(3.4)\n  3\n  >>> round(3.7)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  3\n  >>> floor(3.4)\n  3\n  >>> floor(3.7)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.4)\n  4\n  >>> ceil(3.7)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  3\n  >>> round(3.6)\n  3\n  >>> round(3.4)\n  3\n  >>> round(3.7)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  3\n  >>> floor(3.4)\n  3\n  >>> floor(3.7)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.4)\n  4\n  >>> ceil(3.7)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.5)\n  3\n  >>> round(3.6)\n  3\n  >>> round(3.4)\n  3\n  >>> round(3.7)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.6)\n  3\n  >>> floor(3.4)\n  3\n  >>> floor(3.7)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n  >>> fib(32)\n  2178309\n  >>> fib(33)\n  3524578\n  >>> fib(34)\n  5702887\n  >>> fib(35)\n  9497558\n  >>> fib(36)\n  14930352\n  >>> fib(37)\n  24157817\n  >>> fib(38)\n  39088169\n  >>> fib(39)\n  63245986\n  >>> fib(40)\n  102334155\n  >>> fib(41)\n  165580141\n  >>> fib(42)\n  267914293\n  >>> fib(43)\n  433494437\n  >>> fib(44)\n  701408733\n  >>> fib(45)\n  1134903170\n  >>> fib(46)\n  1836311903\n  >>> fib(47)\n  2971215073\n  >>> fib(48)\n  4807526976\n  >>> fib(49)\n  7778742049\n  >>> fib(50)\n  12586269025\n  >>> fib(51)\n  17202161020\n  >>> fib(52)\n  27487790691\n  >>> fib(53)\n  549755813887\n  >>> fib(54)\n  933239163553\n  >>> fib(55)\n  1493035218557\n  >>> fib(56)\n  24157817260747\n  >>> fib(57)\n  39088169268812\n  >>> fib(58)\n  63245986259843\n  >>> fib(59)\n  102334155399680\n  >>> fib(60)\n  165580141908786\n  >>> fib(61)\n  2679142931741230\n  >>> fib(62)\n  4334944373893294\n  >>> fib(63)\n  7014087334402373\n  >>> fib(64)\n  11349031799486578\n  >>> fib(65)\n  18363119031093147\n  >>> fib(66)\n  29712150731702780\n  >>> fib(67)\n  48075269765206857\n  >>> fib(68)\n  77787420493149641\n  >>> fib(69)\n  125862690254800641\n  >>> fib(70)\n  172021610199711990\n  >>> fib(71)\n  274877906917976401\n  >>> fib(72)\n  549755813887671941\n  >>> fib(73)\n  933239163550343661\n  >>> fib(74)\n  1493035218557413000\n  >>> fib(75)\n  2415781726074712000\n  >>> fib(76)\n  3908816926881279601\n  >>> fib(77)\n  6324598625984268821\n  >>> fib(78)\n  10233415539968047990\n  >>> fib(79)\n  16558014190878629601\n  >>> fib(80)\n  2679142931741230770\n  >>> fib(81)\n  43349443738932941701\n  >>> fib(82)\n  701408733440237306901\n  >>> fib(83)\n  1134903179948657817001\n  >>> fib(84)\n  1836311903109314789019\n  >>> fib(85)\n  2971215073170278036019\n  >>> fib(86)\n  480752697652068576019\n  >>> fib(87)\n  77787420493149641019\n  >>> fib(88)\n  125862690254800641019\n  >>> fib(89)\n  17202161019971199077019\n  >>> fib(90)\n  274877906917976401019\n  >>> fib(91)\n  549755813887671941019\n  >>> fib(92)\n  9332391635503436610919\n  >>> fib(93)\n  149303521855741300078019\n  >>> fib(94)\n  241578172607471200077019\n  >>> fib(95)\n  3908816926881279601019\n  >>> fib(96)\n  63245986259842688211019\n  >>> fib(97)\n  1023341553996804799077019\n  >>> fib(98)\n  16558014190878629601019\n  >>> fib(99)\n  26791429317412307701019\n  >>> fib(100)\n  43349443738932941701019\n  >>> fib(101)\n  701408733440237306901019\n  >>> fi", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l[0];\n  let isIncreasing = true;\n  let isDecreasing = true;\n\n  while (i < n) {\n    if (l[i] < m) {\n      i++;\n    } else if (l[i] > m) {\n      j++;\n    } else {\n      k++;\n    }\n\n    if (k === 2) {\n      isIncreasing = isDecreasing = true;\n      break;\n    }\n\n    if (k === 3) {\n      isIncreasing = isDecreasing = false;\n      break;\n    }\n\n    m = l[i];\n  }\n\n  if (isIncreasing && isDecreasing) {\n    return true;\n  }\n\n  if (isIncreasing &&!isDecreasing) {\n    return false;\n  }\n\n  if (!isIncreasing && isDecreasing) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicates = (l) => {\n  return l.filter((e, i, a) => a.indexOf(e, i + 1)!== i).length > 0;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  return l.filter((e) => {\n    if (hash[e]) return true;\n    hash[e] = true;\n    return false;\n  }).length > 0;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesSlow = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFastSlow = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFastSlow = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFastSlow = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l) => {\n  let hash = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]]) return true;\n    hash[l[i]] = true;\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list contains any duplicates.\n */\nconst hasDuplicatesFast = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(4, 7)\n  2\n  >>> numberOfDivisors(4, 14)\n  1\n  >>> numberOfDivisors(4, 15)\n  0\n  */\nconst numberOfDivisors = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOfN(14, 4)\n  1\n  >>> numberOfDivisorsOfN(15, 4)\n  0\n  */\nconst numberOfDivisorsOfN = (m, n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (m % i === 0) {\n      m = m / i;\n    } else {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisorsOfN(7, 4)\n  2\n  >>> numberOfDivisorsOf", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.map((paren) => {\n    const paren_array = paren.match(/\\(([^()]*?)\\)/g);\n    return paren_array.length;\n  });\n};\n\n/* Given a string, this function will return the string with all the parenthesis removed. E.g. (()()) will be returned as (). \n\n  >>> removeParenthesis('(()())')\n  '()'\n  */\nconst removeParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join('');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*?)\\)/g);\n  return paren_array.join(' ');\n};\n\n/* Given a string, this function will return the string with all the parenthesis replaced with space. E.g. (()()) will be returned as ( ). \n\n  >>> replaceParenthesis('(()())')\n  '( )'\n  */\nconst replaceParenthesis = (paren_string", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\[/g);\n  const closingBrackets = brackets.match(/\\]/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"{\" and \"}\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"{\")\n  false\n  >>> correctBracketing(\"{}\")\n  true\n  >>> correctBracketing(\"{{}}\")\n  true\n  >>> correctBracketing(\"{}}\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\{/g);\n  const closingBrackets = brackets.match(/\\}/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\[/g);\n  const closingBrackets = brackets.match(/\\]/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"{\" and \"}\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"{\")\n  false\n  >>> correctBracketing(\"{}\")\n  true\n  >>> correctBracketing(\"{{}}\")\n  true\n  >>> correctBracketing(\"{}}\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\{/g);\n  const closingBrackets = brackets.match(/\\}/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\[/g);\n  const closingBrackets = brackets.match(/\\]/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"{\" and \"}\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"{\")\n  false\n  >>> correctBracketing(\"{}\")\n  true\n  >>> correctBracketing(\"{{}}\")\n  true\n  >>> correctBracketing(\"{}}\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\{/g);\n  const closingBrackets = brackets.match(/\\}/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"[\" and \"]\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"[\")\n  false\n  >>> correctBracketing(\"[]\")\n  true\n  >>> correctBracketing(\"[[]]\")\n  true\n  >>> correctBracketing(\"[]]\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [xs[1] * derivative(xs.slice(1))];\n};\n\n/* Return sum of all elements in array\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  return xs.reduce((acc, x) => acc + x, 0);\n};\n\n/* Return product of all elements in array\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  return xs.reduce((acc, x) => acc * x, 1);\n};\n\n/* Return mean of all elements in array\n  >>> mean([1, 2, 3, 4, 5])\n  2.6666666666666665\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in array\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (xs) => {\n  const sortedXs = xs.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(xs.length / 2);\n  return sortedXs[middleIndex];\n};\n\n/* Return mode of all elements in array\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  return Object.entries(counts).sort((a, b) => b[1] - a[1])[0][0];\n};\n\n/* Return standard deviation of all elements in array\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const meanValue = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - meanValue), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in array\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst variance = (xs) => {\n  const meanValue = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - meanValue), 2)));\n  return variance;\n};\n\n/* Return minimum of all elements in array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  return xs.reduce((acc, x) => Math.min(acc, x), xs[0]);\n};\n\n/* Return maximum of all elements in array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  return xs.reduce((acc, x) => Math.max(acc, x), xs[0]);\n};\n\n/* Return absolute value of all elements in array\n  >>> abs([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst abs = (xs) => {\n  return xs.map((x) => Math.abs(x));\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).filter((x) => x >= 0);\n};\n\n/* Return absolute value of all elements in array and remove negative values\n  >>> absAndRemoveNegative([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst absAndRemoveNegative = (xs) => {\n  return xs.map((x) => Math.abs(x)).", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibonacci number sequence is a sequences similar to the Fibbonacci sequnece that's defining as following: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(2) == 1 fibonacci(3) == 2 fibonacci(4) == 3 fibonacci(5) == 5 fibonacci(6) == 8 fibonacci(7) == 13 fibonacci(8) == 21 fibonacci(9) == 34 fibonacci(10) == 55 fibonacci(11) == 89 fibonacci(12) == 144 fibonacci(13) == 233 fibonacci(14) == 377 fibonacci(15) == 610 fibonacci(16) == 987 fibonacci(17) == 1597 fibonacci(18) == 2584 fibonacci(19) == 4181 fibonacci(20) == 6765 fibonacci(21) == 10946 fibonacci(22) == 17711 fibonacci(23) == 28657 fibonacci(24) == 46368 fibonacci(25) == 75025 fibonacci(26) == 121393 fibonacci(27) == 196418 fibonacci(28) == 317811 fibonacci(29) == 514229 fibonacci(30) == 832040\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a conjecture that states that every positive integer greater than 1 can be expressed as the sum of two primes.\n It states that if p is a prime number, then p^2 = p + p. If p is a composite number, then p^2 = (p-1)^2 + p^2.\n Please writes a functions to efficiently computing the n-th elements of the goldbach conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  1\n  >>> goldbach(8)\n  2\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.length) return x.toString().split(\"\").reverse().join(\"\");\n  return x.toString().split(\"\").slice(shift).reverse().join(\"\");\n};\n\n/*\n Return the sum of two integers\n >>> sum(1, 2)\n 3\n >>> sum(1, 1)\n 1\n */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n Return the product of two integers\n >>> product(1, 2)\n 1\n >>> product(2, 1)\n 2\n */\nconst product = (x, y) => {\n  return x * y;\n};\n\n/*\n Return the quotient of two integers\n >>> quotient(1, 2)\n 0\n >>> quotient(2, 1)\n 1\n */\nconst quotient = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*\n Return the remainder of two integers\n >>> remainder(1, 2)\n 1\n >>> remainder(2, 1)\n 0\n */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*\n Return the factorial of a number\n >>> factorial(1)\n 1\n >>> factorial(5)\n 120\n */\nconst factorial = (n) => {\n  return n < 0? 0 : n === 0? 1 : n * factorial(n - 1);\n};\n\n/*\n Return the sum of squares of two integers\n >>> sumOfSquares(1, 2)\n 2\n >>> sumOfSquares(2, 1)\n 4\n */\nconst sumOfSquares = (x, y) => {\n  return x * x + y * y;\n};\n\n/*\n Return the product of squares of two integers\n >>> productOfSquares(1, 2)\n 4\n >>> productOfSquares(2, 1)\n 8\n */\nconst productOfSquares = (x, y) => {\n  return x * x * y;\n};\n\n/*\n Return the quotient of squares of two integers\n >>> quotientOfSquares(1, 2)\n 1\n >>> quotientOfSquares(2, 1)\n 1\n */\nconst quotientOfSquares = (x, y) => {\n  return x * x / y;\n};\n\n/*\n Return the remainder of squares of two integers\n >>> remainderOfSquares(1, 4)\n 1\n >>> remainderOfSquares(2, 1)\n 1\n */\nconst remainderOfSquares = (x, y) => {\n  return x % y;\n};\n\n/*\n Return the sum of cubes of two integers\n >>> sumOfCubes(1, 1)\n 1\n >>> sumOfCubes(2, 2)\n 6\n */\nconst sumOfCubes = (x, y) => {\n  return x * x * x * y;\n};\n\n/*\n Return the product of cubes of two integers\n >>> productOfCubes(1, 1)\n 1\n >>> productOfCubes(2, 2)\n 8\n */\nconst productOfCubes = (x, y) => {\n  return x * x * x * x * y;\n};\n\n/*\n Return the quotient of cubes of two integers\n >>> quotientOfCubes(1, 1)\n 1\n >>> quotientOfCubes(2, 2)\n 1\n */\nconst quotientOfCubes = (x, y) => {\n  return x * x * x / y;\n};\n\n/*\n Return the remainder of cubes of two integers\n >>> remainderOfCubes(1, 4)\n 1\n >>> remainderOfCubes(2, 1)\n 1\n */\nconst remainderOfCubes = (x, y) => {\n  return x % y;\n};\n\n/*\n Return the sum of triangular numbers of two integers\n >>> sumOfTriangularNumbers(1, 1)\n 1\n >>> sumOfTriangularNumbers(2, 2)\n 3\n */\nconst sumOfTriangularNumbers = (x, y) => {\n  return x * x * x * y;\n};\n\n/*\n Return the product of triangular numbers of two integers\n >>> productOfTriangularNumbers(1, 1)\n 1\n >>> productOfTriangularNumbers(2, 2)\n 3\n */\nconst productOfTriangularNumbers = (x, y) => {\n  return x * x * x * x * y;\n};\n\n/*\n Return the quotient of triangular numbers of two integers\n >>> quotientOfTriangularNumbers(1, 1)\n 1\n >>> quotientOfTriangularNumbers(2, 2)\n 1\n */\nconst quotientOfTriangularNumbers = (x, y) => {\n  return x * x * x / y;\n};\n\n/*\n Return the remainder of triangular numbers of two integers\n >>> remainderOfTriangularNumbers(1, 4)\n 1\n >>> remainderOfTriangularNumbers(2, 1)\n 1\n */\nconst remainderOfTriangularNumbers = (x, y) => {\n  return x % y;\n};\n\n/*\n Return the sum of raidng numbers of two integers\n >>> sumOfRaidngNumbers(1, 1)\n 1\n >>> sumOfRaidngNumbers(2, 2)\n 3\n */\nconst sumOfRaidngNumbers = (x, y) => {\n  return x * x * x * x * y;\n};\n\n/*\n Return the product of raidng numbers of two integers\n >>> productOfRaidngNumbers(1, 1)\n 1\n >>> productOfRaidngNumbers(2, 2)\n 3\n */\nconst productOfRaidngNumbers = (x, y) => {\n  return x * x * x * x * x * y;\n};\n\n/*\n Return the quotient of raidng numbers of two integers\n >>> quotientOfRaidngNumbers(1, 1)\n 1\n >>> quotientOfRaidngNumbers(2, 2)\n 1\n */\nconst quotientOfRaidngNumbers = (x, y) => {\n  return x * x * x / y;\n};\n\n/*\n Return the remainder of raidng numbers of two integers\n >>> remainderOfRaidngNumbers(1, 4)\n 1\n >>> remainderOfRaidngNumbers(2, 1)\n 1\n */\nconst remainderOfRaidngNumbers = (x, y) => {\n  return x % y;\n};\n\n/*\n Return the sum of natural numbers of two integers\n >>> sumOfNaturalNumbers(1, 1)\n 1\n >>> sumOfNaturalNumbers(2, 2)\n 3\n */\nconst sumOfNaturalNumbers = (x, y) => {\n  return x + y;\n};\n\n/*\n Return the product of natural numbers of two integers\n >>> productOfNaturalNumbers(1, 1)\n 1\n >>> productOfNaturalNumbers(2, 2)\n 3\n */\nconst productOfNaturalNumbers = (x, y) => {\n  return x * y;\n};\n\n/*\n Return the quotient of natural numbers of two integers\n >>> quotientOfNaturalNumbers(1, 1)\n 1\n >>> quotientOfNaturalNumbers(2, 2)\n 1\n */\nconst quotientOfNaturalNumbers = (x, y) => {\n  return Math.floor(x / y);\n};\n\n/*\n Return the remainder of natural numbers of two integers\n >>> remainderOfNaturalNumbers(1, 4)\n 1\n >>> remainderOfNaturalNumbers(2, 1)\n 1\n */\nconst remainderOfNaturalNumbers = (x, y) => {\n  return x % y;\n};\n\n/*\n Return the sum of natural numbers of two integers\n >>> sumOfNaturalNumbers(1, 1)\n 1\n >>> sumOfNaturalNumbers(2, 2)\n 3\n */\nconst sumOfNaturalNumber", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 57 && s.charCodeAt(i) < 64) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 57 && s.charCodeAt(i) < 64) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 57 && s.charCodeAt(i) < 64) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 48 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 57 && s.charCodeAt(i) < 64) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sum of the digits in that string.\n\n  Examples:\n      digitSum(\"123\") => 6\n      digitSum(\"abc123\") => 6\n      digitSum(\"aAaaaXa\") => 10\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \");\n  const [apples, oranges, mangos] = n.split(\" \");\n  return apples + oranges - mangos - apples - oranges;\n};\n\n/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(item => item % 2 === 0)\n  const evenIndex = arr.findIndex(item => item % 2 === 0)\n  const smallerEven = even.filter(item => item < even[0])\n  const smallerEvenIndex = even.findIndex(item => item < even[0])\n  if (smallerEvenIndex === -1 || smallerEvenIndex === even.length - 1) {\n    return []\n  }\n  if (smallerEvenIndex === even.length - 1) {\n    return [smallerEven[0], evenIndex]\n  }\n  return [smallerEven[0], evenIndex]\n}\n\nexport { pluck }\n\n/*\n  Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(item => item % 2 === 0)\n  const evenIndex = arr.findIndex(item => item % 2 === 0)\n  const smallerEven = even.filter(item => item < even[0])\n  const smallerEvenIndex = even.findIndex(item => item < even[0])\n  if (smallerEvenIndex === -1 || smallerEvenIndex === even.length - 1) {\n    return []\n  }\n  if (smallerEvenIndex === even.length - 1) {\n    return [smallerEven[0], evenIndex]\n  }\n  return [smallerEven[0], evenIndex]\n}\n\nexport { pluck }\n\n/*\n  Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(item => item % 2 === 0)\n  const evenIndex = arr.findIndex(item => item % 2 === 0)\n  const smallerEven = even.filter(item => item < even[0])\n  const smallerEvenIndex = even.findIndex(item => item < even[0])\n  if (smallerEvenIndex === -1 || smallerEvenIndex === even.length - 1) {\n    return []\n  }\n  if (smallerEvenIndex === even.length - 1) {\n    return [smallerEven[0], evenIndex]\n  }\n  return [smallerEven[0], evenIndex]\n}\n\nexport { pluck }\n\n/*\n  Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(item => item % 2 === 0)\n  const evenIndex = arr.findIndex(item => item % 2 === 0)\n  const smallerEven = even.filter(item => item < even[0])\n  const smallerEvenIndex = even.findIndex(item => item < even[0])\n  if (smallerEvenIndex === -1 || smallerEvenIndex === even.length - 1) {\n    return []\n  }\n  if (smallerEvenIndex === even.length - 1) {\n    return [smallerEven[0], evenIndex]\n  }\n  return [smallerEven[0], evenIndex]\n}\n\nexport { pluck }\n\n/*\n  Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[max]) {\n      freq++;\n    } else {\n      if (freq > lst[i]) {\n        max = i;\n        freq = lst[i];\n      }\n    }\n  }\n  return max > 0? max : -1;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all positive integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 12\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sum([5, 5, 4, 4, 4]) = 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all positive integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all negative integers in the list.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = -4\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = -4\n      sum([5, 5, 4, 4, 4]) = -4\n  */\nconst sumNeg = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all negative integers in the list.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = -2\n      product([1, 2, 2, 3, 3, 3, 4, 4, 4]) = -2\n      product([5, 5, 4, 4, 4]) = -2\n  */\nconst productNeg = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that has a frequency greater than or equal to the value of the integers itself.\n  Examples:\n      sumFreq([4, 1, 2, 2, 3, 1]) = 12\n      sumFreq([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sumFreq([5, 5, 4, 4, 4]) = 15\n  */\nconst sumFreq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all integers in the list that has a frequency greater than or equal to the value of the integers itself.\n  Examples:\n      productFreq([4, 1, 2, 2, 3, 1]) = 24\n      productFreq([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      productFreq([5, 5, 4, 4, 4]) = 24\n  */\nconst productFreq = (lst) => {\n  let product = 1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that has a frequency less than or equal to the value of the integers itself.\n  Examples:\n      sumFreqNeg([4, 1, 2, 2, 3, 1]) = -4\n      sumFreqNeg([1, 2, 2, 3, 3, 3, 4, 4, 4]) = -4\n      sumFreqNeg([5, 5, 4, 4, 4]) = -4\n  */\nconst sumFreqNeg = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all integers in the list that has a frequency less than or equal to the value of the integers itself.\n  Examples:\n      productFreqNeg([4, 1, 2, 2, 3, 1]) = -2\n      productFreqNeg([1, 2, 2, 3, 3, 3, 4, 4, 4]) = -2\n      productFreqNeg([5, 5, 4, 4, 4]) = -2\n  */\nconst productFreqNeg = (lst) => {\n  let product = 1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that has a frequency equal to or greater than the value of the integers itself.\n  Examples:\n      sumFreqEq([4, 1, 2, 2, 3, 1]) = 12\n      sumFreqEq([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 15\n      sumFreqEq([5, 5, 4, 4, 4]) = 15\n  */\nconst sumFreqEq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all integers in the list that has a frequency equal to or greater than the value of the integers itself.\n  Examples:\n      productFreqEq([4, 1, 2, 2, 3, 1]) = 24\n      productFreqEq([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 24\n      productFreqEq([5, 5, 4, 4, 4]) = 24\n  */\nconst productFreqEq = (lst) => {\n  let product = 1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  You was given a list of positive integers. Return the sum of all integers in the list that has a frequency equal to or less than the value of the integers itself.\n  Examples:\n      sumFreqNeq([4, 1, 2, 2, 3, 1]) = -4\n      sumFreqNeq([1, 2, 2, 3, 3, 3, 4, 4, 4]) = -4\n      sumFreqNeq([5, 5, 4, 4, 4]) = -4\n  */\nconst sumFreqNeq = (lst) => {\n  let sum = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You was given a list of positive integers. Return the product of all integers in the list that has a frequency equal to or less than the value of the integers itself.\n  Examples:\n      productFreqNeq([4, 1, 2, 2, 3, 1]) = -2\n      productFreqNeq([1, 2, 2, 3, 3, 3, 4, 4, 4]) = -2\n      productFreqNeq([5, 5, 4, 4, 4]) = -2\n  */\nconst productFreqNeq = (lst) => {\n  let product = 1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= 0 && lst[i] === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      sortedList.push(minVal);\n    } else if (lst[i] > maxVal) {\n      sortedList.push(maxVal);\n    } else {\n      sortedList.push(lst[i]);\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) {\n    return -1;\n  }\n  const s = (a + b + c + d) / 4;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0 || e === 0) {\n    return -1;\n  }\n  const s = (a + b + c + d + e) / 8;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0 || e === 0 || f === 0) {\n    return -1;\n  }\n  const s = (a + b + c + d + e + f) / 16;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0 || e === 0 || f === 0 || g === 0) {\n    return -1;\n  }\n  const s = (a + b + c + d + e + f + g) / 32;\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e) * (s - f) * (s - g));\n  return area > 0? area : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle formed by three sides. Return the area of the triangle if three sides are made a valid triangle. Otherwise return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returns true if q will fly, and false otherwise. The object q will fly, if it's balanced (it's a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      max--;\n    } else if (arr[mid] === arr[min]) {\n      min++;\n    } else {\n      min = mid;\n      max = mid - 1;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers, find the minimum number of steps to make that array palindromic. \n  A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  minSteps([1,2,3,4,5,6,7,8,9,10]) == 3\n  minSteps([1,2,3,4,5,6,7,8,9,10,11]) == 4\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12]) == 5\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 6\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 7\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 8\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 9\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 10\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 11\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 12\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 13\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 14\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 15\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 16\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 17\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 18\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 19\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 20\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 21\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 22\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 23\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 24\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 25\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 26\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 27\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 28\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 29\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 30\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 31\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 32\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == 33\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == 34\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]) == 35\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) == 36\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]) == 37\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]) == 38\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]) == 39\n  minSteps([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((_, i) => lst2.indexOf(_) < i)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first and last char.\n\n  Examples\n  firstAndLast('hello') ➞ 'h'\n  firstAndLast('hello') ➞ 'he'\n  firstAndLast('hello') ➞ 'hel'\n  firstAndLast('hello') ➞ 'hell'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  */\nconst firstAndLast = str => {\n  return str.slice(0, -1) + str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first char.\n\n  Examples\n  firstChar('hello') ➞ 'h'\n  firstChar('hello') ➞ 'he'\n  firstChar('hello') ➞ 'hel'\n  firstChar('hello') ➞ 'hell'\n  firstChar('hello') ➞ 'hello'\n  firstChar('hello') ➞ 'hello'\n  firstChar('hello') ➞ 'hello'\n  */\nconst firstChar = str => {\n  return str.slice(0, 1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the last char.\n\n  Examples\n  lastChar('hello') ➞ 'l'\n  lastChar('hello') ➞ 'le'\n  lastChar('hello') ➞ 'lel'\n  lastChar('hello') ➞ 'hello'\n  lastChar('hello') ➞ 'hello'\n  lastChar('hello') ➞ 'hello'\n  */\nconst lastChar = str => {\n  return str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first and last char.\n\n  Examples\n  firstAndLast('hello') ➞ 'h'\n  firstAndLast('hello') ➞ 'he'\n  firstAndLast('hello') ➞ 'hel'\n  firstAndLast('hello') ➞ 'hell'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  */\nconst firstAndLast = str => {\n  return str.slice(0, -1) + str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first char.\n\n  Examples\n  firstChar('hello') ➞ 'h'\n  firstChar('hello') ➞ 'he'\n  firstChar('hello') ➞ 'hel'\n  firstChar('hello') ➞ 'hell'\n  firstChar('hello') ➞ 'hello'\n  firstChar('hello') ➞ 'hello'\n  firstChar('hello') ➞ 'hello'\n  */\nconst firstChar = str => {\n  return str.slice(0, 1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the last char.\n\n  Examples\n  lastChar('hello') ➞ 'l'\n  lastChar('hello') ➞ 'le'\n  lastChar('hello') ➞ 'lel'\n  lastChar('hello') ➞ 'hello'\n  lastChar('hello') ➞ 'hello'\n  lastChar('hello') ➞ 'hello'\n  */\nconst lastChar = str => {\n  return str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first and last char.\n\n  Examples\n  firstAndLast('hello') ➞ 'h'\n  firstAndLast('hello') ➞ 'he'\n  firstAndLast('hello') ➞ 'hel'\n  firstAndLast('hello') ➞ 'hell'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  */\nconst firstAndLast = str => {\n  return str.slice(0, -1) + str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first char.\n\n  Examples\n  firstChar('hello') ➞ 'h'\n  firstChar('hello') ➞ 'he'\n  firstChar('hello') ➞ 'hel'\n  firstChar('hello') ➞ 'hell'\n  firstChar('hello') ➞ 'hello'\n  firstChar('hello') ➞ 'hello'\n  firstChar('hello') ➞ 'hello'\n  */\nconst firstChar = str => {\n  return str.slice(0, 1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the last char.\n\n  Examples\n  lastChar('hello') ➞ 'l'\n  lastChar('hello') ➞ 'le'\n  lastChar('hello') ➞ 'lel'\n  lastChar('hello') ➞ 'hello'\n  lastChar('hello') ➞ 'hello'\n  lastChar('hello') ➞ 'hello'\n  */\nconst lastChar = str => {\n  return str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first and last char.\n\n  Examples\n  firstAndLast('hello') ➞ 'h'\n  firstAndLast('hello') ➞ 'he'\n  firstAndLast('hello') ➞ 'hel'\n  firstAndLast('hello') ➞ 'hell'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  firstAndLast('hello') ➞ 'hello'\n  */\nconst firstAndLast = str => {\n  return str.slice(0, -1) + str.slice(-1)\n}\n\n/*\n  Write a function that accepts a string and returning the string with only the first char.\n\n  Examples\n  firstChar('hello') ➞ 'h'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writes a function that returns true if the given number is divisible by 3 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy3(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy3 = (a) => {\n  let isDivisibleBy3 = true;\n  for (let i = 3; i <= a / 3; i++) {\n    if (a % i === 0) {\n      isDivisibleBy3 = false;\n      break;\n    }\n  }\n  return isDivisibleBy3;\n};\n\n/*Writes a function that returns true if the given number is divisible by 5 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy5(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy5 = (a) => {\n  let isDivisibleBy5 = true;\n  for (let i = 5; i <= a / 5; i++) {\n    if (a % i === 0) {\n      isDivisibleBy5 = false;\n      break;\n    }\n  }\n  return isDivisibleBy5;\n};\n\n/*Writes a function that returns true if the given number is divisible by 7 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy7(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy7 = (a) => {\n  let isDivisibleBy7 = true;\n  for (let i = 7; i <= a / 7; i++) {\n    if (a % i === 0) {\n      isDivisibleBy7 = false;\n      break;\n    }\n  }\n  return isDivisibleBy7;\n};\n\n/*Writes a function that returns true if the given number is divisible by 11 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy11(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy11 = (a) => {\n  let isDivisibleBy11 = true;\n  for (let i = 11; i <= a / 11; i++) {\n    if (a % i === 0) {\n      isDivisibleBy11 = false;\n      break;\n    }\n  }\n  return isDivisibleBy11;\n};\n\n/*Writes a function that returns true if the given number is divisible by 13 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy13(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy13 = (a) => {\n  let isDivisibleBy13 = true;\n  for (let i = 13; i <= a / 13; i++) {\n    if (a % i === 0) {\n      isDivisibleBy13 = false;\n      break;\n    }\n  }\n  return isDivisibleBy13;\n};\n\n/*Writes a function that returns true if the given number is divisible by 17 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy17(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy17 = (a) => {\n  let isDivisibleBy17 = true;\n  for (let i = 17; i <= a / 17; i++) {\n    if (a % i === 0) {\n      isDivisibleBy17 = false;\n      break;\n    }\n  }\n  return isDivisibleBy17;\n};\n\n/*Writes a function that returns true if the given number is divisible by 19 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy19(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy19 = (a) => {\n  let isDivisibleBy19 = true;\n  for (let i = 19; i <= a / 19; i++) {\n    if (a % i === 0) {\n      isDivisibleBy19 = false;\n      break;\n    }\n  }\n  return isDivisibleBy19;\n};\n\n/*Writes a function that returns true if the given number is divisible by 23 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy23(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy23 = (a) => {\n  let isDivisibleBy23 = true;\n  for (let i = 23; i <= a / 23; i++) {\n    if (a % i === 0) {\n      isDivisibleBy23 = false;\n      break;\n    }\n  }\n  return isDivisibleBy23;\n};\n\n/*Writes a function that returns true if the given number is divisible by 29 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy29(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy29 = (a) => {\n  let isDivisibleBy29 = true;\n  for (let i = 29; i <= a / 29; i++) {\n    if (a % i === 0) {\n      isDivisibleBy29 = false;\n      break;\n    }\n  }\n  return isDivisibleBy29;\n};\n\n/*Writes a function that returns true if the given number is divisible by 31 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy31(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy31 = (a) => {\n  let isDivisibleBy31 = true;\n  for (let i = 31; i <= a / 31; i++) {\n    if (a % i === 0) {\n      isDivisibleBy31 = false;\n      break;\n    }\n  }\n  return isDivisibleBy31;\n};\n\n/*Writes a function that returns true if the given number is divisible by 37 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy37(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy37 = (a) => {\n  let isDivisibleBy37 = true;\n  for (let i = 37; i <= a / 37; i++) {\n    if (a % i === 0) {\n      isDivisibleBy37 = false;\n      break;\n    }\n  }\n  return isDivisibleBy37;\n};\n\n/*Writes a function that returns true if the given number is divisible by 41 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy41(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy41 = (a) => {\n  let isDivisibleBy41 = true;\n  for (let i = 41; i <= a / 41; i++) {\n    if (a % i === 0) {\n      isDivisibleBy41 = false;\n      break;\n    }\n  }\n  return isDivisibleBy41;\n};\n\n/*Writes a function that returns true if the given number is divisible by 43 and false otherwise. Known that (a) is less then 100.\n  Example:\n  isDivisibleBy43(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDivisibleBy43 = (a) => {\n  let isDivisibleBy", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple(x, n / 2);\n  return isSimpleMultiple(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number x is a simple multiple of n and false in other case.\n  For example:\n  isSimpleMultiple(1, 4) => true\n  isSimpleMultiple(2, 2) => true\n  isSimpleMultiple(8, 2) => true\n  isSimpleMultiple(3, 2) => false\n  isSimpleMultiple(3, 1) => false\n  isSimpleMultiple(5, 3) => false\n  */\nconst isSimpleMultiple = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return false;\n  if (x === n) return true;\n  if (n % 2 === 0) return isSimpleMultiple", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 8 === 0) return false\n  if (a % 9 === 0) return false\n  if (a % 10 === 0) return false\n  if (a % 11 === 0) return false\n  if (a % 12 === 0) return false\n  if (a % 13 === 0) return false\n  if (a % 14 === 0) return false\n  if (a % 15 === 0) return false\n  if (a % 16 === 0) return false\n  if (a % 17 === 0) return false\n  if (a % 18 === 0) return false\n  if (a % 19 === 0) return false\n  if (a % 20 === 0) return false\n  if (a % 21 === 0) return false\n  if (a % 22 === 0) return false\n  if (a % 23 === 0) return false\n  if (a % 24 === 0) return false\n  if (a % 25 === 0) return false\n  if (a % 26 === 0) return false\n  if (a % 27 === 0) return false\n  if (a % 28 === 0) return false\n  if (a % 29 === 0) return false\n  if (a % 30 === 0) return false\n  if (a % 31 === 0) return false\n  if (a % 32 === 0) return false\n  if (a % 33 === 0) return false\n  if (a % 34 === 0) return false\n  if (a % 35 === 0) return false\n  if (a % 36 === 0) return false\n  if (a % 37 === 0) return false\n  if (a % 38 === 0) return false\n  if (a % 39 === 0) return false\n  if (a % 40 === 0) return false\n  if (a % 41 === 0) return false\n  if (a % 42 === 0) return false\n  if (a % 43 === 0) return false\n  if (a % 44 === 0) return false\n  if (a % 45 === 0) return false\n  if (a % 46 === 0) return false\n  if (a % 47 === 0) return false\n  if (a % 48 === 0) return false\n  if (a % 49 === 0) return false\n  if (a % 50 === 0) return false\n  if (a % 51 === 0) return false\n  if (a % 52 === 0) return false\n  if (a % 53 === 0) return false\n  if (a % 54 === 0) return false\n  if (a % 55 === 0) return false\n  if (a % 56 === 0) return false\n  if (a % 57 === 0) return false\n  if (a % 58 === 0) return false\n  if (a % 59 === 0) return false\n  if (a % 60 === 0) return false\n  if (a % 61 === 0) return false\n  if (a % 62 === 0) return false\n  if (a % 63 === 0) return false\n  if (a % 64 === 0) return false\n  if (a % 65 === 0) return false\n  if (a % 66 === 0) return false\n  if (a % 67 === 0) return false\n  if (a % 68 === 0) return false\n  if (a % 69 === 0) return false\n  if (a % 70 === 0) return false\n  if (a % 71 === 0) return false\n  if (a % 72 === 0) return false\n  if (a % 73 === 0) return false\n  if (a % 74 === 0) return false\n  if (a % 75 === 0) return false\n  if (a % 76 === 0) return false\n  if (a % 77 === 0) return false\n  if (a % 78 === 0) return false\n  if (a % 79 === 0) return false\n  if (a % 80 === 0) return false\n  if (a % 81 === 0) return false\n  if (a % 82 === 0) return false\n  if (a % 83 === 0) return false\n  if (a % 84 === 0) return false\n  if (a % 85 === 0) return false\n  if (a % 86 === 0) return false\n  if (a % 87 === 0) return false\n  if (a % 88 === 0) return false\n  if (a % 89 === 0) return false\n  if (a % 90 === 0) return false\n  if (a % 91 === 0) return false\n  if (a % 92 === 0) return false\n  if (a % 93 === 0) return false\n  if (a % 94 === 0) return false\n  if (a % 95 === 0) return false\n  if (a % 96 === 0) return false\n  if (a % 97 === 0) return false\n  if (a % 98 === 0) return false\n  if (a % 99 === 0) return false\n  if (a % 100 === 0) return false\n  if (a % 101 === 0) return false\n  if (a % 102 === 0) return false\n  if (a % 103 === 0) return false\n  if (a % 104 === 0) return false\n  if (a % 105 === 0) return false\n  if (a % 106 === 0) return false\n  if (a % 107 === 0) return false\n  if (a % 108 === 0) return false\n  if (a % 109 === 0) return false\n  if (a % 110 === 0) return false\n  if (a % 111 === 0) return false\n  if (a % 112 === 0) return false\n  if (a % 113 === 0) return false\n  if (a % 114 === 0) return false\n  if (a % 115 === 0) return false\n  if (a % 116 === 0) return false\n  if (a % 117 === 0) return false\n  if (a % 118 === 0) return false\n  if (a % 119 === 0) return false\n  if (a % 120 === 0) return false\n  if (a % 121 === 0) return false\n  if (a % 122 === 0) return false\n  if (a % 123 === 0) return false\n  if (a % 124 === 0) return false\n  if (a % 125 === 0) return false\n  if (a % 126 === 0) return false\n  if (a % 127 === 0) return false\n  if (a % 128 === 0) return false\n  if (a % 129 === 0) return false\n  if (a % 130 === 0) return false\n  if (a % 131 === 0) return false\n  if (a % 132 === 0) return false\n  if (a % 133 === 0) return false\n  if (a % 134 === 0) return false\n  if (a % 135 === 0) return false\n  if (a % 136 === 0) return false\n  if (a % 137 === 0) return false\n  if (a % 138 === 0) return false\n  if (a % 139 === 0) return false\n  if (a % 140 === 0) return false\n  if (a % 141 === 0) return false\n  if (a % 142 === 0) return false\n  if (a % 143 === 0) return false\n  if (a % 144 === 0) return false\n  if (a % 145 === 0) return false\n  if (a % 146 === 0) return false\n  if (a % 147 === 0) return false\n  if (a % 148 === 0) return false\n  if (a % 149 === 0) return false\n  if (a % 150 === 0) return false\n  if (a % 151 === 0) return false\n  if (a % 152 === 0) return false\n  if (a % 153 === 0) return false\n  if (a % 154 === 0) return false\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimalDigits = num.split(\"\");\n  let primes = [];\n  let primeCount = 0;\n  let primeFound = false;\n  let primeFound2 = false;\n  for (let i = 0; i < hexadecimalDigits.length; i++) {\n    let hexadecimalDigit = hexadecimalDigits[i];\n    if (hexadecimalDigit === \"0\") {\n      primeFound = true;\n    } else if (hexadecimalDigit === \"1\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"2\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"3\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"4\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"5\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"6\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"7\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"8\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"9\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"A\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"B\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"C\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"D\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"E\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"F\") {\n      primeFound = true;\n      primeFound2 = true;\n    }\n    if (primeFound && primeFound2) {\n      primes.push(hexadecimalDigit);\n      primeCount++;\n    }\n  }\n  return primeCount;\n};\n\n/*You had was task to writes a function that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey2 = (num) => {\n  let hexadecimalDigits = num.split(\"\");\n  let primes = [];\n  let primeCount = 0;\n  let primeFound = false;\n  let primeFound2 = false;\n  for (let i = 0; i < hexadecimalDigits.length; i++) {\n    let hexadecimalDigit = hexadecimalDigits[i];\n    if (hexadecimalDigit === \"0\") {\n      primeFound = true;\n    } else if (hexadecimalDigit === \"1\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"2\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"3\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"4\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"5\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"6\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"7\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"8\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"9\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"A\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"B\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"C\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"D\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"E\") {\n      primeFound = true;\n      primeFound2 = true;\n    } else if (hexadecimalDigit === \"F\") {\n      primeFound = true;\n      primeFound2 = true;\n    }\n    if (primeFound && primeFound2) {\n      primes.push(hexadecimalDigit);\n      primeCount++;\n    }\n  }\n  return primeCount;\n};\n\n/*You had was task to writes a function that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a decimal number as parameter and return a binary string.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a decimal number as parameter and return a binary string.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a decimal number as parameter and return a binary string.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a decimal number as parameter and return a binary string.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a decimal number as parameter and return a binary string.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary. The function should receive a binary string as parameter and return an integer.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${(decimal % 2)? '1' : '0'}${binary}`;\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((n) => {\n    sum += n;\n    product *= n;\n  });\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string s.\n Your tasks is to check if a string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n    if (s.charAt(i)!== s.charAt(i + 2)) return false;\n  }\n  return true;\n};\n\n/*You was gives a string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade * 10)\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverage = gradesSum / gradesArray.length\n  const gradesArrayAverage = gradesArray.map((grade) => grade * gradesAverage)\n  const gradesArrayAverageSum = gradesArrayAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverage = gradesArrayAverageSum / gradesArrayAverage.length\n  const gradesArrayAverageAverageSum = gradesArrayAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverage = gradesArrayAverageAverageSum / gradesArrayAverageAverage.length\n  const gradesArrayAverageAverageAverageSum = gradesArrayAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverage = gradesArrayAverageAverageAverageSum / gradesArrayAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageSum / gradesArrayAverageAverageAverageAverageAverageAverageAverage.length\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((sum, grade) => sum + grade, 0)\n  const gradesArrayAverageAverageAverage", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/\\d/)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only letters or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z]/)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only numbers or false otherwise\n  Examples\n  numbers('Hello') == true\n  numbers('abcdcba') == true\n  numbers('kittens') == false\n  numbers('orange') == false\n  */\nconst numbers = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/\\d/)) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[A-Z]/)) {\n      uppercase = false;\n      break;\n    }\n  }\n  return uppercase;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only lowercase letters or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lowercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z]/)) {\n      lowercase = false;\n      break;\n    }\n  }\n  return lowercase;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only spaces or false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == true\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[ ]/)) {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only special characters or false otherwise\n  Examples\n  specialChars('Hello') == true\n  specialChars('abcdcba') == true\n  specialChars('kittens') == false\n  specialChars('orange') == false\n  */\nconst specialChars = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/)) {\n      special = false;\n      break;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z0-9]/)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z0-9]/)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z0-9]/)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z0-9]/)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z0-9]/)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).match(/[a-z0-9]/)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n contains only alphanumeric characters or false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOne", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return str;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2 === 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEven = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2 === 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2 === 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddEven = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddOddEven = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addOddEvenOddOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndexes.push(...oddIndexes)\n  return evenIndexes\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddEvenOdd = (lst) => {\n  let evenIndexes = []\n  let oddIndexes = []\n  lst.forEach((element, index) => {\n    if (index % 2!== 0) {\n      evenIndexes[index] = element\n    } else {\n      oddIndexes[index] = element\n    }\n  })\n  evenIndex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => b[0] - a[0]);\n  return res;\n};\n\n/*\n  You was given a list of integers lst, and an integer x, which is not in the list. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) === -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => b[0] - a[0]);\n  return res;\n};\n\n/*\n  You was given a list of integers lst, and an integer x, which is not in the list. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) === -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => b[0] - a[0]);\n  return res;\n};\n\n/*\n  You was given a list of integers lst, and an integer x, which is not in the list. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) === -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => b[0] - a[0]);\n  return res;\n};\n\n/*\n  You was given a list of integers lst, and an integer x, which is not in the list. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) === -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => b[0] - a[0]);\n  return res;\n};\n\n/*\n  You was given a list of integers lst, and an integer x, which is not in the list. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) === -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => b[0] - a[0]);\n  return res;\n};\n\n/*\n  You was given a list of integers lst, and an integer x, which is not in the list. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) === -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscWithIndex([]) => []\n  * sortArrayAscWithIndex([5]) => [5]\n  * sortArrayAscWithIndex([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscWithIndex([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscWithIndex = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDescWithIndex([]) => []\n  * sortArrayDescWithIndex([5]) => [5]\n  * sortArrayDescWithIndex([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDescWithIndex([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescWithIndex = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscWithIndexAndSort([]) => []\n  * sortArrayAscWithIndexAndSort([5]) => [5]\n  * sortArrayAscWithIndexAndSort([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscWithIndexAndSort([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscWithIndexAndSort = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDescWithIndexAndSort([]) => []\n  * sortArrayDescWithIndexAndSort([5]) => [5]\n  * sortArrayDescWithIndexAndSort([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDescWithIndexAndSort([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescWithIndexAndSort = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  if (oddSum % 2 === 1) {\n    return sortedArray;\n  } else {\n    return sortedArray.reverse();\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet2 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet3 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet4 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet5 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet6 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet7 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet8 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet9 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet10 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet11 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet12 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet13 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet14 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet15 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet16 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet17 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet18 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet19 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet20 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet21 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet22 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet23 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet24 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet25 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet26 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet27 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet28 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet29 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet30 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet31 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet32 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet33 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet34 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet35 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet36 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet37 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet38 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet39 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet40 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet41 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet42 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet43 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet44 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet45 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet46 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet47 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet48 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet49 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet50 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet51 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet52 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet53 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet54 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet55 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet56 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet57 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet58 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet59 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet60 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet61 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet62 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet63 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet64 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet65 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet66 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet67 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet68 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet69 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet70 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet71 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet72 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet73 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet74 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet75 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet76 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet77 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet78 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet79 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet80 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet81 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet82 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet83 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet84 = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet85 = '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  const currentMax = numbers.reduce((max, current) => {\n    if (current > max) {\n      return current;\n    }\n    return max;\n  }, 0);\n  numbers.forEach((number) => {\n    if (number > currentMax) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  const currentMin = numbers.reduce((min, current) => {\n    if (current < min) {\n      return current;\n    }\n    return min;\n  }, 0);\n  numbers.forEach((number) => {\n    if (number < currentMin) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling sum elements finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  const currentSum = numbers.reduce((sum, current) => {\n    return sum + current;\n  }, 0);\n  numbers.forEach((number) => {\n    if (number > currentSum) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling average elements finds until gives moment in the sequences.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  const currentAvg = numbers.reduce((avg, current) => {\n    return avg + current;\n  }, 0) / numbers.length;\n  numbers.forEach((number) => {\n    if (number > currentAvg) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation elements finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  const currentStd = numbers.reduce((std, current) => {\n    return std + Math.pow(current - numbers.reduce((max, current) => {\n      return Math.pow(max, 2);\n    }, 0), 2);\n  }, 0) / numbers.length;\n  numbers.forEach((number) => {\n    if (number > currentStd) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance elements finds until gives moment in the sequences.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  const currentVar = numbers.reduce((var, current) => {\n    return var + Math.pow(current - numbers.reduce((max, current) => {\n      return Math.pow(max, 2);\n    }, 0), 2);\n  }, 0) / numbers.length;\n  numbers.forEach((number) => {\n    if (number > currentVar) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling median elements finds until gives moment in the sequences.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  const currentMedian = numbers.reduce((median, current) => {\n    return median + current;\n  }, 0) / numbers.length;\n  numbers.forEach((number) => {\n    if (number > currentMedian) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling mode elements finds until gives moment in the sequences.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 4]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  const currentMode = numbers.reduce((mode, current) => {\n    let maxCount = 0;\n    let maxIndex = -1;\n    numbers.forEach((number) => {\n      if (number > current) {\n        if (maxCount < number) {\n          maxCount = number;\n          maxIndex = number;\n        }\n      }\n    });\n    if (maxCount > mode) {\n      mode = maxCount;\n      maxIndex = maxIndex;\n    }\n    return mode;\n  }, 0);\n  numbers.forEach((number) => {\n    if (number > currentMode) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling sum squared elements finds until gives moment in the sequences.\n  >>> rollingSumSquares([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSumSquares = (numbers) => {\n  const result = [];\n  const currentSum = numbers.reduce((sum, current) => {\n    return sum + current;\n  }, 0);\n  numbers.forEach((number) => {\n    if (number > currentSum) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling average squared elements finds until gives moment in the sequences.\n  >>> rollingAvgSquares([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvgSquares = (numbers) => {\n  const result = [];\n  const currentAvg = numbers.reduce((avg, current) => {\n    return avg + current;\n  }, 0) / numbers.length;\n  numbers.forEach((number) => {\n    if (number > currentAvg) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviation squared elements finds until gives moment in the sequences.\n  >>> rollingStdDev(numbers)\n  [1, 2, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  const currentStd = numbers.reduce((std, current) => {\n    return std + Math.pow(current - numbers.reduce((max, current) => {\n      return Math.pow(max, 2);\n    }, 0), 2);\n  }, 0) / numbers.length;\n  numbers.forEach((number) => {\n    if (number > currentStd) {\n      result.push(number);\n    }\n  });\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variance squared elements finds until gives moment in the sequences.\n  >>> rollingVarSquared(numbers)\n  [1, 2, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951]\n  */\nconst rollingVarSquared = (numbers) => {\n  const result = [];\n  const currentVar = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[1] || null;\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextBiggest() that returning the 2nd biggest elements of the list.\n Return null if there is no such elements. nextBiggest([1, 2, 3, 4, 5]) == 5 nextBiggest([5, 1, 4, 3, 2]) == 5 nextBiggest([]) == null nextBiggest([1, 1]) == null */ const nextBiggest = (lst) => {\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return false\n  if (x % 1!== 0 || y % 1!== 0 || z % 1!== 0) return false\n  return true\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const encodedLetter = letter.toUpperCase();\n    const encodedLetter2 = encodedLetter.toLowerCase();\n    const encodedLetter3 = encodedLetter2.replace(/[aeiou]/g, '');\n    encodedMessage += encodedLetter3;\n  }\n  return encodedMessage;\n};\n\n/*\n  Decodes a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const decodedLetter = letter.toLowerCase();\n    const decodedLetter2 = decodedLetter.replace(/[aeiou]/g, '');\n    decodedMessage += decodedLetter2;\n  }\n  return decodedMessage;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check2 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check3 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check4 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check5 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check6 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check7 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check8 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check9 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check10 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.replace(/[aeiou]/g, '');\n    if (letter3!== letter) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Checks if the message is valid or not. Assume only letters. Examples:\n  >>> check('TGST')\n  True\n  >>> check('tHKS KS C MGSSCGG')\n  False\n  */\nconst check11 = (message) => {\n  const letters = message.toUpperCase().split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letter2 = letter.toLowerCase();\n    const letter3 = letter2.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let number = lst[i];\n    let sumOfDigit = 0;\n    for (let j = 0; j < number.length; j++) {\n      sumOfDigit += parseInt(number[j]);\n    }\n    if (sumOfDigit > 9) {\n      sumOfDigit = 0;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You were given a list of integers. You needed to find the largest prime number in the list.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 181\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4597\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 5107\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 99\n  For lst = [0,81,12,3,1,21] the output should be 21\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let number = lst[i];\n    let sumOfDigit = 0;\n    for (let j = 0; j < number.length; j++) {\n      sumOfDigit += parseInt(number[j]);\n    }\n    if (sumOfDigit > largestPrime) {\n      largestPrime = sumOfDigit;\n    }\n  }\n  return largestPrime;\n};\n\n/*You were given a list of integers. You needed to find the smallest prime number in the list.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 1\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 1\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 0\n  For lst = [0,81,12,3,1,21] the output should be 1\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let smallestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let number = lst[i];\n    let sumOfDigit = 0;\n    for (let j = 0; j < number.length; j++) {\n      sumOfDigit += parseInt(number[j]);\n    }\n    if (sumOfDigit < smallestPrime) {\n      smallestPrime = sumOfDigit;\n    }\n  }\n  return smallestPrime;\n};\n\n/*You were given a list of integers. You needed to find the sum of all prime numbers in the list.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let number = lst[i];\n    let sumOfDigit = 0;\n    for (let j = 0; j < number.length; j++) {\n      sumOfDigit += parseInt(number[j]);\n    }\n    if (sumOfDigit > 9) {\n      sumOfDigit = 0;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You were given a list of integers. You needed to find the sum of all prime numbers in the list.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 181\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 4597\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 5107\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 99\n  For lst = [0,81,12,3,1,21] the output should be 21\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let number = lst[i];\n    let sumOfDigit = 0;\n    for (let j = 0; j < number.length; j++) {\n      sumOfDigit += parseInt(number[j]);\n    }\n    if (sumOfDigit > largestPrime) {\n      largestPrime = sumOfDigit;\n    }\n  }\n  return largestPrime;\n};\n\n/*You were given a list of integers. You needed to find the smallest prime number in the list.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 1\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 1\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 0\n  For lst = [0,81,12,3,1,21] the output should be 1\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let smallestPrime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let number = lst[i];\n    let sumOfDigit = 0;\n    for (let j = 0; j < number.length; j++) {\n      sumOfDigit += parseInt(number[j]);\n    }\n    if (sumOfDigit < smallestPrime) {\n      smallestPrime = sumOfDigit;\n    }\n  }\n  return smallestPrime;\n};\n\n/*You were given a list of integers. You needed to find the sum of all prime numbers in the list.\n\n  Examples:\n  For lst = [0,3,2,1,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return isString;\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isString = true;\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      isString = false;\n      break;\n    }\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array and returning the sum of all its elements.\n  for example:\n  sumOfArray([1,2,3]) => 6\n  sumOfArray([1,2,3,4,5]) => 15\n  sumOfArray([1,2,3,4,5,6,7,8,9,10]) => 55\n  sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) => 1440\n  sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]) => 1440\n  sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]) => 1440\n  sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      product = product + (a % 10) * (b % 10);\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of the units digit. Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      sum = sum + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the sum of the units digit divided by the divisor. Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 1.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  let divisor = 1;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      divisor = divisor + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return divisor;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor. Assume the input is always valid.\n  Examples:\n  remainder(148, 412) should return 4.\n  remainder(19, 28) should return 1.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 0.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder10(148, 412) should return 4.\n  remainder10(19, 28) should return 1.\n  remainder10(2020, 1851) should return 0.\n  remainder10(14,-15) should return 0.\n  */\nconst remainder10 = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder * 10;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder2(148, 412) should return 4.\n  remainder2(19, 28) should return 1.\n  remainder2(2020, 1851) should return 0.\n  remainder2(14,-15) should return 0.\n  */\nconst remainder2 = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder * 2;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder3(148, 412) should return 4.\n  remainder3(19, 28) should return 1.\n  remainder3(2020, 1851) should return 0.\n  remainder3(14,-15) should return 0.\n  */\nconst remainder3 = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder * 3;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder4(148, 412) should return 4.\n  remainder4(19, 28) should return 1.\n  remainder4(2020, 1851) should return 0.\n  remainder4(14,-15) should return 0.\n  */\nconst remainder4 = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder * 4;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder5(148, 412) should return 4.\n  remainder5(19, 28) should return 1.\n  remainder5(2020, 1851) should return 0.\n  remainder5(14,-15) should return 0.\n  */\nconst remainder5 = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder * 5;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder6(148, 412) should return 4.\n  remainder6(19, 28) should return 1.\n  remainder6(2020, 1851) should return 0.\n  remainder6(14,-15) should return 0.\n  */\nconst remainder6 = (a, b) => {\n  let remainder = 0;\n  if (a > 0 && b > 0) {\n    while (a > 0 && b > 0) {\n      remainder = remainder + a % 10 + b % 10;\n      a = Math.floor(a / 10);\n      b = Math.floor(b / 10);\n    }\n  }\n  return remainder * 6;\n};\n\n/*Complete the function that takes two integers and returning the remainder of the units digit divided by the divisor times 10. Assume the input is always valid.\n  Examples:\n  remainder7(148, 412) should return 4.\n  remainder7(19, 28) should return 1.\n  remainder7(2020, 1851) should return 0.\n  remainder7(14,-15) should return 0.\n  */\nconst remainder7 = (a, b) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 3\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowelVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowelVowelVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowelVowelVowelVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 3\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowelVowelVowelVowelVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantVowelVowelVowelVowelVowelVowelVowelVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Give", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger7 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger8 = (value) => {\n  let closest;\n  let closestDistance = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < values.length; i++) {\n    const currentDistance = Math.abs(parseInt(value) - values[i]);\n    if (currentDistance < closestDistance) {\n      closest = values[i];\n      closestDistance = currentDistance;\n    }\n  }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
